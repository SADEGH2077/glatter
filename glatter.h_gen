/*
Copyright 2017 Ioannis Makris

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This file was generated by glatter.py script.



// Note: a set of definitions for function glBufferPageCommitmentARB from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glNamedBufferPageCommitmentARB from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glNamedBufferPageCommitmentEXT from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glTexPageCommitmentARB from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glClearNamedBufferSubData from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glClearNamedFramebufferfi from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glCopyNamedBufferSubData from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glFlushMappedNamedBufferRange from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glGetNamedBufferSubData from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glMapNamedBufferRange from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glNamedBufferData from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glNamedBufferStorage from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glNamedBufferSubData from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glTextureBufferRange from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.
// Note: a set of definitions for function glTransformFeedbackBufferRange from file with
// header guard __glcorearb_h_ was found to be potentially conflicting,
// thus was omitted.

#ifdef NDEBUG

#ifdef GLATTER_GL
#if !defined(__GL_H__)
#if !defined(GL_VERSION_ES_CM_1_0)
#if defined(__gl_h_)
#if defined(GL_ARB_multitexture)
#define glActiveTextureARB(texture) glatter_glActiveTextureARB_ptr((texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glActiveTextureARB, (GLenum texture))
#define glClientActiveTextureARB(texture) glatter_glClientActiveTextureARB_ptr((texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glClientActiveTextureARB, (GLenum texture))
#define glMultiTexCoord1dARB(target, s) glatter_glMultiTexCoord1dARB_ptr((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1dARB, (GLenum target, GLdouble s))
#define glMultiTexCoord1dvARB(target, v) glatter_glMultiTexCoord1dvARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord1fARB(target, s) glatter_glMultiTexCoord1fARB_ptr((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1fARB, (GLenum target, GLfloat s))
#define glMultiTexCoord1fvARB(target, v) glatter_glMultiTexCoord1fvARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord1iARB(target, s) glatter_glMultiTexCoord1iARB_ptr((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1iARB, (GLenum target, GLint s))
#define glMultiTexCoord1ivARB(target, v) glatter_glMultiTexCoord1ivARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord1sARB(target, s) glatter_glMultiTexCoord1sARB_ptr((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1sARB, (GLenum target, GLshort s))
#define glMultiTexCoord1svARB(target, v) glatter_glMultiTexCoord1svARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord2dARB(target, s, t) glatter_glMultiTexCoord2dARB_ptr((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2dARB, (GLenum target, GLdouble s, GLdouble t))
#define glMultiTexCoord2dvARB(target, v) glatter_glMultiTexCoord2dvARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord2fARB(target, s, t) glatter_glMultiTexCoord2fARB_ptr((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2fARB, (GLenum target, GLfloat s, GLfloat t))
#define glMultiTexCoord2fvARB(target, v) glatter_glMultiTexCoord2fvARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord2iARB(target, s, t) glatter_glMultiTexCoord2iARB_ptr((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2iARB, (GLenum target, GLint s, GLint t))
#define glMultiTexCoord2ivARB(target, v) glatter_glMultiTexCoord2ivARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord2sARB(target, s, t) glatter_glMultiTexCoord2sARB_ptr((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2sARB, (GLenum target, GLshort s, GLshort t))
#define glMultiTexCoord2svARB(target, v) glatter_glMultiTexCoord2svARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord3dARB(target, s, t, r) glatter_glMultiTexCoord3dARB_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#define glMultiTexCoord3dvARB(target, v) glatter_glMultiTexCoord3dvARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord3fARB(target, s, t, r) glatter_glMultiTexCoord3fARB_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#define glMultiTexCoord3fvARB(target, v) glatter_glMultiTexCoord3fvARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord3iARB(target, s, t, r) glatter_glMultiTexCoord3iARB_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3iARB, (GLenum target, GLint s, GLint t, GLint r))
#define glMultiTexCoord3ivARB(target, v) glatter_glMultiTexCoord3ivARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord3sARB(target, s, t, r) glatter_glMultiTexCoord3sARB_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3sARB, (GLenum target, GLshort s, GLshort t, GLshort r))
#define glMultiTexCoord3svARB(target, v) glatter_glMultiTexCoord3svARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord4dARB(target, s, t, r, q) glatter_glMultiTexCoord4dARB_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glMultiTexCoord4dvARB(target, v) glatter_glMultiTexCoord4dvARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord4fARB(target, s, t, r, q) glatter_glMultiTexCoord4fARB_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4fvARB(target, v) glatter_glMultiTexCoord4fvARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord4iARB(target, s, t, r, q) glatter_glMultiTexCoord4iARB_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4iARB, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#define glMultiTexCoord4ivARB(target, v) glatter_glMultiTexCoord4ivARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord4sARB(target, s, t, r, q) glatter_glMultiTexCoord4sARB_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4sARB, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#define glMultiTexCoord4svARB(target, v) glatter_glMultiTexCoord4svARB_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4svARB, (GLenum target, const GLshort *v))
#endif // defined(GL_ARB_multitexture)
#if defined(GL_ATI_blend_equation_separate)
#define glBlendEquationSeparateATI(modeRGB, modeA) glatter_glBlendEquationSeparateATI_ptr((modeRGB), (modeA))
GLATTER_UBLOCK(void, GLAPIENTRY, glBlendEquationSeparateATI, (GLenum modeRGB, GLenum modeA))
#endif // defined(GL_ATI_blend_equation_separate)
#if defined(GL_OES_EGL_image)
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES_ptr((target), (image))
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetRenderbufferStorageOES, (GLenum target, GLeglImageOES image))
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES_ptr((target), (image))
GLATTER_UBLOCK(void, APIENTRY, glEGLImageTargetTexture2DOES, (GLenum target, GLeglImageOES image))
#endif // defined(GL_OES_EGL_image)
#define glAccum(op, value) glatter_glAccum_ptr((op), (value))
GLATTER_UBLOCK(void, GLAPIENTRY, glAccum, (GLenum op, GLfloat value))
#define glActiveTexture(texture) glatter_glActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glActiveTexture, (GLenum texture))
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_ptr((func), (ref))
GLATTER_UBLOCK(void, GLAPIENTRY, glAlphaFunc, (GLenum func, GLclampf ref))
#define glAreTexturesResident(n, textures, residences) glatter_glAreTexturesResident_ptr((n), (textures), (residences))
GLATTER_UBLOCK(GLboolean, GLAPIENTRY, glAreTexturesResident, (GLsizei n, const GLuint *textures, GLboolean *residences))
#define glArrayElement(i) glatter_glArrayElement_ptr((i))
GLATTER_UBLOCK(void, GLAPIENTRY, glArrayElement, (GLint i))
#define glBegin(mode) glatter_glBegin_ptr((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glBegin, (GLenum mode))
#define glBindTexture(target, texture) glatter_glBindTexture_ptr((target), (texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmap_ptr((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap))
GLATTER_UBLOCK(void, GLAPIENTRY, glBitmap, (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glBlendColor, (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha))
#define glBlendEquation(mode) glatter_glBlendEquation_ptr((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glBlendEquation, (GLenum mode))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_ptr((sfactor), (dfactor))
GLATTER_UBLOCK(void, GLAPIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glCallList(list) glatter_glCallList_ptr((list))
GLATTER_UBLOCK(void, GLAPIENTRY, glCallList, (GLuint list))
#define glCallLists(n, type, lists) glatter_glCallLists_ptr((n), (type), (lists))
GLATTER_UBLOCK(void, GLAPIENTRY, glCallLists, (GLsizei n, GLenum type, const GLvoid *lists))
#define glClear(mask) glatter_glClear_ptr((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glClear, (GLbitfield mask))
#define glClearAccum(red, green, blue, alpha) glatter_glClearAccum_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearAccum, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearColor, (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha))
#define glClearDepth(depth) glatter_glClearDepth_ptr((depth))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearDepth, (GLclampd depth))
#define glClearIndex(c) glatter_glClearIndex_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearIndex, (GLfloat c))
#define glClearStencil(s) glatter_glClearStencil_ptr((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glClearStencil, (GLint s))
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, GLAPIENTRY, glClientActiveTexture, (GLenum texture))
#define glClipPlane(plane, equation) glatter_glClipPlane_ptr((plane), (equation))
GLATTER_UBLOCK(void, GLAPIENTRY, glClipPlane, (GLenum plane, const GLdouble *equation))
#define glColor3b(red, green, blue) glatter_glColor3b_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3b, (GLbyte red, GLbyte green, GLbyte blue))
#define glColor3bv(v) glatter_glColor3bv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3bv, (const GLbyte *v))
#define glColor3d(red, green, blue) glatter_glColor3d_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3d, (GLdouble red, GLdouble green, GLdouble blue))
#define glColor3dv(v) glatter_glColor3dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3dv, (const GLdouble *v))
#define glColor3f(red, green, blue) glatter_glColor3f_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3f, (GLfloat red, GLfloat green, GLfloat blue))
#define glColor3fv(v) glatter_glColor3fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3fv, (const GLfloat *v))
#define glColor3i(red, green, blue) glatter_glColor3i_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3i, (GLint red, GLint green, GLint blue))
#define glColor3iv(v) glatter_glColor3iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3iv, (const GLint *v))
#define glColor3s(red, green, blue) glatter_glColor3s_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3s, (GLshort red, GLshort green, GLshort blue))
#define glColor3sv(v) glatter_glColor3sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3sv, (const GLshort *v))
#define glColor3ub(red, green, blue) glatter_glColor3ub_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3ub, (GLubyte red, GLubyte green, GLubyte blue))
#define glColor3ubv(v) glatter_glColor3ubv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3ubv, (const GLubyte *v))
#define glColor3ui(red, green, blue) glatter_glColor3ui_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3ui, (GLuint red, GLuint green, GLuint blue))
#define glColor3uiv(v) glatter_glColor3uiv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3uiv, (const GLuint *v))
#define glColor3us(red, green, blue) glatter_glColor3us_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3us, (GLushort red, GLushort green, GLushort blue))
#define glColor3usv(v) glatter_glColor3usv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor3usv, (const GLushort *v))
#define glColor4b(red, green, blue, alpha) glatter_glColor4b_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4b, (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha))
#define glColor4bv(v) glatter_glColor4bv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4bv, (const GLbyte *v))
#define glColor4d(red, green, blue, alpha) glatter_glColor4d_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4d, (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha))
#define glColor4dv(v) glatter_glColor4dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4dv, (const GLdouble *v))
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4f, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glColor4fv(v) glatter_glColor4fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4fv, (const GLfloat *v))
#define glColor4i(red, green, blue, alpha) glatter_glColor4i_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4i, (GLint red, GLint green, GLint blue, GLint alpha))
#define glColor4iv(v) glatter_glColor4iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4iv, (const GLint *v))
#define glColor4s(red, green, blue, alpha) glatter_glColor4s_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4s, (GLshort red, GLshort green, GLshort blue, GLshort alpha))
#define glColor4sv(v) glatter_glColor4sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4sv, (const GLshort *v))
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4ub, (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha))
#define glColor4ubv(v) glatter_glColor4ubv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4ubv, (const GLubyte *v))
#define glColor4ui(red, green, blue, alpha) glatter_glColor4ui_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4ui, (GLuint red, GLuint green, GLuint blue, GLuint alpha))
#define glColor4uiv(v) glatter_glColor4uiv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4uiv, (const GLuint *v))
#define glColor4us(red, green, blue, alpha) glatter_glColor4us_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4us, (GLushort red, GLushort green, GLushort blue, GLushort alpha))
#define glColor4usv(v) glatter_glColor4usv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glColor4usv, (const GLushort *v))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glColorMaterial(face, mode) glatter_glColorMaterial_ptr((face), (mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorMaterial, (GLenum face, GLenum mode))
#define glColorPointer(size, type, stride, ptr) glatter_glColorPointer_ptr((size), (type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *ptr))
#define glColorSubTable(target, start, count, format, type, data) glatter_glColorSubTable_ptr((target), (start), (count), (format), (type), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorSubTable, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data))
#define glColorTable(target, internalformat, width, format, type, table) glatter_glColorTable_ptr((target), (internalformat), (width), (format), (type), (table))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorTable, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table))
#define glColorTableParameterfv(target, pname, params) glatter_glColorTableParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorTableParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glColorTableParameteriv(target, pname, params) glatter_glColorTableParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glColorTableParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_ptr((target), (level), (internalformat), (width), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_ptr((target), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data))
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1D_ptr((target), (internalformat), (width), (format), (type), (image))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionFilter1D, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image))
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2D_ptr((target), (internalformat), (width), (height), (format), (type), (image))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image))
#define glConvolutionParameterf(target, pname, params) glatter_glConvolutionParameterf_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionParameterf, (GLenum target, GLenum pname, GLfloat params))
#define glConvolutionParameterfv(target, pname, params) glatter_glConvolutionParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glConvolutionParameteri(target, pname, params) glatter_glConvolutionParameteri_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionParameteri, (GLenum target, GLenum pname, GLint params))
#define glConvolutionParameteriv(target, pname, params) glatter_glConvolutionParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glConvolutionParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glCopyColorSubTable(target, start, x, y, width) glatter_glCopyColorSubTable_ptr((target), (start), (x), (y), (width))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyColorSubTable, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width))
#define glCopyColorTable(target, internalformat, x, y, width) glatter_glCopyColorTable_ptr((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyColorTable, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1D_ptr((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyConvolutionFilter1D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2D_ptr((target), (internalformat), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyConvolutionFilter2D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyPixels(x, y, width, height, type) glatter_glCopyPixels_ptr((x), (y), (width), (height), (type))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type))
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D_ptr((target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_ptr((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_ptr((target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCullFace(mode) glatter_glCullFace_ptr((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glCullFace, (GLenum mode))
#define glDeleteLists(list, range) glatter_glDeleteLists_ptr((list), (range))
GLATTER_UBLOCK(void, GLAPIENTRY, glDeleteLists, (GLuint list, GLsizei range))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GLAPIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc_ptr((func))
GLATTER_UBLOCK(void, GLAPIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask_ptr((flag))
GLATTER_UBLOCK(void, GLAPIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRange(near_val, far_val) glatter_glDepthRange_ptr((near_val), (far_val))
GLATTER_UBLOCK(void, GLAPIENTRY, glDepthRange, (GLclampd near_val, GLclampd far_val))
#define glDisable(cap) glatter_glDisable_ptr((cap))
GLATTER_UBLOCK(void, GLAPIENTRY, glDisable, (GLenum cap))
#define glDisableClientState(cap) glatter_glDisableClientState_ptr((cap))
GLATTER_UBLOCK(void, GLAPIENTRY, glDisableClientState, (GLenum cap))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawBuffer(mode) glatter_glDrawBuffer_ptr((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawBuffer, (GLenum mode))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_ptr((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices))
#define glDrawPixels(width, height, format, type, pixels) glatter_glDrawPixels_ptr((width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawPixels, (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_ptr((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, GLAPIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices))
#define glEdgeFlag(flag) glatter_glEdgeFlag_ptr((flag))
GLATTER_UBLOCK(void, GLAPIENTRY, glEdgeFlag, (GLboolean flag))
#define glEdgeFlagPointer(stride, ptr) glatter_glEdgeFlagPointer_ptr((stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glEdgeFlagPointer, (GLsizei stride, const GLvoid *ptr))
#define glEdgeFlagv(flag) glatter_glEdgeFlagv_ptr((flag))
GLATTER_UBLOCK(void, GLAPIENTRY, glEdgeFlagv, (const GLboolean *flag))
#define glEnable(cap) glatter_glEnable_ptr((cap))
GLATTER_UBLOCK(void, GLAPIENTRY, glEnable, (GLenum cap))
#define glEnableClientState(cap) glatter_glEnableClientState_ptr((cap))
GLATTER_UBLOCK(void, GLAPIENTRY, glEnableClientState, (GLenum cap))
#define glEnd() glatter_glEnd_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glEnd, (void))
#define glEndList() glatter_glEndList_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glEndList, (void))
#define glEvalCoord1d(u) glatter_glEvalCoord1d_ptr((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord1d, (GLdouble u))
#define glEvalCoord1dv(u) glatter_glEvalCoord1dv_ptr((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord1dv, (const GLdouble *u))
#define glEvalCoord1f(u) glatter_glEvalCoord1f_ptr((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord1f, (GLfloat u))
#define glEvalCoord1fv(u) glatter_glEvalCoord1fv_ptr((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord1fv, (const GLfloat *u))
#define glEvalCoord2d(u, v) glatter_glEvalCoord2d_ptr((u), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord2d, (GLdouble u, GLdouble v))
#define glEvalCoord2dv(u) glatter_glEvalCoord2dv_ptr((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord2dv, (const GLdouble *u))
#define glEvalCoord2f(u, v) glatter_glEvalCoord2f_ptr((u), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord2f, (GLfloat u, GLfloat v))
#define glEvalCoord2fv(u) glatter_glEvalCoord2fv_ptr((u))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalCoord2fv, (const GLfloat *u))
#define glEvalMesh1(mode, i1, i2) glatter_glEvalMesh1_ptr((mode), (i1), (i2))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalMesh1, (GLenum mode, GLint i1, GLint i2))
#define glEvalMesh2(mode, i1, i2, j1, j2) glatter_glEvalMesh2_ptr((mode), (i1), (i2), (j1), (j2))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalMesh2, (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2))
#define glEvalPoint1(i) glatter_glEvalPoint1_ptr((i))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalPoint1, (GLint i))
#define glEvalPoint2(i, j) glatter_glEvalPoint2_ptr((i), (j))
GLATTER_UBLOCK(void, GLAPIENTRY, glEvalPoint2, (GLint i, GLint j))
#define glFeedbackBuffer(size, type, buffer) glatter_glFeedbackBuffer_ptr((size), (type), (buffer))
GLATTER_UBLOCK(void, GLAPIENTRY, glFeedbackBuffer, (GLsizei size, GLenum type, GLfloat *buffer))
#define glFinish() glatter_glFinish_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glFlush, (void))
#define glFogf(pname, param) glatter_glFogf_ptr((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glFogf, (GLenum pname, GLfloat param))
#define glFogfv(pname, params) glatter_glFogfv_ptr((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glFogfv, (GLenum pname, const GLfloat *params))
#define glFogi(pname, param) glatter_glFogi_ptr((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glFogi, (GLenum pname, GLint param))
#define glFogiv(pname, params) glatter_glFogiv_ptr((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glFogiv, (GLenum pname, const GLint *params))
#define glFrontFace(mode) glatter_glFrontFace_ptr((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glFrontFace, (GLenum mode))
#define glFrustum(left, right, bottom, top, near_val, far_val) glatter_glFrustum_ptr((left), (right), (bottom), (top), (near_val), (far_val))
GLATTER_UBLOCK(void, GLAPIENTRY, glFrustum, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val))
#define glGenLists(range) glatter_glGenLists_ptr((range))
GLATTER_UBLOCK(GLuint, GLAPIENTRY, glGenLists, (GLsizei range))
#define glGenTextures(n, textures) glatter_glGenTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GLAPIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGetBooleanv(pname, params) glatter_glGetBooleanv_ptr((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetBooleanv, (GLenum pname, GLboolean *params))
#define glGetClipPlane(plane, equation) glatter_glGetClipPlane_ptr((plane), (equation))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetClipPlane, (GLenum plane, GLdouble *equation))
#define glGetColorTable(target, format, type, table) glatter_glGetColorTable_ptr((target), (format), (type), (table))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetColorTable, (GLenum target, GLenum format, GLenum type, GLvoid *table))
#define glGetColorTableParameterfv(target, pname, params) glatter_glGetColorTableParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetColorTableParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetColorTableParameteriv(target, pname, params) glatter_glGetColorTableParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetColorTableParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetCompressedTexImage(target, lod, img) glatter_glGetCompressedTexImage_ptr((target), (lod), (img))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetCompressedTexImage, (GLenum target, GLint lod, GLvoid *img))
#define glGetConvolutionFilter(target, format, type, image) glatter_glGetConvolutionFilter_ptr((target), (format), (type), (image))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetConvolutionFilter, (GLenum target, GLenum format, GLenum type, GLvoid *image))
#define glGetConvolutionParameterfv(target, pname, params) glatter_glGetConvolutionParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetConvolutionParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetConvolutionParameteriv(target, pname, params) glatter_glGetConvolutionParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetConvolutionParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetDoublev(pname, params) glatter_glGetDoublev_ptr((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetDoublev, (GLenum pname, GLdouble *params))
#define glGetError() glatter_glGetError_ptr()
GLATTER_UBLOCK(GLenum, GLAPIENTRY, glGetError, (void))
#define glGetFloatv(pname, params) glatter_glGetFloatv_ptr((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetFloatv, (GLenum pname, GLfloat *params))
#define glGetHistogram(target, reset, format, type, values) glatter_glGetHistogram_ptr((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values))
#define glGetHistogramParameterfv(target, pname, params) glatter_glGetHistogramParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetHistogramParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetHistogramParameteriv(target, pname, params) glatter_glGetHistogramParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetHistogramParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetIntegerv(pname, params) glatter_glGetIntegerv_ptr((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetIntegerv, (GLenum pname, GLint *params))
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetLightfv, (GLenum light, GLenum pname, GLfloat *params))
#define glGetLightiv(light, pname, params) glatter_glGetLightiv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetLightiv, (GLenum light, GLenum pname, GLint *params))
#define glGetMapdv(target, query, v) glatter_glGetMapdv_ptr((target), (query), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMapdv, (GLenum target, GLenum query, GLdouble *v))
#define glGetMapfv(target, query, v) glatter_glGetMapfv_ptr((target), (query), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMapfv, (GLenum target, GLenum query, GLfloat *v))
#define glGetMapiv(target, query, v) glatter_glGetMapiv_ptr((target), (query), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMapiv, (GLenum target, GLenum query, GLint *v))
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMaterialfv, (GLenum face, GLenum pname, GLfloat *params))
#define glGetMaterialiv(face, pname, params) glatter_glGetMaterialiv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMaterialiv, (GLenum face, GLenum pname, GLint *params))
#define glGetMinmax(target, reset, format, types, values) glatter_glGetMinmax_ptr((target), (reset), (format), (types), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values))
#define glGetMinmaxParameterfv(target, pname, params) glatter_glGetMinmaxParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMinmaxParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetMinmaxParameteriv(target, pname, params) glatter_glGetMinmaxParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetMinmaxParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetPixelMapfv(map, values) glatter_glGetPixelMapfv_ptr((map), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPixelMapfv, (GLenum map, GLfloat *values))
#define glGetPixelMapuiv(map, values) glatter_glGetPixelMapuiv_ptr((map), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPixelMapuiv, (GLenum map, GLuint *values))
#define glGetPixelMapusv(map, values) glatter_glGetPixelMapusv_ptr((map), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPixelMapusv, (GLenum map, GLushort *values))
#define glGetPointerv(pname, params) glatter_glGetPointerv_ptr((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPointerv, (GLenum pname, GLvoid **params))
#define glGetPolygonStipple(mask) glatter_glGetPolygonStipple_ptr((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetPolygonStipple, (GLubyte *mask))
#define glGetSeparableFilter(target, format, type, row, column, span) glatter_glGetSeparableFilter_ptr((target), (format), (type), (row), (column), (span))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetSeparableFilter, (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span))
#define glGetString(name) glatter_glGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte *, GLAPIENTRY, glGetString, (GLenum name))
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexEnvfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexEnviv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexGendv(coord, pname, params) glatter_glGetTexGendv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexGendv, (GLenum coord, GLenum pname, GLdouble *params))
#define glGetTexGenfv(coord, pname, params) glatter_glGetTexGenfv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexGenfv, (GLenum coord, GLenum pname, GLfloat *params))
#define glGetTexGeniv(coord, pname, params) glatter_glGetTexGeniv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexGeniv, (GLenum coord, GLenum pname, GLint *params))
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_ptr((target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint_ptr((target), (mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glHint, (GLenum target, GLenum mode))
#define glHistogram(target, width, internalformat, sink) glatter_glHistogram_ptr((target), (width), (internalformat), (sink))
GLATTER_UBLOCK(void, GLAPIENTRY, glHistogram, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink))
#define glIndexMask(mask) glatter_glIndexMask_ptr((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexMask, (GLuint mask))
#define glIndexPointer(type, stride, ptr) glatter_glIndexPointer_ptr((type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexPointer, (GLenum type, GLsizei stride, const GLvoid *ptr))
#define glIndexd(c) glatter_glIndexd_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexd, (GLdouble c))
#define glIndexdv(c) glatter_glIndexdv_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexdv, (const GLdouble *c))
#define glIndexf(c) glatter_glIndexf_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexf, (GLfloat c))
#define glIndexfv(c) glatter_glIndexfv_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexfv, (const GLfloat *c))
#define glIndexi(c) glatter_glIndexi_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexi, (GLint c))
#define glIndexiv(c) glatter_glIndexiv_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexiv, (const GLint *c))
#define glIndexs(c) glatter_glIndexs_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexs, (GLshort c))
#define glIndexsv(c) glatter_glIndexsv_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexsv, (const GLshort *c))
#define glIndexub(c) glatter_glIndexub_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexub, (GLubyte c))
#define glIndexubv(c) glatter_glIndexubv_ptr((c))
GLATTER_UBLOCK(void, GLAPIENTRY, glIndexubv, (const GLubyte *c))
#define glInitNames() glatter_glInitNames_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glInitNames, (void))
#define glInterleavedArrays(format, stride, pointer) glatter_glInterleavedArrays_ptr((format), (stride), (pointer))
GLATTER_UBLOCK(void, GLAPIENTRY, glInterleavedArrays, (GLenum format, GLsizei stride, const GLvoid *pointer))
#define glIsEnabled(cap) glatter_glIsEnabled_ptr((cap))
GLATTER_UBLOCK(GLboolean, GLAPIENTRY, glIsEnabled, (GLenum cap))
#define glIsList(list) glatter_glIsList_ptr((list))
GLATTER_UBLOCK(GLboolean, GLAPIENTRY, glIsList, (GLuint list))
#define glIsTexture(texture) glatter_glIsTexture_ptr((texture))
GLATTER_UBLOCK(GLboolean, GLAPIENTRY, glIsTexture, (GLuint texture))
#define glLightModelf(pname, param) glatter_glLightModelf_ptr((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightModelf, (GLenum pname, GLfloat param))
#define glLightModelfv(pname, params) glatter_glLightModelfv_ptr((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightModelfv, (GLenum pname, const GLfloat *params))
#define glLightModeli(pname, param) glatter_glLightModeli_ptr((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightModeli, (GLenum pname, GLint param))
#define glLightModeliv(pname, params) glatter_glLightModeliv_ptr((pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightModeliv, (GLenum pname, const GLint *params))
#define glLightf(light, pname, param) glatter_glLightf_ptr((light), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightf, (GLenum light, GLenum pname, GLfloat param))
#define glLightfv(light, pname, params) glatter_glLightfv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightfv, (GLenum light, GLenum pname, const GLfloat *params))
#define glLighti(light, pname, param) glatter_glLighti_ptr((light), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glLighti, (GLenum light, GLenum pname, GLint param))
#define glLightiv(light, pname, params) glatter_glLightiv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glLightiv, (GLenum light, GLenum pname, const GLint *params))
#define glLineStipple(factor, pattern) glatter_glLineStipple_ptr((factor), (pattern))
GLATTER_UBLOCK(void, GLAPIENTRY, glLineStipple, (GLint factor, GLushort pattern))
#define glLineWidth(width) glatter_glLineWidth_ptr((width))
GLATTER_UBLOCK(void, GLAPIENTRY, glLineWidth, (GLfloat width))
#define glListBase(base) glatter_glListBase_ptr((base))
GLATTER_UBLOCK(void, GLAPIENTRY, glListBase, (GLuint base))
#define glLoadIdentity() glatter_glLoadIdentity_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadIdentity, (void))
#define glLoadMatrixd(m) glatter_glLoadMatrixd_ptr((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadMatrixd, (const GLdouble *m))
#define glLoadMatrixf(m) glatter_glLoadMatrixf_ptr((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadMatrixf, (const GLfloat *m))
#define glLoadName(name) glatter_glLoadName_ptr((name))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadName, (GLuint name))
#define glLoadTransposeMatrixd(m) glatter_glLoadTransposeMatrixd_ptr((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadTransposeMatrixd, (const GLdouble m[16]))
#define glLoadTransposeMatrixf(m) glatter_glLoadTransposeMatrixf_ptr((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glLoadTransposeMatrixf, (const GLfloat m[16]))
#define glLogicOp(opcode) glatter_glLogicOp_ptr((opcode))
GLATTER_UBLOCK(void, GLAPIENTRY, glLogicOp, (GLenum opcode))
#define glMap1d(target, u1, u2, stride, order, points) glatter_glMap1d_ptr((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, GLAPIENTRY, glMap1d, (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points))
#define glMap1f(target, u1, u2, stride, order, points) glatter_glMap1f_ptr((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, GLAPIENTRY, glMap1f, (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points))
#define glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2d_ptr((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, GLAPIENTRY, glMap2d, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points))
#define glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2f_ptr((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, GLAPIENTRY, glMap2f, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points))
#define glMapGrid1d(un, u1, u2) glatter_glMapGrid1d_ptr((un), (u1), (u2))
GLATTER_UBLOCK(void, GLAPIENTRY, glMapGrid1d, (GLint un, GLdouble u1, GLdouble u2))
#define glMapGrid1f(un, u1, u2) glatter_glMapGrid1f_ptr((un), (u1), (u2))
GLATTER_UBLOCK(void, GLAPIENTRY, glMapGrid1f, (GLint un, GLfloat u1, GLfloat u2))
#define glMapGrid2d(un, u1, u2, vn, v1, v2) glatter_glMapGrid2d_ptr((un), (u1), (u2), (vn), (v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glMapGrid2d, (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2))
#define glMapGrid2f(un, u1, u2, vn, v1, v2) glatter_glMapGrid2f_ptr((un), (u1), (u2), (vn), (v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glMapGrid2f, (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2))
#define glMaterialf(face, pname, param) glatter_glMaterialf_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glMaterialf, (GLenum face, GLenum pname, GLfloat param))
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glMaterialfv, (GLenum face, GLenum pname, const GLfloat *params))
#define glMateriali(face, pname, param) glatter_glMateriali_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glMateriali, (GLenum face, GLenum pname, GLint param))
#define glMaterialiv(face, pname, params) glatter_glMaterialiv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glMaterialiv, (GLenum face, GLenum pname, const GLint *params))
#define glMatrixMode(mode) glatter_glMatrixMode_ptr((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glMatrixMode, (GLenum mode))
#define glMinmax(target, internalformat, sink) glatter_glMinmax_ptr((target), (internalformat), (sink))
GLATTER_UBLOCK(void, GLAPIENTRY, glMinmax, (GLenum target, GLenum internalformat, GLboolean sink))
#define glMultMatrixd(m) glatter_glMultMatrixd_ptr((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultMatrixd, (const GLdouble *m))
#define glMultMatrixf(m) glatter_glMultMatrixf_ptr((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultMatrixf, (const GLfloat *m))
#define glMultTransposeMatrixd(m) glatter_glMultTransposeMatrixd_ptr((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultTransposeMatrixd, (const GLdouble m[16]))
#define glMultTransposeMatrixf(m) glatter_glMultTransposeMatrixf_ptr((m))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultTransposeMatrixf, (const GLfloat m[16]))
#define glMultiTexCoord1d(target, s) glatter_glMultiTexCoord1d_ptr((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1d, (GLenum target, GLdouble s))
#define glMultiTexCoord1dv(target, v) glatter_glMultiTexCoord1dv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord1f(target, s) glatter_glMultiTexCoord1f_ptr((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1f, (GLenum target, GLfloat s))
#define glMultiTexCoord1fv(target, v) glatter_glMultiTexCoord1fv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord1i(target, s) glatter_glMultiTexCoord1i_ptr((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1i, (GLenum target, GLint s))
#define glMultiTexCoord1iv(target, v) glatter_glMultiTexCoord1iv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1iv, (GLenum target, const GLint *v))
#define glMultiTexCoord1s(target, s) glatter_glMultiTexCoord1s_ptr((target), (s))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1s, (GLenum target, GLshort s))
#define glMultiTexCoord1sv(target, v) glatter_glMultiTexCoord1sv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord1sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord2d(target, s, t) glatter_glMultiTexCoord2d_ptr((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2d, (GLenum target, GLdouble s, GLdouble t))
#define glMultiTexCoord2dv(target, v) glatter_glMultiTexCoord2dv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord2f(target, s, t) glatter_glMultiTexCoord2f_ptr((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2f, (GLenum target, GLfloat s, GLfloat t))
#define glMultiTexCoord2fv(target, v) glatter_glMultiTexCoord2fv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord2i(target, s, t) glatter_glMultiTexCoord2i_ptr((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2i, (GLenum target, GLint s, GLint t))
#define glMultiTexCoord2iv(target, v) glatter_glMultiTexCoord2iv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2iv, (GLenum target, const GLint *v))
#define glMultiTexCoord2s(target, s, t) glatter_glMultiTexCoord2s_ptr((target), (s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2s, (GLenum target, GLshort s, GLshort t))
#define glMultiTexCoord2sv(target, v) glatter_glMultiTexCoord2sv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord2sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord3d(target, s, t, r) glatter_glMultiTexCoord3d_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3d, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#define glMultiTexCoord3dv(target, v) glatter_glMultiTexCoord3dv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord3f(target, s, t, r) glatter_glMultiTexCoord3f_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3f, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#define glMultiTexCoord3fv(target, v) glatter_glMultiTexCoord3fv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord3i(target, s, t, r) glatter_glMultiTexCoord3i_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3i, (GLenum target, GLint s, GLint t, GLint r))
#define glMultiTexCoord3iv(target, v) glatter_glMultiTexCoord3iv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3iv, (GLenum target, const GLint *v))
#define glMultiTexCoord3s(target, s, t, r) glatter_glMultiTexCoord3s_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3s, (GLenum target, GLshort s, GLshort t, GLshort r))
#define glMultiTexCoord3sv(target, v) glatter_glMultiTexCoord3sv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord3sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord4d(target, s, t, r, q) glatter_glMultiTexCoord4d_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4d, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glMultiTexCoord4dv(target, v) glatter_glMultiTexCoord4dv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4f, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4fv(target, v) glatter_glMultiTexCoord4fv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord4i(target, s, t, r, q) glatter_glMultiTexCoord4i_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4i, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#define glMultiTexCoord4iv(target, v) glatter_glMultiTexCoord4iv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4iv, (GLenum target, const GLint *v))
#define glMultiTexCoord4s(target, s, t, r, q) glatter_glMultiTexCoord4s_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4s, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#define glMultiTexCoord4sv(target, v) glatter_glMultiTexCoord4sv_ptr((target), (v))
GLATTER_UBLOCK(void, GLAPIENTRY, glMultiTexCoord4sv, (GLenum target, const GLshort *v))
#define glNewList(list, mode) glatter_glNewList_ptr((list), (mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glNewList, (GLuint list, GLenum mode))
#define glNormal3b(nx, ny, nz) glatter_glNormal3b_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3b, (GLbyte nx, GLbyte ny, GLbyte nz))
#define glNormal3bv(v) glatter_glNormal3bv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3bv, (const GLbyte *v))
#define glNormal3d(nx, ny, nz) glatter_glNormal3d_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3d, (GLdouble nx, GLdouble ny, GLdouble nz))
#define glNormal3dv(v) glatter_glNormal3dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3dv, (const GLdouble *v))
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3f, (GLfloat nx, GLfloat ny, GLfloat nz))
#define glNormal3fv(v) glatter_glNormal3fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3fv, (const GLfloat *v))
#define glNormal3i(nx, ny, nz) glatter_glNormal3i_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3i, (GLint nx, GLint ny, GLint nz))
#define glNormal3iv(v) glatter_glNormal3iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3iv, (const GLint *v))
#define glNormal3s(nx, ny, nz) glatter_glNormal3s_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3s, (GLshort nx, GLshort ny, GLshort nz))
#define glNormal3sv(v) glatter_glNormal3sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormal3sv, (const GLshort *v))
#define glNormalPointer(type, stride, ptr) glatter_glNormalPointer_ptr((type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glNormalPointer, (GLenum type, GLsizei stride, const GLvoid *ptr))
#define glOrtho(left, right, bottom, top, near_val, far_val) glatter_glOrtho_ptr((left), (right), (bottom), (top), (near_val), (far_val))
GLATTER_UBLOCK(void, GLAPIENTRY, glOrtho, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val))
#define glPassThrough(token) glatter_glPassThrough_ptr((token))
GLATTER_UBLOCK(void, GLAPIENTRY, glPassThrough, (GLfloat token))
#define glPixelMapfv(map, mapsize, values) glatter_glPixelMapfv_ptr((map), (mapsize), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelMapfv, (GLenum map, GLsizei mapsize, const GLfloat *values))
#define glPixelMapuiv(map, mapsize, values) glatter_glPixelMapuiv_ptr((map), (mapsize), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelMapuiv, (GLenum map, GLsizei mapsize, const GLuint *values))
#define glPixelMapusv(map, mapsize, values) glatter_glPixelMapusv_ptr((map), (mapsize), (values))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelMapusv, (GLenum map, GLsizei mapsize, const GLushort *values))
#define glPixelStoref(pname, param) glatter_glPixelStoref_ptr((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelStoref, (GLenum pname, GLfloat param))
#define glPixelStorei(pname, param) glatter_glPixelStorei_ptr((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPixelTransferf(pname, param) glatter_glPixelTransferf_ptr((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelTransferf, (GLenum pname, GLfloat param))
#define glPixelTransferi(pname, param) glatter_glPixelTransferi_ptr((pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelTransferi, (GLenum pname, GLint param))
#define glPixelZoom(xfactor, yfactor) glatter_glPixelZoom_ptr((xfactor), (yfactor))
GLATTER_UBLOCK(void, GLAPIENTRY, glPixelZoom, (GLfloat xfactor, GLfloat yfactor))
#define glPointSize(size) glatter_glPointSize_ptr((size))
GLATTER_UBLOCK(void, GLAPIENTRY, glPointSize, (GLfloat size))
#define glPolygonMode(face, mode) glatter_glPolygonMode_ptr((face), (mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glPolygonMode, (GLenum face, GLenum mode))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_ptr((factor), (units))
GLATTER_UBLOCK(void, GLAPIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glPolygonStipple(mask) glatter_glPolygonStipple_ptr((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glPolygonStipple, (const GLubyte *mask))
#define glPopAttrib() glatter_glPopAttrib_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glPopAttrib, (void))
#define glPopClientAttrib() glatter_glPopClientAttrib_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glPopClientAttrib, (void))
#define glPopMatrix() glatter_glPopMatrix_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glPopMatrix, (void))
#define glPopName() glatter_glPopName_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glPopName, (void))
#define glPrioritizeTextures(n, textures, priorities) glatter_glPrioritizeTextures_ptr((n), (textures), (priorities))
GLATTER_UBLOCK(void, GLAPIENTRY, glPrioritizeTextures, (GLsizei n, const GLuint *textures, const GLclampf *priorities))
#define glPushAttrib(mask) glatter_glPushAttrib_ptr((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glPushAttrib, (GLbitfield mask))
#define glPushClientAttrib(mask) glatter_glPushClientAttrib_ptr((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glPushClientAttrib, (GLbitfield mask))
#define glPushMatrix() glatter_glPushMatrix_ptr()
GLATTER_UBLOCK(void, GLAPIENTRY, glPushMatrix, (void))
#define glPushName(name) glatter_glPushName_ptr((name))
GLATTER_UBLOCK(void, GLAPIENTRY, glPushName, (GLuint name))
#define glRasterPos2d(x, y) glatter_glRasterPos2d_ptr((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2d, (GLdouble x, GLdouble y))
#define glRasterPos2dv(v) glatter_glRasterPos2dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2dv, (const GLdouble *v))
#define glRasterPos2f(x, y) glatter_glRasterPos2f_ptr((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2f, (GLfloat x, GLfloat y))
#define glRasterPos2fv(v) glatter_glRasterPos2fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2fv, (const GLfloat *v))
#define glRasterPos2i(x, y) glatter_glRasterPos2i_ptr((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2i, (GLint x, GLint y))
#define glRasterPos2iv(v) glatter_glRasterPos2iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2iv, (const GLint *v))
#define glRasterPos2s(x, y) glatter_glRasterPos2s_ptr((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2s, (GLshort x, GLshort y))
#define glRasterPos2sv(v) glatter_glRasterPos2sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos2sv, (const GLshort *v))
#define glRasterPos3d(x, y, z) glatter_glRasterPos3d_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3d, (GLdouble x, GLdouble y, GLdouble z))
#define glRasterPos3dv(v) glatter_glRasterPos3dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3dv, (const GLdouble *v))
#define glRasterPos3f(x, y, z) glatter_glRasterPos3f_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3f, (GLfloat x, GLfloat y, GLfloat z))
#define glRasterPos3fv(v) glatter_glRasterPos3fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3fv, (const GLfloat *v))
#define glRasterPos3i(x, y, z) glatter_glRasterPos3i_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3i, (GLint x, GLint y, GLint z))
#define glRasterPos3iv(v) glatter_glRasterPos3iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3iv, (const GLint *v))
#define glRasterPos3s(x, y, z) glatter_glRasterPos3s_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3s, (GLshort x, GLshort y, GLshort z))
#define glRasterPos3sv(v) glatter_glRasterPos3sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos3sv, (const GLshort *v))
#define glRasterPos4d(x, y, z, w) glatter_glRasterPos4d_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glRasterPos4dv(v) glatter_glRasterPos4dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4dv, (const GLdouble *v))
#define glRasterPos4f(x, y, z, w) glatter_glRasterPos4f_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glRasterPos4fv(v) glatter_glRasterPos4fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4fv, (const GLfloat *v))
#define glRasterPos4i(x, y, z, w) glatter_glRasterPos4i_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4i, (GLint x, GLint y, GLint z, GLint w))
#define glRasterPos4iv(v) glatter_glRasterPos4iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4iv, (const GLint *v))
#define glRasterPos4s(x, y, z, w) glatter_glRasterPos4s_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4s, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glRasterPos4sv(v) glatter_glRasterPos4sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glRasterPos4sv, (const GLshort *v))
#define glReadBuffer(mode) glatter_glReadBuffer_ptr((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glReadBuffer, (GLenum mode))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_ptr((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels))
#define glRectd(x1, y1, x2, y2) glatter_glRectd_ptr((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectd, (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2))
#define glRectdv(v1, v2) glatter_glRectdv_ptr((v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectdv, (const GLdouble *v1, const GLdouble *v2))
#define glRectf(x1, y1, x2, y2) glatter_glRectf_ptr((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectf, (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2))
#define glRectfv(v1, v2) glatter_glRectfv_ptr((v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectfv, (const GLfloat *v1, const GLfloat *v2))
#define glRecti(x1, y1, x2, y2) glatter_glRecti_ptr((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRecti, (GLint x1, GLint y1, GLint x2, GLint y2))
#define glRectiv(v1, v2) glatter_glRectiv_ptr((v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectiv, (const GLint *v1, const GLint *v2))
#define glRects(x1, y1, x2, y2) glatter_glRects_ptr((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRects, (GLshort x1, GLshort y1, GLshort x2, GLshort y2))
#define glRectsv(v1, v2) glatter_glRectsv_ptr((v1), (v2))
GLATTER_UBLOCK(void, GLAPIENTRY, glRectsv, (const GLshort *v1, const GLshort *v2))
#define glRenderMode(mode) glatter_glRenderMode_ptr((mode))
GLATTER_UBLOCK(GLint, GLAPIENTRY, glRenderMode, (GLenum mode))
#define glResetHistogram(target) glatter_glResetHistogram_ptr((target))
GLATTER_UBLOCK(void, GLAPIENTRY, glResetHistogram, (GLenum target))
#define glResetMinmax(target) glatter_glResetMinmax_ptr((target))
GLATTER_UBLOCK(void, GLAPIENTRY, glResetMinmax, (GLenum target))
#define glRotated(angle, x, y, z) glatter_glRotated_ptr((angle), (x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRotated, (GLdouble angle, GLdouble x, GLdouble y, GLdouble z))
#define glRotatef(angle, x, y, z) glatter_glRotatef_ptr((angle), (x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glRotatef, (GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_ptr((value), (invert))
GLATTER_UBLOCK(void, GLAPIENTRY, glSampleCoverage, (GLclampf value, GLboolean invert))
#define glScaled(x, y, z) glatter_glScaled_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glScaled, (GLdouble x, GLdouble y, GLdouble z))
#define glScalef(x, y, z) glatter_glScalef_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glScalef, (GLfloat x, GLfloat y, GLfloat z))
#define glScissor(x, y, width, height) glatter_glScissor_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glSelectBuffer(size, buffer) glatter_glSelectBuffer_ptr((size), (buffer))
GLATTER_UBLOCK(void, GLAPIENTRY, glSelectBuffer, (GLsizei size, GLuint *buffer))
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2D_ptr((target), (internalformat), (width), (height), (format), (type), (row), (column))
GLATTER_UBLOCK(void, GLAPIENTRY, glSeparableFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column))
#define glShadeModel(mode) glatter_glShadeModel_ptr((mode))
GLATTER_UBLOCK(void, GLAPIENTRY, glShadeModel, (GLenum mode))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask_ptr((mask))
GLATTER_UBLOCK(void, GLAPIENTRY, glStencilMask, (GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_ptr((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GLAPIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glTexCoord1d(s) glatter_glTexCoord1d_ptr((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1d, (GLdouble s))
#define glTexCoord1dv(v) glatter_glTexCoord1dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1dv, (const GLdouble *v))
#define glTexCoord1f(s) glatter_glTexCoord1f_ptr((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1f, (GLfloat s))
#define glTexCoord1fv(v) glatter_glTexCoord1fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1fv, (const GLfloat *v))
#define glTexCoord1i(s) glatter_glTexCoord1i_ptr((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1i, (GLint s))
#define glTexCoord1iv(v) glatter_glTexCoord1iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1iv, (const GLint *v))
#define glTexCoord1s(s) glatter_glTexCoord1s_ptr((s))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1s, (GLshort s))
#define glTexCoord1sv(v) glatter_glTexCoord1sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord1sv, (const GLshort *v))
#define glTexCoord2d(s, t) glatter_glTexCoord2d_ptr((s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2d, (GLdouble s, GLdouble t))
#define glTexCoord2dv(v) glatter_glTexCoord2dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2dv, (const GLdouble *v))
#define glTexCoord2f(s, t) glatter_glTexCoord2f_ptr((s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2f, (GLfloat s, GLfloat t))
#define glTexCoord2fv(v) glatter_glTexCoord2fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2fv, (const GLfloat *v))
#define glTexCoord2i(s, t) glatter_glTexCoord2i_ptr((s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2i, (GLint s, GLint t))
#define glTexCoord2iv(v) glatter_glTexCoord2iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2iv, (const GLint *v))
#define glTexCoord2s(s, t) glatter_glTexCoord2s_ptr((s), (t))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2s, (GLshort s, GLshort t))
#define glTexCoord2sv(v) glatter_glTexCoord2sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord2sv, (const GLshort *v))
#define glTexCoord3d(s, t, r) glatter_glTexCoord3d_ptr((s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3d, (GLdouble s, GLdouble t, GLdouble r))
#define glTexCoord3dv(v) glatter_glTexCoord3dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3dv, (const GLdouble *v))
#define glTexCoord3f(s, t, r) glatter_glTexCoord3f_ptr((s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3f, (GLfloat s, GLfloat t, GLfloat r))
#define glTexCoord3fv(v) glatter_glTexCoord3fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3fv, (const GLfloat *v))
#define glTexCoord3i(s, t, r) glatter_glTexCoord3i_ptr((s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3i, (GLint s, GLint t, GLint r))
#define glTexCoord3iv(v) glatter_glTexCoord3iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3iv, (const GLint *v))
#define glTexCoord3s(s, t, r) glatter_glTexCoord3s_ptr((s), (t), (r))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3s, (GLshort s, GLshort t, GLshort r))
#define glTexCoord3sv(v) glatter_glTexCoord3sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord3sv, (const GLshort *v))
#define glTexCoord4d(s, t, r, q) glatter_glTexCoord4d_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4d, (GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glTexCoord4dv(v) glatter_glTexCoord4dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4dv, (const GLdouble *v))
#define glTexCoord4f(s, t, r, q) glatter_glTexCoord4f_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4f, (GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glTexCoord4fv(v) glatter_glTexCoord4fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4fv, (const GLfloat *v))
#define glTexCoord4i(s, t, r, q) glatter_glTexCoord4i_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4i, (GLint s, GLint t, GLint r, GLint q))
#define glTexCoord4iv(v) glatter_glTexCoord4iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4iv, (const GLint *v))
#define glTexCoord4s(s, t, r, q) glatter_glTexCoord4s_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4s, (GLshort s, GLshort t, GLshort r, GLshort q))
#define glTexCoord4sv(v) glatter_glTexCoord4sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoord4sv, (const GLshort *v))
#define glTexCoordPointer(size, type, stride, ptr) glatter_glTexCoordPointer_ptr((size), (type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexCoordPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *ptr))
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexEnvf, (GLenum target, GLenum pname, GLfloat param))
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexEnvfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexEnvi, (GLenum target, GLenum pname, GLint param))
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexEnviv, (GLenum target, GLenum pname, const GLint *params))
#define glTexGend(coord, pname, param) glatter_glTexGend_ptr((coord), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGend, (GLenum coord, GLenum pname, GLdouble param))
#define glTexGendv(coord, pname, params) glatter_glTexGendv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGendv, (GLenum coord, GLenum pname, const GLdouble *params))
#define glTexGenf(coord, pname, param) glatter_glTexGenf_ptr((coord), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGenf, (GLenum coord, GLenum pname, GLfloat param))
#define glTexGenfv(coord, pname, params) glatter_glTexGenfv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGenfv, (GLenum coord, GLenum pname, const GLfloat *params))
#define glTexGeni(coord, pname, param) glatter_glTexGeni_ptr((coord), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGeni, (GLenum coord, GLenum pname, GLint param))
#define glTexGeniv(coord, pname, params) glatter_glTexGeniv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexGeniv, (GLenum coord, GLenum pname, const GLint *params))
#define glTexImage1D(target, level, internalFormat, width, border, format, type, pixels) glatter_glTexImage1D_ptr((target), (level), (internalFormat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexImage1D, (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) glatter_glTexImage2D_ptr((target), (level), (internalFormat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_ptr((target), (level), (internalFormat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_ptr((target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GLAPIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels))
#define glTranslated(x, y, z) glatter_glTranslated_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glTranslated, (GLdouble x, GLdouble y, GLdouble z))
#define glTranslatef(x, y, z) glatter_glTranslatef_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glTranslatef, (GLfloat x, GLfloat y, GLfloat z))
#define glVertex2d(x, y) glatter_glVertex2d_ptr((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2d, (GLdouble x, GLdouble y))
#define glVertex2dv(v) glatter_glVertex2dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2dv, (const GLdouble *v))
#define glVertex2f(x, y) glatter_glVertex2f_ptr((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2f, (GLfloat x, GLfloat y))
#define glVertex2fv(v) glatter_glVertex2fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2fv, (const GLfloat *v))
#define glVertex2i(x, y) glatter_glVertex2i_ptr((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2i, (GLint x, GLint y))
#define glVertex2iv(v) glatter_glVertex2iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2iv, (const GLint *v))
#define glVertex2s(x, y) glatter_glVertex2s_ptr((x), (y))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2s, (GLshort x, GLshort y))
#define glVertex2sv(v) glatter_glVertex2sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex2sv, (const GLshort *v))
#define glVertex3d(x, y, z) glatter_glVertex3d_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3d, (GLdouble x, GLdouble y, GLdouble z))
#define glVertex3dv(v) glatter_glVertex3dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3dv, (const GLdouble *v))
#define glVertex3f(x, y, z) glatter_glVertex3f_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3f, (GLfloat x, GLfloat y, GLfloat z))
#define glVertex3fv(v) glatter_glVertex3fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3fv, (const GLfloat *v))
#define glVertex3i(x, y, z) glatter_glVertex3i_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3i, (GLint x, GLint y, GLint z))
#define glVertex3iv(v) glatter_glVertex3iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3iv, (const GLint *v))
#define glVertex3s(x, y, z) glatter_glVertex3s_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3s, (GLshort x, GLshort y, GLshort z))
#define glVertex3sv(v) glatter_glVertex3sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex3sv, (const GLshort *v))
#define glVertex4d(x, y, z, w) glatter_glVertex4d_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertex4dv(v) glatter_glVertex4dv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4dv, (const GLdouble *v))
#define glVertex4f(x, y, z, w) glatter_glVertex4f_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertex4fv(v) glatter_glVertex4fv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4fv, (const GLfloat *v))
#define glVertex4i(x, y, z, w) glatter_glVertex4i_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4i, (GLint x, GLint y, GLint z, GLint w))
#define glVertex4iv(v) glatter_glVertex4iv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4iv, (const GLint *v))
#define glVertex4s(x, y, z, w) glatter_glVertex4s_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4s, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertex4sv(v) glatter_glVertex4sv_ptr((v))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertex4sv, (const GLshort *v))
#define glVertexPointer(size, type, stride, ptr) glatter_glVertexPointer_ptr((size), (type), (stride), (ptr))
GLATTER_UBLOCK(void, GLAPIENTRY, glVertexPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *ptr))
#define glViewport(x, y, width, height) glatter_glViewport_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GLAPIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // !defined(GL_VERSION_ES_CM_1_0)
#if defined(GL_VERSION_ES_CM_1_0)
#if defined(GL_OES_point_size_array)
#define glPointSizePointerOES(type, stride, pointer) glatter_glPointSizePointerOES_ptr((type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSizePointerOES, (GLenum type, GLsizei stride, const GLvoid *pointer))
#endif // defined(GL_OES_point_size_array)
#define glActiveTexture(texture) glatter_glActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_ptr((func), (ref))
GLATTER_UBLOCK(void, GL_APIENTRY, glAlphaFunc, (GLenum func, GLclampf ref))
#define glAlphaFuncx(func, ref) glatter_glAlphaFuncx_ptr((func), (ref))
GLATTER_UBLOCK(void, GL_APIENTRY, glAlphaFuncx, (GLenum func, GLclampx ref))
#define glBindBuffer(target, buffer) glatter_glBindBuffer_ptr((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindTexture(target, texture) glatter_glBindTexture_ptr((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_ptr((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBufferData(target, size, data, usage) glatter_glBufferData_ptr((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data))
#define glClear(mask) glatter_glClear_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha))
#define glClearColorx(red, green, blue, alpha) glatter_glClearColorx_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColorx, (GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha))
#define glClearDepthf(depth) glatter_glClearDepthf_ptr((depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLclampf depth))
#define glClearDepthx(depth) glatter_glClearDepthx_ptr((depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthx, (GLclampx depth))
#define glClearStencil(s) glatter_glClearStencil_ptr((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glClientActiveTexture, (GLenum texture))
#define glClipPlanef(plane, equation) glatter_glClipPlanef_ptr((plane), (equation))
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanef, (GLenum plane, const GLfloat *equation))
#define glClipPlanex(plane, equation) glatter_glClipPlanex_ptr((plane), (equation))
GLATTER_UBLOCK(void, GL_APIENTRY, glClipPlanex, (GLenum plane, const GLfixed *equation))
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4f, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4ub, (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha))
#define glColor4x(red, green, blue, alpha) glatter_glColor4x_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColor4x, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_ptr((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCullFace(mode) glatter_glCullFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc_ptr((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask_ptr((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(zNear, zFar) glatter_glDepthRangef_ptr((zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLclampf zNear, GLclampf zFar))
#define glDepthRangex(zNear, zFar) glatter_glDepthRangex_ptr((zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangex, (GLclampx zNear, GLclampx zFar))
#define glDisable(cap) glatter_glDisable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableClientState(array) glatter_glDisableClientState_ptr((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableClientState, (GLenum array))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_ptr((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices))
#define glEnable(cap) glatter_glEnable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableClientState(array) glatter_glEnableClientState_ptr((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableClientState, (GLenum array))
#define glFinish() glatter_glFinish_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFogf(pname, param) glatter_glFogf_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glFogf, (GLenum pname, GLfloat param))
#define glFogfv(pname, params) glatter_glFogfv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glFogfv, (GLenum pname, const GLfloat *params))
#define glFogx(pname, param) glatter_glFogx_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glFogx, (GLenum pname, GLfixed param))
#define glFogxv(pname, params) glatter_glFogxv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glFogxv, (GLenum pname, const GLfixed *params))
#define glFrontFace(mode) glatter_glFrontFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glFrustumf(left, right, bottom, top, zNear, zFar) glatter_glFrustumf_ptr((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrustumf, (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar))
#define glFrustumx(left, right, bottom, top, zNear, zFar) glatter_glFrustumx_ptr((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrustumx, (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar))
#define glGenBuffers(n, buffers) glatter_glGenBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenTextures(n, textures) glatter_glGenTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGetBooleanv(pname, params) glatter_glGetBooleanv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *params))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetClipPlanef(pname, eqn) glatter_glGetClipPlanef_ptr((pname), (eqn))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetClipPlanef, (GLenum pname, GLfloat eqn[4]))
#define glGetClipPlanex(pname, eqn) glatter_glGetClipPlanex_ptr((pname), (eqn))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetClipPlanex, (GLenum pname, GLfixed eqn[4]))
#define glGetError() glatter_glGetError_ptr()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFixedv(pname, params) glatter_glGetFixedv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFixedv, (GLenum pname, GLfixed *params))
#define glGetFloatv(pname, params) glatter_glGetFloatv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *params))
#define glGetIntegerv(pname, params) glatter_glGetIntegerv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *params))
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetLightfv, (GLenum light, GLenum pname, GLfloat *params))
#define glGetLightxv(light, pname, params) glatter_glGetLightxv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetLightxv, (GLenum light, GLenum pname, GLfixed *params))
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMaterialfv, (GLenum face, GLenum pname, GLfloat *params))
#define glGetMaterialxv(face, pname, params) glatter_glGetMaterialxv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMaterialxv, (GLenum face, GLenum pname, GLfixed *params))
#define glGetPointerv(pname, params) glatter_glGetPointerv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPointerv, (GLenum pname, GLvoid **params))
#define glGetString(name) glatter_glGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexEnvfv(env, pname, params) glatter_glGetTexEnvfv_ptr((env), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnvfv, (GLenum env, GLenum pname, GLfloat *params))
#define glGetTexEnviv(env, pname, params) glatter_glGetTexEnviv_ptr((env), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnviv, (GLenum env, GLenum pname, GLint *params))
#define glGetTexEnvxv(env, pname, params) glatter_glGetTexEnvxv_ptr((env), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexEnvxv, (GLenum env, GLenum pname, GLfixed *params))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterxv(target, pname, params) glatter_glGetTexParameterxv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterxv, (GLenum target, GLenum pname, GLfixed *params))
#define glHint(target, mode) glatter_glHint_ptr((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer_ptr((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled_ptr((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsTexture(texture) glatter_glIsTexture_ptr((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLightModelf(pname, param) glatter_glLightModelf_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelf, (GLenum pname, GLfloat param))
#define glLightModelfv(pname, params) glatter_glLightModelfv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelfv, (GLenum pname, const GLfloat *params))
#define glLightModelx(pname, param) glatter_glLightModelx_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelx, (GLenum pname, GLfixed param))
#define glLightModelxv(pname, params) glatter_glLightModelxv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightModelxv, (GLenum pname, const GLfixed *params))
#define glLightf(light, pname, param) glatter_glLightf_ptr((light), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightf, (GLenum light, GLenum pname, GLfloat param))
#define glLightfv(light, pname, params) glatter_glLightfv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightfv, (GLenum light, GLenum pname, const GLfloat *params))
#define glLightx(light, pname, param) glatter_glLightx_ptr((light), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightx, (GLenum light, GLenum pname, GLfixed param))
#define glLightxv(light, pname, params) glatter_glLightxv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glLightxv, (GLenum light, GLenum pname, const GLfixed *params))
#define glLineWidth(width) glatter_glLineWidth_ptr((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLineWidthx(width) glatter_glLineWidthx_ptr((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidthx, (GLfixed width))
#define glLoadIdentity() glatter_glLoadIdentity_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadIdentity, (void))
#define glLoadMatrixf(m) glatter_glLoadMatrixf_ptr((m))
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadMatrixf, (const GLfloat *m))
#define glLoadMatrixx(m) glatter_glLoadMatrixx_ptr((m))
GLATTER_UBLOCK(void, GL_APIENTRY, glLoadMatrixx, (const GLfixed *m))
#define glLogicOp(opcode) glatter_glLogicOp_ptr((opcode))
GLATTER_UBLOCK(void, GL_APIENTRY, glLogicOp, (GLenum opcode))
#define glMaterialf(face, pname, param) glatter_glMaterialf_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialf, (GLenum face, GLenum pname, GLfloat param))
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialfv, (GLenum face, GLenum pname, const GLfloat *params))
#define glMaterialx(face, pname, param) glatter_glMaterialx_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialx, (GLenum face, GLenum pname, GLfixed param))
#define glMaterialxv(face, pname, params) glatter_glMaterialxv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glMaterialxv, (GLenum face, GLenum pname, const GLfixed *params))
#define glMatrixMode(mode) glatter_glMatrixMode_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixMode, (GLenum mode))
#define glMultMatrixf(m) glatter_glMultMatrixf_ptr((m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultMatrixf, (const GLfloat *m))
#define glMultMatrixx(m) glatter_glMultMatrixx_ptr((m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultMatrixx, (const GLfixed *m))
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiTexCoord4f, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4x(target, s, t, r, q) glatter_glMultiTexCoord4x_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiTexCoord4x, (GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, GL_APIENTRY, glNormal3f, (GLfloat nx, GLfloat ny, GLfloat nz))
#define glNormal3x(nx, ny, nz) glatter_glNormal3x_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, GL_APIENTRY, glNormal3x, (GLfixed nx, GLfixed ny, GLfixed nz))
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer_ptr((type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glNormalPointer, (GLenum type, GLsizei stride, const GLvoid *pointer))
#define glOrthof(left, right, bottom, top, zNear, zFar) glatter_glOrthof_ptr((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glOrthof, (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar))
#define glOrthox(left, right, bottom, top, zNear, zFar) glatter_glOrthox_ptr((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, GL_APIENTRY, glOrthox, (GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar))
#define glPixelStorei(pname, param) glatter_glPixelStorei_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPointParameterf(pname, param) glatter_glPointParameterf_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterf, (GLenum pname, GLfloat param))
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterfv, (GLenum pname, const GLfloat *params))
#define glPointParameterx(pname, param) glatter_glPointParameterx_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterx, (GLenum pname, GLfixed param))
#define glPointParameterxv(pname, params) glatter_glPointParameterxv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointParameterxv, (GLenum pname, const GLfixed *params))
#define glPointSize(size) glatter_glPointSize_ptr((size))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSize, (GLfloat size))
#define glPointSizex(size) glatter_glPointSizex_ptr((size))
GLATTER_UBLOCK(void, GL_APIENTRY, glPointSizex, (GLfixed size))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_ptr((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glPolygonOffsetx(factor, units) glatter_glPolygonOffsetx_ptr((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffsetx, (GLfixed factor, GLfixed units))
#define glPopMatrix() glatter_glPopMatrix_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glPopMatrix, (void))
#define glPushMatrix() glatter_glPushMatrix_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glPushMatrix, (void))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_ptr((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels))
#define glRotatef(angle, x, y, z) glatter_glRotatef_ptr((angle), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glRotatef, (GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glRotatex(angle, x, y, z) glatter_glRotatex_ptr((angle), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glRotatex, (GLfixed angle, GLfixed x, GLfixed y, GLfixed z))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_ptr((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLclampf value, GLboolean invert))
#define glSampleCoveragex(value, invert) glatter_glSampleCoveragex_ptr((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoveragex, (GLclampx value, GLboolean invert))
#define glScalef(x, y, z) glatter_glScalef_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glScalef, (GLfloat x, GLfloat y, GLfloat z))
#define glScalex(x, y, z) glatter_glScalex_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glScalex, (GLfixed x, GLfixed y, GLfixed z))
#define glScissor(x, y, width, height) glatter_glScissor_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShadeModel(mode) glatter_glShadeModel_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glShadeModel, (GLenum mode))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_ptr((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexCoordPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvf, (GLenum target, GLenum pname, GLfloat param))
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvi, (GLenum target, GLenum pname, GLint param))
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnviv, (GLenum target, GLenum pname, const GLint *params))
#define glTexEnvx(target, pname, param) glatter_glTexEnvx_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvx, (GLenum target, GLenum pname, GLfixed param))
#define glTexEnvxv(target, pname, params) glatter_glTexEnvxv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexEnvxv, (GLenum target, GLenum pname, const GLfixed *params))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterx(target, pname, param) glatter_glTexParameterx_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterx, (GLenum target, GLenum pname, GLfixed param))
#define glTexParameterxv(target, pname, params) glatter_glTexParameterxv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterxv, (GLenum target, GLenum pname, const GLfixed *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glTranslatef(x, y, z) glatter_glTranslatef_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glTranslatef, (GLfloat x, GLfloat y, GLfloat z))
#define glTranslatex(x, y, z) glatter_glTranslatex_ptr((x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glTranslatex, (GLfixed x, GLfixed y, GLfixed z))
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glViewport(x, y, width, height) glatter_glViewport_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_VERSION_ES_CM_1_0)
#endif // !defined(__GL_H__)
#if defined(__GL_H__)
#if !defined(GL_VERSION_ES_CM_1_0)
#define glAccum(op, value) glatter_glAccum_ptr((op), (value))
GLATTER_UBLOCK(void, APIENTRY, glAccum, (GLenum op, GLfloat value))
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_ptr((func), (ref))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFunc, (GLenum func, GLclampf ref))
#define glAreTexturesResident(n, textures, residences) glatter_glAreTexturesResident_ptr((n), (textures), (residences))
GLATTER_UBLOCK(GLboolean, APIENTRY, glAreTexturesResident, (GLsizei n, const GLuint *textures, GLboolean *residences))
#define glArrayElement(i) glatter_glArrayElement_ptr((i))
GLATTER_UBLOCK(void, APIENTRY, glArrayElement, (GLint i))
#define glBegin(mode) glatter_glBegin_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glBegin, (GLenum mode))
#define glBindTexture(target, texture) glatter_glBindTexture_ptr((target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmap_ptr((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap))
GLATTER_UBLOCK(void, APIENTRY, glBitmap, (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_ptr((sfactor), (dfactor))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glCallList(list) glatter_glCallList_ptr((list))
GLATTER_UBLOCK(void, APIENTRY, glCallList, (GLuint list))
#define glCallLists(n, type, lists) glatter_glCallLists_ptr((n), (type), (lists))
GLATTER_UBLOCK(void, APIENTRY, glCallLists, (GLsizei n, GLenum type, const GLvoid *lists))
#define glClear(mask) glatter_glClear_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glClear, (GLbitfield mask))
#define glClearAccum(red, green, blue, alpha) glatter_glClearAccum_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearAccum, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColor, (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha))
#define glClearDepth(depth) glatter_glClearDepth_ptr((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepth, (GLclampd depth))
#define glClearIndex(c) glatter_glClearIndex_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glClearIndex, (GLfloat c))
#define glClearStencil(s) glatter_glClearStencil_ptr((s))
GLATTER_UBLOCK(void, APIENTRY, glClearStencil, (GLint s))
#define glClipPlane(plane, equation) glatter_glClipPlane_ptr((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glClipPlane, (GLenum plane, const GLdouble *equation))
#define glColor3b(red, green, blue) glatter_glColor3b_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3b, (GLbyte red, GLbyte green, GLbyte blue))
#define glColor3bv(v) glatter_glColor3bv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3bv, (const GLbyte *v))
#define glColor3d(red, green, blue) glatter_glColor3d_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3d, (GLdouble red, GLdouble green, GLdouble blue))
#define glColor3dv(v) glatter_glColor3dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3dv, (const GLdouble *v))
#define glColor3f(red, green, blue) glatter_glColor3f_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3f, (GLfloat red, GLfloat green, GLfloat blue))
#define glColor3fv(v) glatter_glColor3fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3fv, (const GLfloat *v))
#define glColor3i(red, green, blue) glatter_glColor3i_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3i, (GLint red, GLint green, GLint blue))
#define glColor3iv(v) glatter_glColor3iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3iv, (const GLint *v))
#define glColor3s(red, green, blue) glatter_glColor3s_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3s, (GLshort red, GLshort green, GLshort blue))
#define glColor3sv(v) glatter_glColor3sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3sv, (const GLshort *v))
#define glColor3ub(red, green, blue) glatter_glColor3ub_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3ub, (GLubyte red, GLubyte green, GLubyte blue))
#define glColor3ubv(v) glatter_glColor3ubv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3ubv, (const GLubyte *v))
#define glColor3ui(red, green, blue) glatter_glColor3ui_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3ui, (GLuint red, GLuint green, GLuint blue))
#define glColor3uiv(v) glatter_glColor3uiv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3uiv, (const GLuint *v))
#define glColor3us(red, green, blue) glatter_glColor3us_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3us, (GLushort red, GLushort green, GLushort blue))
#define glColor3usv(v) glatter_glColor3usv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3usv, (const GLushort *v))
#define glColor4b(red, green, blue, alpha) glatter_glColor4b_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4b, (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha))
#define glColor4bv(v) glatter_glColor4bv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4bv, (const GLbyte *v))
#define glColor4d(red, green, blue, alpha) glatter_glColor4d_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4d, (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha))
#define glColor4dv(v) glatter_glColor4dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4dv, (const GLdouble *v))
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4f, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glColor4fv(v) glatter_glColor4fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4fv, (const GLfloat *v))
#define glColor4i(red, green, blue, alpha) glatter_glColor4i_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4i, (GLint red, GLint green, GLint blue, GLint alpha))
#define glColor4iv(v) glatter_glColor4iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4iv, (const GLint *v))
#define glColor4s(red, green, blue, alpha) glatter_glColor4s_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4s, (GLshort red, GLshort green, GLshort blue, GLshort alpha))
#define glColor4sv(v) glatter_glColor4sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4sv, (const GLshort *v))
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4ub, (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha))
#define glColor4ubv(v) glatter_glColor4ubv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubv, (const GLubyte *v))
#define glColor4ui(red, green, blue, alpha) glatter_glColor4ui_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4ui, (GLuint red, GLuint green, GLuint blue, GLuint alpha))
#define glColor4uiv(v) glatter_glColor4uiv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4uiv, (const GLuint *v))
#define glColor4us(red, green, blue, alpha) glatter_glColor4us_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4us, (GLushort red, GLushort green, GLushort blue, GLushort alpha))
#define glColor4usv(v) glatter_glColor4usv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4usv, (const GLushort *v))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glColorMaterial(face, mode) glatter_glColorMaterial_ptr((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glColorMaterial, (GLenum face, GLenum mode))
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glColorPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glCopyPixels(x, y, width, height, type) glatter_glCopyPixels_ptr((x), (y), (width), (height), (type))
GLATTER_UBLOCK(void, APIENTRY, glCopyPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type))
#define glCopyTexImage1D(target, level, internalFormat, x, y, width, border) glatter_glCopyTexImage1D_ptr((target), (level), (internalFormat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage1D, (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTexImage2D(target, level, internalFormat, x, y, width, height, border) glatter_glCopyTexImage2D_ptr((target), (level), (internalFormat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_ptr((target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCullFace(mode) glatter_glCullFace_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glCullFace, (GLenum mode))
#define glDeleteLists(list, range) glatter_glDeleteLists_ptr((list), (range))
GLATTER_UBLOCK(void, APIENTRY, glDeleteLists, (GLuint list, GLsizei range))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc_ptr((func))
GLATTER_UBLOCK(void, APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask_ptr((flag))
GLATTER_UBLOCK(void, APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRange(zNear, zFar) glatter_glDepthRange_ptr((zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glDepthRange, (GLclampd zNear, GLclampd zFar))
#define glDisable(cap) glatter_glDisable_ptr((cap))
GLATTER_UBLOCK(void, APIENTRY, glDisable, (GLenum cap))
#define glDisableClientState(array) glatter_glDisableClientState_ptr((array))
GLATTER_UBLOCK(void, APIENTRY, glDisableClientState, (GLenum array))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawBuffer(mode) glatter_glDrawBuffer_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffer, (GLenum mode))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_ptr((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices))
#define glDrawPixels(width, height, format, type, pixels) glatter_glDrawPixels_ptr((width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glDrawPixels, (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glEdgeFlag(flag) glatter_glEdgeFlag_ptr((flag))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlag, (GLboolean flag))
#define glEdgeFlagPointer(stride, pointer) glatter_glEdgeFlagPointer_ptr((stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagPointer, (GLsizei stride, const GLvoid *pointer))
#define glEdgeFlagv(flag) glatter_glEdgeFlagv_ptr((flag))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagv, (const GLboolean *flag))
#define glEnable(cap) glatter_glEnable_ptr((cap))
GLATTER_UBLOCK(void, APIENTRY, glEnable, (GLenum cap))
#define glEnableClientState(array) glatter_glEnableClientState_ptr((array))
GLATTER_UBLOCK(void, APIENTRY, glEnableClientState, (GLenum array))
#define glEnd() glatter_glEnd_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEnd, (void))
#define glEndList() glatter_glEndList_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndList, (void))
#define glEvalCoord1d(u) glatter_glEvalCoord1d_ptr((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1d, (GLdouble u))
#define glEvalCoord1dv(u) glatter_glEvalCoord1dv_ptr((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1dv, (const GLdouble *u))
#define glEvalCoord1f(u) glatter_glEvalCoord1f_ptr((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1f, (GLfloat u))
#define glEvalCoord1fv(u) glatter_glEvalCoord1fv_ptr((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1fv, (const GLfloat *u))
#define glEvalCoord2d(u, v) glatter_glEvalCoord2d_ptr((u), (v))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2d, (GLdouble u, GLdouble v))
#define glEvalCoord2dv(u) glatter_glEvalCoord2dv_ptr((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2dv, (const GLdouble *u))
#define glEvalCoord2f(u, v) glatter_glEvalCoord2f_ptr((u), (v))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2f, (GLfloat u, GLfloat v))
#define glEvalCoord2fv(u) glatter_glEvalCoord2fv_ptr((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2fv, (const GLfloat *u))
#define glEvalMesh1(mode, i1, i2) glatter_glEvalMesh1_ptr((mode), (i1), (i2))
GLATTER_UBLOCK(void, APIENTRY, glEvalMesh1, (GLenum mode, GLint i1, GLint i2))
#define glEvalMesh2(mode, i1, i2, j1, j2) glatter_glEvalMesh2_ptr((mode), (i1), (i2), (j1), (j2))
GLATTER_UBLOCK(void, APIENTRY, glEvalMesh2, (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2))
#define glEvalPoint1(i) glatter_glEvalPoint1_ptr((i))
GLATTER_UBLOCK(void, APIENTRY, glEvalPoint1, (GLint i))
#define glEvalPoint2(i, j) glatter_glEvalPoint2_ptr((i), (j))
GLATTER_UBLOCK(void, APIENTRY, glEvalPoint2, (GLint i, GLint j))
#define glFeedbackBuffer(size, type, buffer) glatter_glFeedbackBuffer_ptr((size), (type), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glFeedbackBuffer, (GLsizei size, GLenum type, GLfloat *buffer))
#define glFinish() glatter_glFinish_ptr()
GLATTER_UBLOCK(void, APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush_ptr()
GLATTER_UBLOCK(void, APIENTRY, glFlush, (void))
#define glFogf(pname, param) glatter_glFogf_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFogf, (GLenum pname, GLfloat param))
#define glFogfv(pname, params) glatter_glFogfv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFogfv, (GLenum pname, const GLfloat *params))
#define glFogi(pname, param) glatter_glFogi_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFogi, (GLenum pname, GLint param))
#define glFogiv(pname, params) glatter_glFogiv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFogiv, (GLenum pname, const GLint *params))
#define glFrontFace(mode) glatter_glFrontFace_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glFrontFace, (GLenum mode))
#define glFrustum(left, right, bottom, top, zNear, zFar) glatter_glFrustum_ptr((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glFrustum, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glGenLists(range) glatter_glGenLists_ptr((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenLists, (GLsizei range))
#define glGenTextures(n, textures) glatter_glGenTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGetBooleanv(pname, params) glatter_glGetBooleanv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *params))
#define glGetClipPlane(plane, equation) glatter_glGetClipPlane_ptr((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glGetClipPlane, (GLenum plane, GLdouble *equation))
#define glGetDoublev(pname, params) glatter_glGetDoublev_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublev, (GLenum pname, GLdouble *params))
#define glGetError() glatter_glGetError_ptr()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetError, (void))
#define glGetFloatv(pname, params) glatter_glGetFloatv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFloatv, (GLenum pname, GLfloat *params))
#define glGetIntegerv(pname, params) glatter_glGetIntegerv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerv, (GLenum pname, GLint *params))
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetLightfv, (GLenum light, GLenum pname, GLfloat *params))
#define glGetLightiv(light, pname, params) glatter_glGetLightiv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetLightiv, (GLenum light, GLenum pname, GLint *params))
#define glGetMapdv(target, query, v) glatter_glGetMapdv_ptr((target), (query), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetMapdv, (GLenum target, GLenum query, GLdouble *v))
#define glGetMapfv(target, query, v) glatter_glGetMapfv_ptr((target), (query), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetMapfv, (GLenum target, GLenum query, GLfloat *v))
#define glGetMapiv(target, query, v) glatter_glGetMapiv_ptr((target), (query), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetMapiv, (GLenum target, GLenum query, GLint *v))
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMaterialfv, (GLenum face, GLenum pname, GLfloat *params))
#define glGetMaterialiv(face, pname, params) glatter_glGetMaterialiv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMaterialiv, (GLenum face, GLenum pname, GLint *params))
#define glGetPixelMapfv(map, values) glatter_glGetPixelMapfv_ptr((map), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelMapfv, (GLenum map, GLfloat *values))
#define glGetPixelMapuiv(map, values) glatter_glGetPixelMapuiv_ptr((map), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelMapuiv, (GLenum map, GLuint *values))
#define glGetPixelMapusv(map, values) glatter_glGetPixelMapusv_ptr((map), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelMapusv, (GLenum map, GLushort *values))
#define glGetPointerv(pname, params) glatter_glGetPointerv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointerv, (GLenum pname, GLvoid* *params))
#define glGetPolygonStipple(mask) glatter_glGetPolygonStipple_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glGetPolygonStipple, (GLubyte *mask))
#define glGetString(name) glatter_glGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetString, (GLenum name))
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexEnvfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexEnviv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexGendv(coord, pname, params) glatter_glGetTexGendv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexGendv, (GLenum coord, GLenum pname, GLdouble *params))
#define glGetTexGenfv(coord, pname, params) glatter_glGetTexGenfv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexGenfv, (GLenum coord, GLenum pname, GLfloat *params))
#define glGetTexGeniv(coord, pname, params) glatter_glGetTexGeniv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexGeniv, (GLenum coord, GLenum pname, GLint *params))
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_ptr((target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint_ptr((target), (mode))
GLATTER_UBLOCK(void, APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIndexMask(mask) glatter_glIndexMask_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glIndexMask, (GLuint mask))
#define glIndexPointer(type, stride, pointer) glatter_glIndexPointer_ptr((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glIndexPointer, (GLenum type, GLsizei stride, const GLvoid *pointer))
#define glIndexd(c) glatter_glIndexd_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexd, (GLdouble c))
#define glIndexdv(c) glatter_glIndexdv_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexdv, (const GLdouble *c))
#define glIndexf(c) glatter_glIndexf_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexf, (GLfloat c))
#define glIndexfv(c) glatter_glIndexfv_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexfv, (const GLfloat *c))
#define glIndexi(c) glatter_glIndexi_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexi, (GLint c))
#define glIndexiv(c) glatter_glIndexiv_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexiv, (const GLint *c))
#define glIndexs(c) glatter_glIndexs_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexs, (GLshort c))
#define glIndexsv(c) glatter_glIndexsv_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexsv, (const GLshort *c))
#define glIndexub(c) glatter_glIndexub_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexub, (GLubyte c))
#define glIndexubv(c) glatter_glIndexubv_ptr((c))
GLATTER_UBLOCK(void, APIENTRY, glIndexubv, (const GLubyte *c))
#define glInitNames() glatter_glInitNames_ptr()
GLATTER_UBLOCK(void, APIENTRY, glInitNames, (void))
#define glInterleavedArrays(format, stride, pointer) glatter_glInterleavedArrays_ptr((format), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glInterleavedArrays, (GLenum format, GLsizei stride, const GLvoid *pointer))
#define glIsEnabled(cap) glatter_glIsEnabled_ptr((cap))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabled, (GLenum cap))
#define glIsList(list) glatter_glIsList_ptr((list))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsList, (GLuint list))
#define glIsTexture(texture) glatter_glIsTexture_ptr((texture))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTexture, (GLuint texture))
#define glLightModelf(pname, param) glatter_glLightModelf_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightModelf, (GLenum pname, GLfloat param))
#define glLightModelfv(pname, params) glatter_glLightModelfv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightModelfv, (GLenum pname, const GLfloat *params))
#define glLightModeli(pname, param) glatter_glLightModeli_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightModeli, (GLenum pname, GLint param))
#define glLightModeliv(pname, params) glatter_glLightModeliv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightModeliv, (GLenum pname, const GLint *params))
#define glLightf(light, pname, param) glatter_glLightf_ptr((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightf, (GLenum light, GLenum pname, GLfloat param))
#define glLightfv(light, pname, params) glatter_glLightfv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightfv, (GLenum light, GLenum pname, const GLfloat *params))
#define glLighti(light, pname, param) glatter_glLighti_ptr((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLighti, (GLenum light, GLenum pname, GLint param))
#define glLightiv(light, pname, params) glatter_glLightiv_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightiv, (GLenum light, GLenum pname, const GLint *params))
#define glLineStipple(factor, pattern) glatter_glLineStipple_ptr((factor), (pattern))
GLATTER_UBLOCK(void, APIENTRY, glLineStipple, (GLint factor, GLushort pattern))
#define glLineWidth(width) glatter_glLineWidth_ptr((width))
GLATTER_UBLOCK(void, APIENTRY, glLineWidth, (GLfloat width))
#define glListBase(base) glatter_glListBase_ptr((base))
GLATTER_UBLOCK(void, APIENTRY, glListBase, (GLuint base))
#define glLoadIdentity() glatter_glLoadIdentity_ptr()
GLATTER_UBLOCK(void, APIENTRY, glLoadIdentity, (void))
#define glLoadMatrixd(m) glatter_glLoadMatrixd_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadMatrixd, (const GLdouble *m))
#define glLoadMatrixf(m) glatter_glLoadMatrixf_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadMatrixf, (const GLfloat *m))
#define glLoadName(name) glatter_glLoadName_ptr((name))
GLATTER_UBLOCK(void, APIENTRY, glLoadName, (GLuint name))
#define glLogicOp(opcode) glatter_glLogicOp_ptr((opcode))
GLATTER_UBLOCK(void, APIENTRY, glLogicOp, (GLenum opcode))
#define glMap1d(target, u1, u2, stride, order, points) glatter_glMap1d_ptr((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap1d, (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points))
#define glMap1f(target, u1, u2, stride, order, points) glatter_glMap1f_ptr((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap1f, (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points))
#define glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2d_ptr((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap2d, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points))
#define glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2f_ptr((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap2f, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points))
#define glMapGrid1d(un, u1, u2) glatter_glMapGrid1d_ptr((un), (u1), (u2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid1d, (GLint un, GLdouble u1, GLdouble u2))
#define glMapGrid1f(un, u1, u2) glatter_glMapGrid1f_ptr((un), (u1), (u2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid1f, (GLint un, GLfloat u1, GLfloat u2))
#define glMapGrid2d(un, u1, u2, vn, v1, v2) glatter_glMapGrid2d_ptr((un), (u1), (u2), (vn), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid2d, (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2))
#define glMapGrid2f(un, u1, u2, vn, v1, v2) glatter_glMapGrid2f_ptr((un), (u1), (u2), (vn), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid2f, (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2))
#define glMaterialf(face, pname, param) glatter_glMaterialf_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMaterialf, (GLenum face, GLenum pname, GLfloat param))
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMaterialfv, (GLenum face, GLenum pname, const GLfloat *params))
#define glMateriali(face, pname, param) glatter_glMateriali_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMateriali, (GLenum face, GLenum pname, GLint param))
#define glMaterialiv(face, pname, params) glatter_glMaterialiv_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMaterialiv, (GLenum face, GLenum pname, const GLint *params))
#define glMatrixMode(mode) glatter_glMatrixMode_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMode, (GLenum mode))
#define glMultMatrixd(m) glatter_glMultMatrixd_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glMultMatrixd, (const GLdouble *m))
#define glMultMatrixf(m) glatter_glMultMatrixf_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glMultMatrixf, (const GLfloat *m))
#define glNewList(list, mode) glatter_glNewList_ptr((list), (mode))
GLATTER_UBLOCK(void, APIENTRY, glNewList, (GLuint list, GLenum mode))
#define glNormal3b(nx, ny, nz) glatter_glNormal3b_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3b, (GLbyte nx, GLbyte ny, GLbyte nz))
#define glNormal3bv(v) glatter_glNormal3bv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3bv, (const GLbyte *v))
#define glNormal3d(nx, ny, nz) glatter_glNormal3d_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3d, (GLdouble nx, GLdouble ny, GLdouble nz))
#define glNormal3dv(v) glatter_glNormal3dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3dv, (const GLdouble *v))
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3f, (GLfloat nx, GLfloat ny, GLfloat nz))
#define glNormal3fv(v) glatter_glNormal3fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3fv, (const GLfloat *v))
#define glNormal3i(nx, ny, nz) glatter_glNormal3i_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3i, (GLint nx, GLint ny, GLint nz))
#define glNormal3iv(v) glatter_glNormal3iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3iv, (const GLint *v))
#define glNormal3s(nx, ny, nz) glatter_glNormal3s_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3s, (GLshort nx, GLshort ny, GLshort nz))
#define glNormal3sv(v) glatter_glNormal3sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3sv, (const GLshort *v))
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer_ptr((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glNormalPointer, (GLenum type, GLsizei stride, const GLvoid *pointer))
#define glOrtho(left, right, bottom, top, zNear, zFar) glatter_glOrtho_ptr((left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glOrtho, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glPassThrough(token) glatter_glPassThrough_ptr((token))
GLATTER_UBLOCK(void, APIENTRY, glPassThrough, (GLfloat token))
#define glPixelMapfv(map, mapsize, values) glatter_glPixelMapfv_ptr((map), (mapsize), (values))
GLATTER_UBLOCK(void, APIENTRY, glPixelMapfv, (GLenum map, GLsizei mapsize, const GLfloat *values))
#define glPixelMapuiv(map, mapsize, values) glatter_glPixelMapuiv_ptr((map), (mapsize), (values))
GLATTER_UBLOCK(void, APIENTRY, glPixelMapuiv, (GLenum map, GLsizei mapsize, const GLuint *values))
#define glPixelMapusv(map, mapsize, values) glatter_glPixelMapusv_ptr((map), (mapsize), (values))
GLATTER_UBLOCK(void, APIENTRY, glPixelMapusv, (GLenum map, GLsizei mapsize, const GLushort *values))
#define glPixelStoref(pname, param) glatter_glPixelStoref_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStoref, (GLenum pname, GLfloat param))
#define glPixelStorei(pname, param) glatter_glPixelStorei_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPixelTransferf(pname, param) glatter_glPixelTransferf_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransferf, (GLenum pname, GLfloat param))
#define glPixelTransferi(pname, param) glatter_glPixelTransferi_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransferi, (GLenum pname, GLint param))
#define glPixelZoom(xfactor, yfactor) glatter_glPixelZoom_ptr((xfactor), (yfactor))
GLATTER_UBLOCK(void, APIENTRY, glPixelZoom, (GLfloat xfactor, GLfloat yfactor))
#define glPointSize(size) glatter_glPointSize_ptr((size))
GLATTER_UBLOCK(void, APIENTRY, glPointSize, (GLfloat size))
#define glPolygonMode(face, mode) glatter_glPolygonMode_ptr((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glPolygonMode, (GLenum face, GLenum mode))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_ptr((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glPolygonStipple(mask) glatter_glPolygonStipple_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glPolygonStipple, (const GLubyte *mask))
#define glPopAttrib() glatter_glPopAttrib_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPopAttrib, (void))
#define glPopClientAttrib() glatter_glPopClientAttrib_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPopClientAttrib, (void))
#define glPopMatrix() glatter_glPopMatrix_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPopMatrix, (void))
#define glPopName() glatter_glPopName_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPopName, (void))
#define glPrioritizeTextures(n, textures, priorities) glatter_glPrioritizeTextures_ptr((n), (textures), (priorities))
GLATTER_UBLOCK(void, APIENTRY, glPrioritizeTextures, (GLsizei n, const GLuint *textures, const GLclampf *priorities))
#define glPushAttrib(mask) glatter_glPushAttrib_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glPushAttrib, (GLbitfield mask))
#define glPushClientAttrib(mask) glatter_glPushClientAttrib_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glPushClientAttrib, (GLbitfield mask))
#define glPushMatrix() glatter_glPushMatrix_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPushMatrix, (void))
#define glPushName(name) glatter_glPushName_ptr((name))
GLATTER_UBLOCK(void, APIENTRY, glPushName, (GLuint name))
#define glRasterPos2d(x, y) glatter_glRasterPos2d_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2d, (GLdouble x, GLdouble y))
#define glRasterPos2dv(v) glatter_glRasterPos2dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2dv, (const GLdouble *v))
#define glRasterPos2f(x, y) glatter_glRasterPos2f_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2f, (GLfloat x, GLfloat y))
#define glRasterPos2fv(v) glatter_glRasterPos2fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2fv, (const GLfloat *v))
#define glRasterPos2i(x, y) glatter_glRasterPos2i_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2i, (GLint x, GLint y))
#define glRasterPos2iv(v) glatter_glRasterPos2iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2iv, (const GLint *v))
#define glRasterPos2s(x, y) glatter_glRasterPos2s_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2s, (GLshort x, GLshort y))
#define glRasterPos2sv(v) glatter_glRasterPos2sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2sv, (const GLshort *v))
#define glRasterPos3d(x, y, z) glatter_glRasterPos3d_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3d, (GLdouble x, GLdouble y, GLdouble z))
#define glRasterPos3dv(v) glatter_glRasterPos3dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3dv, (const GLdouble *v))
#define glRasterPos3f(x, y, z) glatter_glRasterPos3f_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3f, (GLfloat x, GLfloat y, GLfloat z))
#define glRasterPos3fv(v) glatter_glRasterPos3fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3fv, (const GLfloat *v))
#define glRasterPos3i(x, y, z) glatter_glRasterPos3i_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3i, (GLint x, GLint y, GLint z))
#define glRasterPos3iv(v) glatter_glRasterPos3iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3iv, (const GLint *v))
#define glRasterPos3s(x, y, z) glatter_glRasterPos3s_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3s, (GLshort x, GLshort y, GLshort z))
#define glRasterPos3sv(v) glatter_glRasterPos3sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3sv, (const GLshort *v))
#define glRasterPos4d(x, y, z, w) glatter_glRasterPos4d_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glRasterPos4dv(v) glatter_glRasterPos4dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4dv, (const GLdouble *v))
#define glRasterPos4f(x, y, z, w) glatter_glRasterPos4f_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glRasterPos4fv(v) glatter_glRasterPos4fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4fv, (const GLfloat *v))
#define glRasterPos4i(x, y, z, w) glatter_glRasterPos4i_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4i, (GLint x, GLint y, GLint z, GLint w))
#define glRasterPos4iv(v) glatter_glRasterPos4iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4iv, (const GLint *v))
#define glRasterPos4s(x, y, z, w) glatter_glRasterPos4s_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4s, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glRasterPos4sv(v) glatter_glRasterPos4sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4sv, (const GLshort *v))
#define glReadBuffer(mode) glatter_glReadBuffer_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glReadBuffer, (GLenum mode))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_ptr((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels))
#define glRectd(x1, y1, x2, y2) glatter_glRectd_ptr((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRectd, (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2))
#define glRectdv(v1, v2) glatter_glRectdv_ptr((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectdv, (const GLdouble *v1, const GLdouble *v2))
#define glRectf(x1, y1, x2, y2) glatter_glRectf_ptr((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRectf, (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2))
#define glRectfv(v1, v2) glatter_glRectfv_ptr((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectfv, (const GLfloat *v1, const GLfloat *v2))
#define glRecti(x1, y1, x2, y2) glatter_glRecti_ptr((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRecti, (GLint x1, GLint y1, GLint x2, GLint y2))
#define glRectiv(v1, v2) glatter_glRectiv_ptr((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectiv, (const GLint *v1, const GLint *v2))
#define glRects(x1, y1, x2, y2) glatter_glRects_ptr((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRects, (GLshort x1, GLshort y1, GLshort x2, GLshort y2))
#define glRectsv(v1, v2) glatter_glRectsv_ptr((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectsv, (const GLshort *v1, const GLshort *v2))
#define glRenderMode(mode) glatter_glRenderMode_ptr((mode))
GLATTER_UBLOCK(GLint, APIENTRY, glRenderMode, (GLenum mode))
#define glRotated(angle, x, y, z) glatter_glRotated_ptr((angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRotated, (GLdouble angle, GLdouble x, GLdouble y, GLdouble z))
#define glRotatef(angle, x, y, z) glatter_glRotatef_ptr((angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRotatef, (GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glScaled(x, y, z) glatter_glScaled_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glScaled, (GLdouble x, GLdouble y, GLdouble z))
#define glScalef(x, y, z) glatter_glScalef_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glScalef, (GLfloat x, GLfloat y, GLfloat z))
#define glScissor(x, y, width, height) glatter_glScissor_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glSelectBuffer(size, buffer) glatter_glSelectBuffer_ptr((size), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glSelectBuffer, (GLsizei size, GLuint *buffer))
#define glShadeModel(mode) glatter_glShadeModel_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glShadeModel, (GLenum mode))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMask, (GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_ptr((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glTexCoord1d(s) glatter_glTexCoord1d_ptr((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1d, (GLdouble s))
#define glTexCoord1dv(v) glatter_glTexCoord1dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1dv, (const GLdouble *v))
#define glTexCoord1f(s) glatter_glTexCoord1f_ptr((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1f, (GLfloat s))
#define glTexCoord1fv(v) glatter_glTexCoord1fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1fv, (const GLfloat *v))
#define glTexCoord1i(s) glatter_glTexCoord1i_ptr((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1i, (GLint s))
#define glTexCoord1iv(v) glatter_glTexCoord1iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1iv, (const GLint *v))
#define glTexCoord1s(s) glatter_glTexCoord1s_ptr((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1s, (GLshort s))
#define glTexCoord1sv(v) glatter_glTexCoord1sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1sv, (const GLshort *v))
#define glTexCoord2d(s, t) glatter_glTexCoord2d_ptr((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2d, (GLdouble s, GLdouble t))
#define glTexCoord2dv(v) glatter_glTexCoord2dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2dv, (const GLdouble *v))
#define glTexCoord2f(s, t) glatter_glTexCoord2f_ptr((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2f, (GLfloat s, GLfloat t))
#define glTexCoord2fv(v) glatter_glTexCoord2fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fv, (const GLfloat *v))
#define glTexCoord2i(s, t) glatter_glTexCoord2i_ptr((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2i, (GLint s, GLint t))
#define glTexCoord2iv(v) glatter_glTexCoord2iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2iv, (const GLint *v))
#define glTexCoord2s(s, t) glatter_glTexCoord2s_ptr((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2s, (GLshort s, GLshort t))
#define glTexCoord2sv(v) glatter_glTexCoord2sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2sv, (const GLshort *v))
#define glTexCoord3d(s, t, r) glatter_glTexCoord3d_ptr((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3d, (GLdouble s, GLdouble t, GLdouble r))
#define glTexCoord3dv(v) glatter_glTexCoord3dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3dv, (const GLdouble *v))
#define glTexCoord3f(s, t, r) glatter_glTexCoord3f_ptr((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3f, (GLfloat s, GLfloat t, GLfloat r))
#define glTexCoord3fv(v) glatter_glTexCoord3fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3fv, (const GLfloat *v))
#define glTexCoord3i(s, t, r) glatter_glTexCoord3i_ptr((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3i, (GLint s, GLint t, GLint r))
#define glTexCoord3iv(v) glatter_glTexCoord3iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3iv, (const GLint *v))
#define glTexCoord3s(s, t, r) glatter_glTexCoord3s_ptr((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3s, (GLshort s, GLshort t, GLshort r))
#define glTexCoord3sv(v) glatter_glTexCoord3sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3sv, (const GLshort *v))
#define glTexCoord4d(s, t, r, q) glatter_glTexCoord4d_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4d, (GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glTexCoord4dv(v) glatter_glTexCoord4dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4dv, (const GLdouble *v))
#define glTexCoord4f(s, t, r, q) glatter_glTexCoord4f_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4f, (GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glTexCoord4fv(v) glatter_glTexCoord4fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fv, (const GLfloat *v))
#define glTexCoord4i(s, t, r, q) glatter_glTexCoord4i_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4i, (GLint s, GLint t, GLint r, GLint q))
#define glTexCoord4iv(v) glatter_glTexCoord4iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4iv, (const GLint *v))
#define glTexCoord4s(s, t, r, q) glatter_glTexCoord4s_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4s, (GLshort s, GLshort t, GLshort r, GLshort q))
#define glTexCoord4sv(v) glatter_glTexCoord4sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4sv, (const GLshort *v))
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvf, (GLenum target, GLenum pname, GLfloat param))
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvi, (GLenum target, GLenum pname, GLint param))
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexEnviv, (GLenum target, GLenum pname, const GLint *params))
#define glTexGend(coord, pname, param) glatter_glTexGend_ptr((coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexGend, (GLenum coord, GLenum pname, GLdouble param))
#define glTexGendv(coord, pname, params) glatter_glTexGendv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexGendv, (GLenum coord, GLenum pname, const GLdouble *params))
#define glTexGenf(coord, pname, param) glatter_glTexGenf_ptr((coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexGenf, (GLenum coord, GLenum pname, GLfloat param))
#define glTexGenfv(coord, pname, params) glatter_glTexGenfv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexGenfv, (GLenum coord, GLenum pname, const GLfloat *params))
#define glTexGeni(coord, pname, param) glatter_glTexGeni_ptr((coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexGeni, (GLenum coord, GLenum pname, GLint param))
#define glTexGeniv(coord, pname, params) glatter_glTexGeniv_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexGeniv, (GLenum coord, GLenum pname, const GLint *params))
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D_ptr((target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage1D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_ptr((target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels))
#define glTranslated(x, y, z) glatter_glTranslated_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTranslated, (GLdouble x, GLdouble y, GLdouble z))
#define glTranslatef(x, y, z) glatter_glTranslatef_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTranslatef, (GLfloat x, GLfloat y, GLfloat z))
#define glVertex2d(x, y) glatter_glVertex2d_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2d, (GLdouble x, GLdouble y))
#define glVertex2dv(v) glatter_glVertex2dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2dv, (const GLdouble *v))
#define glVertex2f(x, y) glatter_glVertex2f_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2f, (GLfloat x, GLfloat y))
#define glVertex2fv(v) glatter_glVertex2fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2fv, (const GLfloat *v))
#define glVertex2i(x, y) glatter_glVertex2i_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2i, (GLint x, GLint y))
#define glVertex2iv(v) glatter_glVertex2iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2iv, (const GLint *v))
#define glVertex2s(x, y) glatter_glVertex2s_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2s, (GLshort x, GLshort y))
#define glVertex2sv(v) glatter_glVertex2sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2sv, (const GLshort *v))
#define glVertex3d(x, y, z) glatter_glVertex3d_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3d, (GLdouble x, GLdouble y, GLdouble z))
#define glVertex3dv(v) glatter_glVertex3dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3dv, (const GLdouble *v))
#define glVertex3f(x, y, z) glatter_glVertex3f_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3f, (GLfloat x, GLfloat y, GLfloat z))
#define glVertex3fv(v) glatter_glVertex3fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3fv, (const GLfloat *v))
#define glVertex3i(x, y, z) glatter_glVertex3i_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3i, (GLint x, GLint y, GLint z))
#define glVertex3iv(v) glatter_glVertex3iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3iv, (const GLint *v))
#define glVertex3s(x, y, z) glatter_glVertex3s_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3s, (GLshort x, GLshort y, GLshort z))
#define glVertex3sv(v) glatter_glVertex3sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3sv, (const GLshort *v))
#define glVertex4d(x, y, z, w) glatter_glVertex4d_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertex4dv(v) glatter_glVertex4dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4dv, (const GLdouble *v))
#define glVertex4f(x, y, z, w) glatter_glVertex4f_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertex4fv(v) glatter_glVertex4fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4fv, (const GLfloat *v))
#define glVertex4i(x, y, z, w) glatter_glVertex4i_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4i, (GLint x, GLint y, GLint z, GLint w))
#define glVertex4iv(v) glatter_glVertex4iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4iv, (const GLint *v))
#define glVertex4s(x, y, z, w) glatter_glVertex4s_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4s, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertex4sv(v) glatter_glVertex4sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4sv, (const GLshort *v))
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexPointer, (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer))
#define glViewport(x, y, width, height) glatter_glViewport_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(__gl_h_)
#endif // !defined(GL_VERSION_ES_CM_1_0)
#endif // defined(__GL_H__)
#if defined(__gl2_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAttachShader(program, shader) glatter_glAttachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_ptr((program), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBindBuffer(target, buffer) glatter_glBindBuffer_ptr((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_ptr((target), (framebuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_ptr((target), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindTexture(target, texture) glatter_glBindTexture_ptr((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_ptr((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_ptr((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_ptr((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glBufferData(target, size, data, usage) glatter_glBufferData_ptr((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_ptr((target))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClear(mask) glatter_glClear_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepthf(d) glatter_glClearDepthf_ptr((d))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLfloat d))
#define glClearStencil(s) glatter_glClearStencil_ptr((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCompileShader(shader) glatter_glCompileShader_ptr((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompileShader, (GLuint shader))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_ptr((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateProgram() glatter_glCreateProgram_ptr()
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader_ptr((type))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShader, (GLenum type))
#define glCullFace(mode) glatter_glCullFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteProgram(program) glatter_glDeleteProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteShader(shader) glatter_glDeleteShader_ptr((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteShader, (GLuint shader))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc_ptr((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask_ptr((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(n, f) glatter_glDepthRangef_ptr((n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glDetachShader(program, shader) glatter_glDetachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisable(cap) glatter_glDisable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_ptr((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glEnable(cap) glatter_glEnable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glFinish() glatter_glFinish_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_ptr((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFrontFace(mode) glatter_glFrontFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glGenBuffers(n, buffers) glatter_glGenBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenTextures(n, textures) glatter_glGenTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGenerateMipmap(target) glatter_glGenerateMipmap_ptr((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_ptr((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetError() glatter_glGetError_ptr()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_ptr((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_ptr((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_ptr((program), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_ptr((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_ptr((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_ptr((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_ptr((shader), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetString(name) glatter_glGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_ptr((index), (pname), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint_ptr((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer_ptr((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled_ptr((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_ptr((framebuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsProgram(program) glatter_glIsProgram_ptr((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgram, (GLuint program))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_ptr((renderbuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsShader(shader) glatter_glIsShader_ptr((shader))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsShader, (GLuint shader))
#define glIsTexture(texture) glatter_glIsTexture_ptr((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLineWidth(width) glatter_glLineWidth_ptr((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLinkProgram(program) glatter_glLinkProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glLinkProgram, (GLuint program))
#define glPixelStorei(pname, param) glatter_glPixelStorei_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_ptr((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_ptr((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glReleaseShaderCompiler, (void))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_ptr((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_ptr((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#define glScissor(x, y, width, height) glatter_glScissor_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_ptr((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_ptr((shader), (count), (string), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_ptr((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_ptr((face), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_ptr((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_ptr((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glUniform1f(location, v0) glatter_glUniform1f_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_ptr((index), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_ptr((index), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_ptr((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#define glViewport(x, y, width, height) glatter_glViewport_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_ES_VERSION_2_0)
#endif // defined(__gl2_h_)
#if defined(__gl2ext_h_)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_ptr((monitor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginPerfMonitorAMD, (GLuint monitor))
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_ptr((n), (monitors))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeletePerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_ptr((monitor))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndPerfMonitorAMD, (GLuint monitor))
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_ptr((n), (monitors))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenPerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_ptr((monitor), (pname), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorCounterDataAMD, (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten))
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_ptr((group), (counter), (pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorCounterInfoAMD, (GLuint group, GLuint counter, GLenum pname, void *data))
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_ptr((group), (counter), (bufSize), (length), (counterString))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorCounterStringAMD, (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString))
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_ptr((group), (numCounters), (maxActiveCounters), (counterSize), (counters))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorCountersAMD, (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters))
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_ptr((group), (bufSize), (length), (groupString))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorGroupStringAMD, (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString))
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_ptr((numGroups), (groupsSize), (groups))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfMonitorGroupsAMD, (GLint *numGroups, GLsizei groupsSize, GLuint *groups))
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_ptr((monitor), (enable), (group), (numCounters), (counterList))
GLATTER_UBLOCK(void, GL_APIENTRY, glSelectPerfMonitorCountersAMD, (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList))
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_ANGLE_framebuffer_blit)
#define glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferANGLE_ptr((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebufferANGLE, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#endif // defined(GL_ANGLE_framebuffer_blit)
#if defined(GL_ANGLE_framebuffer_multisample)
#define glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleANGLE_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleANGLE, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_ANGLE_framebuffer_multisample)
#if defined(GL_ANGLE_instanced_arrays)
#define glDrawArraysInstancedANGLE(mode, first, count, primcount) glatter_glDrawArraysInstancedANGLE_ptr((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstancedANGLE, (GLenum mode, GLint first, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedANGLE_ptr((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedANGLE, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#define glVertexAttribDivisorANGLE(index, divisor) glatter_glVertexAttribDivisorANGLE_ptr((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisorANGLE, (GLuint index, GLuint divisor))
#endif // defined(GL_ANGLE_instanced_arrays)
#if defined(GL_ANGLE_translated_shader_source)
#define glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source) glatter_glGetTranslatedShaderSourceANGLE_ptr((shader), (bufsize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTranslatedShaderSourceANGLE, (GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source))
#endif // defined(GL_ANGLE_translated_shader_source)
#if defined(GL_APPLE_copy_texture_levels)
#define glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) glatter_glCopyTextureLevelsAPPLE_ptr((destinationTexture), (sourceTexture), (sourceBaseLevel), (sourceLevelCount))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTextureLevelsAPPLE, (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount))
#endif // defined(GL_APPLE_copy_texture_levels)
#if defined(GL_APPLE_framebuffer_multisample)
#define glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleAPPLE_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleAPPLE, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glResolveMultisampleFramebufferAPPLE() glatter_glResolveMultisampleFramebufferAPPLE_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glResolveMultisampleFramebufferAPPLE, (void))
#endif // defined(GL_APPLE_framebuffer_multisample)
#if defined(GL_APPLE_sync)
#define glClientWaitSyncAPPLE(sync, flags, timeout) glatter_glClientWaitSyncAPPLE_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glClientWaitSyncAPPLE, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glDeleteSyncAPPLE(sync) glatter_glDeleteSyncAPPLE_ptr((sync))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSyncAPPLE, (GLsync sync))
#define glFenceSyncAPPLE(condition, flags) glatter_glFenceSyncAPPLE_ptr((condition), (flags))
GLATTER_UBLOCK(GLsync, GL_APIENTRY, glFenceSyncAPPLE, (GLenum condition, GLbitfield flags))
#define glGetInteger64vAPPLE(pname, params) glatter_glGetInteger64vAPPLE_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64vAPPLE, (GLenum pname, GLint64 *params))
#define glGetSyncivAPPLE(sync, pname, bufSize, length, values) glatter_glGetSyncivAPPLE_ptr((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSyncivAPPLE, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glIsSyncAPPLE(sync) glatter_glIsSyncAPPLE_ptr((sync))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSyncAPPLE, (GLsync sync))
#define glWaitSyncAPPLE(sync, flags, timeout) glatter_glWaitSyncAPPLE_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(void, GL_APIENTRY, glWaitSyncAPPLE, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_APPLE_sync)
#if defined(GL_EXT_base_instance)
#define glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstanceEXT_ptr((mode), (first), (count), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstancedBaseInstanceEXT, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstanceEXT_ptr((mode), (count), (type), (indices), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseInstanceEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstanceEXT_ptr((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseVertexBaseInstanceEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance))
#endif // defined(GL_EXT_base_instance)
#if defined(GL_EXT_blend_func_extended)
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT_ptr((program), (color), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFragDataLocationEXT, (GLuint program, GLuint color, const GLchar *name))
#define glBindFragDataLocationIndexedEXT(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexedEXT_ptr((program), (colorNumber), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFragDataLocationIndexedEXT, (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name))
#define glGetFragDataIndexEXT(program, name) glatter_glGetFragDataIndexEXT_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetFragDataIndexEXT, (GLuint program, const GLchar *name))
#define glGetProgramResourceLocationIndexEXT(program, programInterface, name) glatter_glGetProgramResourceLocationIndexEXT_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetProgramResourceLocationIndexEXT, (GLuint program, GLenum programInterface, const GLchar *name))
#endif // defined(GL_EXT_blend_func_extended)
#if defined(GL_EXT_buffer_storage)
#define glBufferStorageEXT(target, size, data, flags) glatter_glBufferStorageEXT_ptr((target), (size), (data), (flags))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferStorageEXT, (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags))
#endif // defined(GL_EXT_buffer_storage)
#if defined(GL_EXT_clear_texture)
#define glClearTexImageEXT(texture, level, format, type, data) glatter_glClearTexImageEXT_ptr((texture), (level), (format), (type), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearTexImageEXT, (GLuint texture, GLint level, GLenum format, GLenum type, const void *data))
#define glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImageEXT_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearTexSubImageEXT, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#endif // defined(GL_EXT_clear_texture)
#if defined(GL_EXT_copy_image)
#define glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataEXT_ptr((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyImageSubDataEXT, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#endif // defined(GL_EXT_copy_image)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_ptr((type), (object), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectLabelEXT, (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_ptr((type), (object), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glLabelObjectEXT, (GLenum type, GLuint object, GLsizei length, const GLchar *label))
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_ptr((length), (marker))
GLATTER_UBLOCK(void, GL_APIENTRY, glInsertEventMarkerEXT, (GLsizei length, const GLchar *marker))
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glPopGroupMarkerEXT, (void))
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_ptr((length), (marker))
GLATTER_UBLOCK(void, GL_APIENTRY, glPushGroupMarkerEXT, (GLsizei length, const GLchar *marker))
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_discard_framebuffer)
#define glDiscardFramebufferEXT(target, numAttachments, attachments) glatter_glDiscardFramebufferEXT_ptr((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, GL_APIENTRY, glDiscardFramebufferEXT, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#endif // defined(GL_EXT_discard_framebuffer)
#if defined(GL_EXT_disjoint_timer_query)
#define glBeginQueryEXT(target, id) glatter_glBeginQueryEXT_ptr((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginQueryEXT, (GLenum target, GLuint id))
#define glDeleteQueriesEXT(n, ids) glatter_glDeleteQueriesEXT_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteQueriesEXT, (GLsizei n, const GLuint *ids))
#define glEndQueryEXT(target) glatter_glEndQueryEXT_ptr((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndQueryEXT, (GLenum target))
#define glGenQueriesEXT(n, ids) glatter_glGenQueriesEXT_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenQueriesEXT, (GLsizei n, GLuint *ids))
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjecti64vEXT, (GLuint id, GLenum pname, GLint64 *params))
#define glGetQueryObjectivEXT(id, pname, params) glatter_glGetQueryObjectivEXT_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectivEXT, (GLuint id, GLenum pname, GLint *params))
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectui64vEXT, (GLuint id, GLenum pname, GLuint64 *params))
#define glGetQueryObjectuivEXT(id, pname, params) glatter_glGetQueryObjectuivEXT_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectuivEXT, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryivEXT(target, pname, params) glatter_glGetQueryivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryivEXT, (GLenum target, GLenum pname, GLint *params))
#define glIsQueryEXT(id) glatter_glIsQueryEXT_ptr((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsQueryEXT, (GLuint id))
#define glQueryCounterEXT(id, target) glatter_glQueryCounterEXT_ptr((id), (target))
GLATTER_UBLOCK(void, GL_APIENTRY, glQueryCounterEXT, (GLuint id, GLenum target))
#endif // defined(GL_EXT_disjoint_timer_query)
#if defined(GL_EXT_draw_buffers)
#define glDrawBuffersEXT(n, bufs) glatter_glDrawBuffersEXT_ptr((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffersEXT, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_EXT_draw_buffers)
#if defined(GL_EXT_draw_buffers_indexed)
#define glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiEXT_ptr((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparateiEXT, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationiEXT(buf, mode) glatter_glBlendEquationiEXT_ptr((buf), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationiEXT, (GLuint buf, GLenum mode))
#define glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiEXT_ptr((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparateiEXT, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunciEXT(buf, src, dst) glatter_glBlendFunciEXT_ptr((buf), (src), (dst))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunciEXT, (GLuint buf, GLenum src, GLenum dst))
#define glColorMaskiEXT(index, r, g, b, a) glatter_glColorMaskiEXT_ptr((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMaskiEXT, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glDisableiEXT(target, index) glatter_glDisableiEXT_ptr((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableiEXT, (GLenum target, GLuint index))
#define glEnableiEXT(target, index) glatter_glEnableiEXT_ptr((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableiEXT, (GLenum target, GLuint index))
#define glIsEnablediEXT(target, index) glatter_glIsEnablediEXT_ptr((target), (index))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnablediEXT, (GLenum target, GLuint index))
#endif // defined(GL_EXT_draw_buffers_indexed)
#if defined(GL_EXT_draw_elements_base_vertex)
#define glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexEXT_ptr((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsBaseVertexEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexEXT_ptr((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseVertexEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexEXT_ptr((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElementsBaseVertexEXT, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex) glatter_glMultiDrawElementsBaseVertexEXT_ptr((mode), (count), (type), (indices), (primcount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawElementsBaseVertexEXT, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex))
#endif // defined(GL_EXT_draw_elements_base_vertex)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_ptr((mode), (start), (count), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstancedEXT, (GLenum mode, GLint start, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_ptr((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_transform_feedback)
#define glDrawTransformFeedbackEXT(mode, id) glatter_glDrawTransformFeedbackEXT_ptr((mode), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTransformFeedbackEXT, (GLenum mode, GLuint id))
#define glDrawTransformFeedbackInstancedEXT(mode, id, instancecount) glatter_glDrawTransformFeedbackInstancedEXT_ptr((mode), (id), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawTransformFeedbackInstancedEXT, (GLenum mode, GLuint id, GLsizei instancecount))
#endif // defined(GL_EXT_draw_transform_feedback)
#if defined(GL_EXT_geometry_shader)
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT_ptr((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#endif // defined(GL_EXT_geometry_shader)
#if defined(GL_EXT_instanced_arrays)
#define glVertexAttribDivisorEXT(index, divisor) glatter_glVertexAttribDivisorEXT_ptr((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisorEXT, (GLuint index, GLuint divisor))
#endif // defined(GL_EXT_instanced_arrays)
#if defined(GL_EXT_map_buffer_range)
#define glFlushMappedBufferRangeEXT(target, offset, length) glatter_glFlushMappedBufferRangeEXT_ptr((target), (offset), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glFlushMappedBufferRangeEXT, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glMapBufferRangeEXT(target, offset, length, access) glatter_glMapBufferRangeEXT_ptr((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferRangeEXT, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#endif // defined(GL_EXT_map_buffer_range)
#if defined(GL_EXT_multi_draw_arrays)
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT_ptr((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawArraysEXT, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT_ptr((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawElementsEXT, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount))
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multi_draw_indirect)
#define glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirectEXT_ptr((mode), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawArraysIndirectEXT, (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirectEXT_ptr((mode), (type), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawElementsIndirectEXT, (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride))
#endif // defined(GL_EXT_multi_draw_indirect)
#if defined(GL_EXT_multisampled_render_to_texture)
#define glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleEXT_ptr((target), (attachment), (textarget), (texture), (level), (samples))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2DMultisampleEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples))
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_multisampled_render_to_texture)
#if defined(GL_EXT_multiview_draw_buffers)
#define glDrawBuffersIndexedEXT(n, location, indices) glatter_glDrawBuffersIndexedEXT_ptr((n), (location), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffersIndexedEXT, (GLint n, const GLenum *location, const GLint *indices))
#define glGetIntegeri_vEXT(target, index, data) glatter_glGetIntegeri_vEXT_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegeri_vEXT, (GLenum target, GLuint index, GLint *data))
#define glReadBufferIndexedEXT(src, index) glatter_glReadBufferIndexedEXT_ptr((src), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBufferIndexedEXT, (GLenum src, GLint index))
#endif // defined(GL_EXT_multiview_draw_buffers)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_ptr((factor), (units), (clamp))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffsetClampEXT, (GLfloat factor, GLfloat units, GLfloat clamp))
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_primitive_bounding_box)
#define glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxEXT_ptr((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
GLATTER_UBLOCK(void, GL_APIENTRY, glPrimitiveBoundingBoxEXT, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#endif // defined(GL_EXT_primitive_bounding_box)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_ptr((samples), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glRasterSamplesEXT, (GLuint samples, GLboolean fixedsamplelocations))
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_robustness)
#define glGetGraphicsResetStatusEXT() glatter_glGetGraphicsResetStatusEXT_ptr()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetGraphicsResetStatusEXT, (void))
#define glGetnUniformfvEXT(program, location, bufSize, params) glatter_glGetnUniformfvEXT_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformfvEXT, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformivEXT(program, location, bufSize, params) glatter_glGetnUniformivEXT_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformivEXT, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsEXT_ptr((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadnPixelsEXT, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_EXT_robustness)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveShaderProgramEXT(pipeline, program) glatter_glActiveShaderProgramEXT_ptr((pipeline), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveShaderProgramEXT, (GLuint pipeline, GLuint program))
#define glBindProgramPipelineEXT(pipeline) glatter_glBindProgramPipelineEXT_ptr((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindProgramPipelineEXT, (GLuint pipeline))
#define glCreateShaderProgramvEXT(type, count, strings) glatter_glCreateShaderProgramvEXT_ptr((type), (count), (strings))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShaderProgramvEXT, (GLenum type, GLsizei count, const GLchar **strings))
#define glDeleteProgramPipelinesEXT(n, pipelines) glatter_glDeleteProgramPipelinesEXT_ptr((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgramPipelinesEXT, (GLsizei n, const GLuint *pipelines))
#define glGenProgramPipelinesEXT(n, pipelines) glatter_glGenProgramPipelinesEXT_ptr((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenProgramPipelinesEXT, (GLsizei n, GLuint *pipelines))
#define glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLogEXT_ptr((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineInfoLogEXT, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineivEXT(pipeline, pname, params) glatter_glGetProgramPipelineivEXT_ptr((pipeline), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineivEXT, (GLuint pipeline, GLenum pname, GLint *params))
#define glIsProgramPipelineEXT(pipeline) glatter_glIsProgramPipelineEXT_ptr((pipeline))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgramPipelineEXT, (GLuint pipeline))
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT_ptr((program), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramParameteriEXT, (GLuint program, GLenum pname, GLint value))
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1fEXT, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1iEXT, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1uiEXT, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2iEXT, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgramStagesEXT(pipeline, stages, program) glatter_glUseProgramStagesEXT_ptr((pipeline), (stages), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgramStagesEXT, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipelineEXT(pipeline) glatter_glValidateProgramPipelineEXT_ptr((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgramPipelineEXT, (GLuint pipeline))
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_pixel_local_storage2)
#define glClearPixelLocalStorageuiEXT(offset, n, values) glatter_glClearPixelLocalStorageuiEXT_ptr((offset), (n), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearPixelLocalStorageuiEXT, (GLsizei offset, GLsizei n, const GLuint *values))
#define glFramebufferPixelLocalStorageSizeEXT(target, size) glatter_glFramebufferPixelLocalStorageSizeEXT_ptr((target), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferPixelLocalStorageSizeEXT, (GLuint target, GLsizei size))
#define glGetFramebufferPixelLocalStorageSizeEXT(target) glatter_glGetFramebufferPixelLocalStorageSizeEXT_ptr((target))
GLATTER_UBLOCK(GLsizei, GL_APIENTRY, glGetFramebufferPixelLocalStorageSizeEXT, (GLuint target))
#endif // defined(GL_EXT_shader_pixel_local_storage2)
#if defined(GL_EXT_sparse_texture)
#define glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentEXT_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexPageCommitmentEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#endif // defined(GL_EXT_sparse_texture)
#if defined(GL_EXT_tessellation_shader)
#define glPatchParameteriEXT(pname, value) glatter_glPatchParameteriEXT_ptr((pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPatchParameteriEXT, (GLenum pname, GLint value))
#endif // defined(GL_EXT_tessellation_shader)
#if defined(GL_EXT_texture_border_clamp)
#define glGetSamplerParameterIivEXT(sampler, pname, params) glatter_glGetSamplerParameterIivEXT_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIivEXT, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuivEXT(sampler, pname, params) glatter_glGetSamplerParameterIuivEXT_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIuivEXT, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIivEXT, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIuivEXT, (GLenum target, GLenum pname, GLuint *params))
#define glSamplerParameterIivEXT(sampler, pname, param) glatter_glSamplerParameterIivEXT_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIivEXT, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuivEXT(sampler, pname, param) glatter_glSamplerParameterIuivEXT_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIuivEXT, (GLuint sampler, GLenum pname, const GLuint *param))
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIivEXT, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIuivEXT, (GLenum target, GLenum pname, const GLuint *params))
#endif // defined(GL_EXT_texture_border_clamp)
#if defined(GL_EXT_texture_buffer)
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT_ptr((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferEXT, (GLenum target, GLenum internalformat, GLuint buffer))
#define glTexBufferRangeEXT(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeEXT_ptr((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferRangeEXT, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#endif // defined(GL_EXT_texture_buffer)
#if defined(GL_EXT_texture_storage)
#define glTexStorage1DEXT(target, levels, internalformat, width) glatter_glTexStorage1DEXT_ptr((target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage1DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTexStorage2DEXT(target, levels, internalformat, width, height) glatter_glTexStorage2DEXT_ptr((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3DEXT(target, levels, internalformat, width, height, depth) glatter_glTexStorage3DEXT_ptr((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT_ptr((texture), (target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureStorage1DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT_ptr((texture), (target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureStorage2DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT_ptr((texture), (target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureStorage3DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_EXT_texture_storage)
#if defined(GL_EXT_texture_view)
#define glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewEXT_ptr((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureViewEXT, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#endif // defined(GL_EXT_texture_view)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_ptr((mode), (count), (box))
GLATTER_UBLOCK(void, GL_APIENTRY, glWindowRectanglesEXT, (GLenum mode, GLsizei count, const GLint *box))
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_IMG_bindless_texture)
#define glGetTextureHandleIMG(texture) glatter_glGetTextureHandleIMG_ptr((texture))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetTextureHandleIMG, (GLuint texture))
#define glGetTextureSamplerHandleIMG(texture, sampler) glatter_glGetTextureSamplerHandleIMG_ptr((texture), (sampler))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetTextureSamplerHandleIMG, (GLuint texture, GLuint sampler))
#define glProgramUniformHandleui64IMG(program, location, value) glatter_glProgramUniformHandleui64IMG_ptr((program), (location), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformHandleui64IMG, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vIMG(program, location, count, values) glatter_glProgramUniformHandleui64vIMG_ptr((program), (location), (count), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformHandleui64vIMG, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64IMG(location, value) glatter_glUniformHandleui64IMG_ptr((location), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformHandleui64IMG, (GLint location, GLuint64 value))
#define glUniformHandleui64vIMG(location, count, value) glatter_glUniformHandleui64vIMG_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformHandleui64vIMG, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_IMG_bindless_texture)
#if defined(GL_IMG_framebuffer_downsample)
#define glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale) glatter_glFramebufferTexture2DDownsampleIMG_ptr((target), (attachment), (textarget), (texture), (level), (xscale), (yscale))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2DDownsampleIMG, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale))
#define glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale) glatter_glFramebufferTextureLayerDownsampleIMG_ptr((target), (attachment), (texture), (level), (layer), (xscale), (yscale))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureLayerDownsampleIMG, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale))
#endif // defined(GL_IMG_framebuffer_downsample)
#if defined(GL_IMG_multisampled_render_to_texture)
#define glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleIMG_ptr((target), (attachment), (textarget), (texture), (level), (samples))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2DMultisampleIMG, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples))
#define glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleIMG_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleIMG, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_IMG_multisampled_render_to_texture)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glApplyFramebufferAttachmentCMAAINTEL, (void))
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_ptr((queryHandle))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginPerfQueryINTEL, (GLuint queryHandle))
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_ptr((queryId), (queryHandle))
GLATTER_UBLOCK(void, GL_APIENTRY, glCreatePerfQueryINTEL, (GLuint queryId, GLuint *queryHandle))
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_ptr((queryHandle))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeletePerfQueryINTEL, (GLuint queryHandle))
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_ptr((queryHandle))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndPerfQueryINTEL, (GLuint queryHandle))
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_ptr((queryId))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFirstPerfQueryIdINTEL, (GLuint *queryId))
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_ptr((queryId), (nextQueryId))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetNextPerfQueryIdINTEL, (GLuint queryId, GLuint *nextQueryId))
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_ptr((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfCounterInfoINTEL, (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue))
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_ptr((queryHandle), (flags), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfQueryDataINTEL, (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten))
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_ptr((queryName), (queryId))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfQueryIdByNameINTEL, (GLchar *queryName, GLuint *queryId))
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_ptr((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPerfQueryInfoINTEL, (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask))
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendBarrierKHR, (void))
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_debug)
#define glDebugMessageCallbackKHR(callback, userParam) glatter_glDebugMessageCallbackKHR_ptr((callback), (userParam))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageCallbackKHR, (GLDEBUGPROCKHR callback, const void *userParam))
#define glDebugMessageControlKHR(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlKHR_ptr((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageControlKHR, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsertKHR(source, type, id, severity, length, buf) glatter_glDebugMessageInsertKHR_ptr((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageInsertKHR, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogKHR_ptr((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetDebugMessageLogKHR, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#define glGetObjectLabelKHR(identifier, name, bufSize, length, label) glatter_glGetObjectLabelKHR_ptr((identifier), (name), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectLabelKHR, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetObjectPtrLabelKHR(ptr, bufSize, length, label) glatter_glGetObjectPtrLabelKHR_ptr((ptr), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectPtrLabelKHR, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetPointervKHR(pname, params) glatter_glGetPointervKHR_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPointervKHR, (GLenum pname, void **params))
#define glObjectLabelKHR(identifier, name, length, label) glatter_glObjectLabelKHR_ptr((identifier), (name), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glObjectLabelKHR, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#define glObjectPtrLabelKHR(ptr, length, label) glatter_glObjectPtrLabelKHR_ptr((ptr), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glObjectPtrLabelKHR, (const void *ptr, GLsizei length, const GLchar *label))
#define glPopDebugGroupKHR() glatter_glPopDebugGroupKHR_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glPopDebugGroupKHR, (void))
#define glPushDebugGroupKHR(source, id, length, message) glatter_glPushDebugGroupKHR_ptr((source), (id), (length), (message))
GLATTER_UBLOCK(void, GL_APIENTRY, glPushDebugGroupKHR, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#endif // defined(GL_KHR_debug)
#if defined(GL_KHR_robustness)
#define glGetGraphicsResetStatusKHR() glatter_glGetGraphicsResetStatusKHR_ptr()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetGraphicsResetStatusKHR, (void))
#define glGetnUniformfvKHR(program, location, bufSize, params) glatter_glGetnUniformfvKHR_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformfvKHR, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformivKHR(program, location, bufSize, params) glatter_glGetnUniformivKHR_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformivKHR, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuivKHR(program, location, bufSize, params) glatter_glGetnUniformuivKHR_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformuivKHR, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsKHR_ptr((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadnPixelsKHR, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_KHR_robustness)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_ptr((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetImageHandleNV, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_ptr((texture))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetTextureHandleNV, (GLuint texture))
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_ptr((texture), (sampler))
GLATTER_UBLOCK(GLuint64, GL_APIENTRY, glGetTextureSamplerHandleNV, (GLuint texture, GLuint sampler))
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_ptr((handle))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsImageHandleResidentNV, (GLuint64 handle))
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_ptr((handle))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTextureHandleResidentNV, (GLuint64 handle))
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_ptr((handle))
GLATTER_UBLOCK(void, GL_APIENTRY, glMakeImageHandleNonResidentNV, (GLuint64 handle))
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_ptr((handle), (access))
GLATTER_UBLOCK(void, GL_APIENTRY, glMakeImageHandleResidentNV, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_ptr((handle))
GLATTER_UBLOCK(void, GL_APIENTRY, glMakeTextureHandleNonResidentNV, (GLuint64 handle))
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_ptr((handle))
GLATTER_UBLOCK(void, GL_APIENTRY, glMakeTextureHandleResidentNV, (GLuint64 handle))
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_ptr((program), (location), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformHandleui64NV, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_ptr((program), (location), (count), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformHandleui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_ptr((location), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformHandleui64NV, (GLint location, GLuint64 value))
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformHandleui64vNV, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendBarrierNV, (void))
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_ptr((pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendParameteriNV, (GLenum pname, GLint value))
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_ptr((id), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginConditionalRenderNV, (GLuint id, GLenum mode))
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glEndConditionalRenderNV, (void))
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_ptr((xbits), (ybits))
GLATTER_UBLOCK(void, GL_APIENTRY, glSubpixelPrecisionBiasNV, (GLuint xbits, GLuint ybits))
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glConservativeRasterParameteriNV, (GLenum pname, GLint param))
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_buffer)
#define glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubDataNV_ptr((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyBufferSubDataNV, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#endif // defined(GL_NV_copy_buffer)
#if defined(GL_NV_coverage_sample)
#define glCoverageMaskNV(mask) glatter_glCoverageMaskNV_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverageMaskNV, (GLboolean mask))
#define glCoverageOperationNV(operation) glatter_glCoverageOperationNV_ptr((operation))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverageOperationNV, (GLenum operation))
#endif // defined(GL_NV_coverage_sample)
#if defined(GL_NV_draw_buffers)
#define glDrawBuffersNV(n, bufs) glatter_glDrawBuffersNV_ptr((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffersNV, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_NV_draw_buffers)
#if defined(GL_NV_draw_instanced)
#define glDrawArraysInstancedNV(mode, first, count, primcount) glatter_glDrawArraysInstancedNV_ptr((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstancedNV, (GLenum mode, GLint first, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedNV(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedNV_ptr((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedNV, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_NV_draw_instanced)
#if defined(GL_NV_fence)
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV_ptr((n), (fences))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFencesNV, (GLsizei n, const GLuint *fences))
#define glFinishFenceNV(fence) glatter_glFinishFenceNV_ptr((fence))
GLATTER_UBLOCK(void, GL_APIENTRY, glFinishFenceNV, (GLuint fence))
#define glGenFencesNV(n, fences) glatter_glGenFencesNV_ptr((n), (fences))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFencesNV, (GLsizei n, GLuint *fences))
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV_ptr((fence), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFenceivNV, (GLuint fence, GLenum pname, GLint *params))
#define glIsFenceNV(fence) glatter_glIsFenceNV_ptr((fence))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFenceNV, (GLuint fence))
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV_ptr((fence), (condition))
GLATTER_UBLOCK(void, GL_APIENTRY, glSetFenceNV, (GLuint fence, GLenum condition))
#define glTestFenceNV(fence) glatter_glTestFenceNV_ptr((fence))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glTestFenceNV, (GLuint fence))
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_ptr((color))
GLATTER_UBLOCK(void, GL_APIENTRY, glFragmentCoverageColorNV, (GLuint color))
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_framebuffer_blit)
#define glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferNV_ptr((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebufferNV, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#endif // defined(GL_NV_framebuffer_blit)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_ptr((components))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverageModulationNV, (GLenum components))
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_ptr((n), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverageModulationTableNV, (GLsizei n, const GLfloat *v))
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_ptr((bufsize), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetCoverageModulationTableNV, (GLsizei bufsize, GLfloat *v))
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample)
#define glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleNV_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisampleNV, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_NV_framebuffer_multisample)
#if defined(GL_NV_gpu_shader5)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformi64vNV, (GLuint program, GLint location, GLint64EXT *params))
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_ptr((program), (location), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1i64NV, (GLuint program, GLint location, GLint64EXT x))
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_ptr((program), (location), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ui64NV, (GLuint program, GLint location, GLuint64EXT x))
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_ptr((program), (location), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y))
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_ptr((program), (location), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y))
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_ptr((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_ptr((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_ptr((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_ptr((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_ptr((location), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i64NV, (GLint location, GLint64EXT x))
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_ptr((location), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui64NV, (GLint location, GLuint64EXT x))
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_ptr((location), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i64NV, (GLint location, GLint64EXT x, GLint64EXT y))
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_ptr((location), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y))
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_NV_gpu_shader5)
#if defined(GL_NV_instanced_arrays)
#define glVertexAttribDivisorNV(index, divisor) glatter_glVertexAttribDivisorNV_ptr((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisorNV, (GLuint index, GLuint divisor))
#endif // defined(GL_NV_instanced_arrays)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_ptr((target), (internalformat), (samples), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInternalformatSampleivNV, (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params))
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_non_square_matrices)
#define glUniformMatrix2x3fvNV(location, count, transpose, value) glatter_glUniformMatrix2x3fvNV_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x3fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fvNV(location, count, transpose, value) glatter_glUniformMatrix2x4fvNV_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x4fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fvNV(location, count, transpose, value) glatter_glUniformMatrix3x2fvNV_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x2fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fvNV(location, count, transpose, value) glatter_glUniformMatrix3x4fvNV_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x4fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fvNV(location, count, transpose, value) glatter_glUniformMatrix4x2fvNV_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x2fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fvNV(location, count, transpose, value) glatter_glUniformMatrix4x3fvNV_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x3fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#endif // defined(GL_NV_non_square_matrices)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_ptr((resultPath), (srcPath))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyPathNV, (GLuint resultPath, GLuint srcPath))
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_ptr((path), (coverMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverFillPathNV, (GLuint path, GLenum coverMode))
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_ptr((path), (coverMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCoverStrokePathNV, (GLuint path, GLenum coverMode))
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_ptr((path), (range))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeletePathsNV, (GLuint path, GLsizei range))
#define glGenPathsNV(range) glatter_glGenPathsNV_ptr((range))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGenPathsNV, (GLsizei range))
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_ptr((path), (commands))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathCommandsNV, (GLuint path, GLubyte *commands))
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_ptr((path), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathCoordsNV, (GLuint path, GLfloat *coords))
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_ptr((path), (dashArray))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathDashArrayNV, (GLuint path, GLfloat *dashArray))
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_ptr((path), (startSegment), (numSegments))
GLATTER_UBLOCK(GLfloat, GL_APIENTRY, glGetPathLengthNV, (GLuint path, GLsizei startSegment, GLsizei numSegments))
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_ptr((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathMetricRangeNV, (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics))
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_ptr((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathMetricsNV, (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics))
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathParameterfvNV, (GLuint path, GLenum pname, GLfloat *value))
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathParameterivNV, (GLuint path, GLenum pname, GLint *value))
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_ptr((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPathSpacingNV, (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing))
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_ptr((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourcefvNV, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params))
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_ptr((resultPath), (pathA), (pathB), (weight))
GLATTER_UBLOCK(void, GL_APIENTRY, glInterpolatePathsNV, (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight))
#define glIsPathNV(path) glatter_glIsPathNV_ptr((path))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsPathNV, (GLuint path))
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_ptr((path), (mask), (x), (y))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsPointInFillPathNV, (GLuint path, GLuint mask, GLfloat x, GLfloat y))
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_ptr((path), (x), (y))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsPointInStrokePathNV, (GLuint path, GLfloat x, GLfloat y))
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixLoad3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixLoad3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixLoadTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixMult3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixMult3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, GL_APIENTRY, glMatrixMultTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_ptr((path), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathCommandsNV, (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_ptr((path), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathCoordsNV, (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_ptr((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathCoverDepthFuncNV, (GLenum func))
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_ptr((path), (dashCount), (dashArray))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathDashArrayNV, (GLuint path, GLsizei dashCount, const GLfloat *dashArray))
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_ptr((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glPathGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_ptr((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glPathGlyphIndexRangeNV, (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]))
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_ptr((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathGlyphRangeNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_ptr((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathGlyphsNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_ptr((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glPathMemoryGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathParameterfNV, (GLuint path, GLenum pname, GLfloat value))
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathParameterfvNV, (GLuint path, GLenum pname, const GLfloat *value))
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathParameteriNV, (GLuint path, GLenum pname, GLint value))
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathParameterivNV, (GLuint path, GLenum pname, const GLint *value))
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_ptr((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathStencilDepthOffsetNV, (GLfloat factor, GLfloat units))
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathStencilFuncNV, (GLenum func, GLint ref, GLuint mask))
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_ptr((path), (format), (length), (pathString))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathStringNV, (GLuint path, GLenum format, GLsizei length, const void *pathString))
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_ptr((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathSubCommandsNV, (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_ptr((path), (coordStart), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, GL_APIENTRY, glPathSubCoordsNV, (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_ptr((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glPointAlongPathNV, (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY))
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_ptr((program), (location), (genMode), (components), (coeffs))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramPathFragmentInputGenNV, (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs))
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_ptr((path), (fillMode), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFillPathNV, (GLuint path, GLenum fillMode, GLuint mask))
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_ptr((path), (reference), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilStrokePathNV, (GLuint path, GLint reference, GLuint mask))
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilThenCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_ptr((path), (fillMode), (mask), (coverMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilThenCoverFillPathNV, (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode))
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilThenCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_ptr((path), (reference), (mask), (coverMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilThenCoverStrokePathNV, (GLuint path, GLint reference, GLuint mask, GLenum coverMode))
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_ptr((resultPath), (srcPath), (transformType), (transformValues))
GLATTER_UBLOCK(void, GL_APIENTRY, glTransformPathNV, (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues))
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_ptr((resultPath), (numPaths), (paths), (weights))
GLATTER_UBLOCK(void, GL_APIENTRY, glWeightPathsNV, (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights))
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_polygon_mode)
#define glPolygonModeNV(face, mode) glatter_glPolygonModeNV_ptr((face), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonModeNV, (GLenum face, GLenum mode))
#endif // defined(GL_NV_polygon_mode)
#if defined(GL_NV_read_buffer)
#define glReadBufferNV(mode) glatter_glReadBufferNV_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBufferNV, (GLenum mode))
#endif // defined(GL_NV_read_buffer)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_ptr((target), (start), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferSampleLocationsfvNV, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_ptr((framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glNamedFramebufferSampleLocationsfvNV, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glResolveDepthValuesNV, (void))
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_viewport_array)
#define glDepthRangeArrayfvNV(first, count, v) glatter_glDepthRangeArrayfvNV_ptr((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangeArrayfvNV, (GLuint first, GLsizei count, const GLfloat *v))
#define glDepthRangeIndexedfNV(index, n, f) glatter_glDepthRangeIndexedfNV_ptr((index), (n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangeIndexedfNV, (GLuint index, GLfloat n, GLfloat f))
#define glDisableiNV(target, index) glatter_glDisableiNV_ptr((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableiNV, (GLenum target, GLuint index))
#define glEnableiNV(target, index) glatter_glEnableiNV_ptr((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableiNV, (GLenum target, GLuint index))
#define glGetFloati_vNV(target, index, data) glatter_glGetFloati_vNV_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloati_vNV, (GLenum target, GLuint index, GLfloat *data))
#define glIsEnablediNV(target, index) glatter_glIsEnablediNV_ptr((target), (index))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnablediNV, (GLenum target, GLuint index))
#define glScissorArrayvNV(first, count, v) glatter_glScissorArrayvNV_ptr((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorArrayvNV, (GLuint first, GLsizei count, const GLint *v))
#define glScissorIndexedNV(index, left, bottom, width, height) glatter_glScissorIndexedNV_ptr((index), (left), (bottom), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorIndexedNV, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#define glScissorIndexedvNV(index, v) glatter_glScissorIndexedvNV_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorIndexedvNV, (GLuint index, const GLint *v))
#define glViewportArrayvNV(first, count, v) glatter_glViewportArrayvNV_ptr((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportArrayvNV, (GLuint first, GLsizei count, const GLfloat *v))
#define glViewportIndexedfNV(index, x, y, w, h) glatter_glViewportIndexedfNV_ptr((index), (x), (y), (w), (h))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportIndexedfNV, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#define glViewportIndexedfvNV(index, v) glatter_glViewportIndexedfvNV_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportIndexedfvNV, (GLuint index, const GLfloat *v))
#endif // defined(GL_NV_viewport_array)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_ptr((index), (swizzlex), (swizzley), (swizzlez), (swizzlew))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportSwizzleNV, (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew))
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_EGL_image)
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES_ptr((target), (image))
GLATTER_UBLOCK(void, GL_APIENTRY, glEGLImageTargetRenderbufferStorageOES, (GLenum target, GLeglImageOES image))
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES_ptr((target), (image))
GLATTER_UBLOCK(void, GL_APIENTRY, glEGLImageTargetTexture2DOES, (GLenum target, GLeglImageOES image))
#endif // defined(GL_OES_EGL_image)
#if defined(GL_OES_copy_image)
#define glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataOES_ptr((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyImageSubDataOES, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#endif // defined(GL_OES_copy_image)
#if defined(GL_OES_draw_buffers_indexed)
#define glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiOES_ptr((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparateiOES, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationiOES(buf, mode) glatter_glBlendEquationiOES_ptr((buf), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationiOES, (GLuint buf, GLenum mode))
#define glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiOES_ptr((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparateiOES, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunciOES(buf, src, dst) glatter_glBlendFunciOES_ptr((buf), (src), (dst))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunciOES, (GLuint buf, GLenum src, GLenum dst))
#define glColorMaskiOES(index, r, g, b, a) glatter_glColorMaskiOES_ptr((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMaskiOES, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glDisableiOES(target, index) glatter_glDisableiOES_ptr((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableiOES, (GLenum target, GLuint index))
#define glEnableiOES(target, index) glatter_glEnableiOES_ptr((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableiOES, (GLenum target, GLuint index))
#define glIsEnablediOES(target, index) glatter_glIsEnablediOES_ptr((target), (index))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnablediOES, (GLenum target, GLuint index))
#endif // defined(GL_OES_draw_buffers_indexed)
#if defined(GL_OES_draw_elements_base_vertex)
#define glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexOES_ptr((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsBaseVertexOES, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexOES_ptr((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseVertexOES, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexOES_ptr((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElementsBaseVertexOES, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glMultiDrawElementsBaseVertexOES(mode, count, type, indices, primcount, basevertex) glatter_glMultiDrawElementsBaseVertexOES_ptr((mode), (count), (type), (indices), (primcount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glMultiDrawElementsBaseVertexOES, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex))
#endif // defined(GL_OES_draw_elements_base_vertex)
#if defined(GL_OES_geometry_shader)
#define glFramebufferTextureOES(target, attachment, texture, level) glatter_glFramebufferTextureOES_ptr((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureOES, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#endif // defined(GL_OES_geometry_shader)
#if defined(GL_OES_get_program_binary)
#define glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinaryOES_ptr((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramBinaryOES, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glProgramBinaryOES(program, binaryFormat, binary, length) glatter_glProgramBinaryOES_ptr((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramBinaryOES, (GLuint program, GLenum binaryFormat, const void *binary, GLint length))
#endif // defined(GL_OES_get_program_binary)
#if defined(GL_OES_mapbuffer)
#define glGetBufferPointervOES(target, pname, params) glatter_glGetBufferPointervOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferPointervOES, (GLenum target, GLenum pname, void **params))
#define glMapBufferOES(target, access) glatter_glMapBufferOES_ptr((target), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferOES, (GLenum target, GLenum access))
#define glUnmapBufferOES(target) glatter_glUnmapBufferOES_ptr((target))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glUnmapBufferOES, (GLenum target))
#endif // defined(GL_OES_mapbuffer)
#if defined(GL_OES_primitive_bounding_box)
#define glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxOES_ptr((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
GLATTER_UBLOCK(void, GL_APIENTRY, glPrimitiveBoundingBoxOES, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#endif // defined(GL_OES_primitive_bounding_box)
#if defined(GL_OES_sample_shading)
#define glMinSampleShadingOES(value) glatter_glMinSampleShadingOES_ptr((value))
GLATTER_UBLOCK(void, GL_APIENTRY, glMinSampleShadingOES, (GLfloat value))
#endif // defined(GL_OES_sample_shading)
#if defined(GL_OES_tessellation_shader)
#define glPatchParameteriOES(pname, value) glatter_glPatchParameteriOES_ptr((pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPatchParameteriOES, (GLenum pname, GLint value))
#endif // defined(GL_OES_tessellation_shader)
#if defined(GL_OES_texture_3D)
#define glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DOES_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage3DOES, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DOES_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage3DOES, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DOES_ptr((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage3DOES, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DOES_ptr((target), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture3DOES, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DOES_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage3DOES, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DOES_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage3DOES, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_OES_texture_3D)
#if defined(GL_OES_texture_border_clamp)
#define glGetSamplerParameterIivOES(sampler, pname, params) glatter_glGetSamplerParameterIivOES_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIivOES, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuivOES(sampler, pname, params) glatter_glGetSamplerParameterIuivOES_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIuivOES, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetTexParameterIivOES(target, pname, params) glatter_glGetTexParameterIivOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIivOES, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuivOES(target, pname, params) glatter_glGetTexParameterIuivOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIuivOES, (GLenum target, GLenum pname, GLuint *params))
#define glSamplerParameterIivOES(sampler, pname, param) glatter_glSamplerParameterIivOES_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIivOES, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuivOES(sampler, pname, param) glatter_glSamplerParameterIuivOES_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIuivOES, (GLuint sampler, GLenum pname, const GLuint *param))
#define glTexParameterIivOES(target, pname, params) glatter_glTexParameterIivOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIivOES, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuivOES(target, pname, params) glatter_glTexParameterIuivOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIuivOES, (GLenum target, GLenum pname, const GLuint *params))
#endif // defined(GL_OES_texture_border_clamp)
#if defined(GL_OES_texture_buffer)
#define glTexBufferOES(target, internalformat, buffer) glatter_glTexBufferOES_ptr((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferOES, (GLenum target, GLenum internalformat, GLuint buffer))
#define glTexBufferRangeOES(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeOES_ptr((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferRangeOES, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#endif // defined(GL_OES_texture_buffer)
#if defined(GL_OES_texture_storage_multisample_2d_array)
#define glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisampleOES_ptr((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3DMultisampleOES, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#endif // defined(GL_OES_texture_storage_multisample_2d_array)
#if defined(GL_OES_texture_view)
#define glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewOES_ptr((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
GLATTER_UBLOCK(void, GL_APIENTRY, glTextureViewOES, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#endif // defined(GL_OES_texture_view)
#if defined(GL_OES_vertex_array_object)
#define glBindVertexArrayOES(array) glatter_glBindVertexArrayOES_ptr((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexArrayOES, (GLuint array))
#define glDeleteVertexArraysOES(n, arrays) glatter_glDeleteVertexArraysOES_ptr((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteVertexArraysOES, (GLsizei n, const GLuint *arrays))
#define glGenVertexArraysOES(n, arrays) glatter_glGenVertexArraysOES_ptr((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenVertexArraysOES, (GLsizei n, GLuint *arrays))
#define glIsVertexArrayOES(array) glatter_glIsVertexArrayOES_ptr((array))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsVertexArrayOES, (GLuint array))
#endif // defined(GL_OES_vertex_array_object)
#if defined(GL_OES_viewport_array)
#define glDepthRangeArrayfvOES(first, count, v) glatter_glDepthRangeArrayfvOES_ptr((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangeArrayfvOES, (GLuint first, GLsizei count, const GLfloat *v))
#define glDepthRangeIndexedfOES(index, n, f) glatter_glDepthRangeIndexedfOES_ptr((index), (n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangeIndexedfOES, (GLuint index, GLfloat n, GLfloat f))
#define glGetFloati_vOES(target, index, data) glatter_glGetFloati_vOES_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloati_vOES, (GLenum target, GLuint index, GLfloat *data))
#define glScissorArrayvOES(first, count, v) glatter_glScissorArrayvOES_ptr((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorArrayvOES, (GLuint first, GLsizei count, const GLint *v))
#define glScissorIndexedOES(index, left, bottom, width, height) glatter_glScissorIndexedOES_ptr((index), (left), (bottom), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorIndexedOES, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#define glScissorIndexedvOES(index, v) glatter_glScissorIndexedvOES_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissorIndexedvOES, (GLuint index, const GLint *v))
#define glViewportArrayvOES(first, count, v) glatter_glViewportArrayvOES_ptr((first), (count), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportArrayvOES, (GLuint first, GLsizei count, const GLfloat *v))
#define glViewportIndexedfOES(index, x, y, w, h) glatter_glViewportIndexedfOES_ptr((index), (x), (y), (w), (h))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportIndexedfOES, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#define glViewportIndexedfvOES(index, v) glatter_glViewportIndexedfvOES_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewportIndexedfvOES, (GLuint index, const GLfloat *v))
#endif // defined(GL_OES_viewport_array)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_ptr((target), (attachment), (texture), (level), (baseViewIndex), (numViews))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews))
#endif // defined(GL_OVR_multiview)
#if defined(GL_OVR_multiview_multisampled_render_to_texture)
#define glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews) glatter_glFramebufferTextureMultisampleMultiviewOVR_ptr((target), (attachment), (texture), (level), (samples), (baseViewIndex), (numViews))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureMultisampleMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews))
#endif // defined(GL_OVR_multiview_multisampled_render_to_texture)
#if defined(GL_QCOM_alpha_test)
#define glAlphaFuncQCOM(func, ref) glatter_glAlphaFuncQCOM_ptr((func), (ref))
GLATTER_UBLOCK(void, GL_APIENTRY, glAlphaFuncQCOM, (GLenum func, GLclampf ref))
#endif // defined(GL_QCOM_alpha_test)
#if defined(GL_QCOM_driver_control)
#define glDisableDriverControlQCOM(driverControl) glatter_glDisableDriverControlQCOM_ptr((driverControl))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableDriverControlQCOM, (GLuint driverControl))
#define glEnableDriverControlQCOM(driverControl) glatter_glEnableDriverControlQCOM_ptr((driverControl))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableDriverControlQCOM, (GLuint driverControl))
#define glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString) glatter_glGetDriverControlStringQCOM_ptr((driverControl), (bufSize), (length), (driverControlString))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetDriverControlStringQCOM, (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString))
#define glGetDriverControlsQCOM(num, size, driverControls) glatter_glGetDriverControlsQCOM_ptr((num), (size), (driverControls))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetDriverControlsQCOM, (GLint *num, GLsizei size, GLuint *driverControls))
#endif // defined(GL_QCOM_driver_control)
#if defined(GL_QCOM_extended_get)
#define glExtGetBufferPointervQCOM(target, params) glatter_glExtGetBufferPointervQCOM_ptr((target), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetBufferPointervQCOM, (GLenum target, void **params))
#define glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers) glatter_glExtGetBuffersQCOM_ptr((buffers), (maxBuffers), (numBuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetBuffersQCOM, (GLuint *buffers, GLint maxBuffers, GLint *numBuffers))
#define glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers) glatter_glExtGetFramebuffersQCOM_ptr((framebuffers), (maxFramebuffers), (numFramebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetFramebuffersQCOM, (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers))
#define glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers) glatter_glExtGetRenderbuffersQCOM_ptr((renderbuffers), (maxRenderbuffers), (numRenderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetRenderbuffersQCOM, (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers))
#define glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params) glatter_glExtGetTexLevelParameterivQCOM_ptr((texture), (face), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetTexLevelParameterivQCOM, (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params))
#define glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels) glatter_glExtGetTexSubImageQCOM_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (texels))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetTexSubImageQCOM, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels))
#define glExtGetTexturesQCOM(textures, maxTextures, numTextures) glatter_glExtGetTexturesQCOM_ptr((textures), (maxTextures), (numTextures))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetTexturesQCOM, (GLuint *textures, GLint maxTextures, GLint *numTextures))
#define glExtTexObjectStateOverrideiQCOM(target, pname, param) glatter_glExtTexObjectStateOverrideiQCOM_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtTexObjectStateOverrideiQCOM, (GLenum target, GLenum pname, GLint param))
#endif // defined(GL_QCOM_extended_get)
#if defined(GL_QCOM_extended_get2)
#define glExtGetProgramBinarySourceQCOM(program, shadertype, source, length) glatter_glExtGetProgramBinarySourceQCOM_ptr((program), (shadertype), (source), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetProgramBinarySourceQCOM, (GLuint program, GLenum shadertype, GLchar *source, GLint *length))
#define glExtGetProgramsQCOM(programs, maxPrograms, numPrograms) glatter_glExtGetProgramsQCOM_ptr((programs), (maxPrograms), (numPrograms))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetProgramsQCOM, (GLuint *programs, GLint maxPrograms, GLint *numPrograms))
#define glExtGetShadersQCOM(shaders, maxShaders, numShaders) glatter_glExtGetShadersQCOM_ptr((shaders), (maxShaders), (numShaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glExtGetShadersQCOM, (GLuint *shaders, GLint maxShaders, GLint *numShaders))
#define glExtIsProgramBinaryQCOM(program) glatter_glExtIsProgramBinaryQCOM_ptr((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glExtIsProgramBinaryQCOM, (GLuint program))
#endif // defined(GL_QCOM_extended_get2)
#if defined(GL_QCOM_tiled_rendering)
#define glEndTilingQCOM(preserveMask) glatter_glEndTilingQCOM_ptr((preserveMask))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndTilingQCOM, (GLbitfield preserveMask))
#define glStartTilingQCOM(x, y, width, height, preserveMask) glatter_glStartTilingQCOM_ptr((x), (y), (width), (height), (preserveMask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStartTilingQCOM, (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask))
#endif // defined(GL_QCOM_tiled_rendering)
#endif // defined(__gl2ext_h_)
#if defined(__gl31_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAttachShader(program, shader) glatter_glAttachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_ptr((program), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBindBuffer(target, buffer) glatter_glBindBuffer_ptr((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_ptr((target), (framebuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_ptr((target), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindTexture(target, texture) glatter_glBindTexture_ptr((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_ptr((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_ptr((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_ptr((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glBufferData(target, size, data, usage) glatter_glBufferData_ptr((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_ptr((target))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClear(mask) glatter_glClear_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepthf(d) glatter_glClearDepthf_ptr((d))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLfloat d))
#define glClearStencil(s) glatter_glClearStencil_ptr((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCompileShader(shader) glatter_glCompileShader_ptr((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompileShader, (GLuint shader))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_ptr((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateProgram() glatter_glCreateProgram_ptr()
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader_ptr((type))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShader, (GLenum type))
#define glCullFace(mode) glatter_glCullFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteProgram(program) glatter_glDeleteProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteShader(shader) glatter_glDeleteShader_ptr((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteShader, (GLuint shader))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc_ptr((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask_ptr((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(n, f) glatter_glDepthRangef_ptr((n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glDetachShader(program, shader) glatter_glDetachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisable(cap) glatter_glDisable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_ptr((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glEnable(cap) glatter_glEnable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glFinish() glatter_glFinish_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_ptr((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFrontFace(mode) glatter_glFrontFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glGenBuffers(n, buffers) glatter_glGenBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenTextures(n, textures) glatter_glGenTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGenerateMipmap(target) glatter_glGenerateMipmap_ptr((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_ptr((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetError() glatter_glGetError_ptr()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_ptr((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_ptr((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_ptr((program), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_ptr((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_ptr((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_ptr((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_ptr((shader), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetString(name) glatter_glGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_ptr((index), (pname), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint_ptr((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer_ptr((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled_ptr((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_ptr((framebuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsProgram(program) glatter_glIsProgram_ptr((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgram, (GLuint program))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_ptr((renderbuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsShader(shader) glatter_glIsShader_ptr((shader))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsShader, (GLuint shader))
#define glIsTexture(texture) glatter_glIsTexture_ptr((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLineWidth(width) glatter_glLineWidth_ptr((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLinkProgram(program) glatter_glLinkProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glLinkProgram, (GLuint program))
#define glPixelStorei(pname, param) glatter_glPixelStorei_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_ptr((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_ptr((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glReleaseShaderCompiler, (void))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_ptr((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_ptr((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#define glScissor(x, y, width, height) glatter_glScissor_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_ptr((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_ptr((shader), (count), (string), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_ptr((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_ptr((face), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_ptr((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_ptr((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glUniform1f(location, v0) glatter_glUniform1f_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_ptr((index), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_ptr((index), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_ptr((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#define glViewport(x, y, width, height) glatter_glViewport_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery_ptr((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_ptr((primitiveMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_ptr((target), (index), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_ptr((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindSampler(unit, sampler) glatter_glBindSampler_ptr((unit), (sampler))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_ptr((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBindVertexArray(array) glatter_glBindVertexArray_ptr((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_ptr((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_ptr((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_ptr((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glDeleteSync(sync) glatter_glDeleteSync_ptr((sync))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSync, (GLsync sync))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_ptr((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_ptr((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_ptr((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_ptr((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glEndQuery(target) glatter_glEndQuery_ptr((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndQuery, (GLenum target))
#define glEndTransformFeedback() glatter_glEndTransformFeedback_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glEndTransformFeedback, (void))
#define glFenceSync(condition, flags) glatter_glFenceSync_ptr((condition), (flags))
GLATTER_UBLOCK(GLsync, GL_APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_ptr((target), (offset), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_ptr((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenQueries(n, ids) glatter_glGenQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGenSamplers(count, samplers) glatter_glGenSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_ptr((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_ptr((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_ptr((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_ptr((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_ptr((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi_ptr((name), (index))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_ptr((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_ptr((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_ptr((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_ptr((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_ptr((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glIsQuery(id) glatter_glIsQuery_ptr((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsQuery, (GLuint id))
#define glIsSampler(sampler) glatter_glIsSampler_ptr((sampler))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSampler, (GLuint sampler))
#define glIsSync(sync) glatter_glIsSync_ptr((sync))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSync, (GLsync sync))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_ptr((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTransformFeedback, (GLuint id))
#define glIsVertexArray(array) glatter_glIsVertexArray_ptr((array))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_ptr((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glPauseTransformFeedback, (void))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_ptr((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_ptr((program), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glReadBuffer(mode) glatter_glReadBuffer_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBuffer, (GLenum mode))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glResumeTransformFeedback, (void))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_ptr((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_ptr((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_ptr((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_ptr((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUnmapBuffer(target) glatter_glUnmapBuffer_ptr((target))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glUnmapBuffer, (GLenum target))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_ptr((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_ptr((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(void, GL_APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_ptr((pipeline), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_ptr((unit), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_ptr((bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_ptr((type), (count), (strings))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_ptr((num_groups_x), (num_groups_y), (num_groups_z))
GLATTER_UBLOCK(void, GL_APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_ptr((indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_ptr((mode), (indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_ptr((mode), (type), (indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_ptr((pname), (index), (val))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_ptr((program), (programInterface), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_ptr((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_ptr((pipeline), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_ptr((program), (programInterface), (index), (bufSize), (length), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_ptr((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_ptr((barriers))
GLATTER_UBLOCK(void, GL_APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_ptr((barriers))
GLATTER_UBLOCK(void, GL_APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_ptr((maskNumber), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_ptr((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_ptr((pipeline), (stages), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_ptr((attribindex), (bindingindex))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_ptr((attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_ptr((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_ptr((bindingindex), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_ES_VERSION_3_1)
#endif // defined(__gl31_h_)
#if defined(__gl32_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAttachShader(program, shader) glatter_glAttachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_ptr((program), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBindBuffer(target, buffer) glatter_glBindBuffer_ptr((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_ptr((target), (framebuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_ptr((target), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindTexture(target, texture) glatter_glBindTexture_ptr((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_ptr((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_ptr((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_ptr((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glBufferData(target, size, data, usage) glatter_glBufferData_ptr((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_ptr((target))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClear(mask) glatter_glClear_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepthf(d) glatter_glClearDepthf_ptr((d))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLfloat d))
#define glClearStencil(s) glatter_glClearStencil_ptr((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCompileShader(shader) glatter_glCompileShader_ptr((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompileShader, (GLuint shader))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_ptr((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateProgram() glatter_glCreateProgram_ptr()
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader_ptr((type))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShader, (GLenum type))
#define glCullFace(mode) glatter_glCullFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteProgram(program) glatter_glDeleteProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteShader(shader) glatter_glDeleteShader_ptr((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteShader, (GLuint shader))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc_ptr((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask_ptr((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(n, f) glatter_glDepthRangef_ptr((n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glDetachShader(program, shader) glatter_glDetachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisable(cap) glatter_glDisable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_ptr((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glEnable(cap) glatter_glEnable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glFinish() glatter_glFinish_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_ptr((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFrontFace(mode) glatter_glFrontFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glGenBuffers(n, buffers) glatter_glGenBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenTextures(n, textures) glatter_glGenTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGenerateMipmap(target) glatter_glGenerateMipmap_ptr((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_ptr((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetError() glatter_glGetError_ptr()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_ptr((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_ptr((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_ptr((program), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_ptr((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_ptr((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_ptr((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_ptr((shader), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetString(name) glatter_glGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_ptr((index), (pname), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint_ptr((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer_ptr((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled_ptr((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_ptr((framebuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsProgram(program) glatter_glIsProgram_ptr((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgram, (GLuint program))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_ptr((renderbuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsShader(shader) glatter_glIsShader_ptr((shader))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsShader, (GLuint shader))
#define glIsTexture(texture) glatter_glIsTexture_ptr((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLineWidth(width) glatter_glLineWidth_ptr((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLinkProgram(program) glatter_glLinkProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glLinkProgram, (GLuint program))
#define glPixelStorei(pname, param) glatter_glPixelStorei_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_ptr((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_ptr((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glReleaseShaderCompiler, (void))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_ptr((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_ptr((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#define glScissor(x, y, width, height) glatter_glScissor_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_ptr((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_ptr((shader), (count), (string), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_ptr((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_ptr((face), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_ptr((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_ptr((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glUniform1f(location, v0) glatter_glUniform1f_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_ptr((index), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_ptr((index), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_ptr((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#define glViewport(x, y, width, height) glatter_glViewport_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery_ptr((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_ptr((primitiveMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_ptr((target), (index), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_ptr((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindSampler(unit, sampler) glatter_glBindSampler_ptr((unit), (sampler))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_ptr((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBindVertexArray(array) glatter_glBindVertexArray_ptr((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_ptr((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_ptr((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_ptr((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glDeleteSync(sync) glatter_glDeleteSync_ptr((sync))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSync, (GLsync sync))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_ptr((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_ptr((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_ptr((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_ptr((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glEndQuery(target) glatter_glEndQuery_ptr((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndQuery, (GLenum target))
#define glEndTransformFeedback() glatter_glEndTransformFeedback_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glEndTransformFeedback, (void))
#define glFenceSync(condition, flags) glatter_glFenceSync_ptr((condition), (flags))
GLATTER_UBLOCK(GLsync, GL_APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_ptr((target), (offset), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_ptr((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenQueries(n, ids) glatter_glGenQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGenSamplers(count, samplers) glatter_glGenSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_ptr((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_ptr((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_ptr((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_ptr((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_ptr((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi_ptr((name), (index))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_ptr((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_ptr((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_ptr((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_ptr((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_ptr((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glIsQuery(id) glatter_glIsQuery_ptr((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsQuery, (GLuint id))
#define glIsSampler(sampler) glatter_glIsSampler_ptr((sampler))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSampler, (GLuint sampler))
#define glIsSync(sync) glatter_glIsSync_ptr((sync))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSync, (GLsync sync))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_ptr((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTransformFeedback, (GLuint id))
#define glIsVertexArray(array) glatter_glIsVertexArray_ptr((array))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_ptr((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glPauseTransformFeedback, (void))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_ptr((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_ptr((program), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glReadBuffer(src) glatter_glReadBuffer_ptr((src))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBuffer, (GLenum src))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glResumeTransformFeedback, (void))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_ptr((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_ptr((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_ptr((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_ptr((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUnmapBuffer(target) glatter_glUnmapBuffer_ptr((target))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glUnmapBuffer, (GLenum target))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_ptr((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_ptr((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(void, GL_APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_ptr((pipeline), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_ptr((unit), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_ptr((bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_ptr((type), (count), (strings))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_ptr((num_groups_x), (num_groups_y), (num_groups_z))
GLATTER_UBLOCK(void, GL_APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_ptr((indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_ptr((mode), (indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_ptr((mode), (type), (indirect))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_ptr((pname), (index), (val))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_ptr((program), (programInterface), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_ptr((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_ptr((pipeline), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_ptr((program), (programInterface), (index), (bufSize), (length), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_ptr((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_ptr((barriers))
GLATTER_UBLOCK(void, GL_APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_ptr((barriers))
GLATTER_UBLOCK(void, GL_APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_ptr((maskNumber), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_ptr((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_ptr((pipeline), (stages), (program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_ptr((attribindex), (bindingindex))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_ptr((attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_ptr((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_ptr((bindingindex), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_ES_VERSION_3_1)
#if defined(GL_ES_VERSION_3_2)
#define glBlendBarrier() glatter_glBlendBarrier_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendBarrier, (void))
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_ptr((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparatei, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_ptr((buf), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationi, (GLuint buf, GLenum mode))
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_ptr((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparatei, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_ptr((buf), (src), (dst))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunci, (GLuint buf, GLenum src, GLenum dst))
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_ptr((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMaski, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_ptr((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyImageSubData, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_ptr((callback), (userParam))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageCallback, (GLDEBUGPROC callback, const void *userParam))
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_ptr((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageControl, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_ptr((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, GL_APIENTRY, glDebugMessageInsert, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glDisablei(target, index) glatter_glDisablei_ptr((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisablei, (GLenum target, GLuint index))
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_ptr((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_ptr((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstancedBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_ptr((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElementsBaseVertex, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glEnablei(target, index) glatter_glEnablei_ptr((target), (index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnablei, (GLenum target, GLuint index))
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_ptr((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_ptr((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetDebugMessageLog, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_ptr()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetGraphicsResetStatus, (void))
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_ptr((identifier), (name), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectLabel, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_ptr((ptr), (bufSize), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetObjectPtrLabel, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetPointerv(pname, params) glatter_glGetPointerv_ptr((pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetPointerv, (GLenum pname, void **params))
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIiv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterIuiv, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIiv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterIuiv, (GLenum target, GLenum pname, GLuint *params))
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformfv, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformiv, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetnUniformuiv, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glIsEnabledi(target, index) glatter_glIsEnabledi_ptr((target), (index))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabledi, (GLenum target, GLuint index))
#define glMinSampleShading(value) glatter_glMinSampleShading_ptr((value))
GLATTER_UBLOCK(void, GL_APIENTRY, glMinSampleShading, (GLfloat value))
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_ptr((identifier), (name), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glObjectLabel, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_ptr((ptr), (length), (label))
GLATTER_UBLOCK(void, GL_APIENTRY, glObjectPtrLabel, (const void *ptr, GLsizei length, const GLchar *label))
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_ptr((pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glPatchParameteri, (GLenum pname, GLint value))
#define glPopDebugGroup() glatter_glPopDebugGroup_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glPopDebugGroup, (void))
#define glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBox_ptr((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
GLATTER_UBLOCK(void, GL_APIENTRY, glPrimitiveBoundingBox, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_ptr((source), (id), (length), (message))
GLATTER_UBLOCK(void, GL_APIENTRY, glPushDebugGroup, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_ptr((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadnPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIiv, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterIuiv, (GLuint sampler, GLenum pname, const GLuint *param))
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_ptr((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBuffer, (GLenum target, GLenum internalformat, GLuint buffer))
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_ptr((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexBufferRange, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIiv, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterIuiv, (GLenum target, GLenum pname, const GLuint *params))
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_ptr((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#endif // defined(GL_ES_VERSION_3_2)
#endif // defined(__gl32_h_)
#if defined(__gl3_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glActiveTexture, (GLenum texture))
#define glAttachShader(program, shader) glatter_glAttachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_ptr((program), (index), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBindBuffer(target, buffer) glatter_glBindBuffer_ptr((target), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_ptr((target), (framebuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_ptr((target), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindTexture(target, texture) glatter_glBindTexture_ptr((target), (texture))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_ptr((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_ptr((sfactor), (dfactor))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_ptr((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glBufferData(target, size, data, usage) glatter_glBufferData_ptr((target), (size), (data), (usage))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_ptr((target))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClear(mask) glatter_glClear_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepthf(d) glatter_glClearDepthf_ptr((d))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearDepthf, (GLfloat d))
#define glClearStencil(s) glatter_glClearStencil_ptr((s))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, GL_APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCompileShader(shader) glatter_glCompileShader_ptr((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompileShader, (GLuint shader))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_ptr((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateProgram() glatter_glCreateProgram_ptr()
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader_ptr((type))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glCreateShader, (GLenum type))
#define glCullFace(mode) glatter_glCullFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glCullFace, (GLenum mode))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteProgram(program) glatter_glDeleteProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteShader(shader) glatter_glDeleteShader_ptr((shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteShader, (GLuint shader))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDepthFunc(func) glatter_glDepthFunc_ptr((func))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask_ptr((flag))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRangef(n, f) glatter_glDepthRangef_ptr((n), (f))
GLATTER_UBLOCK(void, GL_APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glDetachShader(program, shader) glatter_glDetachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, GL_APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisable(cap) glatter_glDisable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisable, (GLenum cap))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_ptr((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glEnable(cap) glatter_glEnable_ptr((cap))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnable, (GLenum cap))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, GL_APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glFinish() glatter_glFinish_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glFlush, (void))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_ptr((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFrontFace(mode) glatter_glFrontFace_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glFrontFace, (GLenum mode))
#define glGenBuffers(n, buffers) glatter_glGenBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenTextures(n, textures) glatter_glGenTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGenerateMipmap(target) glatter_glGenerateMipmap_ptr((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_ptr((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetError() glatter_glGetError_ptr()
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_ptr((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_ptr((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_ptr((program), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_ptr((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_ptr((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_ptr((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_ptr((shader), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetString(name) glatter_glGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetString, (GLenum name))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_ptr((index), (pname), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint_ptr((target), (mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsBuffer(buffer) glatter_glIsBuffer_ptr((buffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsEnabled(cap) glatter_glIsEnabled_ptr((cap))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsEnabled, (GLenum cap))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_ptr((framebuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsProgram(program) glatter_glIsProgram_ptr((program))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsProgram, (GLuint program))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_ptr((renderbuffer))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsShader(shader) glatter_glIsShader_ptr((shader))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsShader, (GLuint shader))
#define glIsTexture(texture) glatter_glIsTexture_ptr((texture))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTexture, (GLuint texture))
#define glLineWidth(width) glatter_glLineWidth_ptr((width))
GLATTER_UBLOCK(void, GL_APIENTRY, glLineWidth, (GLfloat width))
#define glLinkProgram(program) glatter_glLinkProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glLinkProgram, (GLuint program))
#define glPixelStorei(pname, param) glatter_glPixelStorei_ptr((pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_ptr((factor), (units))
GLATTER_UBLOCK(void, GL_APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_ptr((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glReleaseShaderCompiler, (void))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_ptr((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_ptr((value), (invert))
GLATTER_UBLOCK(void, GL_APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#define glScissor(x, y, width, height) glatter_glScissor_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_ptr((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_ptr((shader), (count), (string), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_ptr((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask_ptr((mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMask, (GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_ptr((face), (mask))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_ptr((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_ptr((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, GL_APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glUniform1f(location, v0) glatter_glUniform1f_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram_ptr((program))
GLATTER_UBLOCK(void, GL_APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_ptr((index), (x))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_ptr((index), (x), (y))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_ptr((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#define glViewport(x, y, width, height) glatter_glViewport_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery_ptr((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_ptr((primitiveMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_ptr((target), (index), (buffer))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_ptr((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindSampler(unit, sampler) glatter_glBindSampler_ptr((unit), (sampler))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_ptr((target), (id))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBindVertexArray(array) glatter_glBindVertexArray_ptr((array))
GLATTER_UBLOCK(void, GL_APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_ptr((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, GL_APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_ptr((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, GL_APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_ptr((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glDeleteSync(sync) glatter_glDeleteSync_ptr((sync))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteSync, (GLsync sync))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_ptr((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_ptr((n), (bufs))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_ptr((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_ptr((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, GL_APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glEndQuery(target) glatter_glEndQuery_ptr((target))
GLATTER_UBLOCK(void, GL_APIENTRY, glEndQuery, (GLenum target))
#define glEndTransformFeedback() glatter_glEndTransformFeedback_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glEndTransformFeedback, (void))
#define glFenceSync(condition, flags) glatter_glFenceSync_ptr((condition), (flags))
GLATTER_UBLOCK(GLsync, GL_APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_ptr((target), (offset), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_ptr((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, GL_APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenQueries(n, ids) glatter_glGenQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGenSamplers(count, samplers) glatter_glGenSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, GL_APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_ptr((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_ptr((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_ptr((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, GL_APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_ptr((pname), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_ptr((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_ptr((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi_ptr((name), (index))
GLATTER_UBLOCK(const GLubyte *, GL_APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_ptr((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_ptr((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, GL_APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_ptr((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, GL_APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_ptr((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_ptr((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glIsQuery(id) glatter_glIsQuery_ptr((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsQuery, (GLuint id))
#define glIsSampler(sampler) glatter_glIsSampler_ptr((sampler))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSampler, (GLuint sampler))
#define glIsSync(sync) glatter_glIsSync_ptr((sync))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsSync, (GLsync sync))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_ptr((id))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsTransformFeedback, (GLuint id))
#define glIsVertexArray(array) glatter_glIsVertexArray_ptr((array))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_ptr((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, GL_APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glPauseTransformFeedback, (void))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_ptr((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_ptr((program), (pname), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glReadBuffer(mode) glatter_glReadBuffer_ptr((mode))
GLATTER_UBLOCK(void, GL_APIENTRY, glReadBuffer, (GLenum mode))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_ptr()
GLATTER_UBLOCK(void, GL_APIENTRY, glResumeTransformFeedback, (void))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, GL_APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_ptr((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_ptr((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, GL_APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_ptr((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, GL_APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui_ptr((location), (v0))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_ptr((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, GL_APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUnmapBuffer(target) glatter_glUnmapBuffer_ptr((target))
GLATTER_UBLOCK(GLboolean, GL_APIENTRY, glUnmapBuffer, (GLenum target))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_ptr((index), (divisor))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_ptr((index), (v))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_ptr((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, GL_APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(void, GL_APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_ES_VERSION_3_0)
#endif // defined(__gl3_h_)
#if defined(__glcorearb_h_)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_ptr((monitor))
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfMonitorAMD, (GLuint monitor))
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_ptr((n), (monitors))
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_ptr((monitor))
GLATTER_UBLOCK(void, APIENTRY, glEndPerfMonitorAMD, (GLuint monitor))
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_ptr((n), (monitors))
GLATTER_UBLOCK(void, APIENTRY, glGenPerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_ptr((monitor), (pname), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterDataAMD, (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten))
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_ptr((group), (counter), (pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterInfoAMD, (GLuint group, GLuint counter, GLenum pname, void *data))
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_ptr((group), (counter), (bufSize), (length), (counterString))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterStringAMD, (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString))
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_ptr((group), (numCounters), (maxActiveCounters), (counterSize), (counters))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCountersAMD, (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters))
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_ptr((group), (bufSize), (length), (groupString))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupStringAMD, (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString))
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_ptr((numGroups), (groupsSize), (groups))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupsAMD, (GLint *numGroups, GLsizei groupsSize, GLuint *groups))
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_ptr((monitor), (enable), (group), (numCounters), (counterList))
GLATTER_UBLOCK(void, APIENTRY, glSelectPerfMonitorCountersAMD, (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList))
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB_ptr((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleARB, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB_ptr((texture))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleARB, (GLuint texture))
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB_ptr((texture), (sampler))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleARB, (GLuint texture, GLuint sampler))
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vARB, (GLuint index, GLenum pname, GLuint64EXT *params))
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB_ptr((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentARB, (GLuint64 handle))
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB_ptr((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentARB, (GLuint64 handle))
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentARB, (GLuint64 handle))
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB_ptr((handle), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentARB, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentARB, (GLuint64 handle))
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentARB, (GLuint64 handle))
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB_ptr((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64ARB, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB_ptr((program), (location), (count), (values))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB_ptr((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64ARB, (GLint location, GLuint64 value))
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64ARB, (GLuint index, GLuint64EXT x))
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vARB, (GLuint index, const GLuint64EXT *v))
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB_ptr((context), (event), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glCreateSyncFromCLeventARB, (struct _cl_context *context, struct _cl_event *event, GLbitfield flags))
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB_ptr((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeGroupSizeARB, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z))
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB_ptr((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallbackARB, (GLDEBUGPROCARB callback, const void *userParam))
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB_ptr((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControlARB, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB_ptr((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsertARB, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB_ptr((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLogARB, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB_ptr((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateiARB, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB_ptr((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationiARB, (GLuint buf, GLenum mode))
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB_ptr((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateiARB, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB_ptr((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunciARB, (GLuint buf, GLenum src, GLenum dst))
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB_ptr((mode), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectCountARB, (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB_ptr((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectCountARB, (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB_ptr()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatusARB, (void))
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB_ptr((target), (lod), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImageARB, (GLenum target, GLint lod, GLsizei bufSize, void *img))
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB_ptr((target), (level), (format), (type), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImageARB, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img))
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdvARB, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfvARB, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformivARB, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuivARB, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB_ptr((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixelsARB, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB_ptr((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShadingARB, (GLfloat value))
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB_ptr((shader), (count), (path), (length))
GLATTER_UBLOCK(void, APIENTRY, glCompileShaderIncludeARB, (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length))
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB_ptr((namelen), (name))
GLATTER_UBLOCK(void, APIENTRY, glDeleteNamedStringARB, (GLint namelen, const GLchar *name))
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB_ptr((namelen), (name), (bufSize), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringARB, (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string))
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB_ptr((namelen), (name), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringivARB, (GLint namelen, const GLchar *name, GLenum pname, GLint *params))
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB_ptr((namelen), (name))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedStringARB, (GLint namelen, const GLchar *name))
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB_ptr((type), (namelen), (name), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glNamedStringARB, (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string))
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB_ptr((target), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glBufferPageCommitmentARB, (GLenum target, GLintptr offset, GLsizei size, GLboolean commit))
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB_ptr((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentARB, (GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit))
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT_ptr((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentEXT, (GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit))
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, resident) glatter_glTexPageCommitmentARB_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (resident))
GLATTER_UBLOCK(void, APIENTRY, glTexPageCommitmentARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident))
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_ptr((type), (object), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabelEXT, (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_ptr((type), (object), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glLabelObjectEXT, (GLenum type, GLuint object, GLsizei length, const GLchar *label))
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_ptr((length), (marker))
GLATTER_UBLOCK(void, APIENTRY, glInsertEventMarkerEXT, (GLsizei length, const GLchar *marker))
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPopGroupMarkerEXT, (void))
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_ptr((length), (marker))
GLATTER_UBLOCK(void, APIENTRY, glPushGroupMarkerEXT, (GLsizei length, const GLchar *marker))
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_ptr((mode), (start), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedEXT, (GLenum mode, GLint start, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_ptr((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_ptr((factor), (units), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetClampEXT, (GLfloat factor, GLfloat units, GLfloat clamp))
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_ptr((samples), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glRasterSamplesEXT, (GLuint samples, GLboolean fixedsamplelocations))
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveProgramEXT(program) glatter_glActiveProgramEXT_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glActiveProgramEXT, (GLuint program))
#define glCreateShaderProgramEXT(type, string) glatter_glCreateShaderProgramEXT_ptr((type), (string))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramEXT, (GLenum type, const GLchar *string))
#define glUseShaderProgramEXT(type, program) glatter_glUseShaderProgramEXT_ptr((type), (program))
GLATTER_UBLOCK(void, APIENTRY, glUseShaderProgramEXT, (GLenum type, GLuint program))
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_ptr((mode), (count), (box))
GLATTER_UBLOCK(void, APIENTRY, glWindowRectanglesEXT, (GLenum mode, GLsizei count, const GLint *box))
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_ptr()
GLATTER_UBLOCK(void, APIENTRY, glApplyFramebufferAttachmentCMAAINTEL, (void))
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_ptr((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfQueryINTEL, (GLuint queryHandle))
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_ptr((queryId), (queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glCreatePerfQueryINTEL, (GLuint queryId, GLuint *queryHandle))
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_ptr((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfQueryINTEL, (GLuint queryHandle))
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_ptr((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glEndPerfQueryINTEL, (GLuint queryHandle))
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_ptr((queryId))
GLATTER_UBLOCK(void, APIENTRY, glGetFirstPerfQueryIdINTEL, (GLuint *queryId))
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_ptr((queryId), (nextQueryId))
GLATTER_UBLOCK(void, APIENTRY, glGetNextPerfQueryIdINTEL, (GLuint queryId, GLuint *nextQueryId))
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_ptr((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfCounterInfoINTEL, (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue))
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_ptr((queryHandle), (flags), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryDataINTEL, (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten))
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_ptr((queryName), (queryId))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryIdByNameINTEL, (GLchar *queryName, GLuint *queryId))
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_ptr((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryInfoINTEL, (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask))
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_ptr()
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierKHR, (void))
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_ptr((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleNV, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_ptr((texture))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleNV, (GLuint texture))
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_ptr((texture), (sampler))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleNV, (GLuint texture, GLuint sampler))
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_ptr((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentNV, (GLuint64 handle))
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_ptr((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentNV, (GLuint64 handle))
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentNV, (GLuint64 handle))
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_ptr((handle), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentNV, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentNV, (GLuint64 handle))
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentNV, (GLuint64 handle))
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_ptr((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64NV, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_ptr((program), (location), (count), (values))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_ptr((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64NV, (GLint location, GLuint64 value))
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vNV, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierNV, (void))
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_ptr((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glBlendParameteriNV, (GLenum pname, GLint value))
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_ptr((id), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRenderNV, (GLuint id, GLenum mode))
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRenderNV, (void))
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_ptr((xbits), (ybits))
GLATTER_UBLOCK(void, APIENTRY, glSubpixelPrecisionBiasNV, (GLuint xbits, GLuint ybits))
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glConservativeRasterParameteriNV, (GLenum pname, GLint param))
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_ptr((color))
GLATTER_UBLOCK(void, APIENTRY, glFragmentCoverageColorNV, (GLuint color))
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_ptr((components))
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationNV, (GLenum components))
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_ptr((n), (v))
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationTableNV, (GLsizei n, const GLfloat *v))
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_ptr((bufsize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetCoverageModulationTableNV, (GLsizei bufsize, GLfloat *v))
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_gpu_shader5)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformi64vNV, (GLuint program, GLint location, GLint64EXT *params))
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_ptr((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64NV, (GLuint program, GLint location, GLint64EXT x))
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_ptr((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64NV, (GLuint program, GLint location, GLuint64EXT x))
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_ptr((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y))
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_ptr((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y))
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_ptr((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_ptr((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_ptr((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_ptr((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_ptr((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64NV, (GLint location, GLint64EXT x))
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_ptr((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64NV, (GLint location, GLuint64EXT x))
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_ptr((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64NV, (GLint location, GLint64EXT x, GLint64EXT y))
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_ptr((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y))
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_NV_gpu_shader5)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_ptr((target), (internalformat), (samples), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformatSampleivNV, (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params))
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_ptr((resultPath), (srcPath))
GLATTER_UBLOCK(void, APIENTRY, glCopyPathNV, (GLuint resultPath, GLuint srcPath))
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_ptr((path), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathNV, (GLuint path, GLenum coverMode))
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_ptr((path), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathNV, (GLuint path, GLenum coverMode))
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_ptr((path), (range))
GLATTER_UBLOCK(void, APIENTRY, glDeletePathsNV, (GLuint path, GLsizei range))
#define glGenPathsNV(range) glatter_glGenPathsNV_ptr((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenPathsNV, (GLsizei range))
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_ptr((path), (commands))
GLATTER_UBLOCK(void, APIENTRY, glGetPathCommandsNV, (GLuint path, GLubyte *commands))
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_ptr((path), (coords))
GLATTER_UBLOCK(void, APIENTRY, glGetPathCoordsNV, (GLuint path, GLfloat *coords))
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_ptr((path), (dashArray))
GLATTER_UBLOCK(void, APIENTRY, glGetPathDashArrayNV, (GLuint path, GLfloat *dashArray))
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_ptr((path), (startSegment), (numSegments))
GLATTER_UBLOCK(GLfloat, APIENTRY, glGetPathLengthNV, (GLuint path, GLsizei startSegment, GLsizei numSegments))
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_ptr((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics))
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricRangeNV, (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics))
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_ptr((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics))
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricsNV, (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics))
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterfvNV, (GLuint path, GLenum pname, GLfloat *value))
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterivNV, (GLuint path, GLenum pname, GLint *value))
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_ptr((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing))
GLATTER_UBLOCK(void, APIENTRY, glGetPathSpacingNV, (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing))
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_ptr((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourcefvNV, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params))
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_ptr((resultPath), (pathA), (pathB), (weight))
GLATTER_UBLOCK(void, APIENTRY, glInterpolatePathsNV, (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight))
#define glIsPathNV(path) glatter_glIsPathNV_ptr((path))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPathNV, (GLuint path))
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_ptr((path), (mask), (x), (y))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInFillPathNV, (GLuint path, GLuint mask, GLfloat x, GLfloat y))
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_ptr((path), (x), (y))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInStrokePathNV, (GLuint path, GLfloat x, GLfloat y))
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_ptr((path), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathCommandsNV, (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_ptr((path), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathCoordsNV, (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_ptr((func))
GLATTER_UBLOCK(void, APIENTRY, glPathCoverDepthFuncNV, (GLenum func))
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_ptr((path), (dashCount), (dashArray))
GLATTER_UBLOCK(void, APIENTRY, glPathDashArrayNV, (GLuint path, GLsizei dashCount, const GLfloat *dashArray))
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_ptr((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_ptr((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexRangeNV, (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]))
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_ptr((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphRangeNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_ptr((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphsNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_ptr((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathMemoryGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfNV, (GLuint path, GLenum pname, GLfloat value))
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfvNV, (GLuint path, GLenum pname, const GLfloat *value))
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameteriNV, (GLuint path, GLenum pname, GLint value))
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterivNV, (GLuint path, GLenum pname, const GLint *value))
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_ptr((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPathStencilDepthOffsetNV, (GLfloat factor, GLfloat units))
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glPathStencilFuncNV, (GLenum func, GLint ref, GLuint mask))
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_ptr((path), (format), (length), (pathString))
GLATTER_UBLOCK(void, APIENTRY, glPathStringNV, (GLuint path, GLenum format, GLsizei length, const void *pathString))
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_ptr((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathSubCommandsNV, (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_ptr((path), (coordStart), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathSubCoordsNV, (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_ptr((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY))
GLATTER_UBLOCK(GLboolean, APIENTRY, glPointAlongPathNV, (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY))
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_ptr((program), (location), (genMode), (components), (coeffs))
GLATTER_UBLOCK(void, APIENTRY, glProgramPathFragmentInputGenNV, (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs))
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_ptr((path), (fillMode), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathNV, (GLuint path, GLenum fillMode, GLuint mask))
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_ptr((path), (reference), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathNV, (GLuint path, GLint reference, GLuint mask))
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_ptr((path), (fillMode), (mask), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathNV, (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode))
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_ptr((path), (reference), (mask), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathNV, (GLuint path, GLint reference, GLuint mask, GLenum coverMode))
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_ptr((resultPath), (srcPath), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glTransformPathNV, (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues))
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_ptr((resultPath), (numPaths), (paths), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightPathsNV, (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights))
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_ptr((target), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSampleLocationsfvNV, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_ptr((framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSampleLocationsfvNV, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glResolveDepthValuesNV, (void))
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_ptr((index), (swizzlex), (swizzley), (swizzlez), (swizzlew))
GLATTER_UBLOCK(void, APIENTRY, glViewportSwizzleNV, (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew))
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_ptr((target), (attachment), (texture), (level), (baseViewIndex), (numViews))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews))
#endif // defined(GL_OVR_multiview)
#if defined(GL_VERSION_1_0)
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_ptr((sfactor), (dfactor))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunc, (GLenum sfactor, GLenum dfactor))
#define glClear(mask) glatter_glClear_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glClear, (GLbitfield mask))
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glClearDepth(depth) glatter_glClearDepth_ptr((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepth, (GLdouble depth))
#define glClearStencil(s) glatter_glClearStencil_ptr((s))
GLATTER_UBLOCK(void, APIENTRY, glClearStencil, (GLint s))
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#define glCullFace(mode) glatter_glCullFace_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glCullFace, (GLenum mode))
#define glDepthFunc(func) glatter_glDepthFunc_ptr((func))
GLATTER_UBLOCK(void, APIENTRY, glDepthFunc, (GLenum func))
#define glDepthMask(flag) glatter_glDepthMask_ptr((flag))
GLATTER_UBLOCK(void, APIENTRY, glDepthMask, (GLboolean flag))
#define glDepthRange(near, far) glatter_glDepthRange_ptr((near), (far))
GLATTER_UBLOCK(void, APIENTRY, glDepthRange, (GLdouble near, GLdouble far))
#define glDisable(cap) glatter_glDisable_ptr((cap))
GLATTER_UBLOCK(void, APIENTRY, glDisable, (GLenum cap))
#define glDrawBuffer(buf) glatter_glDrawBuffer_ptr((buf))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffer, (GLenum buf))
#define glEnable(cap) glatter_glEnable_ptr((cap))
GLATTER_UBLOCK(void, APIENTRY, glEnable, (GLenum cap))
#define glFinish() glatter_glFinish_ptr()
GLATTER_UBLOCK(void, APIENTRY, glFinish, (void))
#define glFlush() glatter_glFlush_ptr()
GLATTER_UBLOCK(void, APIENTRY, glFlush, (void))
#define glFrontFace(mode) glatter_glFrontFace_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glFrontFace, (GLenum mode))
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_ptr((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleanv, (GLenum pname, GLboolean *data))
#define glGetDoublev(pname, data) glatter_glGetDoublev_ptr((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublev, (GLenum pname, GLdouble *data))
#define glGetError() glatter_glGetError_ptr()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetError, (void))
#define glGetFloatv(pname, data) glatter_glGetFloatv_ptr((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloatv, (GLenum pname, GLfloat *data))
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_ptr((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerv, (GLenum pname, GLint *data))
#define glGetString(name) glatter_glGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetString, (GLenum name))
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_ptr((target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTexImage, (GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glHint(target, mode) glatter_glHint_ptr((target), (mode))
GLATTER_UBLOCK(void, APIENTRY, glHint, (GLenum target, GLenum mode))
#define glIsEnabled(cap) glatter_glIsEnabled_ptr((cap))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabled, (GLenum cap))
#define glLineWidth(width) glatter_glLineWidth_ptr((width))
GLATTER_UBLOCK(void, APIENTRY, glLineWidth, (GLfloat width))
#define glLogicOp(opcode) glatter_glLogicOp_ptr((opcode))
GLATTER_UBLOCK(void, APIENTRY, glLogicOp, (GLenum opcode))
#define glPixelStoref(pname, param) glatter_glPixelStoref_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStoref, (GLenum pname, GLfloat param))
#define glPixelStorei(pname, param) glatter_glPixelStorei_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStorei, (GLenum pname, GLint param))
#define glPointSize(size) glatter_glPointSize_ptr((size))
GLATTER_UBLOCK(void, APIENTRY, glPointSize, (GLfloat size))
#define glPolygonMode(face, mode) glatter_glPolygonMode_ptr((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glPolygonMode, (GLenum face, GLenum mode))
#define glReadBuffer(src) glatter_glReadBuffer_ptr((src))
GLATTER_UBLOCK(void, APIENTRY, glReadBuffer, (GLenum src))
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_ptr((x), (y), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels))
#define glScissor(x, y, width, height) glatter_glScissor_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height))
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFunc, (GLenum func, GLint ref, GLuint mask))
#define glStencilMask(mask) glatter_glStencilMask_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMask, (GLuint mask))
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_ptr((fail), (zfail), (zpass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass))
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D_ptr((target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage1D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterf, (GLenum target, GLenum pname, GLfloat param))
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteri, (GLenum target, GLenum pname, GLint param))
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glViewport(x, y, width, height) glatter_glViewport_ptr((x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_VERSION_1_0)
#if defined(GL_VERSION_1_1)
#define glBindTexture(target, texture) glatter_glBindTexture_ptr((target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTexture, (GLenum target, GLuint texture))
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D_ptr((target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_ptr((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_ptr((target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTextures, (GLsizei n, const GLuint *textures))
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawArrays, (GLenum mode, GLint first, GLsizei count))
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_ptr((mode), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void *indices))
#define glGenTextures(n, textures) glatter_glGenTextures_ptr((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glGenTextures, (GLsizei n, GLuint *textures))
#define glGetPointerv(pname, params) glatter_glGetPointerv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointerv, (GLenum pname, void **params))
#define glIsTexture(texture) glatter_glIsTexture_ptr((texture))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTexture, (GLuint texture))
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_ptr((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffset, (GLfloat factor, GLfloat units))
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_ptr((target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_VERSION_1_1)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_ptr((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, APIENTRY, glActiveTexture, (GLenum texture))
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_ptr((target), (level), (internalformat), (width), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_ptr((target), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage_ptr((target), (level), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTexImage, (GLenum target, GLint level, void *img))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_ptr((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_ptr((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays_ptr((mode), (first), (count), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArrays, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount))
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements_ptr((mode), (count), (type), (indices), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElements, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount))
#define glPointParameterf(pname, param) glatter_glPointParameterf_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterf, (GLenum pname, GLfloat param))
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfv, (GLenum pname, const GLfloat *params))
#define glPointParameteri(pname, param) glatter_glPointParameteri_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteri, (GLenum pname, GLint param))
#define glPointParameteriv(pname, params) glatter_glPointParameteriv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteriv, (GLenum pname, const GLint *params))
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery_ptr((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBindBuffer(target, buffer) glatter_glBindBuffer_ptr((target), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBufferData(target, size, data, usage) glatter_glBufferData_ptr((target), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glEndQuery(target) glatter_glEndQuery_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glEndQuery, (GLenum target))
#define glGenBuffers(n, buffers) glatter_glGenBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenQueries(n, ids) glatter_glGenQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, void *data))
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectiv, (GLuint id, GLenum pname, GLint *params))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glIsBuffer(buffer) glatter_glIsBuffer_ptr((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsQuery(id) glatter_glIsQuery_ptr((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsQuery, (GLuint id))
#define glMapBuffer(target, access) glatter_glMapBuffer_ptr((target), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBuffer, (GLenum target, GLenum access))
#define glUnmapBuffer(target) glatter_glUnmapBuffer_ptr((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapBuffer, (GLenum target))
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_ptr((program), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_ptr((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glCompileShader(shader) glatter_glCompileShader_ptr((shader))
GLATTER_UBLOCK(void, APIENTRY, glCompileShader, (GLuint shader))
#define glCreateProgram() glatter_glCreateProgram_ptr()
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader_ptr((type))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShader, (GLenum type))
#define glDeleteProgram(program) glatter_glDeleteProgram_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteShader(shader) glatter_glDeleteShader_ptr((shader))
GLATTER_UBLOCK(void, APIENTRY, glDeleteShader, (GLuint shader))
#define glDetachShader(program, shader) glatter_glDetachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_ptr((n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_ptr((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_ptr((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_ptr((program), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_ptr((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_ptr((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_ptr((shader), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_ptr((index), (pname), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdv, (GLuint index, GLenum pname, GLdouble *params))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glIsProgram(program) glatter_glIsProgram_ptr((program))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgram, (GLuint program))
#define glIsShader(shader) glatter_glIsShader_ptr((shader))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsShader, (GLuint shader))
#define glLinkProgram(program) glatter_glLinkProgram_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glLinkProgram, (GLuint program))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_ptr((shader), (count), (string), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_ptr((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_ptr((face), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_ptr((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glUniform1f(location, v0) glatter_glUniform1f_ptr((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i_ptr((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1d, (GLuint index, GLdouble x))
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1s, (GLuint index, GLshort x))
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sv, (GLuint index, const GLshort *v))
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2s, (GLuint index, GLshort x, GLshort y))
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sv, (GLuint index, const GLshort *v))
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3s, (GLuint index, GLshort x, GLshort y, GLshort z))
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nbv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Niv, (GLuint index, const GLint *v))
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nsv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nub, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nuiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nusv, (GLuint index, const GLushort *v))
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4bv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4iv, (GLuint index, const GLint *v))
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4s, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4uiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4usv, (GLuint index, const GLushort *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_ptr((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender_ptr((id), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRender, (GLuint id, GLenum mode))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_ptr((primitiveMode))
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_ptr((target), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_ptr((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation_ptr((program), (color), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocation, (GLuint program, GLuint color, const GLchar *name))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_ptr((target), (framebuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_ptr((target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindVertexArray(array) glatter_glBindVertexArray_ptr((array))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_ptr((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_ptr((target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClampColor(target, clamp) glatter_glClampColor_ptr((target), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glClampColor, (GLenum target, GLenum clamp))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_ptr((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_ptr((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, APIENTRY, glColorMaski, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDisablei(target, index) glatter_glDisablei_ptr((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisablei, (GLenum target, GLuint index))
#define glEnablei(target, index) glatter_glEnablei_ptr((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnablei, (GLenum target, GLuint index))
#define glEndConditionalRender() glatter_glEndConditionalRender_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRender, (void))
#define glEndTransformFeedback() glatter_glEndTransformFeedback_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedback, (void))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_ptr((target), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_ptr((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture1D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D_ptr((target), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture3D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_ptr((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGenerateMipmap(target) glatter_glGenerateMipmap_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_ptr((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi_ptr((name), (index))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIiv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIuiv, (GLenum target, GLenum pname, GLuint *params))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glIsEnabledi(target, index) glatter_glIsEnabledi_ptr((target), (index))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledi, (GLenum target, GLuint index))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_ptr((framebuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_ptr((renderbuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsVertexArray(array) glatter_glIsVertexArray_ptr((array))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_ptr((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_ptr((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIiv, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIuiv, (GLenum target, GLenum pname, const GLuint *params))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_ptr((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui_ptr((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1i, (GLuint index, GLint x))
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1iv, (GLuint index, const GLint *v))
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1ui, (GLuint index, GLuint x))
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2i, (GLuint index, GLint x, GLint y))
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2iv, (GLuint index, const GLint *v))
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2ui, (GLuint index, GLuint x, GLuint y))
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3i, (GLuint index, GLint x, GLint y, GLint z))
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3iv, (GLuint index, const GLint *v))
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3ui, (GLuint index, GLuint x, GLuint y, GLuint z))
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4bv, (GLuint index, const GLbyte *v))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4sv, (GLuint index, const GLshort *v))
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4usv, (GLuint index, const GLushort *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_ptr((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_ptr((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_ptr((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_ptr((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_ptr((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_ptr((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName_ptr((program), (uniformIndex), (bufSize), (length), (uniformName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformName, (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_ptr((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_ptr((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_ptr((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartIndex, (GLuint index))
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_ptr((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBuffer, (GLenum target, GLenum internalformat, GLuint buffer))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_ptr((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glDeleteSync(sync) glatter_glDeleteSync_ptr((sync))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSync, (GLsync sync))
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_ptr((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_ptr((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_ptr((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementsBaseVertex, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glFenceSync(condition, flags) glatter_glFenceSync_ptr((condition), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_ptr((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_ptr((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_ptr((pname), (index), (val))
GLATTER_UBLOCK(void, APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_ptr((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glIsSync(sync) glatter_glIsSync_ptr((sync))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSync, (GLsync sync))
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex_ptr((mode), (count), (type), (indices), (drawcount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsBaseVertex, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex))
#define glProvokingVertex(mode) glatter_glProvokingVertex_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glProvokingVertex, (GLenum mode))
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_ptr((maskNumber), (mask))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample_ptr((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample_ptr((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(void, APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed_ptr((program), (colorNumber), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocationIndexed, (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name))
#define glBindSampler(unit, sampler) glatter_glBindSampler_ptr((unit), (sampler))
GLATTER_UBLOCK(void, APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glGenSamplers(count, samplers) glatter_glGenSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataIndex, (GLuint program, const GLchar *name))
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjecti64v, (GLuint id, GLenum pname, GLint64 *params))
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectui64v, (GLuint id, GLenum pname, GLuint64 *params))
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIiv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIuiv, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glIsSampler(sampler) glatter_glIsSampler_ptr((sampler))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSampler, (GLuint sampler))
#define glQueryCounter(id, target) glatter_glQueryCounter_ptr((id), (target))
GLATTER_UBLOCK(void, APIENTRY, glQueryCounter, (GLuint id, GLenum target))
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIiv, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIuiv, (GLuint sampler, GLenum pname, const GLuint *param))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_ptr((index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed_ptr((target), (index), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQueryIndexed, (GLenum target, GLuint index, GLuint id))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_ptr((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_ptr((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparatei, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_ptr((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationi, (GLuint buf, GLenum mode))
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_ptr((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparatei, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_ptr((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunci, (GLuint buf, GLenum src, GLenum dst))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_ptr((mode), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_ptr((mode), (type), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback_ptr((mode), (id))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedback, (GLenum mode, GLuint id))
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream_ptr((mode), (id), (stream))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStream, (GLenum mode, GLuint id, GLuint stream))
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed_ptr((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEndQueryIndexed, (GLenum target, GLuint index))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName_ptr((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName_ptr((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv_ptr((program), (shadertype), (index), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformiv, (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values))
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv_ptr((program), (shadertype), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStageiv, (GLuint program, GLenum shadertype, GLenum pname, GLint *values))
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv_ptr((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryIndexediv, (GLenum target, GLuint index, GLenum pname, GLint *params))
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex_ptr((program), (shadertype), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetSubroutineIndex, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation_ptr((program), (shadertype), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetSubroutineUniformLocation, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv_ptr((shadertype), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformSubroutineuiv, (GLenum shadertype, GLint location, GLuint *params))
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformdv, (GLuint program, GLint location, GLdouble *params))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_ptr((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTransformFeedback, (GLuint id))
#define glMinSampleShading(value) glatter_glMinSampleShading_ptr((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShading, (GLfloat value))
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv_ptr((pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameterfv, (GLenum pname, const GLfloat *values))
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_ptr((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameteri, (GLenum pname, GLint value))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPauseTransformFeedback, (void))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_ptr()
GLATTER_UBLOCK(void, APIENTRY, glResumeTransformFeedback, (void))
#define glUniform1d(location, x) glatter_glUniform1d_ptr((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1d, (GLint location, GLdouble x))
#define glUniform1dv(location, count, value) glatter_glUniform1dv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform2d(location, x, y) glatter_glUniform2d_ptr((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2d, (GLint location, GLdouble x, GLdouble y))
#define glUniform2dv(location, count, value) glatter_glUniform2dv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform3d(location, x, y, z) glatter_glUniform3d_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3d, (GLint location, GLdouble x, GLdouble y, GLdouble z))
#define glUniform3dv(location, count, value) glatter_glUniform3dv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4d, (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glUniform4dv(location, count, value) glatter_glUniform4dv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv_ptr((shadertype), (count), (indices))
GLATTER_UBLOCK(void, APIENTRY, glUniformSubroutinesuiv, (GLenum shadertype, GLsizei count, const GLuint *indices))
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_ptr((pipeline), (program))
GLATTER_UBLOCK(void, APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#define glClearDepthf(d) glatter_glClearDepthf_ptr((d))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthf, (GLfloat d))
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_ptr((type), (count), (strings))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv_ptr((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeArrayv, (GLuint first, GLsizei count, const GLdouble *v))
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed_ptr((index), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeIndexed, (GLuint index, GLdouble n, GLdouble f))
#define glDepthRangef(n, f) glatter_glDepthRangef_ptr((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_v, (GLenum target, GLuint index, GLdouble *data))
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_v, (GLenum target, GLuint index, GLfloat *data))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_ptr((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_ptr((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_ptr((pipeline), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_ptr((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLdv, (GLuint index, GLenum pname, GLdouble *params))
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_ptr((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_ptr((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1d, (GLuint program, GLint location, GLdouble v0))
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2d, (GLuint program, GLint location, GLdouble v0, GLdouble v1))
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2))
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3))
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_ptr()
GLATTER_UBLOCK(void, APIENTRY, glReleaseShaderCompiler, (void))
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv_ptr((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorArrayv, (GLuint first, GLsizei count, const GLint *v))
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed_ptr((index), (left), (bottom), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexed, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexedv, (GLuint index, const GLint *v))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_ptr((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_ptr((pipeline), (stages), (program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1d, (GLuint index, GLdouble x))
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dv, (GLuint index, const GLdouble *v))
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer_ptr((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv_ptr((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportArrayv, (GLuint first, GLsizei count, const GLfloat *v))
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf_ptr((index), (x), (y), (w), (h))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedf, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedfv, (GLuint index, const GLfloat *v))
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_ptr((unit), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance_ptr((mode), (first), (count), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedBaseInstance, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance_ptr((mode), (count), (type), (indices), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance_ptr((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertexBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance))
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced_ptr((mode), (id), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackInstanced, (GLenum mode, GLuint id, GLsizei instancecount))
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced_ptr((mode), (id), (stream), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStreamInstanced, (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount))
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv_ptr((program), (bufferIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAtomicCounterBufferiv, (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_ptr((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_ptr((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D_ptr((target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage1D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_ptr((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_ptr((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_ptr((bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData_ptr((target), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferData, (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData_ptr((target), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferSubData, (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_ptr((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, APIENTRY, glCopyImageSubData, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_ptr((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallback, (GLDEBUGPROC callback, const void *userParam))
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_ptr((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControl, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_ptr((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsert, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_ptr((num_groups_x), (num_groups_y), (num_groups_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_ptr((indirect))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_ptr((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLog, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v_ptr((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformati64v, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params))
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_ptr((identifier), (name), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabel, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_ptr((ptr), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectPtrLabel, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_ptr((program), (programInterface), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocationIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_ptr((program), (programInterface), (index), (bufSize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_ptr((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params))
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData_ptr((buffer))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferData, (GLuint buffer))
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData_ptr((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_ptr((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_ptr((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage_ptr((texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexImage, (GLuint texture, GLint level))
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth))
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect_ptr((mode), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirect, (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect_ptr((mode), (type), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_ptr((identifier), (name), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectLabel, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_ptr((ptr), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectPtrLabel, (const void *ptr, GLsizei length, const GLchar *label))
#define glPopDebugGroup() glatter_glPopDebugGroup_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPopDebugGroup, (void))
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_ptr((source), (id), (length), (message))
GLATTER_UBLOCK(void, APIENTRY, glPushDebugGroup, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding_ptr((program), (storageBlockIndex), (storageBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glShaderStorageBlockBinding, (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding))
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_ptr((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferRange, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_ptr((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_ptr((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView_ptr((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
GLATTER_UBLOCK(void, APIENTRY, glTextureView, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_ptr((attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_ptr((attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_ptr((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat_ptr((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_ptr((bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase_ptr((target), (first), (count), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersBase, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers))
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange_ptr((target), (first), (count), (buffers), (offsets), (sizes))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersRange, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes))
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures_ptr((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers_ptr((first), (count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glBindSamplers, (GLuint first, GLsizei count, const GLuint *samplers))
#define glBindTextures(first, count, textures) glatter_glBindTextures_ptr((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers_ptr((first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffers, (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage_ptr((target), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glBufferStorage, (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags))
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage_ptr((texture), (level), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexImage, (GLuint texture, GLint level, GLenum format, GLenum type, const void *data))
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit_ptr((unit), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTextureUnit, (GLuint unit, GLuint texture))
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer_ptr((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitNamedFramebuffer, (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus_ptr((framebuffer), (target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatus, (GLuint framebuffer, GLenum target))
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData_ptr((buffer), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferData, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData_ptr((buffer), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubData, (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizei size, GLenum format, GLenum type, const void *data))
#define glClearNamedFramebufferfi(framebuffer, buffer, depth, stencil) glatter_glClearNamedFramebufferfi_ptr((framebuffer), (buffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfi, (GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil))
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv_ptr((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv_ptr((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv_ptr((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferuiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClipControl(origin, depth) glatter_glClipControl_ptr((origin), (depth))
GLATTER_UBLOCK(void, APIENTRY, glClipControl, (GLenum origin, GLenum depth))
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D_ptr((texture), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D_ptr((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData_ptr((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyNamedBufferSubData, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizei size))
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D_ptr((texture), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D_ptr((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateBuffers, (GLsizei n, GLuint *buffers))
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glCreateProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glCreateQueries(target, n, ids) glatter_glCreateQueries_ptr((target), (n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateQueries, (GLenum target, GLsizei n, GLuint *ids))
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers_ptr((n), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glCreateSamplers, (GLsizei n, GLuint *samplers))
#define glCreateTextures(target, n, textures) glatter_glCreateTextures_ptr((target), (n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glCreateTextures, (GLenum target, GLsizei n, GLuint *textures))
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glCreateVertexArrays, (GLsizei n, GLuint *arrays))
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib_ptr((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib_ptr((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange_ptr((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizei length))
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap_ptr((texture))
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmap, (GLuint texture))
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage_ptr((texture), (level), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImage, (GLuint texture, GLint level, GLsizei bufSize, void *pixels))
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels))
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_ptr()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatus, (void))
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteri64v, (GLuint buffer, GLenum pname, GLint64 *params))
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteriv, (GLuint buffer, GLenum pname, GLint *params))
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointerv, (GLuint buffer, GLenum pname, void **params))
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData_ptr((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizei size, void *data))
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv_ptr((framebuffer), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameteriv, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv_ptr((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameteriv, (GLuint framebuffer, GLenum pname, GLint *param))
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv_ptr((renderbuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameteriv, (GLuint renderbuffer, GLenum pname, GLint *params))
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjecti64v_ptr((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjecti64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectiv_ptr((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjectui64v_ptr((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectui64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectuiv_ptr((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectuiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage_ptr((texture), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImage, (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv_ptr((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfv, (GLuint texture, GLint level, GLenum pname, GLfloat *params))
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv_ptr((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameteriv, (GLuint texture, GLint level, GLenum pname, GLint *params))
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIiv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuiv, (GLuint texture, GLenum pname, GLuint *params))
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfv, (GLuint texture, GLenum pname, GLfloat *params))
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameteriv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v_ptr((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki64_v, (GLuint xfb, GLenum pname, GLuint index, GLint64 *param))
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v_ptr((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki_v, (GLuint xfb, GLenum pname, GLuint index, GLint *param))
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv_ptr((xfb), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackiv, (GLuint xfb, GLenum pname, GLint *param))
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv_ptr((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexed64iv, (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param))
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv_ptr((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexediv, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv_ptr((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayiv, (GLuint vaobj, GLenum pname, GLint *param))
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage_ptr((target), (lod), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImage, (GLenum target, GLint lod, GLsizei bufSize, void *pixels))
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage_ptr((target), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdv, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfv, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformiv, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuiv, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData_ptr((framebuffer), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData_ptr((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferSubData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer_ptr((buffer), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBuffer, (GLuint buffer, GLenum access))
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange_ptr((buffer), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizei length, GLbitfield access))
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_ptr((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData_ptr((buffer), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferData, (GLuint buffer, GLsizei size, const void *data, GLenum usage))
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage_ptr((buffer), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorage, (GLuint buffer, GLsizei size, const void *data, GLbitfield flags))
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData_ptr((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizei size, const void *data))
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer_ptr((framebuffer), (buf))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffer, (GLuint framebuffer, GLenum buf))
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers_ptr((framebuffer), (n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffers, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri_ptr((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteri, (GLuint framebuffer, GLenum pname, GLint param))
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer_ptr((framebuffer), (src))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferReadBuffer, (GLuint framebuffer, GLenum src))
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer_ptr((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbuffer, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture_ptr((framebuffer), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer_ptr((framebuffer), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayer, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage_ptr((renderbuffer), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorage, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample_ptr((renderbuffer), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisample, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_ptr((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#define glTextureBarrier() glatter_glTextureBarrier_ptr()
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrier, (void))
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer_ptr((texture), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureBuffer, (GLuint texture, GLenum internalformat, GLuint buffer))
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange_ptr((texture), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRange, (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizei size))
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIiv, (GLuint texture, GLenum pname, const GLint *params))
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuiv, (GLuint texture, GLenum pname, const GLuint *params))
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf_ptr((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterf, (GLuint texture, GLenum pname, GLfloat param))
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv_ptr((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfv, (GLuint texture, GLenum pname, const GLfloat *param))
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri_ptr((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteri, (GLuint texture, GLenum pname, GLint param))
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv_ptr((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriv, (GLuint texture, GLenum pname, const GLint *param))
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D_ptr((texture), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D_ptr((texture), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample_ptr((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D_ptr((texture), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample_ptr((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D_ptr((texture), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D_ptr((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase_ptr((xfb), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferBase, (GLuint xfb, GLuint index, GLuint buffer))
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange_ptr((xfb), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferRange, (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizei size))
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer_ptr((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBuffer, (GLuint buffer))
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding_ptr((vaobj), (attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribBinding, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat_ptr((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat_ptr((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribIFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat_ptr((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribLFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor_ptr((vaobj), (bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindingDivisor, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer_ptr((vaobj), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayElementBuffer, (GLuint vaobj, GLuint buffer))
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer_ptr((vaobj), (bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffer, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers_ptr((vaobj), (first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffers, (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#endif // defined(GL_VERSION_4_5)
#endif // defined(__glcorearb_h_)
#if defined(__glext_h_)
#if defined(GL_3DFX_tbuffer)
#define glTbufferMask3DFX(mask) glatter_glTbufferMask3DFX_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glTbufferMask3DFX, (GLuint mask))
#endif // defined(GL_3DFX_tbuffer)
#if defined(GL_AMD_debug_output)
#define glDebugMessageCallbackAMD(callback, userParam) glatter_glDebugMessageCallbackAMD_ptr((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallbackAMD, (GLDEBUGPROCAMD callback, void *userParam))
#define glDebugMessageEnableAMD(category, severity, count, ids, enabled) glatter_glDebugMessageEnableAMD_ptr((category), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageEnableAMD, (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsertAMD(category, severity, id, length, buf) glatter_glDebugMessageInsertAMD_ptr((category), (severity), (id), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsertAMD, (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf))
#define glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message) glatter_glGetDebugMessageLogAMD_ptr((count), (bufsize), (categories), (severities), (ids), (lengths), (message))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLogAMD, (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message))
#endif // defined(GL_AMD_debug_output)
#if defined(GL_AMD_draw_buffers_blend)
#define glBlendEquationIndexedAMD(buf, mode) glatter_glBlendEquationIndexedAMD_ptr((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationIndexedAMD, (GLuint buf, GLenum mode))
#define glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateIndexedAMD_ptr((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateIndexedAMD, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendFuncIndexedAMD(buf, src, dst) glatter_glBlendFuncIndexedAMD_ptr((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncIndexedAMD, (GLuint buf, GLenum src, GLenum dst))
#define glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateIndexedAMD_ptr((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateIndexedAMD, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#endif // defined(GL_AMD_draw_buffers_blend)
#if defined(GL_AMD_framebuffer_sample_positions)
#define glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values) glatter_glFramebufferSamplePositionsfvAMD_ptr((target), (numsamples), (pixelindex), (values))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSamplePositionsfvAMD, (GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values))
#define glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values) glatter_glGetFramebufferParameterfvAMD_ptr((target), (pname), (numsamples), (pixelindex), (size), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameterfvAMD, (GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values))
#define glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values) glatter_glGetNamedFramebufferParameterfvAMD_ptr((framebuffer), (pname), (numsamples), (pixelindex), (size), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameterfvAMD, (GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values))
#define glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values) glatter_glNamedFramebufferSamplePositionsfvAMD_ptr((framebuffer), (numsamples), (pixelindex), (values))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSamplePositionsfvAMD, (GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values))
#endif // defined(GL_AMD_framebuffer_sample_positions)
#if defined(GL_AMD_gpu_shader_int64)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformi64vNV, (GLuint program, GLint location, GLint64EXT *params))
#define glGetUniformui64vNV(program, location, params) glatter_glGetUniformui64vNV_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformui64vNV, (GLuint program, GLint location, GLuint64EXT *params))
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_ptr((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64NV, (GLuint program, GLint location, GLint64EXT x))
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_ptr((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64NV, (GLuint program, GLint location, GLuint64EXT x))
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_ptr((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y))
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_ptr((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y))
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_ptr((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_ptr((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_ptr((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT *value))
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_ptr((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_ptr((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64NV, (GLint location, GLint64EXT x))
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_ptr((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64NV, (GLint location, GLuint64EXT x))
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_ptr((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64NV, (GLint location, GLint64EXT x, GLint64EXT y))
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_ptr((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y))
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64vNV, (GLint location, GLsizei count, const GLint64EXT *value))
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_AMD_gpu_shader_int64)
#if defined(GL_AMD_interleaved_elements)
#define glVertexAttribParameteriAMD(index, pname, param) glatter_glVertexAttribParameteriAMD_ptr((index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribParameteriAMD, (GLuint index, GLenum pname, GLint param))
#endif // defined(GL_AMD_interleaved_elements)
#if defined(GL_AMD_multi_draw_indirect)
#define glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride) glatter_glMultiDrawArraysIndirectAMD_ptr((mode), (indirect), (primcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectAMD, (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride))
#define glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride) glatter_glMultiDrawElementsIndirectAMD_ptr((mode), (type), (indirect), (primcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectAMD, (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride))
#endif // defined(GL_AMD_multi_draw_indirect)
#if defined(GL_AMD_name_gen_delete)
#define glDeleteNamesAMD(identifier, num, names) glatter_glDeleteNamesAMD_ptr((identifier), (num), (names))
GLATTER_UBLOCK(void, APIENTRY, glDeleteNamesAMD, (GLenum identifier, GLuint num, const GLuint *names))
#define glGenNamesAMD(identifier, num, names) glatter_glGenNamesAMD_ptr((identifier), (num), (names))
GLATTER_UBLOCK(void, APIENTRY, glGenNamesAMD, (GLenum identifier, GLuint num, GLuint *names))
#define glIsNameAMD(identifier, name) glatter_glIsNameAMD_ptr((identifier), (name))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNameAMD, (GLenum identifier, GLuint name))
#endif // defined(GL_AMD_name_gen_delete)
#if defined(GL_AMD_occlusion_query_event)
#define glQueryObjectParameteruiAMD(target, id, pname, param) glatter_glQueryObjectParameteruiAMD_ptr((target), (id), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glQueryObjectParameteruiAMD, (GLenum target, GLuint id, GLenum pname, GLuint param))
#endif // defined(GL_AMD_occlusion_query_event)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_ptr((monitor))
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfMonitorAMD, (GLuint monitor))
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_ptr((n), (monitors))
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_ptr((monitor))
GLATTER_UBLOCK(void, APIENTRY, glEndPerfMonitorAMD, (GLuint monitor))
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_ptr((n), (monitors))
GLATTER_UBLOCK(void, APIENTRY, glGenPerfMonitorsAMD, (GLsizei n, GLuint *monitors))
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_ptr((monitor), (pname), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterDataAMD, (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten))
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_ptr((group), (counter), (pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterInfoAMD, (GLuint group, GLuint counter, GLenum pname, void *data))
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_ptr((group), (counter), (bufSize), (length), (counterString))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCounterStringAMD, (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString))
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_ptr((group), (numCounters), (maxActiveCounters), (counterSize), (counters))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorCountersAMD, (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters))
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_ptr((group), (bufSize), (length), (groupString))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupStringAMD, (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString))
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_ptr((numGroups), (groupsSize), (groups))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfMonitorGroupsAMD, (GLint *numGroups, GLsizei groupsSize, GLuint *groups))
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_ptr((monitor), (enable), (group), (numCounters), (counterList))
GLATTER_UBLOCK(void, APIENTRY, glSelectPerfMonitorCountersAMD, (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList))
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_AMD_sample_positions)
#define glSetMultisamplefvAMD(pname, index, val) glatter_glSetMultisamplefvAMD_ptr((pname), (index), (val))
GLATTER_UBLOCK(void, APIENTRY, glSetMultisamplefvAMD, (GLenum pname, GLuint index, const GLfloat *val))
#endif // defined(GL_AMD_sample_positions)
#if defined(GL_AMD_sparse_texture)
#define glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags) glatter_glTexStorageSparseAMD_ptr((target), (internalFormat), (width), (height), (depth), (layers), (flags))
GLATTER_UBLOCK(void, APIENTRY, glTexStorageSparseAMD, (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags))
#define glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags) glatter_glTextureStorageSparseAMD_ptr((texture), (target), (internalFormat), (width), (height), (depth), (layers), (flags))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorageSparseAMD, (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags))
#endif // defined(GL_AMD_sparse_texture)
#if defined(GL_AMD_stencil_operation_extended)
#define glStencilOpValueAMD(face, value) glatter_glStencilOpValueAMD_ptr((face), (value))
GLATTER_UBLOCK(void, APIENTRY, glStencilOpValueAMD, (GLenum face, GLuint value))
#endif // defined(GL_AMD_stencil_operation_extended)
#if defined(GL_AMD_vertex_shader_tessellator)
#define glTessellationFactorAMD(factor) glatter_glTessellationFactorAMD_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glTessellationFactorAMD, (GLfloat factor))
#define glTessellationModeAMD(mode) glatter_glTessellationModeAMD_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glTessellationModeAMD, (GLenum mode))
#endif // defined(GL_AMD_vertex_shader_tessellator)
#if defined(GL_APPLE_element_array)
#define glDrawElementArrayAPPLE(mode, first, count) glatter_glDrawElementArrayAPPLE_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementArrayAPPLE, (GLenum mode, GLint first, GLsizei count))
#define glDrawRangeElementArrayAPPLE(mode, start, end, first, count) glatter_glDrawRangeElementArrayAPPLE_ptr((mode), (start), (end), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementArrayAPPLE, (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count))
#define glElementPointerAPPLE(type, pointer) glatter_glElementPointerAPPLE_ptr((type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glElementPointerAPPLE, (GLenum type, const void *pointer))
#define glMultiDrawElementArrayAPPLE(mode, first, count, primcount) glatter_glMultiDrawElementArrayAPPLE_ptr((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementArrayAPPLE, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#define glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount) glatter_glMultiDrawRangeElementArrayAPPLE_ptr((mode), (start), (end), (first), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawRangeElementArrayAPPLE, (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount))
#endif // defined(GL_APPLE_element_array)
#if defined(GL_APPLE_fence)
#define glDeleteFencesAPPLE(n, fences) glatter_glDeleteFencesAPPLE_ptr((n), (fences))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFencesAPPLE, (GLsizei n, const GLuint *fences))
#define glFinishFenceAPPLE(fence) glatter_glFinishFenceAPPLE_ptr((fence))
GLATTER_UBLOCK(void, APIENTRY, glFinishFenceAPPLE, (GLuint fence))
#define glFinishObjectAPPLE(object, name) glatter_glFinishObjectAPPLE_ptr((object), (name))
GLATTER_UBLOCK(void, APIENTRY, glFinishObjectAPPLE, (GLenum object, GLint name))
#define glGenFencesAPPLE(n, fences) glatter_glGenFencesAPPLE_ptr((n), (fences))
GLATTER_UBLOCK(void, APIENTRY, glGenFencesAPPLE, (GLsizei n, GLuint *fences))
#define glIsFenceAPPLE(fence) glatter_glIsFenceAPPLE_ptr((fence))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFenceAPPLE, (GLuint fence))
#define glSetFenceAPPLE(fence) glatter_glSetFenceAPPLE_ptr((fence))
GLATTER_UBLOCK(void, APIENTRY, glSetFenceAPPLE, (GLuint fence))
#define glTestFenceAPPLE(fence) glatter_glTestFenceAPPLE_ptr((fence))
GLATTER_UBLOCK(GLboolean, APIENTRY, glTestFenceAPPLE, (GLuint fence))
#define glTestObjectAPPLE(object, name) glatter_glTestObjectAPPLE_ptr((object), (name))
GLATTER_UBLOCK(GLboolean, APIENTRY, glTestObjectAPPLE, (GLenum object, GLuint name))
#endif // defined(GL_APPLE_fence)
#if defined(GL_APPLE_flush_buffer_range)
#define glBufferParameteriAPPLE(target, pname, param) glatter_glBufferParameteriAPPLE_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glBufferParameteriAPPLE, (GLenum target, GLenum pname, GLint param))
#define glFlushMappedBufferRangeAPPLE(target, offset, size) glatter_glFlushMappedBufferRangeAPPLE_ptr((target), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedBufferRangeAPPLE, (GLenum target, GLintptr offset, GLsizeiptr size))
#endif // defined(GL_APPLE_flush_buffer_range)
#if defined(GL_APPLE_object_purgeable)
#define glGetObjectParameterivAPPLE(objectType, name, pname, params) glatter_glGetObjectParameterivAPPLE_ptr((objectType), (name), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectParameterivAPPLE, (GLenum objectType, GLuint name, GLenum pname, GLint *params))
#define glObjectPurgeableAPPLE(objectType, name, option) glatter_glObjectPurgeableAPPLE_ptr((objectType), (name), (option))
GLATTER_UBLOCK(GLenum, APIENTRY, glObjectPurgeableAPPLE, (GLenum objectType, GLuint name, GLenum option))
#define glObjectUnpurgeableAPPLE(objectType, name, option) glatter_glObjectUnpurgeableAPPLE_ptr((objectType), (name), (option))
GLATTER_UBLOCK(GLenum, APIENTRY, glObjectUnpurgeableAPPLE, (GLenum objectType, GLuint name, GLenum option))
#endif // defined(GL_APPLE_object_purgeable)
#if defined(GL_APPLE_texture_range)
#define glGetTexParameterPointervAPPLE(target, pname, params) glatter_glGetTexParameterPointervAPPLE_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterPointervAPPLE, (GLenum target, GLenum pname, void **params))
#define glTextureRangeAPPLE(target, length, pointer) glatter_glTextureRangeAPPLE_ptr((target), (length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTextureRangeAPPLE, (GLenum target, GLsizei length, const void *pointer))
#endif // defined(GL_APPLE_texture_range)
#if defined(GL_APPLE_vertex_array_object)
#define glBindVertexArrayAPPLE(array) glatter_glBindVertexArrayAPPLE_ptr((array))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexArrayAPPLE, (GLuint array))
#define glDeleteVertexArraysAPPLE(n, arrays) glatter_glDeleteVertexArraysAPPLE_ptr((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexArraysAPPLE, (GLsizei n, const GLuint *arrays))
#define glGenVertexArraysAPPLE(n, arrays) glatter_glGenVertexArraysAPPLE_ptr((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glGenVertexArraysAPPLE, (GLsizei n, GLuint *arrays))
#define glIsVertexArrayAPPLE(array) glatter_glIsVertexArrayAPPLE_ptr((array))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexArrayAPPLE, (GLuint array))
#endif // defined(GL_APPLE_vertex_array_object)
#if defined(GL_APPLE_vertex_array_range)
#define glFlushVertexArrayRangeAPPLE(length, pointer) glatter_glFlushVertexArrayRangeAPPLE_ptr((length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glFlushVertexArrayRangeAPPLE, (GLsizei length, void *pointer))
#define glVertexArrayParameteriAPPLE(pname, param) glatter_glVertexArrayParameteriAPPLE_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayParameteriAPPLE, (GLenum pname, GLint param))
#define glVertexArrayRangeAPPLE(length, pointer) glatter_glVertexArrayRangeAPPLE_ptr((length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayRangeAPPLE, (GLsizei length, void *pointer))
#endif // defined(GL_APPLE_vertex_array_range)
#if defined(GL_APPLE_vertex_program_evaluators)
#define glDisableVertexAttribAPPLE(index, pname) glatter_glDisableVertexAttribAPPLE_ptr((index), (pname))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribAPPLE, (GLuint index, GLenum pname))
#define glEnableVertexAttribAPPLE(index, pname) glatter_glEnableVertexAttribAPPLE_ptr((index), (pname))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribAPPLE, (GLuint index, GLenum pname))
#define glIsVertexAttribEnabledAPPLE(index, pname) glatter_glIsVertexAttribEnabledAPPLE_ptr((index), (pname))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexAttribEnabledAPPLE, (GLuint index, GLenum pname))
#define glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1dAPPLE_ptr((index), (size), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib1dAPPLE, (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points))
#define glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1fAPPLE_ptr((index), (size), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib1fAPPLE, (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points))
#define glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2dAPPLE_ptr((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib2dAPPLE, (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points))
#define glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2fAPPLE_ptr((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapVertexAttrib2fAPPLE, (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points))
#endif // defined(GL_APPLE_vertex_program_evaluators)
#if defined(GL_ARB_ES3_2_compatibility)
#define glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxARB_ptr((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveBoundingBoxARB, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW))
#endif // defined(GL_ARB_ES3_2_compatibility)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB_ptr((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleARB, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB_ptr((texture))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleARB, (GLuint texture))
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB_ptr((texture), (sampler))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleARB, (GLuint texture, GLuint sampler))
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vARB, (GLuint index, GLenum pname, GLuint64EXT *params))
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB_ptr((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentARB, (GLuint64 handle))
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB_ptr((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentARB, (GLuint64 handle))
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentARB, (GLuint64 handle))
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB_ptr((handle), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentARB, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentARB, (GLuint64 handle))
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentARB, (GLuint64 handle))
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB_ptr((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64ARB, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB_ptr((program), (location), (count), (values))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB_ptr((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64ARB, (GLint location, GLuint64 value))
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64ARB, (GLuint index, GLuint64EXT x))
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vARB, (GLuint index, const GLuint64EXT *v))
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB_ptr((context), (event), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glCreateSyncFromCLeventARB, (struct _cl_context *context, struct _cl_event *event, GLbitfield flags))
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_color_buffer_float)
#define glClampColorARB(target, clamp) glatter_glClampColorARB_ptr((target), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glClampColorARB, (GLenum target, GLenum clamp))
#endif // defined(GL_ARB_color_buffer_float)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB_ptr((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeGroupSizeARB, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z))
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB_ptr((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallbackARB, (GLDEBUGPROCARB callback, const void *userParam))
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB_ptr((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControlARB, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB_ptr((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsertARB, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB_ptr((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLogARB, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers)
#define glDrawBuffersARB(n, bufs) glatter_glDrawBuffersARB_ptr((n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffersARB, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_ARB_draw_buffers)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB_ptr((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateiARB, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB_ptr((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationiARB, (GLuint buf, GLenum mode))
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB_ptr((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateiARB, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB_ptr((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunciARB, (GLuint buf, GLenum src, GLenum dst))
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_draw_instanced)
#define glDrawArraysInstancedARB(mode, first, count, primcount) glatter_glDrawArraysInstancedARB_ptr((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedARB, (GLenum mode, GLint first, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedARB(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedARB_ptr((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedARB, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_ARB_draw_instanced)
#if defined(GL_ARB_fragment_program)
#define glBindProgramARB(target, program) glatter_glBindProgramARB_ptr((target), (program))
GLATTER_UBLOCK(void, APIENTRY, glBindProgramARB, (GLenum target, GLuint program))
#define glDeleteProgramsARB(n, programs) glatter_glDeleteProgramsARB_ptr((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramsARB, (GLsizei n, const GLuint *programs))
#define glGenProgramsARB(n, programs) glatter_glGenProgramsARB_ptr((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glGenProgramsARB, (GLsizei n, GLuint *programs))
#define glGetProgramEnvParameterdvARB(target, index, params) glatter_glGetProgramEnvParameterdvARB_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterdvARB, (GLenum target, GLuint index, GLdouble *params))
#define glGetProgramEnvParameterfvARB(target, index, params) glatter_glGetProgramEnvParameterfvARB_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterfvARB, (GLenum target, GLuint index, GLfloat *params))
#define glGetProgramLocalParameterdvARB(target, index, params) glatter_glGetProgramLocalParameterdvARB_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterdvARB, (GLenum target, GLuint index, GLdouble *params))
#define glGetProgramLocalParameterfvARB(target, index, params) glatter_glGetProgramLocalParameterfvARB_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterfvARB, (GLenum target, GLuint index, GLfloat *params))
#define glGetProgramStringARB(target, pname, string) glatter_glGetProgramStringARB_ptr((target), (pname), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStringARB, (GLenum target, GLenum pname, void *string))
#define glGetProgramivARB(target, pname, params) glatter_glGetProgramivARB_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramivARB, (GLenum target, GLenum pname, GLint *params))
#define glIsProgramARB(program) glatter_glIsProgramARB_ptr((program))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramARB, (GLuint program))
#define glProgramEnvParameter4dARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4dARB_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4dARB, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramEnvParameter4dvARB(target, index, params) glatter_glProgramEnvParameter4dvARB_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4dvARB, (GLenum target, GLuint index, const GLdouble *params))
#define glProgramEnvParameter4fARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4fARB_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4fARB, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glProgramEnvParameter4fvARB(target, index, params) glatter_glProgramEnvParameter4fvARB_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameter4fvARB, (GLenum target, GLuint index, const GLfloat *params))
#define glProgramLocalParameter4dARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4dARB_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4dARB, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramLocalParameter4dvARB(target, index, params) glatter_glProgramLocalParameter4dvARB_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4dvARB, (GLenum target, GLuint index, const GLdouble *params))
#define glProgramLocalParameter4fARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4fARB_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4fARB, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glProgramLocalParameter4fvARB(target, index, params) glatter_glProgramLocalParameter4fvARB_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameter4fvARB, (GLenum target, GLuint index, const GLfloat *params))
#define glProgramStringARB(target, format, len, string) glatter_glProgramStringARB_ptr((target), (format), (len), (string))
GLATTER_UBLOCK(void, APIENTRY, glProgramStringARB, (GLenum target, GLenum format, GLsizei len, const void *string))
#endif // defined(GL_ARB_fragment_program)
#if defined(GL_ARB_geometry_shader4)
#define glFramebufferTextureARB(target, attachment, texture, level) glatter_glFramebufferTextureARB_ptr((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureARB, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glFramebufferTextureFaceARB(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceARB_ptr((target), (attachment), (texture), (level), (face))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureFaceARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face))
#define glFramebufferTextureLayerARB(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerARB_ptr((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayerARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glProgramParameteriARB(program, pname, value) glatter_glProgramParameteriARB_ptr((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteriARB, (GLuint program, GLenum pname, GLint value))
#endif // defined(GL_ARB_geometry_shader4)
#if defined(GL_ARB_gpu_shader_int64)
#define glGetUniformi64vARB(program, location, params) glatter_glGetUniformi64vARB_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformi64vARB, (GLuint program, GLint location, GLint64 *params))
#define glGetUniformui64vARB(program, location, params) glatter_glGetUniformui64vARB_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformui64vARB, (GLuint program, GLint location, GLuint64 *params))
#define glGetnUniformi64vARB(program, location, bufSize, params) glatter_glGetnUniformi64vARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformi64vARB, (GLuint program, GLint location, GLsizei bufSize, GLint64 *params))
#define glGetnUniformui64vARB(program, location, bufSize, params) glatter_glGetnUniformui64vARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformui64vARB, (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params))
#define glProgramUniform1i64ARB(program, location, x) glatter_glProgramUniform1i64ARB_ptr((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64ARB, (GLuint program, GLint location, GLint64 x))
#define glProgramUniform1i64vARB(program, location, count, value) glatter_glProgramUniform1i64vARB_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform1ui64ARB(program, location, x) glatter_glProgramUniform1ui64ARB_ptr((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64ARB, (GLuint program, GLint location, GLuint64 x))
#define glProgramUniform1ui64vARB(program, location, count, value) glatter_glProgramUniform1ui64vARB_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glProgramUniform2i64ARB(program, location, x, y) glatter_glProgramUniform2i64ARB_ptr((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y))
#define glProgramUniform2i64vARB(program, location, count, value) glatter_glProgramUniform2i64vARB_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform2ui64ARB(program, location, x, y) glatter_glProgramUniform2ui64ARB_ptr((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y))
#define glProgramUniform2ui64vARB(program, location, count, value) glatter_glProgramUniform2ui64vARB_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glProgramUniform3i64ARB(program, location, x, y, z) glatter_glProgramUniform3i64ARB_ptr((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z))
#define glProgramUniform3i64vARB(program, location, count, value) glatter_glProgramUniform3i64vARB_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform3ui64ARB(program, location, x, y, z) glatter_glProgramUniform3ui64ARB_ptr((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z))
#define glProgramUniform3ui64vARB(program, location, count, value) glatter_glProgramUniform3ui64vARB_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glProgramUniform4i64ARB(program, location, x, y, z, w) glatter_glProgramUniform4i64ARB_ptr((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w))
#define glProgramUniform4i64vARB(program, location, count, value) glatter_glProgramUniform4i64vARB_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 *value))
#define glProgramUniform4ui64ARB(program, location, x, y, z, w) glatter_glProgramUniform4ui64ARB_ptr((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w))
#define glProgramUniform4ui64vARB(program, location, count, value) glatter_glProgramUniform4ui64vARB_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 *value))
#define glUniform1i64ARB(location, x) glatter_glUniform1i64ARB_ptr((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64ARB, (GLint location, GLint64 x))
#define glUniform1i64vARB(location, count, value) glatter_glUniform1i64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform1ui64ARB(location, x) glatter_glUniform1ui64ARB_ptr((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64ARB, (GLint location, GLuint64 x))
#define glUniform1ui64vARB(location, count, value) glatter_glUniform1ui64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glUniform2i64ARB(location, x, y) glatter_glUniform2i64ARB_ptr((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64ARB, (GLint location, GLint64 x, GLint64 y))
#define glUniform2i64vARB(location, count, value) glatter_glUniform2i64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform2ui64ARB(location, x, y) glatter_glUniform2ui64ARB_ptr((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64ARB, (GLint location, GLuint64 x, GLuint64 y))
#define glUniform2ui64vARB(location, count, value) glatter_glUniform2ui64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glUniform3i64ARB(location, x, y, z) glatter_glUniform3i64ARB_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z))
#define glUniform3i64vARB(location, count, value) glatter_glUniform3i64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform3ui64ARB(location, x, y, z) glatter_glUniform3ui64ARB_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z))
#define glUniform3ui64vARB(location, count, value) glatter_glUniform3ui64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#define glUniform4i64ARB(location, x, y, z, w) glatter_glUniform4i64ARB_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w))
#define glUniform4i64vARB(location, count, value) glatter_glUniform4i64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i64vARB, (GLint location, GLsizei count, const GLint64 *value))
#define glUniform4ui64ARB(location, x, y, z, w) glatter_glUniform4ui64ARB_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w))
#define glUniform4ui64vARB(location, count, value) glatter_glUniform4ui64vARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui64vARB, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_ARB_gpu_shader_int64)
#if defined(GL_ARB_imaging)
#define glColorSubTable(target, start, count, format, type, data) glatter_glColorSubTable_ptr((target), (start), (count), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glColorSubTable, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data))
#define glColorTable(target, internalformat, width, format, type, table) glatter_glColorTable_ptr((target), (internalformat), (width), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glColorTable, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table))
#define glColorTableParameterfv(target, pname, params) glatter_glColorTableParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glColorTableParameteriv(target, pname, params) glatter_glColorTableParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1D_ptr((target), (internalformat), (width), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter1D, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image))
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2D_ptr((target), (internalformat), (width), (height), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image))
#define glConvolutionParameterf(target, pname, params) glatter_glConvolutionParameterf_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterf, (GLenum target, GLenum pname, GLfloat params))
#define glConvolutionParameterfv(target, pname, params) glatter_glConvolutionParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterfv, (GLenum target, GLenum pname, const GLfloat *params))
#define glConvolutionParameteri(target, pname, params) glatter_glConvolutionParameteri_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameteri, (GLenum target, GLenum pname, GLint params))
#define glConvolutionParameteriv(target, pname, params) glatter_glConvolutionParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameteriv, (GLenum target, GLenum pname, const GLint *params))
#define glCopyColorSubTable(target, start, x, y, width) glatter_glCopyColorSubTable_ptr((target), (start), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyColorSubTable, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width))
#define glCopyColorTable(target, internalformat, x, y, width) glatter_glCopyColorTable_ptr((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyColorTable, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1D_ptr((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter1D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2D_ptr((target), (internalformat), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter2D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height))
#define glGetColorTable(target, format, type, table) glatter_glGetColorTable_ptr((target), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTable, (GLenum target, GLenum format, GLenum type, void *table))
#define glGetColorTableParameterfv(target, pname, params) glatter_glGetColorTableParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetColorTableParameteriv(target, pname, params) glatter_glGetColorTableParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetConvolutionFilter(target, format, type, image) glatter_glGetConvolutionFilter_ptr((target), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionFilter, (GLenum target, GLenum format, GLenum type, void *image))
#define glGetConvolutionParameterfv(target, pname, params) glatter_glGetConvolutionParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetConvolutionParameteriv(target, pname, params) glatter_glGetConvolutionParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetHistogram(target, reset, format, type, values) glatter_glGetHistogram_ptr((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#define glGetHistogramParameterfv(target, pname, params) glatter_glGetHistogramParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetHistogramParameteriv(target, pname, params) glatter_glGetHistogramParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetMinmax(target, reset, format, type, values) glatter_glGetMinmax_ptr((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#define glGetMinmaxParameterfv(target, pname, params) glatter_glGetMinmaxParameterfv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameterfv, (GLenum target, GLenum pname, GLfloat *params))
#define glGetMinmaxParameteriv(target, pname, params) glatter_glGetMinmaxParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetSeparableFilter(target, format, type, row, column, span) glatter_glGetSeparableFilter_ptr((target), (format), (type), (row), (column), (span))
GLATTER_UBLOCK(void, APIENTRY, glGetSeparableFilter, (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span))
#define glHistogram(target, width, internalformat, sink) glatter_glHistogram_ptr((target), (width), (internalformat), (sink))
GLATTER_UBLOCK(void, APIENTRY, glHistogram, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink))
#define glMinmax(target, internalformat, sink) glatter_glMinmax_ptr((target), (internalformat), (sink))
GLATTER_UBLOCK(void, APIENTRY, glMinmax, (GLenum target, GLenum internalformat, GLboolean sink))
#define glResetHistogram(target) glatter_glResetHistogram_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glResetHistogram, (GLenum target))
#define glResetMinmax(target) glatter_glResetMinmax_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glResetMinmax, (GLenum target))
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2D_ptr((target), (internalformat), (width), (height), (format), (type), (row), (column))
GLATTER_UBLOCK(void, APIENTRY, glSeparableFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column))
#endif // defined(GL_ARB_imaging)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB_ptr((mode), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectCountARB, (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB_ptr((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectCountARB, (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride))
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_instanced_arrays)
#define glVertexAttribDivisorARB(index, divisor) glatter_glVertexAttribDivisorARB_ptr((index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisorARB, (GLuint index, GLuint divisor))
#endif // defined(GL_ARB_instanced_arrays)
#if defined(GL_ARB_matrix_palette)
#define glCurrentPaletteMatrixARB(index) glatter_glCurrentPaletteMatrixARB_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glCurrentPaletteMatrixARB, (GLint index))
#define glMatrixIndexPointerARB(size, type, stride, pointer) glatter_glMatrixIndexPointerARB_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexPointerARB, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glMatrixIndexubvARB(size, indices) glatter_glMatrixIndexubvARB_ptr((size), (indices))
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexubvARB, (GLint size, const GLubyte *indices))
#define glMatrixIndexuivARB(size, indices) glatter_glMatrixIndexuivARB_ptr((size), (indices))
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexuivARB, (GLint size, const GLuint *indices))
#define glMatrixIndexusvARB(size, indices) glatter_glMatrixIndexusvARB_ptr((size), (indices))
GLATTER_UBLOCK(void, APIENTRY, glMatrixIndexusvARB, (GLint size, const GLushort *indices))
#endif // defined(GL_ARB_matrix_palette)
#if defined(GL_ARB_multisample)
#define glSampleCoverageARB(value, invert) glatter_glSampleCoverageARB_ptr((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleCoverageARB, (GLfloat value, GLboolean invert))
#endif // defined(GL_ARB_multisample)
#if defined(GL_ARB_multitexture)
#define glActiveTextureARB(texture) glatter_glActiveTextureARB_ptr((texture))
GLATTER_UBLOCK(void, APIENTRY, glActiveTextureARB, (GLenum texture))
#define glClientActiveTextureARB(texture) glatter_glClientActiveTextureARB_ptr((texture))
GLATTER_UBLOCK(void, APIENTRY, glClientActiveTextureARB, (GLenum texture))
#define glMultiTexCoord1dARB(target, s) glatter_glMultiTexCoord1dARB_ptr((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1dARB, (GLenum target, GLdouble s))
#define glMultiTexCoord1dvARB(target, v) glatter_glMultiTexCoord1dvARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord1fARB(target, s) glatter_glMultiTexCoord1fARB_ptr((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1fARB, (GLenum target, GLfloat s))
#define glMultiTexCoord1fvARB(target, v) glatter_glMultiTexCoord1fvARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord1iARB(target, s) glatter_glMultiTexCoord1iARB_ptr((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1iARB, (GLenum target, GLint s))
#define glMultiTexCoord1ivARB(target, v) glatter_glMultiTexCoord1ivARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord1sARB(target, s) glatter_glMultiTexCoord1sARB_ptr((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1sARB, (GLenum target, GLshort s))
#define glMultiTexCoord1svARB(target, v) glatter_glMultiTexCoord1svARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord2dARB(target, s, t) glatter_glMultiTexCoord2dARB_ptr((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2dARB, (GLenum target, GLdouble s, GLdouble t))
#define glMultiTexCoord2dvARB(target, v) glatter_glMultiTexCoord2dvARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord2fARB(target, s, t) glatter_glMultiTexCoord2fARB_ptr((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2fARB, (GLenum target, GLfloat s, GLfloat t))
#define glMultiTexCoord2fvARB(target, v) glatter_glMultiTexCoord2fvARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord2iARB(target, s, t) glatter_glMultiTexCoord2iARB_ptr((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2iARB, (GLenum target, GLint s, GLint t))
#define glMultiTexCoord2ivARB(target, v) glatter_glMultiTexCoord2ivARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord2sARB(target, s, t) glatter_glMultiTexCoord2sARB_ptr((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2sARB, (GLenum target, GLshort s, GLshort t))
#define glMultiTexCoord2svARB(target, v) glatter_glMultiTexCoord2svARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord3dARB(target, s, t, r) glatter_glMultiTexCoord3dARB_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#define glMultiTexCoord3dvARB(target, v) glatter_glMultiTexCoord3dvARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord3fARB(target, s, t, r) glatter_glMultiTexCoord3fARB_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#define glMultiTexCoord3fvARB(target, v) glatter_glMultiTexCoord3fvARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord3iARB(target, s, t, r) glatter_glMultiTexCoord3iARB_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3iARB, (GLenum target, GLint s, GLint t, GLint r))
#define glMultiTexCoord3ivARB(target, v) glatter_glMultiTexCoord3ivARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord3sARB(target, s, t, r) glatter_glMultiTexCoord3sARB_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3sARB, (GLenum target, GLshort s, GLshort t, GLshort r))
#define glMultiTexCoord3svARB(target, v) glatter_glMultiTexCoord3svARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3svARB, (GLenum target, const GLshort *v))
#define glMultiTexCoord4dARB(target, s, t, r, q) glatter_glMultiTexCoord4dARB_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glMultiTexCoord4dvARB(target, v) glatter_glMultiTexCoord4dvARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4dvARB, (GLenum target, const GLdouble *v))
#define glMultiTexCoord4fARB(target, s, t, r, q) glatter_glMultiTexCoord4fARB_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4fvARB(target, v) glatter_glMultiTexCoord4fvARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4fvARB, (GLenum target, const GLfloat *v))
#define glMultiTexCoord4iARB(target, s, t, r, q) glatter_glMultiTexCoord4iARB_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4iARB, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#define glMultiTexCoord4ivARB(target, v) glatter_glMultiTexCoord4ivARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4ivARB, (GLenum target, const GLint *v))
#define glMultiTexCoord4sARB(target, s, t, r, q) glatter_glMultiTexCoord4sARB_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4sARB, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#define glMultiTexCoord4svARB(target, v) glatter_glMultiTexCoord4svARB_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4svARB, (GLenum target, const GLshort *v))
#endif // defined(GL_ARB_multitexture)
#if defined(GL_ARB_occlusion_query)
#define glBeginQueryARB(target, id) glatter_glBeginQueryARB_ptr((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQueryARB, (GLenum target, GLuint id))
#define glDeleteQueriesARB(n, ids) glatter_glDeleteQueriesARB_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueriesARB, (GLsizei n, const GLuint *ids))
#define glEndQueryARB(target) glatter_glEndQueryARB_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glEndQueryARB, (GLenum target))
#define glGenQueriesARB(n, ids) glatter_glGenQueriesARB_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenQueriesARB, (GLsizei n, GLuint *ids))
#define glGetQueryObjectivARB(id, pname, params) glatter_glGetQueryObjectivARB_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectivARB, (GLuint id, GLenum pname, GLint *params))
#define glGetQueryObjectuivARB(id, pname, params) glatter_glGetQueryObjectuivARB_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectuivARB, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryivARB(target, pname, params) glatter_glGetQueryivARB_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryivARB, (GLenum target, GLenum pname, GLint *params))
#define glIsQueryARB(id) glatter_glIsQueryARB_ptr((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsQueryARB, (GLuint id))
#endif // defined(GL_ARB_occlusion_query)
#if defined(GL_ARB_parallel_shader_compile)
#define glMaxShaderCompilerThreadsARB(count) glatter_glMaxShaderCompilerThreadsARB_ptr((count))
GLATTER_UBLOCK(void, APIENTRY, glMaxShaderCompilerThreadsARB, (GLuint count))
#endif // defined(GL_ARB_parallel_shader_compile)
#if defined(GL_ARB_point_parameters)
#define glPointParameterfARB(pname, param) glatter_glPointParameterfARB_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfARB, (GLenum pname, GLfloat param))
#define glPointParameterfvARB(pname, params) glatter_glPointParameterfvARB_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfvARB, (GLenum pname, const GLfloat *params))
#endif // defined(GL_ARB_point_parameters)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB_ptr()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatusARB, (void))
#define glGetnColorTableARB(target, format, type, bufSize, table) glatter_glGetnColorTableARB_ptr((target), (format), (type), (bufSize), (table))
GLATTER_UBLOCK(void, APIENTRY, glGetnColorTableARB, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table))
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB_ptr((target), (lod), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImageARB, (GLenum target, GLint lod, GLsizei bufSize, void *img))
#define glGetnConvolutionFilterARB(target, format, type, bufSize, image) glatter_glGetnConvolutionFilterARB_ptr((target), (format), (type), (bufSize), (image))
GLATTER_UBLOCK(void, APIENTRY, glGetnConvolutionFilterARB, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image))
#define glGetnHistogramARB(target, reset, format, type, bufSize, values) glatter_glGetnHistogramARB_ptr((target), (reset), (format), (type), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnHistogramARB, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#define glGetnMapdvARB(target, query, bufSize, v) glatter_glGetnMapdvARB_ptr((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapdvARB, (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v))
#define glGetnMapfvARB(target, query, bufSize, v) glatter_glGetnMapfvARB_ptr((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapfvARB, (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v))
#define glGetnMapivARB(target, query, bufSize, v) glatter_glGetnMapivARB_ptr((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapivARB, (GLenum target, GLenum query, GLsizei bufSize, GLint *v))
#define glGetnMinmaxARB(target, reset, format, type, bufSize, values) glatter_glGetnMinmaxARB_ptr((target), (reset), (format), (type), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnMinmaxARB, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#define glGetnPixelMapfvARB(map, bufSize, values) glatter_glGetnPixelMapfvARB_ptr((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapfvARB, (GLenum map, GLsizei bufSize, GLfloat *values))
#define glGetnPixelMapuivARB(map, bufSize, values) glatter_glGetnPixelMapuivARB_ptr((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapuivARB, (GLenum map, GLsizei bufSize, GLuint *values))
#define glGetnPixelMapusvARB(map, bufSize, values) glatter_glGetnPixelMapusvARB_ptr((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapusvARB, (GLenum map, GLsizei bufSize, GLushort *values))
#define glGetnPolygonStippleARB(bufSize, pattern) glatter_glGetnPolygonStippleARB_ptr((bufSize), (pattern))
GLATTER_UBLOCK(void, APIENTRY, glGetnPolygonStippleARB, (GLsizei bufSize, GLubyte *pattern))
#define glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilterARB_ptr((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span))
GLATTER_UBLOCK(void, APIENTRY, glGetnSeparableFilterARB, (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span))
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB_ptr((target), (level), (format), (type), (bufSize), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImageARB, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img))
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdvARB, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfvARB, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformivARB, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuivARB, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB_ptr((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixelsARB, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_locations)
#define glEvaluateDepthValuesARB() glatter_glEvaluateDepthValuesARB_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEvaluateDepthValuesARB, (void))
#define glFramebufferSampleLocationsfvARB(target, start, count, v) glatter_glFramebufferSampleLocationsfvARB_ptr((target), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSampleLocationsfvARB, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#define glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvARB_ptr((framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSampleLocationsfvARB, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#endif // defined(GL_ARB_sample_locations)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB_ptr((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShadingARB, (GLfloat value))
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shader_objects)
#define glAttachObjectARB(containerObj, obj) glatter_glAttachObjectARB_ptr((containerObj), (obj))
GLATTER_UBLOCK(void, APIENTRY, glAttachObjectARB, (GLhandleARB containerObj, GLhandleARB obj))
#define glCompileShaderARB(shaderObj) glatter_glCompileShaderARB_ptr((shaderObj))
GLATTER_UBLOCK(void, APIENTRY, glCompileShaderARB, (GLhandleARB shaderObj))
#define glCreateProgramObjectARB() glatter_glCreateProgramObjectARB_ptr()
GLATTER_UBLOCK(GLhandleARB, APIENTRY, glCreateProgramObjectARB, (void))
#define glCreateShaderObjectARB(shaderType) glatter_glCreateShaderObjectARB_ptr((shaderType))
GLATTER_UBLOCK(GLhandleARB, APIENTRY, glCreateShaderObjectARB, (GLenum shaderType))
#define glDeleteObjectARB(obj) glatter_glDeleteObjectARB_ptr((obj))
GLATTER_UBLOCK(void, APIENTRY, glDeleteObjectARB, (GLhandleARB obj))
#define glDetachObjectARB(containerObj, attachedObj) glatter_glDetachObjectARB_ptr((containerObj), (attachedObj))
GLATTER_UBLOCK(void, APIENTRY, glDetachObjectARB, (GLhandleARB containerObj, GLhandleARB attachedObj))
#define glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveUniformARB_ptr((programObj), (index), (maxLength), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformARB, (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name))
#define glGetAttachedObjectsARB(containerObj, maxCount, count, obj) glatter_glGetAttachedObjectsARB_ptr((containerObj), (maxCount), (count), (obj))
GLATTER_UBLOCK(void, APIENTRY, glGetAttachedObjectsARB, (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj))
#define glGetHandleARB(pname) glatter_glGetHandleARB_ptr((pname))
GLATTER_UBLOCK(GLhandleARB, APIENTRY, glGetHandleARB, (GLenum pname))
#define glGetInfoLogARB(obj, maxLength, length, infoLog) glatter_glGetInfoLogARB_ptr((obj), (maxLength), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetInfoLogARB, (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog))
#define glGetObjectParameterfvARB(obj, pname, params) glatter_glGetObjectParameterfvARB_ptr((obj), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectParameterfvARB, (GLhandleARB obj, GLenum pname, GLfloat *params))
#define glGetObjectParameterivARB(obj, pname, params) glatter_glGetObjectParameterivARB_ptr((obj), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectParameterivARB, (GLhandleARB obj, GLenum pname, GLint *params))
#define glGetShaderSourceARB(obj, maxLength, length, source) glatter_glGetShaderSourceARB_ptr((obj), (maxLength), (length), (source))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderSourceARB, (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source))
#define glGetUniformLocationARB(programObj, name) glatter_glGetUniformLocationARB_ptr((programObj), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformLocationARB, (GLhandleARB programObj, const GLcharARB *name))
#define glGetUniformfvARB(programObj, location, params) glatter_glGetUniformfvARB_ptr((programObj), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformfvARB, (GLhandleARB programObj, GLint location, GLfloat *params))
#define glGetUniformivARB(programObj, location, params) glatter_glGetUniformivARB_ptr((programObj), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformivARB, (GLhandleARB programObj, GLint location, GLint *params))
#define glLinkProgramARB(programObj) glatter_glLinkProgramARB_ptr((programObj))
GLATTER_UBLOCK(void, APIENTRY, glLinkProgramARB, (GLhandleARB programObj))
#define glShaderSourceARB(shaderObj, count, string, length) glatter_glShaderSourceARB_ptr((shaderObj), (count), (string), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderSourceARB, (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length))
#define glUniform1fARB(location, v0) glatter_glUniform1fARB_ptr((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1fARB, (GLint location, GLfloat v0))
#define glUniform1fvARB(location, count, value) glatter_glUniform1fvARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1fvARB, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1iARB(location, v0) glatter_glUniform1iARB_ptr((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1iARB, (GLint location, GLint v0))
#define glUniform1ivARB(location, count, value) glatter_glUniform1ivARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ivARB, (GLint location, GLsizei count, const GLint *value))
#define glUniform2fARB(location, v0, v1) glatter_glUniform2fARB_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2fARB, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fvARB(location, count, value) glatter_glUniform2fvARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2fvARB, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2iARB(location, v0, v1) glatter_glUniform2iARB_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2iARB, (GLint location, GLint v0, GLint v1))
#define glUniform2ivARB(location, count, value) glatter_glUniform2ivARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ivARB, (GLint location, GLsizei count, const GLint *value))
#define glUniform3fARB(location, v0, v1, v2) glatter_glUniform3fARB_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3fARB, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fvARB(location, count, value) glatter_glUniform3fvARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3fvARB, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3iARB(location, v0, v1, v2) glatter_glUniform3iARB_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3iARB, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3ivARB(location, count, value) glatter_glUniform3ivARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ivARB, (GLint location, GLsizei count, const GLint *value))
#define glUniform4fARB(location, v0, v1, v2, v3) glatter_glUniform4fARB_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4fARB, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fvARB(location, count, value) glatter_glUniform4fvARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4fvARB, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4iARB(location, v0, v1, v2, v3) glatter_glUniform4iARB_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4iARB, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4ivARB(location, count, value) glatter_glUniform4ivARB_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ivARB, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fvARB(location, count, transpose, value) glatter_glUniformMatrix2fvARB_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fvARB(location, count, transpose, value) glatter_glUniformMatrix3fvARB_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fvARB(location, count, transpose, value) glatter_glUniformMatrix4fvARB_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgramObjectARB(programObj) glatter_glUseProgramObjectARB_ptr((programObj))
GLATTER_UBLOCK(void, APIENTRY, glUseProgramObjectARB, (GLhandleARB programObj))
#define glValidateProgramARB(programObj) glatter_glValidateProgramARB_ptr((programObj))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgramARB, (GLhandleARB programObj))
#endif // defined(GL_ARB_shader_objects)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB_ptr((shader), (count), (path), (length))
GLATTER_UBLOCK(void, APIENTRY, glCompileShaderIncludeARB, (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length))
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB_ptr((namelen), (name))
GLATTER_UBLOCK(void, APIENTRY, glDeleteNamedStringARB, (GLint namelen, const GLchar *name))
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB_ptr((namelen), (name), (bufSize), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringARB, (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string))
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB_ptr((namelen), (name), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedStringivARB, (GLint namelen, const GLchar *name, GLenum pname, GLint *params))
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB_ptr((namelen), (name))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedStringARB, (GLint namelen, const GLchar *name))
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB_ptr((type), (namelen), (name), (stringlen), (string))
GLATTER_UBLOCK(void, APIENTRY, glNamedStringARB, (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string))
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB_ptr((target), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glBufferPageCommitmentARB, (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit))
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB_ptr((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentARB, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit))
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT_ptr((buffer), (offset), (size), (commit))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferPageCommitmentEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit))
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentARB_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
GLATTER_UBLOCK(void, APIENTRY, glTexPageCommitmentARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_ARB_texture_buffer_object)
#define glTexBufferARB(target, internalformat, buffer) glatter_glTexBufferARB_ptr((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferARB, (GLenum target, GLenum internalformat, GLuint buffer))
#endif // defined(GL_ARB_texture_buffer_object)
#if defined(GL_ARB_texture_compression)
#define glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1DARB_ptr((target), (level), (internalformat), (width), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage1DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2DARB_ptr((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage2DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DARB_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage3DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1DARB_ptr((target), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage1DARB, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2DARB_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage2DARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DARB_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage3DARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glGetCompressedTexImageARB(target, level, img) glatter_glGetCompressedTexImageARB_ptr((target), (level), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTexImageARB, (GLenum target, GLint level, void *img))
#endif // defined(GL_ARB_texture_compression)
#if defined(GL_ARB_transpose_matrix)
#define glLoadTransposeMatrixdARB(m) glatter_glLoadTransposeMatrixdARB_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixdARB, (const GLdouble *m))
#define glLoadTransposeMatrixfARB(m) glatter_glLoadTransposeMatrixfARB_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixfARB, (const GLfloat *m))
#define glMultTransposeMatrixdARB(m) glatter_glMultTransposeMatrixdARB_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixdARB, (const GLdouble *m))
#define glMultTransposeMatrixfARB(m) glatter_glMultTransposeMatrixfARB_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixfARB, (const GLfloat *m))
#endif // defined(GL_ARB_transpose_matrix)
#if defined(GL_ARB_vertex_blend)
#define glVertexBlendARB(count) glatter_glVertexBlendARB_ptr((count))
GLATTER_UBLOCK(void, APIENTRY, glVertexBlendARB, (GLint count))
#define glWeightPointerARB(size, type, stride, pointer) glatter_glWeightPointerARB_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glWeightPointerARB, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWeightbvARB(size, weights) glatter_glWeightbvARB_ptr((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightbvARB, (GLint size, const GLbyte *weights))
#define glWeightdvARB(size, weights) glatter_glWeightdvARB_ptr((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightdvARB, (GLint size, const GLdouble *weights))
#define glWeightfvARB(size, weights) glatter_glWeightfvARB_ptr((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightfvARB, (GLint size, const GLfloat *weights))
#define glWeightivARB(size, weights) glatter_glWeightivARB_ptr((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightivARB, (GLint size, const GLint *weights))
#define glWeightsvARB(size, weights) glatter_glWeightsvARB_ptr((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightsvARB, (GLint size, const GLshort *weights))
#define glWeightubvARB(size, weights) glatter_glWeightubvARB_ptr((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightubvARB, (GLint size, const GLubyte *weights))
#define glWeightuivARB(size, weights) glatter_glWeightuivARB_ptr((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightuivARB, (GLint size, const GLuint *weights))
#define glWeightusvARB(size, weights) glatter_glWeightusvARB_ptr((size), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightusvARB, (GLint size, const GLushort *weights))
#endif // defined(GL_ARB_vertex_blend)
#if defined(GL_ARB_vertex_buffer_object)
#define glBindBufferARB(target, buffer) glatter_glBindBufferARB_ptr((target), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferARB, (GLenum target, GLuint buffer))
#define glBufferDataARB(target, size, data, usage) glatter_glBufferDataARB_ptr((target), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glBufferDataARB, (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage))
#define glBufferSubDataARB(target, offset, size, data) glatter_glBufferSubDataARB_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data))
#define glDeleteBuffersARB(n, buffers) glatter_glDeleteBuffersARB_ptr((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteBuffersARB, (GLsizei n, const GLuint *buffers))
#define glGenBuffersARB(n, buffers) glatter_glGenBuffersARB_ptr((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glGenBuffersARB, (GLsizei n, GLuint *buffers))
#define glGetBufferParameterivARB(target, pname, params) glatter_glGetBufferParameterivARB_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameterivARB, (GLenum target, GLenum pname, GLint *params))
#define glGetBufferPointervARB(target, pname, params) glatter_glGetBufferPointervARB_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferPointervARB, (GLenum target, GLenum pname, void **params))
#define glGetBufferSubDataARB(target, offset, size, data) glatter_glGetBufferSubDataARB_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data))
#define glIsBufferARB(buffer) glatter_glIsBufferARB_ptr((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBufferARB, (GLuint buffer))
#define glMapBufferARB(target, access) glatter_glMapBufferARB_ptr((target), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBufferARB, (GLenum target, GLenum access))
#define glUnmapBufferARB(target) glatter_glUnmapBufferARB_ptr((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapBufferARB, (GLenum target))
#endif // defined(GL_ARB_vertex_buffer_object)
#if defined(GL_ARB_vertex_program)
#define glDisableVertexAttribArrayARB(index) glatter_glDisableVertexAttribArrayARB_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribArrayARB, (GLuint index))
#define glEnableVertexAttribArrayARB(index) glatter_glEnableVertexAttribArrayARB_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribArrayARB, (GLuint index))
#define glGetVertexAttribPointervARB(index, pname, pointer) glatter_glGetVertexAttribPointervARB_ptr((index), (pname), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointervARB, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribdvARB(index, pname, params) glatter_glGetVertexAttribdvARB_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdvARB, (GLuint index, GLenum pname, GLdouble *params))
#define glGetVertexAttribfvARB(index, pname, params) glatter_glGetVertexAttribfvARB_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfvARB, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribivARB(index, pname, params) glatter_glGetVertexAttribivARB_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribivARB, (GLuint index, GLenum pname, GLint *params))
#define glVertexAttrib1dARB(index, x) glatter_glVertexAttrib1dARB_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dARB, (GLuint index, GLdouble x))
#define glVertexAttrib1dvARB(index, v) glatter_glVertexAttrib1dvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dvARB, (GLuint index, const GLdouble *v))
#define glVertexAttrib1fARB(index, x) glatter_glVertexAttrib1fARB_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fARB, (GLuint index, GLfloat x))
#define glVertexAttrib1fvARB(index, v) glatter_glVertexAttrib1fvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fvARB, (GLuint index, const GLfloat *v))
#define glVertexAttrib1sARB(index, x) glatter_glVertexAttrib1sARB_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sARB, (GLuint index, GLshort x))
#define glVertexAttrib1svARB(index, v) glatter_glVertexAttrib1svARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1svARB, (GLuint index, const GLshort *v))
#define glVertexAttrib2dARB(index, x, y) glatter_glVertexAttrib2dARB_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dARB, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttrib2dvARB(index, v) glatter_glVertexAttrib2dvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dvARB, (GLuint index, const GLdouble *v))
#define glVertexAttrib2fARB(index, x, y) glatter_glVertexAttrib2fARB_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fARB, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fvARB(index, v) glatter_glVertexAttrib2fvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fvARB, (GLuint index, const GLfloat *v))
#define glVertexAttrib2sARB(index, x, y) glatter_glVertexAttrib2sARB_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sARB, (GLuint index, GLshort x, GLshort y))
#define glVertexAttrib2svARB(index, v) glatter_glVertexAttrib2svARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2svARB, (GLuint index, const GLshort *v))
#define glVertexAttrib3dARB(index, x, y, z) glatter_glVertexAttrib3dARB_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dARB, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttrib3dvARB(index, v) glatter_glVertexAttrib3dvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dvARB, (GLuint index, const GLdouble *v))
#define glVertexAttrib3fARB(index, x, y, z) glatter_glVertexAttrib3fARB_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fARB, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fvARB(index, v) glatter_glVertexAttrib3fvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fvARB, (GLuint index, const GLfloat *v))
#define glVertexAttrib3sARB(index, x, y, z) glatter_glVertexAttrib3sARB_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sARB, (GLuint index, GLshort x, GLshort y, GLshort z))
#define glVertexAttrib3svARB(index, v) glatter_glVertexAttrib3svARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3svARB, (GLuint index, const GLshort *v))
#define glVertexAttrib4NbvARB(index, v) glatter_glVertexAttrib4NbvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NbvARB, (GLuint index, const GLbyte *v))
#define glVertexAttrib4NivARB(index, v) glatter_glVertexAttrib4NivARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NivARB, (GLuint index, const GLint *v))
#define glVertexAttrib4NsvARB(index, v) glatter_glVertexAttrib4NsvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NsvARB, (GLuint index, const GLshort *v))
#define glVertexAttrib4NubARB(index, x, y, z, w) glatter_glVertexAttrib4NubARB_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NubARB, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#define glVertexAttrib4NubvARB(index, v) glatter_glVertexAttrib4NubvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NubvARB, (GLuint index, const GLubyte *v))
#define glVertexAttrib4NuivARB(index, v) glatter_glVertexAttrib4NuivARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NuivARB, (GLuint index, const GLuint *v))
#define glVertexAttrib4NusvARB(index, v) glatter_glVertexAttrib4NusvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4NusvARB, (GLuint index, const GLushort *v))
#define glVertexAttrib4bvARB(index, v) glatter_glVertexAttrib4bvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4bvARB, (GLuint index, const GLbyte *v))
#define glVertexAttrib4dARB(index, x, y, z, w) glatter_glVertexAttrib4dARB_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dARB, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttrib4dvARB(index, v) glatter_glVertexAttrib4dvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dvARB, (GLuint index, const GLdouble *v))
#define glVertexAttrib4fARB(index, x, y, z, w) glatter_glVertexAttrib4fARB_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fARB, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fvARB(index, v) glatter_glVertexAttrib4fvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fvARB, (GLuint index, const GLfloat *v))
#define glVertexAttrib4ivARB(index, v) glatter_glVertexAttrib4ivARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ivARB, (GLuint index, const GLint *v))
#define glVertexAttrib4sARB(index, x, y, z, w) glatter_glVertexAttrib4sARB_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sARB, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexAttrib4svARB(index, v) glatter_glVertexAttrib4svARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4svARB, (GLuint index, const GLshort *v))
#define glVertexAttrib4ubvARB(index, v) glatter_glVertexAttrib4ubvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubvARB, (GLuint index, const GLubyte *v))
#define glVertexAttrib4uivARB(index, v) glatter_glVertexAttrib4uivARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4uivARB, (GLuint index, const GLuint *v))
#define glVertexAttrib4usvARB(index, v) glatter_glVertexAttrib4usvARB_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4usvARB, (GLuint index, const GLushort *v))
#define glVertexAttribPointerARB(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointerARB_ptr((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointerARB, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#endif // defined(GL_ARB_vertex_program)
#if defined(GL_ARB_vertex_shader)
#define glBindAttribLocationARB(programObj, index, name) glatter_glBindAttribLocationARB_ptr((programObj), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindAttribLocationARB, (GLhandleARB programObj, GLuint index, const GLcharARB *name))
#define glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveAttribARB_ptr((programObj), (index), (maxLength), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAttribARB, (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name))
#define glGetAttribLocationARB(programObj, name) glatter_glGetAttribLocationARB_ptr((programObj), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetAttribLocationARB, (GLhandleARB programObj, const GLcharARB *name))
#endif // defined(GL_ARB_vertex_shader)
#if defined(GL_ARB_window_pos)
#define glWindowPos2dARB(x, y) glatter_glWindowPos2dARB_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dARB, (GLdouble x, GLdouble y))
#define glWindowPos2dvARB(v) glatter_glWindowPos2dvARB_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dvARB, (const GLdouble *v))
#define glWindowPos2fARB(x, y) glatter_glWindowPos2fARB_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fARB, (GLfloat x, GLfloat y))
#define glWindowPos2fvARB(v) glatter_glWindowPos2fvARB_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fvARB, (const GLfloat *v))
#define glWindowPos2iARB(x, y) glatter_glWindowPos2iARB_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2iARB, (GLint x, GLint y))
#define glWindowPos2ivARB(v) glatter_glWindowPos2ivARB_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2ivARB, (const GLint *v))
#define glWindowPos2sARB(x, y) glatter_glWindowPos2sARB_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2sARB, (GLshort x, GLshort y))
#define glWindowPos2svARB(v) glatter_glWindowPos2svARB_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2svARB, (const GLshort *v))
#define glWindowPos3dARB(x, y, z) glatter_glWindowPos3dARB_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dARB, (GLdouble x, GLdouble y, GLdouble z))
#define glWindowPos3dvARB(v) glatter_glWindowPos3dvARB_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dvARB, (const GLdouble *v))
#define glWindowPos3fARB(x, y, z) glatter_glWindowPos3fARB_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fARB, (GLfloat x, GLfloat y, GLfloat z))
#define glWindowPos3fvARB(v) glatter_glWindowPos3fvARB_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fvARB, (const GLfloat *v))
#define glWindowPos3iARB(x, y, z) glatter_glWindowPos3iARB_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3iARB, (GLint x, GLint y, GLint z))
#define glWindowPos3ivARB(v) glatter_glWindowPos3ivARB_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3ivARB, (const GLint *v))
#define glWindowPos3sARB(x, y, z) glatter_glWindowPos3sARB_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3sARB, (GLshort x, GLshort y, GLshort z))
#define glWindowPos3svARB(v) glatter_glWindowPos3svARB_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3svARB, (const GLshort *v))
#endif // defined(GL_ARB_window_pos)
#if defined(GL_ATI_draw_buffers)
#define glDrawBuffersATI(n, bufs) glatter_glDrawBuffersATI_ptr((n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffersATI, (GLsizei n, const GLenum *bufs))
#endif // defined(GL_ATI_draw_buffers)
#if defined(GL_ATI_element_array)
#define glDrawElementArrayATI(mode, count) glatter_glDrawElementArrayATI_ptr((mode), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementArrayATI, (GLenum mode, GLsizei count))
#define glDrawRangeElementArrayATI(mode, start, end, count) glatter_glDrawRangeElementArrayATI_ptr((mode), (start), (end), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementArrayATI, (GLenum mode, GLuint start, GLuint end, GLsizei count))
#define glElementPointerATI(type, pointer) glatter_glElementPointerATI_ptr((type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glElementPointerATI, (GLenum type, const void *pointer))
#endif // defined(GL_ATI_element_array)
#if defined(GL_ATI_envmap_bumpmap)
#define glGetTexBumpParameterfvATI(pname, param) glatter_glGetTexBumpParameterfvATI_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTexBumpParameterfvATI, (GLenum pname, GLfloat *param))
#define glGetTexBumpParameterivATI(pname, param) glatter_glGetTexBumpParameterivATI_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTexBumpParameterivATI, (GLenum pname, GLint *param))
#define glTexBumpParameterfvATI(pname, param) glatter_glTexBumpParameterfvATI_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexBumpParameterfvATI, (GLenum pname, const GLfloat *param))
#define glTexBumpParameterivATI(pname, param) glatter_glTexBumpParameterivATI_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexBumpParameterivATI, (GLenum pname, const GLint *param))
#endif // defined(GL_ATI_envmap_bumpmap)
#if defined(GL_ATI_fragment_shader)
#define glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod) glatter_glAlphaFragmentOp1ATI_ptr((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFragmentOp1ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod))
#define glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glAlphaFragmentOp2ATI_ptr((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFragmentOp2ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod))
#define glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glAlphaFragmentOp3ATI_ptr((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFragmentOp3ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod))
#define glBeginFragmentShaderATI() glatter_glBeginFragmentShaderATI_ptr()
GLATTER_UBLOCK(void, APIENTRY, glBeginFragmentShaderATI, (void))
#define glBindFragmentShaderATI(id) glatter_glBindFragmentShaderATI_ptr((id))
GLATTER_UBLOCK(void, APIENTRY, glBindFragmentShaderATI, (GLuint id))
#define glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) glatter_glColorFragmentOp1ATI_ptr((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod))
GLATTER_UBLOCK(void, APIENTRY, glColorFragmentOp1ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod))
#define glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glColorFragmentOp2ATI_ptr((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod))
GLATTER_UBLOCK(void, APIENTRY, glColorFragmentOp2ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod))
#define glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glColorFragmentOp3ATI_ptr((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod))
GLATTER_UBLOCK(void, APIENTRY, glColorFragmentOp3ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod))
#define glDeleteFragmentShaderATI(id) glatter_glDeleteFragmentShaderATI_ptr((id))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFragmentShaderATI, (GLuint id))
#define glEndFragmentShaderATI() glatter_glEndFragmentShaderATI_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndFragmentShaderATI, (void))
#define glGenFragmentShadersATI(range) glatter_glGenFragmentShadersATI_ptr((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenFragmentShadersATI, (GLuint range))
#define glPassTexCoordATI(dst, coord, swizzle) glatter_glPassTexCoordATI_ptr((dst), (coord), (swizzle))
GLATTER_UBLOCK(void, APIENTRY, glPassTexCoordATI, (GLuint dst, GLuint coord, GLenum swizzle))
#define glSampleMapATI(dst, interp, swizzle) glatter_glSampleMapATI_ptr((dst), (interp), (swizzle))
GLATTER_UBLOCK(void, APIENTRY, glSampleMapATI, (GLuint dst, GLuint interp, GLenum swizzle))
#define glSetFragmentShaderConstantATI(dst, value) glatter_glSetFragmentShaderConstantATI_ptr((dst), (value))
GLATTER_UBLOCK(void, APIENTRY, glSetFragmentShaderConstantATI, (GLuint dst, const GLfloat *value))
#endif // defined(GL_ATI_fragment_shader)
#if defined(GL_ATI_map_object_buffer)
#define glMapObjectBufferATI(buffer) glatter_glMapObjectBufferATI_ptr((buffer))
GLATTER_UBLOCK(void *, APIENTRY, glMapObjectBufferATI, (GLuint buffer))
#define glUnmapObjectBufferATI(buffer) glatter_glUnmapObjectBufferATI_ptr((buffer))
GLATTER_UBLOCK(void, APIENTRY, glUnmapObjectBufferATI, (GLuint buffer))
#endif // defined(GL_ATI_map_object_buffer)
#if defined(GL_ATI_pn_triangles)
#define glPNTrianglesfATI(pname, param) glatter_glPNTrianglesfATI_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPNTrianglesfATI, (GLenum pname, GLfloat param))
#define glPNTrianglesiATI(pname, param) glatter_glPNTrianglesiATI_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPNTrianglesiATI, (GLenum pname, GLint param))
#endif // defined(GL_ATI_pn_triangles)
#if defined(GL_ATI_separate_stencil)
#define glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask) glatter_glStencilFuncSeparateATI_ptr((frontfunc), (backfunc), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFuncSeparateATI, (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask))
#define glStencilOpSeparateATI(face, sfail, dpfail, dppass) glatter_glStencilOpSeparateATI_ptr((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOpSeparateATI, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#endif // defined(GL_ATI_separate_stencil)
#if defined(GL_ATI_vertex_array_object)
#define glArrayObjectATI(array, size, type, stride, buffer, offset) glatter_glArrayObjectATI_ptr((array), (size), (type), (stride), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glArrayObjectATI, (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset))
#define glFreeObjectBufferATI(buffer) glatter_glFreeObjectBufferATI_ptr((buffer))
GLATTER_UBLOCK(void, APIENTRY, glFreeObjectBufferATI, (GLuint buffer))
#define glGetArrayObjectfvATI(array, pname, params) glatter_glGetArrayObjectfvATI_ptr((array), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetArrayObjectfvATI, (GLenum array, GLenum pname, GLfloat *params))
#define glGetArrayObjectivATI(array, pname, params) glatter_glGetArrayObjectivATI_ptr((array), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetArrayObjectivATI, (GLenum array, GLenum pname, GLint *params))
#define glGetObjectBufferfvATI(buffer, pname, params) glatter_glGetObjectBufferfvATI_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectBufferfvATI, (GLuint buffer, GLenum pname, GLfloat *params))
#define glGetObjectBufferivATI(buffer, pname, params) glatter_glGetObjectBufferivATI_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectBufferivATI, (GLuint buffer, GLenum pname, GLint *params))
#define glGetVariantArrayObjectfvATI(id, pname, params) glatter_glGetVariantArrayObjectfvATI_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantArrayObjectfvATI, (GLuint id, GLenum pname, GLfloat *params))
#define glGetVariantArrayObjectivATI(id, pname, params) glatter_glGetVariantArrayObjectivATI_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantArrayObjectivATI, (GLuint id, GLenum pname, GLint *params))
#define glIsObjectBufferATI(buffer) glatter_glIsObjectBufferATI_ptr((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsObjectBufferATI, (GLuint buffer))
#define glNewObjectBufferATI(size, pointer, usage) glatter_glNewObjectBufferATI_ptr((size), (pointer), (usage))
GLATTER_UBLOCK(GLuint, APIENTRY, glNewObjectBufferATI, (GLsizei size, const void *pointer, GLenum usage))
#define glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve) glatter_glUpdateObjectBufferATI_ptr((buffer), (offset), (size), (pointer), (preserve))
GLATTER_UBLOCK(void, APIENTRY, glUpdateObjectBufferATI, (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve))
#define glVariantArrayObjectATI(id, type, stride, buffer, offset) glatter_glVariantArrayObjectATI_ptr((id), (type), (stride), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVariantArrayObjectATI, (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset))
#endif // defined(GL_ATI_vertex_array_object)
#if defined(GL_ATI_vertex_attrib_array_object)
#define glGetVertexAttribArrayObjectfvATI(index, pname, params) glatter_glGetVertexAttribArrayObjectfvATI_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribArrayObjectfvATI, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribArrayObjectivATI(index, pname, params) glatter_glGetVertexAttribArrayObjectivATI_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribArrayObjectivATI, (GLuint index, GLenum pname, GLint *params))
#define glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset) glatter_glVertexAttribArrayObjectATI_ptr((index), (size), (type), (normalized), (stride), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribArrayObjectATI, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset))
#endif // defined(GL_ATI_vertex_attrib_array_object)
#if defined(GL_ATI_vertex_streams)
#define glClientActiveVertexStreamATI(stream) glatter_glClientActiveVertexStreamATI_ptr((stream))
GLATTER_UBLOCK(void, APIENTRY, glClientActiveVertexStreamATI, (GLenum stream))
#define glNormalStream3bATI(stream, nx, ny, nz) glatter_glNormalStream3bATI_ptr((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3bATI, (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz))
#define glNormalStream3bvATI(stream, coords) glatter_glNormalStream3bvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3bvATI, (GLenum stream, const GLbyte *coords))
#define glNormalStream3dATI(stream, nx, ny, nz) glatter_glNormalStream3dATI_ptr((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3dATI, (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz))
#define glNormalStream3dvATI(stream, coords) glatter_glNormalStream3dvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3dvATI, (GLenum stream, const GLdouble *coords))
#define glNormalStream3fATI(stream, nx, ny, nz) glatter_glNormalStream3fATI_ptr((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3fATI, (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz))
#define glNormalStream3fvATI(stream, coords) glatter_glNormalStream3fvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3fvATI, (GLenum stream, const GLfloat *coords))
#define glNormalStream3iATI(stream, nx, ny, nz) glatter_glNormalStream3iATI_ptr((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3iATI, (GLenum stream, GLint nx, GLint ny, GLint nz))
#define glNormalStream3ivATI(stream, coords) glatter_glNormalStream3ivATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3ivATI, (GLenum stream, const GLint *coords))
#define glNormalStream3sATI(stream, nx, ny, nz) glatter_glNormalStream3sATI_ptr((stream), (nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3sATI, (GLenum stream, GLshort nx, GLshort ny, GLshort nz))
#define glNormalStream3svATI(stream, coords) glatter_glNormalStream3svATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalStream3svATI, (GLenum stream, const GLshort *coords))
#define glVertexBlendEnvfATI(pname, param) glatter_glVertexBlendEnvfATI_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glVertexBlendEnvfATI, (GLenum pname, GLfloat param))
#define glVertexBlendEnviATI(pname, param) glatter_glVertexBlendEnviATI_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glVertexBlendEnviATI, (GLenum pname, GLint param))
#define glVertexStream1dATI(stream, x) glatter_glVertexStream1dATI_ptr((stream), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1dATI, (GLenum stream, GLdouble x))
#define glVertexStream1dvATI(stream, coords) glatter_glVertexStream1dvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1dvATI, (GLenum stream, const GLdouble *coords))
#define glVertexStream1fATI(stream, x) glatter_glVertexStream1fATI_ptr((stream), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1fATI, (GLenum stream, GLfloat x))
#define glVertexStream1fvATI(stream, coords) glatter_glVertexStream1fvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1fvATI, (GLenum stream, const GLfloat *coords))
#define glVertexStream1iATI(stream, x) glatter_glVertexStream1iATI_ptr((stream), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1iATI, (GLenum stream, GLint x))
#define glVertexStream1ivATI(stream, coords) glatter_glVertexStream1ivATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1ivATI, (GLenum stream, const GLint *coords))
#define glVertexStream1sATI(stream, x) glatter_glVertexStream1sATI_ptr((stream), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1sATI, (GLenum stream, GLshort x))
#define glVertexStream1svATI(stream, coords) glatter_glVertexStream1svATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream1svATI, (GLenum stream, const GLshort *coords))
#define glVertexStream2dATI(stream, x, y) glatter_glVertexStream2dATI_ptr((stream), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2dATI, (GLenum stream, GLdouble x, GLdouble y))
#define glVertexStream2dvATI(stream, coords) glatter_glVertexStream2dvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2dvATI, (GLenum stream, const GLdouble *coords))
#define glVertexStream2fATI(stream, x, y) glatter_glVertexStream2fATI_ptr((stream), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2fATI, (GLenum stream, GLfloat x, GLfloat y))
#define glVertexStream2fvATI(stream, coords) glatter_glVertexStream2fvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2fvATI, (GLenum stream, const GLfloat *coords))
#define glVertexStream2iATI(stream, x, y) glatter_glVertexStream2iATI_ptr((stream), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2iATI, (GLenum stream, GLint x, GLint y))
#define glVertexStream2ivATI(stream, coords) glatter_glVertexStream2ivATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2ivATI, (GLenum stream, const GLint *coords))
#define glVertexStream2sATI(stream, x, y) glatter_glVertexStream2sATI_ptr((stream), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2sATI, (GLenum stream, GLshort x, GLshort y))
#define glVertexStream2svATI(stream, coords) glatter_glVertexStream2svATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream2svATI, (GLenum stream, const GLshort *coords))
#define glVertexStream3dATI(stream, x, y, z) glatter_glVertexStream3dATI_ptr((stream), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3dATI, (GLenum stream, GLdouble x, GLdouble y, GLdouble z))
#define glVertexStream3dvATI(stream, coords) glatter_glVertexStream3dvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3dvATI, (GLenum stream, const GLdouble *coords))
#define glVertexStream3fATI(stream, x, y, z) glatter_glVertexStream3fATI_ptr((stream), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3fATI, (GLenum stream, GLfloat x, GLfloat y, GLfloat z))
#define glVertexStream3fvATI(stream, coords) glatter_glVertexStream3fvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3fvATI, (GLenum stream, const GLfloat *coords))
#define glVertexStream3iATI(stream, x, y, z) glatter_glVertexStream3iATI_ptr((stream), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3iATI, (GLenum stream, GLint x, GLint y, GLint z))
#define glVertexStream3ivATI(stream, coords) glatter_glVertexStream3ivATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3ivATI, (GLenum stream, const GLint *coords))
#define glVertexStream3sATI(stream, x, y, z) glatter_glVertexStream3sATI_ptr((stream), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3sATI, (GLenum stream, GLshort x, GLshort y, GLshort z))
#define glVertexStream3svATI(stream, coords) glatter_glVertexStream3svATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream3svATI, (GLenum stream, const GLshort *coords))
#define glVertexStream4dATI(stream, x, y, z, w) glatter_glVertexStream4dATI_ptr((stream), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4dATI, (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexStream4dvATI(stream, coords) glatter_glVertexStream4dvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4dvATI, (GLenum stream, const GLdouble *coords))
#define glVertexStream4fATI(stream, x, y, z, w) glatter_glVertexStream4fATI_ptr((stream), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4fATI, (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexStream4fvATI(stream, coords) glatter_glVertexStream4fvATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4fvATI, (GLenum stream, const GLfloat *coords))
#define glVertexStream4iATI(stream, x, y, z, w) glatter_glVertexStream4iATI_ptr((stream), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4iATI, (GLenum stream, GLint x, GLint y, GLint z, GLint w))
#define glVertexStream4ivATI(stream, coords) glatter_glVertexStream4ivATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4ivATI, (GLenum stream, const GLint *coords))
#define glVertexStream4sATI(stream, x, y, z, w) glatter_glVertexStream4sATI_ptr((stream), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4sATI, (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexStream4svATI(stream, coords) glatter_glVertexStream4svATI_ptr((stream), (coords))
GLATTER_UBLOCK(void, APIENTRY, glVertexStream4svATI, (GLenum stream, const GLshort *coords))
#endif // defined(GL_ATI_vertex_streams)
#if defined(GL_EXT_bindable_uniform)
#define glGetUniformBufferSizeEXT(program, location) glatter_glGetUniformBufferSizeEXT_ptr((program), (location))
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformBufferSizeEXT, (GLuint program, GLint location))
#define glGetUniformOffsetEXT(program, location) glatter_glGetUniformOffsetEXT_ptr((program), (location))
GLATTER_UBLOCK(GLintptr, APIENTRY, glGetUniformOffsetEXT, (GLuint program, GLint location))
#define glUniformBufferEXT(program, location, buffer) glatter_glUniformBufferEXT_ptr((program), (location), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glUniformBufferEXT, (GLuint program, GLint location, GLuint buffer))
#endif // defined(GL_EXT_bindable_uniform)
#if defined(GL_EXT_blend_color)
#define glBlendColorEXT(red, green, blue, alpha) glatter_glBlendColorEXT_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendColorEXT, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#endif // defined(GL_EXT_blend_color)
#if defined(GL_EXT_blend_equation_separate)
#define glBlendEquationSeparateEXT(modeRGB, modeAlpha) glatter_glBlendEquationSeparateEXT_ptr((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparateEXT, (GLenum modeRGB, GLenum modeAlpha))
#endif // defined(GL_EXT_blend_equation_separate)
#if defined(GL_EXT_blend_func_separate)
#define glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateEXT_ptr((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateEXT, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#endif // defined(GL_EXT_blend_func_separate)
#if defined(GL_EXT_blend_minmax)
#define glBlendEquationEXT(mode) glatter_glBlendEquationEXT_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationEXT, (GLenum mode))
#endif // defined(GL_EXT_blend_minmax)
#if defined(GL_EXT_color_subtable)
#define glColorSubTableEXT(target, start, count, format, type, data) glatter_glColorSubTableEXT_ptr((target), (start), (count), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glColorSubTableEXT, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data))
#define glCopyColorSubTableEXT(target, start, x, y, width) glatter_glCopyColorSubTableEXT_ptr((target), (start), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyColorSubTableEXT, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width))
#endif // defined(GL_EXT_color_subtable)
#if defined(GL_EXT_compiled_vertex_array)
#define glLockArraysEXT(first, count) glatter_glLockArraysEXT_ptr((first), (count))
GLATTER_UBLOCK(void, APIENTRY, glLockArraysEXT, (GLint first, GLsizei count))
#define glUnlockArraysEXT() glatter_glUnlockArraysEXT_ptr()
GLATTER_UBLOCK(void, APIENTRY, glUnlockArraysEXT, (void))
#endif // defined(GL_EXT_compiled_vertex_array)
#if defined(GL_EXT_convolution)
#define glConvolutionFilter1DEXT(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1DEXT_ptr((target), (internalformat), (width), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter1DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image))
#define glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2DEXT_ptr((target), (internalformat), (width), (height), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionFilter2DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image))
#define glConvolutionParameterfEXT(target, pname, params) glatter_glConvolutionParameterfEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterfEXT, (GLenum target, GLenum pname, GLfloat params))
#define glConvolutionParameterfvEXT(target, pname, params) glatter_glConvolutionParameterfvEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterfvEXT, (GLenum target, GLenum pname, const GLfloat *params))
#define glConvolutionParameteriEXT(target, pname, params) glatter_glConvolutionParameteriEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameteriEXT, (GLenum target, GLenum pname, GLint params))
#define glConvolutionParameterivEXT(target, pname, params) glatter_glConvolutionParameterivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterivEXT, (GLenum target, GLenum pname, const GLint *params))
#define glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1DEXT_ptr((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter1DEXT, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2DEXT_ptr((target), (internalformat), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyConvolutionFilter2DEXT, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height))
#define glGetConvolutionFilterEXT(target, format, type, image) glatter_glGetConvolutionFilterEXT_ptr((target), (format), (type), (image))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionFilterEXT, (GLenum target, GLenum format, GLenum type, void *image))
#define glGetConvolutionParameterfvEXT(target, pname, params) glatter_glGetConvolutionParameterfvEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetConvolutionParameterivEXT(target, pname, params) glatter_glGetConvolutionParameterivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glGetSeparableFilterEXT(target, format, type, row, column, span) glatter_glGetSeparableFilterEXT_ptr((target), (format), (type), (row), (column), (span))
GLATTER_UBLOCK(void, APIENTRY, glGetSeparableFilterEXT, (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span))
#define glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2DEXT_ptr((target), (internalformat), (width), (height), (format), (type), (row), (column))
GLATTER_UBLOCK(void, APIENTRY, glSeparableFilter2DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column))
#endif // defined(GL_EXT_convolution)
#if defined(GL_EXT_coordinate_frame)
#define glBinormal3bEXT(bx, by, bz) glatter_glBinormal3bEXT_ptr((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3bEXT, (GLbyte bx, GLbyte by, GLbyte bz))
#define glBinormal3bvEXT(v) glatter_glBinormal3bvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3bvEXT, (const GLbyte *v))
#define glBinormal3dEXT(bx, by, bz) glatter_glBinormal3dEXT_ptr((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3dEXT, (GLdouble bx, GLdouble by, GLdouble bz))
#define glBinormal3dvEXT(v) glatter_glBinormal3dvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3dvEXT, (const GLdouble *v))
#define glBinormal3fEXT(bx, by, bz) glatter_glBinormal3fEXT_ptr((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3fEXT, (GLfloat bx, GLfloat by, GLfloat bz))
#define glBinormal3fvEXT(v) glatter_glBinormal3fvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3fvEXT, (const GLfloat *v))
#define glBinormal3iEXT(bx, by, bz) glatter_glBinormal3iEXT_ptr((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3iEXT, (GLint bx, GLint by, GLint bz))
#define glBinormal3ivEXT(v) glatter_glBinormal3ivEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3ivEXT, (const GLint *v))
#define glBinormal3sEXT(bx, by, bz) glatter_glBinormal3sEXT_ptr((bx), (by), (bz))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3sEXT, (GLshort bx, GLshort by, GLshort bz))
#define glBinormal3svEXT(v) glatter_glBinormal3svEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glBinormal3svEXT, (const GLshort *v))
#define glBinormalPointerEXT(type, stride, pointer) glatter_glBinormalPointerEXT_ptr((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glBinormalPointerEXT, (GLenum type, GLsizei stride, const void *pointer))
#define glTangent3bEXT(tx, ty, tz) glatter_glTangent3bEXT_ptr((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3bEXT, (GLbyte tx, GLbyte ty, GLbyte tz))
#define glTangent3bvEXT(v) glatter_glTangent3bvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3bvEXT, (const GLbyte *v))
#define glTangent3dEXT(tx, ty, tz) glatter_glTangent3dEXT_ptr((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3dEXT, (GLdouble tx, GLdouble ty, GLdouble tz))
#define glTangent3dvEXT(v) glatter_glTangent3dvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3dvEXT, (const GLdouble *v))
#define glTangent3fEXT(tx, ty, tz) glatter_glTangent3fEXT_ptr((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3fEXT, (GLfloat tx, GLfloat ty, GLfloat tz))
#define glTangent3fvEXT(v) glatter_glTangent3fvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3fvEXT, (const GLfloat *v))
#define glTangent3iEXT(tx, ty, tz) glatter_glTangent3iEXT_ptr((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3iEXT, (GLint tx, GLint ty, GLint tz))
#define glTangent3ivEXT(v) glatter_glTangent3ivEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3ivEXT, (const GLint *v))
#define glTangent3sEXT(tx, ty, tz) glatter_glTangent3sEXT_ptr((tx), (ty), (tz))
GLATTER_UBLOCK(void, APIENTRY, glTangent3sEXT, (GLshort tx, GLshort ty, GLshort tz))
#define glTangent3svEXT(v) glatter_glTangent3svEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTangent3svEXT, (const GLshort *v))
#define glTangentPointerEXT(type, stride, pointer) glatter_glTangentPointerEXT_ptr((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTangentPointerEXT, (GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_coordinate_frame)
#if defined(GL_EXT_copy_texture)
#define glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1DEXT_ptr((target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage1DEXT, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2DEXT_ptr((target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexImage2DEXT, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1DEXT_ptr((target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage1DEXT, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2DEXT_ptr((target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage2DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DEXT_ptr((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage3DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_copy_texture)
#if defined(GL_EXT_cull_vertex)
#define glCullParameterdvEXT(pname, params) glatter_glCullParameterdvEXT_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCullParameterdvEXT, (GLenum pname, GLdouble *params))
#define glCullParameterfvEXT(pname, params) glatter_glCullParameterfvEXT_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCullParameterfvEXT, (GLenum pname, GLfloat *params))
#endif // defined(GL_EXT_cull_vertex)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_ptr((type), (object), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabelEXT, (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_ptr((type), (object), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glLabelObjectEXT, (GLenum type, GLuint object, GLsizei length, const GLchar *label))
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_ptr((length), (marker))
GLATTER_UBLOCK(void, APIENTRY, glInsertEventMarkerEXT, (GLsizei length, const GLchar *marker))
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPopGroupMarkerEXT, (void))
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_ptr((length), (marker))
GLATTER_UBLOCK(void, APIENTRY, glPushGroupMarkerEXT, (GLsizei length, const GLchar *marker))
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_depth_bounds_test)
#define glDepthBoundsEXT(zmin, zmax) glatter_glDepthBoundsEXT_ptr((zmin), (zmax))
GLATTER_UBLOCK(void, APIENTRY, glDepthBoundsEXT, (GLclampd zmin, GLclampd zmax))
#endif // defined(GL_EXT_depth_bounds_test)
#if defined(GL_EXT_direct_state_access)
#define glBindMultiTextureEXT(texunit, target, texture) glatter_glBindMultiTextureEXT_ptr((texunit), (target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindMultiTextureEXT, (GLenum texunit, GLenum target, GLuint texture))
#define glCheckNamedFramebufferStatusEXT(framebuffer, target) glatter_glCheckNamedFramebufferStatusEXT_ptr((framebuffer), (target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatusEXT, (GLuint framebuffer, GLenum target))
#define glClearNamedBufferDataEXT(buffer, internalformat, format, type, data) glatter_glClearNamedBufferDataEXT_ptr((buffer), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferDataEXT, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubDataEXT_ptr((buffer), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubDataEXT, (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glClientAttribDefaultEXT(mask) glatter_glClientAttribDefaultEXT_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glClientAttribDefaultEXT, (GLbitfield mask))
#define glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedMultiTexImage1DEXT_ptr((texunit), (target), (level), (internalformat), (width), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedMultiTexImage2DEXT_ptr((texunit), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedMultiTexImage3DEXT_ptr((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedMultiTexSubImage1DEXT_ptr((texunit), (target), (level), (xoffset), (width), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedMultiTexSubImage2DEXT_ptr((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedMultiTexSubImage3DEXT_ptr((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedTextureImage1DEXT_ptr((texture), (target), (level), (internalformat), (width), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedTextureImage2DEXT_ptr((texture), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedTextureImage3DEXT_ptr((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits))
#define glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedTextureSubImage1DEXT_ptr((texture), (target), (level), (xoffset), (width), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedTextureSubImage2DEXT_ptr((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits))
#define glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedTextureSubImage3DEXT_ptr((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits))
#define glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) glatter_glCopyMultiTexImage1DEXT_ptr((texunit), (target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) glatter_glCopyMultiTexImage2DEXT_ptr((texunit), (target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) glatter_glCopyMultiTexSubImage1DEXT_ptr((texunit), (target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyMultiTexSubImage2DEXT_ptr((texunit), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyMultiTexSubImage3DEXT_ptr((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) glatter_glCopyTextureImage1DEXT_ptr((texture), (target), (level), (internalformat), (x), (y), (width), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border))
#define glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) glatter_glCopyTextureImage2DEXT_ptr((texture), (target), (level), (internalformat), (x), (y), (width), (height), (border))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))
#define glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1DEXT_ptr((texture), (target), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2DEXT_ptr((texture), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3DEXT_ptr((texture), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDisableClientStateIndexedEXT(array, index) glatter_glDisableClientStateIndexedEXT_ptr((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableClientStateIndexedEXT, (GLenum array, GLuint index))
#define glDisableClientStateiEXT(array, index) glatter_glDisableClientStateiEXT_ptr((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableClientStateiEXT, (GLenum array, GLuint index))
#define glDisableIndexedEXT(target, index) glatter_glDisableIndexedEXT_ptr((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableIndexedEXT, (GLenum target, GLuint index))
#define glDisableVertexArrayAttribEXT(vaobj, index) glatter_glDisableVertexArrayAttribEXT_ptr((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttribEXT, (GLuint vaobj, GLuint index))
#define glDisableVertexArrayEXT(vaobj, array) glatter_glDisableVertexArrayEXT_ptr((vaobj), (array))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayEXT, (GLuint vaobj, GLenum array))
#define glEnableClientStateIndexedEXT(array, index) glatter_glEnableClientStateIndexedEXT_ptr((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableClientStateIndexedEXT, (GLenum array, GLuint index))
#define glEnableClientStateiEXT(array, index) glatter_glEnableClientStateiEXT_ptr((array), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableClientStateiEXT, (GLenum array, GLuint index))
#define glEnableIndexedEXT(target, index) glatter_glEnableIndexedEXT_ptr((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableIndexedEXT, (GLenum target, GLuint index))
#define glEnableVertexArrayAttribEXT(vaobj, index) glatter_glEnableVertexArrayAttribEXT_ptr((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttribEXT, (GLuint vaobj, GLuint index))
#define glEnableVertexArrayEXT(vaobj, array) glatter_glEnableVertexArrayEXT_ptr((vaobj), (array))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayEXT, (GLuint vaobj, GLenum array))
#define glFlushMappedNamedBufferRangeEXT(buffer, offset, length) glatter_glFlushMappedNamedBufferRangeEXT_ptr((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glFramebufferDrawBufferEXT(framebuffer, mode) glatter_glFramebufferDrawBufferEXT_ptr((framebuffer), (mode))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferDrawBufferEXT, (GLuint framebuffer, GLenum mode))
#define glFramebufferDrawBuffersEXT(framebuffer, n, bufs) glatter_glFramebufferDrawBuffersEXT_ptr((framebuffer), (n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferDrawBuffersEXT, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#define glFramebufferReadBufferEXT(framebuffer, mode) glatter_glFramebufferReadBufferEXT_ptr((framebuffer), (mode))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferReadBufferEXT, (GLuint framebuffer, GLenum mode))
#define glGenerateMultiTexMipmapEXT(texunit, target) glatter_glGenerateMultiTexMipmapEXT_ptr((texunit), (target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMultiTexMipmapEXT, (GLenum texunit, GLenum target))
#define glGenerateTextureMipmapEXT(texture, target) glatter_glGenerateTextureMipmapEXT_ptr((texture), (target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmapEXT, (GLuint texture, GLenum target))
#define glGetBooleanIndexedvEXT(target, index, data) glatter_glGetBooleanIndexedvEXT_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleanIndexedvEXT, (GLenum target, GLuint index, GLboolean *data))
#define glGetCompressedMultiTexImageEXT(texunit, target, lod, img) glatter_glGetCompressedMultiTexImageEXT_ptr((texunit), (target), (lod), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedMultiTexImageEXT, (GLenum texunit, GLenum target, GLint lod, void *img))
#define glGetCompressedTextureImageEXT(texture, target, lod, img) glatter_glGetCompressedTextureImageEXT_ptr((texture), (target), (lod), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImageEXT, (GLuint texture, GLenum target, GLint lod, void *img))
#define glGetDoubleIndexedvEXT(target, index, data) glatter_glGetDoubleIndexedvEXT_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoubleIndexedvEXT, (GLenum target, GLuint index, GLdouble *data))
#define glGetDoublei_vEXT(pname, index, params) glatter_glGetDoublei_vEXT_ptr((pname), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_vEXT, (GLenum pname, GLuint index, GLdouble *params))
#define glGetFloatIndexedvEXT(target, index, data) glatter_glGetFloatIndexedvEXT_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloatIndexedvEXT, (GLenum target, GLuint index, GLfloat *data))
#define glGetFloati_vEXT(pname, index, params) glatter_glGetFloati_vEXT_ptr((pname), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_vEXT, (GLenum pname, GLuint index, GLfloat *params))
#define glGetFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetFramebufferParameterivEXT_ptr((framebuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint *params))
#define glGetIntegerIndexedvEXT(target, index, data) glatter_glGetIntegerIndexedvEXT_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerIndexedvEXT, (GLenum target, GLuint index, GLint *data))
#define glGetMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvfvEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat *params))
#define glGetMultiTexEnvivEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvivEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#define glGetMultiTexGendvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGendvEXT_ptr((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params))
#define glGetMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenfvEXT_ptr((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params))
#define glGetMultiTexGenivEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenivEXT_ptr((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint *params))
#define glGetMultiTexImageEXT(texunit, target, level, format, type, pixels) glatter_glGetMultiTexImageEXT_ptr((texunit), (target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexImageEXT, (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#define glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterfvEXT_ptr((texunit), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexLevelParameterfvEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterivEXT_ptr((texunit), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexLevelParameterivEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIivEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#define glGetMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIuivEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, GLuint *params))
#define glGetMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterfvEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat *params))
#define glGetMultiTexParameterivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterivEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint *params))
#define glGetNamedBufferParameterivEXT(buffer, pname, params) glatter_glGetNamedBufferParameterivEXT_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameterivEXT, (GLuint buffer, GLenum pname, GLint *params))
#define glGetNamedBufferPointervEXT(buffer, pname, params) glatter_glGetNamedBufferPointervEXT_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointervEXT, (GLuint buffer, GLenum pname, void **params))
#define glGetNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glGetNamedBufferSubDataEXT_ptr((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data))
#define glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameterivEXT_ptr((framebuffer), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameterivEXT, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#define glGetNamedFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetNamedFramebufferParameterivEXT_ptr((framebuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint *params))
#define glGetNamedProgramLocalParameterIivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIivEXT_ptr((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterIivEXT, (GLuint program, GLenum target, GLuint index, GLint *params))
#define glGetNamedProgramLocalParameterIuivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIuivEXT_ptr((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterIuivEXT, (GLuint program, GLenum target, GLuint index, GLuint *params))
#define glGetNamedProgramLocalParameterdvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterdvEXT_ptr((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterdvEXT, (GLuint program, GLenum target, GLuint index, GLdouble *params))
#define glGetNamedProgramLocalParameterfvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterfvEXT_ptr((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramLocalParameterfvEXT, (GLuint program, GLenum target, GLuint index, GLfloat *params))
#define glGetNamedProgramStringEXT(program, target, pname, string) glatter_glGetNamedProgramStringEXT_ptr((program), (target), (pname), (string))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramStringEXT, (GLuint program, GLenum target, GLenum pname, void *string))
#define glGetNamedProgramivEXT(program, target, pname, params) glatter_glGetNamedProgramivEXT_ptr((program), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedProgramivEXT, (GLuint program, GLenum target, GLenum pname, GLint *params))
#define glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameterivEXT_ptr((renderbuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameterivEXT, (GLuint renderbuffer, GLenum pname, GLint *params))
#define glGetPointerIndexedvEXT(target, index, data) glatter_glGetPointerIndexedvEXT_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetPointerIndexedvEXT, (GLenum target, GLuint index, void **data))
#define glGetPointeri_vEXT(pname, index, params) glatter_glGetPointeri_vEXT_ptr((pname), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointeri_vEXT, (GLenum pname, GLuint index, void **params))
#define glGetTextureImageEXT(texture, target, level, format, type, pixels) glatter_glGetTextureImageEXT_ptr((texture), (target), (level), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImageEXT, (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels))
#define glGetTextureLevelParameterfvEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterfvEXT_ptr((texture), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfvEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params))
#define glGetTextureLevelParameterivEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterivEXT_ptr((texture), (target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterivEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params))
#define glGetTextureParameterIivEXT(texture, target, pname, params) glatter_glGetTextureParameterIivEXT_ptr((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, GLint *params))
#define glGetTextureParameterIuivEXT(texture, target, pname, params) glatter_glGetTextureParameterIuivEXT_ptr((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, GLuint *params))
#define glGetTextureParameterfvEXT(texture, target, pname, params) glatter_glGetTextureParameterfvEXT_ptr((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat *params))
#define glGetTextureParameterivEXT(texture, target, pname, params) glatter_glGetTextureParameterivEXT_ptr((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, GLint *params))
#define glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayIntegeri_vEXT_ptr((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIntegeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#define glGetVertexArrayIntegervEXT(vaobj, pname, param) glatter_glGetVertexArrayIntegervEXT_ptr((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIntegervEXT, (GLuint vaobj, GLenum pname, GLint *param))
#define glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayPointeri_vEXT_ptr((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayPointeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, void **param))
#define glGetVertexArrayPointervEXT(vaobj, pname, param) glatter_glGetVertexArrayPointervEXT_ptr((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayPointervEXT, (GLuint vaobj, GLenum pname, void **param))
#define glIsEnabledIndexedEXT(target, index) glatter_glIsEnabledIndexedEXT_ptr((target), (index))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledIndexedEXT, (GLenum target, GLuint index))
#define glMapNamedBufferEXT(buffer, access) glatter_glMapNamedBufferEXT_ptr((buffer), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferEXT, (GLuint buffer, GLenum access))
#define glMapNamedBufferRangeEXT(buffer, offset, length, access) glatter_glMapNamedBufferRangeEXT_ptr((buffer), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixFrustumEXT_ptr((mode), (left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glMatrixFrustumEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glMatrixLoadIdentityEXT(mode) glatter_glMatrixLoadIdentityEXT_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadIdentityEXT, (GLenum mode))
#define glMatrixLoadTransposedEXT(mode, m) glatter_glMatrixLoadTransposedEXT_ptr((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTransposedEXT, (GLenum mode, const GLdouble *m))
#define glMatrixLoadTransposefEXT(mode, m) glatter_glMatrixLoadTransposefEXT_ptr((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTransposefEXT, (GLenum mode, const GLfloat *m))
#define glMatrixLoaddEXT(mode, m) glatter_glMatrixLoaddEXT_ptr((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoaddEXT, (GLenum mode, const GLdouble *m))
#define glMatrixLoadfEXT(mode, m) glatter_glMatrixLoadfEXT_ptr((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadfEXT, (GLenum mode, const GLfloat *m))
#define glMatrixMultTransposedEXT(mode, m) glatter_glMatrixMultTransposedEXT_ptr((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTransposedEXT, (GLenum mode, const GLdouble *m))
#define glMatrixMultTransposefEXT(mode, m) glatter_glMatrixMultTransposefEXT_ptr((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTransposefEXT, (GLenum mode, const GLfloat *m))
#define glMatrixMultdEXT(mode, m) glatter_glMatrixMultdEXT_ptr((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultdEXT, (GLenum mode, const GLdouble *m))
#define glMatrixMultfEXT(mode, m) glatter_glMatrixMultfEXT_ptr((mode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultfEXT, (GLenum mode, const GLfloat *m))
#define glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixOrthoEXT_ptr((mode), (left), (right), (bottom), (top), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glMatrixOrthoEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))
#define glMatrixPopEXT(mode) glatter_glMatrixPopEXT_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixPopEXT, (GLenum mode))
#define glMatrixPushEXT(mode) glatter_glMatrixPushEXT_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glMatrixPushEXT, (GLenum mode))
#define glMatrixRotatedEXT(mode, angle, x, y, z) glatter_glMatrixRotatedEXT_ptr((mode), (angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixRotatedEXT, (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z))
#define glMatrixRotatefEXT(mode, angle, x, y, z) glatter_glMatrixRotatefEXT_ptr((mode), (angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixRotatefEXT, (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z))
#define glMatrixScaledEXT(mode, x, y, z) glatter_glMatrixScaledEXT_ptr((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixScaledEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z))
#define glMatrixScalefEXT(mode, x, y, z) glatter_glMatrixScalefEXT_ptr((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixScalefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z))
#define glMatrixTranslatedEXT(mode, x, y, z) glatter_glMatrixTranslatedEXT_ptr((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixTranslatedEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z))
#define glMatrixTranslatefEXT(mode, x, y, z) glatter_glMatrixTranslatefEXT_ptr((mode), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glMatrixTranslatefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z))
#define glMultiTexBufferEXT(texunit, target, internalformat, buffer) glatter_glMultiTexBufferEXT_ptr((texunit), (target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexBufferEXT, (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer))
#define glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer) glatter_glMultiTexCoordPointerEXT_ptr((texunit), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordPointerEXT, (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glMultiTexEnvfEXT(texunit, target, pname, param) glatter_glMultiTexEnvfEXT_ptr((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param))
#define glMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glMultiTexEnvfvEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params))
#define glMultiTexEnviEXT(texunit, target, pname, param) glatter_glMultiTexEnviEXT_ptr((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnviEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param))
#define glMultiTexEnvivEXT(texunit, target, pname, params) glatter_glMultiTexEnvivEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#define glMultiTexGendEXT(texunit, coord, pname, param) glatter_glMultiTexGendEXT_ptr((texunit), (coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGendEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble param))
#define glMultiTexGendvEXT(texunit, coord, pname, params) glatter_glMultiTexGendvEXT_ptr((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params))
#define glMultiTexGenfEXT(texunit, coord, pname, param) glatter_glMultiTexGenfEXT_ptr((texunit), (coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenfEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat param))
#define glMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glMultiTexGenfvEXT_ptr((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params))
#define glMultiTexGeniEXT(texunit, coord, pname, param) glatter_glMultiTexGeniEXT_ptr((texunit), (coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGeniEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint param))
#define glMultiTexGenivEXT(texunit, coord, pname, params) glatter_glMultiTexGenivEXT_ptr((texunit), (coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLint *params))
#define glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels) glatter_glMultiTexImage1DEXT_ptr((texunit), (target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#define glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels) glatter_glMultiTexImage2DEXT_ptr((texunit), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glMultiTexImage3DEXT_ptr((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIivEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#define glMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIuivEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLuint *params))
#define glMultiTexParameterfEXT(texunit, target, pname, param) glatter_glMultiTexParameterfEXT_ptr((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param))
#define glMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glMultiTexParameterfvEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params))
#define glMultiTexParameteriEXT(texunit, target, pname, param) glatter_glMultiTexParameteriEXT_ptr((texunit), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameteriEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param))
#define glMultiTexParameterivEXT(texunit, target, pname, params) glatter_glMultiTexParameterivEXT_ptr((texunit), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint *params))
#define glMultiTexRenderbufferEXT(texunit, target, renderbuffer) glatter_glMultiTexRenderbufferEXT_ptr((texunit), (target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexRenderbufferEXT, (GLenum texunit, GLenum target, GLuint renderbuffer))
#define glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels) glatter_glMultiTexSubImage1DEXT_ptr((texunit), (target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glMultiTexSubImage2DEXT_ptr((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glMultiTexSubImage3DEXT_ptr((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glNamedBufferDataEXT(buffer, size, data, usage) glatter_glNamedBufferDataEXT_ptr((buffer), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferDataEXT, (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage))
#define glNamedBufferStorageEXT(buffer, size, data, flags) glatter_glNamedBufferStorageEXT_ptr((buffer), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorageEXT, (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags))
#define glNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glNamedBufferSubDataEXT_ptr((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#define glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glNamedCopyBufferSubDataEXT_ptr((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glNamedCopyBufferSubDataEXT, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glNamedFramebufferParameteriEXT(framebuffer, pname, param) glatter_glNamedFramebufferParameteriEXT_ptr((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteriEXT, (GLuint framebuffer, GLenum pname, GLint param))
#define glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbufferEXT_ptr((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbufferEXT, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture1DEXT_ptr((framebuffer), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture1DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture2DEXT_ptr((framebuffer), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture2DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) glatter_glNamedFramebufferTexture3DEXT_ptr((framebuffer), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture3DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTextureEXT_ptr((framebuffer), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#define glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) glatter_glNamedFramebufferTextureFaceEXT_ptr((framebuffer), (attachment), (texture), (level), (face))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureFaceEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face))
#define glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayerEXT_ptr((framebuffer), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayerEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4dEXT_ptr((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4dEXT, (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glNamedProgramLocalParameter4dvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4dvEXT_ptr((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4dvEXT, (GLuint program, GLenum target, GLuint index, const GLdouble *params))
#define glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4fEXT_ptr((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4fEXT, (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glNamedProgramLocalParameter4fvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4fvEXT_ptr((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameter4fvEXT, (GLuint program, GLenum target, GLuint index, const GLfloat *params))
#define glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4iEXT_ptr((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4iEXT, (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glNamedProgramLocalParameterI4ivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4ivEXT_ptr((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4ivEXT, (GLuint program, GLenum target, GLuint index, const GLint *params))
#define glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4uiEXT_ptr((program), (target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4uiEXT, (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glNamedProgramLocalParameterI4uivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4uivEXT_ptr((program), (target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameterI4uivEXT, (GLuint program, GLenum target, GLuint index, const GLuint *params))
#define glNamedProgramLocalParameters4fvEXT(program, target, index, count, params) glatter_glNamedProgramLocalParameters4fvEXT_ptr((program), (target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParameters4fvEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#define glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4ivEXT_ptr((program), (target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParametersI4ivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params))
#define glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4uivEXT_ptr((program), (target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramLocalParametersI4uivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params))
#define glNamedProgramStringEXT(program, target, format, len, string) glatter_glNamedProgramStringEXT_ptr((program), (target), (format), (len), (string))
GLATTER_UBLOCK(void, APIENTRY, glNamedProgramStringEXT, (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string))
#define glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorageEXT_ptr((renderbuffer), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageEXT, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleCoverageEXT_ptr((renderbuffer), (coverageSamples), (colorSamples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisampleCoverageEXT, (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleEXT_ptr((renderbuffer), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisampleEXT, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glProgramUniform1dEXT(program, location, x) glatter_glProgramUniform1dEXT_ptr((program), (location), (x))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dEXT, (GLuint program, GLint location, GLdouble x))
#define glProgramUniform1dvEXT(program, location, count, value) glatter_glProgramUniform1dvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fEXT, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iEXT, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiEXT, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2dEXT(program, location, x, y) glatter_glProgramUniform2dEXT_ptr((program), (location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y))
#define glProgramUniform2dvEXT(program, location, count, value) glatter_glProgramUniform2dvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iEXT, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3dEXT(program, location, x, y, z) glatter_glProgramUniform3dEXT_ptr((program), (location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z))
#define glProgramUniform3dvEXT(program, location, count, value) glatter_glProgramUniform3dvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4dEXT(program, location, x, y, z, w) glatter_glProgramUniform4dEXT_ptr((program), (location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramUniform4dvEXT(program, location, count, value) glatter_glProgramUniform4dvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ivEXT, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glPushClientAttribDefaultEXT(mask) glatter_glPushClientAttribDefaultEXT_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glPushClientAttribDefaultEXT, (GLbitfield mask))
#define glTextureBufferEXT(texture, target, internalformat, buffer) glatter_glTextureBufferEXT_ptr((texture), (target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer))
#define glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) glatter_glTextureBufferRangeEXT_ptr((texture), (target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRangeEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels) glatter_glTextureImage1DEXT_ptr((texture), (target), (level), (internalformat), (width), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels) glatter_glTextureImage2DEXT_ptr((texture), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTextureImage3DEXT_ptr((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexturePageCommitmentEXT_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit))
GLATTER_UBLOCK(void, APIENTRY, glTexturePageCommitmentEXT, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit))
#define glTextureParameterIivEXT(texture, target, pname, params) glatter_glTextureParameterIivEXT_ptr((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint *params))
#define glTextureParameterIuivEXT(texture, target, pname, params) glatter_glTextureParameterIuivEXT_ptr((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, const GLuint *params))
#define glTextureParameterfEXT(texture, target, pname, param) glatter_glTextureParameterfEXT_ptr((texture), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat param))
#define glTextureParameterfvEXT(texture, target, pname, params) glatter_glTextureParameterfvEXT_ptr((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, const GLfloat *params))
#define glTextureParameteriEXT(texture, target, pname, param) glatter_glTextureParameteriEXT_ptr((texture), (target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriEXT, (GLuint texture, GLenum target, GLenum pname, GLint param))
#define glTextureParameterivEXT(texture, target, pname, params) glatter_glTextureParameterivEXT_ptr((texture), (target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint *params))
#define glTextureRenderbufferEXT(texture, target, renderbuffer) glatter_glTextureRenderbufferEXT_ptr((texture), (target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureRenderbufferEXT, (GLuint texture, GLenum target, GLuint renderbuffer))
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT_ptr((texture), (target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT_ptr((texture), (target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisampleEXT_ptr((texture), (target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT_ptr((texture), (target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisampleEXT_ptr((texture), (target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1DEXT_ptr((texture), (target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2DEXT_ptr((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3DEXT_ptr((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glUnmapNamedBufferEXT(buffer) glatter_glUnmapNamedBufferEXT_ptr((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBufferEXT, (GLuint buffer))
#define glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayBindVertexBufferEXT_ptr((vaobj), (bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindVertexBufferEXT, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayColorOffsetEXT_ptr((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) glatter_glVertexArrayEdgeFlagOffsetEXT_ptr((vaobj), (buffer), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayEdgeFlagOffsetEXT, (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset))
#define glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayFogCoordOffsetEXT_ptr((vaobj), (buffer), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayFogCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayIndexOffsetEXT_ptr((vaobj), (buffer), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayIndexOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset) glatter_glVertexArrayMultiTexCoordOffsetEXT_ptr((vaobj), (buffer), (texunit), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayMultiTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayNormalOffsetEXT_ptr((vaobj), (buffer), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayNormalOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArraySecondaryColorOffsetEXT_ptr((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArraySecondaryColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayTexCoordOffsetEXT_ptr((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) glatter_glVertexArrayVertexAttribBindingEXT_ptr((vaobj), (attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribBindingEXT, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#define glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor) glatter_glVertexArrayVertexAttribDivisorEXT_ptr((vaobj), (index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribDivisorEXT, (GLuint vaobj, GLuint index, GLuint divisor))
#define glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayVertexAttribFormatEXT_ptr((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribIFormatEXT_ptr((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribIFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribIOffsetEXT_ptr((vaobj), (buffer), (index), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribIOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribLFormatEXT_ptr((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribLFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribLOffsetEXT_ptr((vaobj), (buffer), (index), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribLOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset) glatter_glVertexArrayVertexAttribOffsetEXT_ptr((vaobj), (buffer), (index), (size), (type), (normalized), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexAttribOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset))
#define glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) glatter_glVertexArrayVertexBindingDivisorEXT_ptr((vaobj), (bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBindingDivisorEXT, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#define glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayVertexOffsetEXT_ptr((vaobj), (buffer), (size), (type), (stride), (offset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset))
#endif // defined(GL_EXT_direct_state_access)
#if defined(GL_EXT_draw_buffers2)
#define glColorMaskIndexedEXT(index, r, g, b, a) glatter_glColorMaskIndexedEXT_ptr((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, APIENTRY, glColorMaskIndexedEXT, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#endif // defined(GL_EXT_draw_buffers2)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_ptr((mode), (start), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedEXT, (GLenum mode, GLint start, GLsizei count, GLsizei primcount))
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_ptr((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedEXT, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount))
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_range_elements)
#define glDrawRangeElementsEXT(mode, start, end, count, type, indices) glatter_glDrawRangeElementsEXT_ptr((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementsEXT, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#endif // defined(GL_EXT_draw_range_elements)
#if defined(GL_EXT_fog_coord)
#define glFogCoordPointerEXT(type, stride, pointer) glatter_glFogCoordPointerEXT_ptr((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordPointerEXT, (GLenum type, GLsizei stride, const void *pointer))
#define glFogCoorddEXT(coord) glatter_glFogCoorddEXT_ptr((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoorddEXT, (GLdouble coord))
#define glFogCoorddvEXT(coord) glatter_glFogCoorddvEXT_ptr((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoorddvEXT, (const GLdouble *coord))
#define glFogCoordfEXT(coord) glatter_glFogCoordfEXT_ptr((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordfEXT, (GLfloat coord))
#define glFogCoordfvEXT(coord) glatter_glFogCoordfvEXT_ptr((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordfvEXT, (const GLfloat *coord))
#endif // defined(GL_EXT_fog_coord)
#if defined(GL_EXT_framebuffer_blit)
#define glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferEXT_ptr((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebufferEXT, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#endif // defined(GL_EXT_framebuffer_blit)
#if defined(GL_EXT_framebuffer_multisample)
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_framebuffer_multisample)
#if defined(GL_EXT_framebuffer_object)
#define glBindFramebufferEXT(target, framebuffer) glatter_glBindFramebufferEXT_ptr((target), (framebuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindFramebufferEXT, (GLenum target, GLuint framebuffer))
#define glBindRenderbufferEXT(target, renderbuffer) glatter_glBindRenderbufferEXT_ptr((target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindRenderbufferEXT, (GLenum target, GLuint renderbuffer))
#define glCheckFramebufferStatusEXT(target) glatter_glCheckFramebufferStatusEXT_ptr((target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckFramebufferStatusEXT, (GLenum target))
#define glDeleteFramebuffersEXT(n, framebuffers) glatter_glDeleteFramebuffersEXT_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFramebuffersEXT, (GLsizei n, const GLuint *framebuffers))
#define glDeleteRenderbuffersEXT(n, renderbuffers) glatter_glDeleteRenderbuffersEXT_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteRenderbuffersEXT, (GLsizei n, const GLuint *renderbuffers))
#define glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbufferEXT_ptr((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferRenderbufferEXT, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture1DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1DEXT_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture1DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture2DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2DEXT_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture2DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DEXT_ptr((target), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture3DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glGenFramebuffersEXT(n, framebuffers) glatter_glGenFramebuffersEXT_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenFramebuffersEXT, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffersEXT(n, renderbuffers) glatter_glGenRenderbuffersEXT_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenRenderbuffersEXT, (GLsizei n, GLuint *renderbuffers))
#define glGenerateMipmapEXT(target) glatter_glGenerateMipmapEXT_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMipmapEXT, (GLenum target))
#define glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameterivEXT_ptr((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferAttachmentParameterivEXT, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetRenderbufferParameterivEXT(target, pname, params) glatter_glGetRenderbufferParameterivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetRenderbufferParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glIsFramebufferEXT(framebuffer) glatter_glIsFramebufferEXT_ptr((framebuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFramebufferEXT, (GLuint framebuffer))
#define glIsRenderbufferEXT(renderbuffer) glatter_glIsRenderbufferEXT_ptr((renderbuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsRenderbufferEXT, (GLuint renderbuffer))
#define glRenderbufferStorageEXT(target, internalformat, width, height) glatter_glRenderbufferStorageEXT_ptr((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_EXT_framebuffer_object)
#if defined(GL_EXT_geometry_shader4)
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT_ptr((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteriEXT, (GLuint program, GLenum pname, GLint value))
#endif // defined(GL_EXT_geometry_shader4)
#if defined(GL_EXT_gpu_program_parameters)
#define glProgramEnvParameters4fvEXT(target, index, count, params) glatter_glProgramEnvParameters4fvEXT_ptr((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameters4fvEXT, (GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#define glProgramLocalParameters4fvEXT(target, index, count, params) glatter_glProgramLocalParameters4fvEXT_ptr((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameters4fvEXT, (GLenum target, GLuint index, GLsizei count, const GLfloat *params))
#endif // defined(GL_EXT_gpu_program_parameters)
#if defined(GL_EXT_gpu_shader4)
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT_ptr((program), (color), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocationEXT, (GLuint program, GLuint color, const GLchar *name))
#define glGetFragDataLocationEXT(program, name) glatter_glGetFragDataLocationEXT_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataLocationEXT, (GLuint program, const GLchar *name))
#define glGetUniformuivEXT(program, location, params) glatter_glGetUniformuivEXT_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformuivEXT, (GLuint program, GLint location, GLuint *params))
#define glUniform1uiEXT(location, v0) glatter_glUniform1uiEXT_ptr((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1uiEXT, (GLint location, GLuint v0))
#define glUniform1uivEXT(location, count, value) glatter_glUniform1uivEXT_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1uivEXT, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2uiEXT(location, v0, v1) glatter_glUniform2uiEXT_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2uiEXT, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uivEXT(location, count, value) glatter_glUniform2uivEXT_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2uivEXT, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3uiEXT(location, v0, v1, v2) glatter_glUniform3uiEXT_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3uiEXT, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uivEXT(location, count, value) glatter_glUniform3uivEXT_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3uivEXT, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4uiEXT(location, v0, v1, v2, v3) glatter_glUniform4uiEXT_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4uiEXT, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uivEXT(location, count, value) glatter_glUniform4uivEXT_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4uivEXT, (GLint location, GLsizei count, const GLuint *value))
#endif // defined(GL_EXT_gpu_shader4)
#if defined(GL_EXT_histogram)
#define glGetHistogramEXT(target, reset, format, type, values) glatter_glGetHistogramEXT_ptr((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramEXT, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#define glGetHistogramParameterfvEXT(target, pname, params) glatter_glGetHistogramParameterfvEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetHistogramParameterivEXT(target, pname, params) glatter_glGetHistogramParameterivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glGetMinmaxEXT(target, reset, format, type, values) glatter_glGetMinmaxEXT_ptr((target), (reset), (format), (type), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxEXT, (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values))
#define glGetMinmaxParameterfvEXT(target, pname, params) glatter_glGetMinmaxParameterfvEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetMinmaxParameterivEXT(target, pname, params) glatter_glGetMinmaxParameterivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMinmaxParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glHistogramEXT(target, width, internalformat, sink) glatter_glHistogramEXT_ptr((target), (width), (internalformat), (sink))
GLATTER_UBLOCK(void, APIENTRY, glHistogramEXT, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink))
#define glMinmaxEXT(target, internalformat, sink) glatter_glMinmaxEXT_ptr((target), (internalformat), (sink))
GLATTER_UBLOCK(void, APIENTRY, glMinmaxEXT, (GLenum target, GLenum internalformat, GLboolean sink))
#define glResetHistogramEXT(target) glatter_glResetHistogramEXT_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glResetHistogramEXT, (GLenum target))
#define glResetMinmaxEXT(target) glatter_glResetMinmaxEXT_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glResetMinmaxEXT, (GLenum target))
#endif // defined(GL_EXT_histogram)
#if defined(GL_EXT_index_func)
#define glIndexFuncEXT(func, ref) glatter_glIndexFuncEXT_ptr((func), (ref))
GLATTER_UBLOCK(void, APIENTRY, glIndexFuncEXT, (GLenum func, GLclampf ref))
#endif // defined(GL_EXT_index_func)
#if defined(GL_EXT_index_material)
#define glIndexMaterialEXT(face, mode) glatter_glIndexMaterialEXT_ptr((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glIndexMaterialEXT, (GLenum face, GLenum mode))
#endif // defined(GL_EXT_index_material)
#if defined(GL_EXT_light_texture)
#define glApplyTextureEXT(mode) glatter_glApplyTextureEXT_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glApplyTextureEXT, (GLenum mode))
#define glTextureLightEXT(pname) glatter_glTextureLightEXT_ptr((pname))
GLATTER_UBLOCK(void, APIENTRY, glTextureLightEXT, (GLenum pname))
#define glTextureMaterialEXT(face, mode) glatter_glTextureMaterialEXT_ptr((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glTextureMaterialEXT, (GLenum face, GLenum mode))
#endif // defined(GL_EXT_light_texture)
#if defined(GL_EXT_multi_draw_arrays)
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT_ptr((mode), (first), (count), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysEXT, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount))
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT_ptr((mode), (count), (type), (indices), (primcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsEXT, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount))
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multisample)
#define glSampleMaskEXT(value, invert) glatter_glSampleMaskEXT_ptr((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaskEXT, (GLclampf value, GLboolean invert))
#define glSamplePatternEXT(pattern) glatter_glSamplePatternEXT_ptr((pattern))
GLATTER_UBLOCK(void, APIENTRY, glSamplePatternEXT, (GLenum pattern))
#endif // defined(GL_EXT_multisample)
#if defined(GL_EXT_paletted_texture)
#define glColorTableEXT(target, internalFormat, width, format, type, table) glatter_glColorTableEXT_ptr((target), (internalFormat), (width), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glColorTableEXT, (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table))
#define glGetColorTableEXT(target, format, type, data) glatter_glGetColorTableEXT_ptr((target), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableEXT, (GLenum target, GLenum format, GLenum type, void *data))
#define glGetColorTableParameterfvEXT(target, pname, params) glatter_glGetColorTableParameterfvEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetColorTableParameterivEXT(target, pname, params) glatter_glGetColorTableParameterivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#endif // defined(GL_EXT_paletted_texture)
#if defined(GL_EXT_pixel_transform)
#define glGetPixelTransformParameterfvEXT(target, pname, params) glatter_glGetPixelTransformParameterfvEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTransformParameterfvEXT, (GLenum target, GLenum pname, GLfloat *params))
#define glGetPixelTransformParameterivEXT(target, pname, params) glatter_glGetPixelTransformParameterivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTransformParameterivEXT, (GLenum target, GLenum pname, GLint *params))
#define glPixelTransformParameterfEXT(target, pname, param) glatter_glPixelTransformParameterfEXT_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameterfEXT, (GLenum target, GLenum pname, GLfloat param))
#define glPixelTransformParameterfvEXT(target, pname, params) glatter_glPixelTransformParameterfvEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameterfvEXT, (GLenum target, GLenum pname, const GLfloat *params))
#define glPixelTransformParameteriEXT(target, pname, param) glatter_glPixelTransformParameteriEXT_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameteriEXT, (GLenum target, GLenum pname, GLint param))
#define glPixelTransformParameterivEXT(target, pname, params) glatter_glPixelTransformParameterivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransformParameterivEXT, (GLenum target, GLenum pname, const GLint *params))
#endif // defined(GL_EXT_pixel_transform)
#if defined(GL_EXT_point_parameters)
#define glPointParameterfEXT(pname, param) glatter_glPointParameterfEXT_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfEXT, (GLenum pname, GLfloat param))
#define glPointParameterfvEXT(pname, params) glatter_glPointParameterfvEXT_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfvEXT, (GLenum pname, const GLfloat *params))
#endif // defined(GL_EXT_point_parameters)
#if defined(GL_EXT_polygon_offset)
#define glPolygonOffsetEXT(factor, bias) glatter_glPolygonOffsetEXT_ptr((factor), (bias))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetEXT, (GLfloat factor, GLfloat bias))
#endif // defined(GL_EXT_polygon_offset)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_ptr((factor), (units), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetClampEXT, (GLfloat factor, GLfloat units, GLfloat clamp))
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_provoking_vertex)
#define glProvokingVertexEXT(mode) glatter_glProvokingVertexEXT_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glProvokingVertexEXT, (GLenum mode))
#endif // defined(GL_EXT_provoking_vertex)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_ptr((samples), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glRasterSamplesEXT, (GLuint samples, GLboolean fixedsamplelocations))
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_secondary_color)
#define glSecondaryColor3bEXT(red, green, blue) glatter_glSecondaryColor3bEXT_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3bEXT, (GLbyte red, GLbyte green, GLbyte blue))
#define glSecondaryColor3bvEXT(v) glatter_glSecondaryColor3bvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3bvEXT, (const GLbyte *v))
#define glSecondaryColor3dEXT(red, green, blue) glatter_glSecondaryColor3dEXT_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3dEXT, (GLdouble red, GLdouble green, GLdouble blue))
#define glSecondaryColor3dvEXT(v) glatter_glSecondaryColor3dvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3dvEXT, (const GLdouble *v))
#define glSecondaryColor3fEXT(red, green, blue) glatter_glSecondaryColor3fEXT_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3fEXT, (GLfloat red, GLfloat green, GLfloat blue))
#define glSecondaryColor3fvEXT(v) glatter_glSecondaryColor3fvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3fvEXT, (const GLfloat *v))
#define glSecondaryColor3iEXT(red, green, blue) glatter_glSecondaryColor3iEXT_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3iEXT, (GLint red, GLint green, GLint blue))
#define glSecondaryColor3ivEXT(v) glatter_glSecondaryColor3ivEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ivEXT, (const GLint *v))
#define glSecondaryColor3sEXT(red, green, blue) glatter_glSecondaryColor3sEXT_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3sEXT, (GLshort red, GLshort green, GLshort blue))
#define glSecondaryColor3svEXT(v) glatter_glSecondaryColor3svEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3svEXT, (const GLshort *v))
#define glSecondaryColor3ubEXT(red, green, blue) glatter_glSecondaryColor3ubEXT_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ubEXT, (GLubyte red, GLubyte green, GLubyte blue))
#define glSecondaryColor3ubvEXT(v) glatter_glSecondaryColor3ubvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ubvEXT, (const GLubyte *v))
#define glSecondaryColor3uiEXT(red, green, blue) glatter_glSecondaryColor3uiEXT_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3uiEXT, (GLuint red, GLuint green, GLuint blue))
#define glSecondaryColor3uivEXT(v) glatter_glSecondaryColor3uivEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3uivEXT, (const GLuint *v))
#define glSecondaryColor3usEXT(red, green, blue) glatter_glSecondaryColor3usEXT_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3usEXT, (GLushort red, GLushort green, GLushort blue))
#define glSecondaryColor3usvEXT(v) glatter_glSecondaryColor3usvEXT_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3usvEXT, (const GLushort *v))
#define glSecondaryColorPointerEXT(size, type, stride, pointer) glatter_glSecondaryColorPointerEXT_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorPointerEXT, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_secondary_color)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveProgramEXT(program) glatter_glActiveProgramEXT_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glActiveProgramEXT, (GLuint program))
#define glCreateShaderProgramEXT(type, string) glatter_glCreateShaderProgramEXT_ptr((type), (string))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramEXT, (GLenum type, const GLchar *string))
#define glUseShaderProgramEXT(type, program) glatter_glUseShaderProgramEXT_ptr((type), (program))
GLATTER_UBLOCK(void, APIENTRY, glUseShaderProgramEXT, (GLenum type, GLuint program))
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_image_load_store)
#define glBindImageTextureEXT(index, texture, level, layered, layer, access, format) glatter_glBindImageTextureEXT_ptr((index), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTextureEXT, (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format))
#define glMemoryBarrierEXT(barriers) glatter_glMemoryBarrierEXT_ptr((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrierEXT, (GLbitfield barriers))
#endif // defined(GL_EXT_shader_image_load_store)
#if defined(GL_EXT_stencil_clear_tag)
#define glStencilClearTagEXT(stencilTagBits, stencilClearTag) glatter_glStencilClearTagEXT_ptr((stencilTagBits), (stencilClearTag))
GLATTER_UBLOCK(void, APIENTRY, glStencilClearTagEXT, (GLsizei stencilTagBits, GLuint stencilClearTag))
#endif // defined(GL_EXT_stencil_clear_tag)
#if defined(GL_EXT_stencil_two_side)
#define glActiveStencilFaceEXT(face) glatter_glActiveStencilFaceEXT_ptr((face))
GLATTER_UBLOCK(void, APIENTRY, glActiveStencilFaceEXT, (GLenum face))
#endif // defined(GL_EXT_stencil_two_side)
#if defined(GL_EXT_subtexture)
#define glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1DEXT_ptr((target), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage1DEXT, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2DEXT_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage2DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_EXT_subtexture)
#if defined(GL_EXT_texture3D)
#define glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DEXT_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DEXT, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DEXT_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage3DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_EXT_texture3D)
#if defined(GL_EXT_texture_array)
#define glFramebufferTextureLayerEXT(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerEXT_ptr((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayerEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#endif // defined(GL_EXT_texture_array)
#if defined(GL_EXT_texture_buffer_object)
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT_ptr((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferEXT, (GLenum target, GLenum internalformat, GLuint buffer))
#endif // defined(GL_EXT_texture_buffer_object)
#if defined(GL_EXT_texture_integer)
#define glClearColorIiEXT(red, green, blue, alpha) glatter_glClearColorIiEXT_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColorIiEXT, (GLint red, GLint green, GLint blue, GLint alpha))
#define glClearColorIuiEXT(red, green, blue, alpha) glatter_glClearColorIuiEXT_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColorIuiEXT, (GLuint red, GLuint green, GLuint blue, GLuint alpha))
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIivEXT, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIuivEXT, (GLenum target, GLenum pname, GLuint *params))
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIivEXT, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIuivEXT, (GLenum target, GLenum pname, const GLuint *params))
#endif // defined(GL_EXT_texture_integer)
#if defined(GL_EXT_texture_object)
#define glAreTexturesResidentEXT(n, textures, residences) glatter_glAreTexturesResidentEXT_ptr((n), (textures), (residences))
GLATTER_UBLOCK(GLboolean, APIENTRY, glAreTexturesResidentEXT, (GLsizei n, const GLuint *textures, GLboolean *residences))
#define glBindTextureEXT(target, texture) glatter_glBindTextureEXT_ptr((target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTextureEXT, (GLenum target, GLuint texture))
#define glDeleteTexturesEXT(n, textures) glatter_glDeleteTexturesEXT_ptr((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTexturesEXT, (GLsizei n, const GLuint *textures))
#define glGenTexturesEXT(n, textures) glatter_glGenTexturesEXT_ptr((n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glGenTexturesEXT, (GLsizei n, GLuint *textures))
#define glIsTextureEXT(texture) glatter_glIsTextureEXT_ptr((texture))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureEXT, (GLuint texture))
#define glPrioritizeTexturesEXT(n, textures, priorities) glatter_glPrioritizeTexturesEXT_ptr((n), (textures), (priorities))
GLATTER_UBLOCK(void, APIENTRY, glPrioritizeTexturesEXT, (GLsizei n, const GLuint *textures, const GLclampf *priorities))
#endif // defined(GL_EXT_texture_object)
#if defined(GL_EXT_texture_perturb_normal)
#define glTextureNormalEXT(mode) glatter_glTextureNormalEXT_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glTextureNormalEXT, (GLenum mode))
#endif // defined(GL_EXT_texture_perturb_normal)
#if defined(GL_EXT_timer_query)
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjecti64vEXT, (GLuint id, GLenum pname, GLint64 *params))
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectui64vEXT, (GLuint id, GLenum pname, GLuint64 *params))
#endif // defined(GL_EXT_timer_query)
#if defined(GL_EXT_transform_feedback)
#define glBeginTransformFeedbackEXT(primitiveMode) glatter_glBeginTransformFeedbackEXT_ptr((primitiveMode))
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedbackEXT, (GLenum primitiveMode))
#define glBindBufferBaseEXT(target, index, buffer) glatter_glBindBufferBaseEXT_ptr((target), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBaseEXT, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferOffsetEXT(target, index, buffer, offset) glatter_glBindBufferOffsetEXT_ptr((target), (index), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferOffsetEXT, (GLenum target, GLuint index, GLuint buffer, GLintptr offset))
#define glBindBufferRangeEXT(target, index, buffer, offset, size) glatter_glBindBufferRangeEXT_ptr((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRangeEXT, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glEndTransformFeedbackEXT() glatter_glEndTransformFeedbackEXT_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedbackEXT, (void))
#define glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVaryingEXT_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVaryingEXT, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryingsEXT_ptr((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryingsEXT, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#endif // defined(GL_EXT_transform_feedback)
#if defined(GL_EXT_vertex_array)
#define glArrayElementEXT(i) glatter_glArrayElementEXT_ptr((i))
GLATTER_UBLOCK(void, APIENTRY, glArrayElementEXT, (GLint i))
#define glColorPointerEXT(size, type, stride, count, pointer) glatter_glColorPointerEXT_ptr((size), (type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glColorPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#define glDrawArraysEXT(mode, first, count) glatter_glDrawArraysEXT_ptr((mode), (first), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysEXT, (GLenum mode, GLint first, GLsizei count))
#define glEdgeFlagPointerEXT(stride, count, pointer) glatter_glEdgeFlagPointerEXT_ptr((stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagPointerEXT, (GLsizei stride, GLsizei count, const GLboolean *pointer))
#define glGetPointervEXT(pname, params) glatter_glGetPointervEXT_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPointervEXT, (GLenum pname, void **params))
#define glIndexPointerEXT(type, stride, count, pointer) glatter_glIndexPointerEXT_ptr((type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glIndexPointerEXT, (GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#define glNormalPointerEXT(type, stride, count, pointer) glatter_glNormalPointerEXT_ptr((type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glNormalPointerEXT, (GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#define glTexCoordPointerEXT(size, type, stride, count, pointer) glatter_glTexCoordPointerEXT_ptr((size), (type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#define glVertexPointerEXT(size, type, stride, count, pointer) glatter_glVertexPointerEXT_ptr((size), (type), (stride), (count), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer))
#endif // defined(GL_EXT_vertex_array)
#if defined(GL_EXT_vertex_attrib_64bit)
#define glGetVertexAttribLdvEXT(index, pname, params) glatter_glGetVertexAttribLdvEXT_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLdvEXT, (GLuint index, GLenum pname, GLdouble *params))
#define glVertexAttribL1dEXT(index, x) glatter_glVertexAttribL1dEXT_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dEXT, (GLuint index, GLdouble x))
#define glVertexAttribL1dvEXT(index, v) glatter_glVertexAttribL1dvEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dvEXT, (GLuint index, const GLdouble *v))
#define glVertexAttribL2dEXT(index, x, y) glatter_glVertexAttribL2dEXT_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dEXT, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttribL2dvEXT(index, v) glatter_glVertexAttribL2dvEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dvEXT, (GLuint index, const GLdouble *v))
#define glVertexAttribL3dEXT(index, x, y, z) glatter_glVertexAttribL3dEXT_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dEXT, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttribL3dvEXT(index, v) glatter_glVertexAttribL3dvEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dvEXT, (GLuint index, const GLdouble *v))
#define glVertexAttribL4dEXT(index, x, y, z, w) glatter_glVertexAttribL4dEXT_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dEXT, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttribL4dvEXT(index, v) glatter_glVertexAttribL4dvEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dvEXT, (GLuint index, const GLdouble *v))
#define glVertexAttribLPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribLPointerEXT_ptr((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLPointerEXT, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_EXT_vertex_attrib_64bit)
#if defined(GL_EXT_vertex_shader)
#define glBeginVertexShaderEXT() glatter_glBeginVertexShaderEXT_ptr()
GLATTER_UBLOCK(void, APIENTRY, glBeginVertexShaderEXT, (void))
#define glBindLightParameterEXT(light, value) glatter_glBindLightParameterEXT_ptr((light), (value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindLightParameterEXT, (GLenum light, GLenum value))
#define glBindMaterialParameterEXT(face, value) glatter_glBindMaterialParameterEXT_ptr((face), (value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindMaterialParameterEXT, (GLenum face, GLenum value))
#define glBindParameterEXT(value) glatter_glBindParameterEXT_ptr((value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindParameterEXT, (GLenum value))
#define glBindTexGenParameterEXT(unit, coord, value) glatter_glBindTexGenParameterEXT_ptr((unit), (coord), (value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindTexGenParameterEXT, (GLenum unit, GLenum coord, GLenum value))
#define glBindTextureUnitParameterEXT(unit, value) glatter_glBindTextureUnitParameterEXT_ptr((unit), (value))
GLATTER_UBLOCK(GLuint, APIENTRY, glBindTextureUnitParameterEXT, (GLenum unit, GLenum value))
#define glBindVertexShaderEXT(id) glatter_glBindVertexShaderEXT_ptr((id))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexShaderEXT, (GLuint id))
#define glDeleteVertexShaderEXT(id) glatter_glDeleteVertexShaderEXT_ptr((id))
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexShaderEXT, (GLuint id))
#define glDisableVariantClientStateEXT(id) glatter_glDisableVariantClientStateEXT_ptr((id))
GLATTER_UBLOCK(void, APIENTRY, glDisableVariantClientStateEXT, (GLuint id))
#define glEnableVariantClientStateEXT(id) glatter_glEnableVariantClientStateEXT_ptr((id))
GLATTER_UBLOCK(void, APIENTRY, glEnableVariantClientStateEXT, (GLuint id))
#define glEndVertexShaderEXT() glatter_glEndVertexShaderEXT_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndVertexShaderEXT, (void))
#define glExtractComponentEXT(res, src, num) glatter_glExtractComponentEXT_ptr((res), (src), (num))
GLATTER_UBLOCK(void, APIENTRY, glExtractComponentEXT, (GLuint res, GLuint src, GLuint num))
#define glGenSymbolsEXT(datatype, storagetype, range, components) glatter_glGenSymbolsEXT_ptr((datatype), (storagetype), (range), (components))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenSymbolsEXT, (GLenum datatype, GLenum storagetype, GLenum range, GLuint components))
#define glGenVertexShadersEXT(range) glatter_glGenVertexShadersEXT_ptr((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenVertexShadersEXT, (GLuint range))
#define glGetInvariantBooleanvEXT(id, value, data) glatter_glGetInvariantBooleanvEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInvariantBooleanvEXT, (GLuint id, GLenum value, GLboolean *data))
#define glGetInvariantFloatvEXT(id, value, data) glatter_glGetInvariantFloatvEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInvariantFloatvEXT, (GLuint id, GLenum value, GLfloat *data))
#define glGetInvariantIntegervEXT(id, value, data) glatter_glGetInvariantIntegervEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInvariantIntegervEXT, (GLuint id, GLenum value, GLint *data))
#define glGetLocalConstantBooleanvEXT(id, value, data) glatter_glGetLocalConstantBooleanvEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetLocalConstantBooleanvEXT, (GLuint id, GLenum value, GLboolean *data))
#define glGetLocalConstantFloatvEXT(id, value, data) glatter_glGetLocalConstantFloatvEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetLocalConstantFloatvEXT, (GLuint id, GLenum value, GLfloat *data))
#define glGetLocalConstantIntegervEXT(id, value, data) glatter_glGetLocalConstantIntegervEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetLocalConstantIntegervEXT, (GLuint id, GLenum value, GLint *data))
#define glGetVariantBooleanvEXT(id, value, data) glatter_glGetVariantBooleanvEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantBooleanvEXT, (GLuint id, GLenum value, GLboolean *data))
#define glGetVariantFloatvEXT(id, value, data) glatter_glGetVariantFloatvEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantFloatvEXT, (GLuint id, GLenum value, GLfloat *data))
#define glGetVariantIntegervEXT(id, value, data) glatter_glGetVariantIntegervEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantIntegervEXT, (GLuint id, GLenum value, GLint *data))
#define glGetVariantPointervEXT(id, value, data) glatter_glGetVariantPointervEXT_ptr((id), (value), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetVariantPointervEXT, (GLuint id, GLenum value, void **data))
#define glInsertComponentEXT(res, src, num) glatter_glInsertComponentEXT_ptr((res), (src), (num))
GLATTER_UBLOCK(void, APIENTRY, glInsertComponentEXT, (GLuint res, GLuint src, GLuint num))
#define glIsVariantEnabledEXT(id, cap) glatter_glIsVariantEnabledEXT_ptr((id), (cap))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVariantEnabledEXT, (GLuint id, GLenum cap))
#define glSetInvariantEXT(id, type, addr) glatter_glSetInvariantEXT_ptr((id), (type), (addr))
GLATTER_UBLOCK(void, APIENTRY, glSetInvariantEXT, (GLuint id, GLenum type, const void *addr))
#define glSetLocalConstantEXT(id, type, addr) glatter_glSetLocalConstantEXT_ptr((id), (type), (addr))
GLATTER_UBLOCK(void, APIENTRY, glSetLocalConstantEXT, (GLuint id, GLenum type, const void *addr))
#define glShaderOp1EXT(op, res, arg1) glatter_glShaderOp1EXT_ptr((op), (res), (arg1))
GLATTER_UBLOCK(void, APIENTRY, glShaderOp1EXT, (GLenum op, GLuint res, GLuint arg1))
#define glShaderOp2EXT(op, res, arg1, arg2) glatter_glShaderOp2EXT_ptr((op), (res), (arg1), (arg2))
GLATTER_UBLOCK(void, APIENTRY, glShaderOp2EXT, (GLenum op, GLuint res, GLuint arg1, GLuint arg2))
#define glShaderOp3EXT(op, res, arg1, arg2, arg3) glatter_glShaderOp3EXT_ptr((op), (res), (arg1), (arg2), (arg3))
GLATTER_UBLOCK(void, APIENTRY, glShaderOp3EXT, (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3))
#define glSwizzleEXT(res, in, outX, outY, outZ, outW) glatter_glSwizzleEXT_ptr((res), (in), (outX), (outY), (outZ), (outW))
GLATTER_UBLOCK(void, APIENTRY, glSwizzleEXT, (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW))
#define glVariantPointerEXT(id, type, stride, addr) glatter_glVariantPointerEXT_ptr((id), (type), (stride), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantPointerEXT, (GLuint id, GLenum type, GLuint stride, const void *addr))
#define glVariantbvEXT(id, addr) glatter_glVariantbvEXT_ptr((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantbvEXT, (GLuint id, const GLbyte *addr))
#define glVariantdvEXT(id, addr) glatter_glVariantdvEXT_ptr((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantdvEXT, (GLuint id, const GLdouble *addr))
#define glVariantfvEXT(id, addr) glatter_glVariantfvEXT_ptr((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantfvEXT, (GLuint id, const GLfloat *addr))
#define glVariantivEXT(id, addr) glatter_glVariantivEXT_ptr((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantivEXT, (GLuint id, const GLint *addr))
#define glVariantsvEXT(id, addr) glatter_glVariantsvEXT_ptr((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantsvEXT, (GLuint id, const GLshort *addr))
#define glVariantubvEXT(id, addr) glatter_glVariantubvEXT_ptr((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantubvEXT, (GLuint id, const GLubyte *addr))
#define glVariantuivEXT(id, addr) glatter_glVariantuivEXT_ptr((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantuivEXT, (GLuint id, const GLuint *addr))
#define glVariantusvEXT(id, addr) glatter_glVariantusvEXT_ptr((id), (addr))
GLATTER_UBLOCK(void, APIENTRY, glVariantusvEXT, (GLuint id, const GLushort *addr))
#define glWriteMaskEXT(res, in, outX, outY, outZ, outW) glatter_glWriteMaskEXT_ptr((res), (in), (outX), (outY), (outZ), (outW))
GLATTER_UBLOCK(void, APIENTRY, glWriteMaskEXT, (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW))
#endif // defined(GL_EXT_vertex_shader)
#if defined(GL_EXT_vertex_weighting)
#define glVertexWeightPointerEXT(size, type, stride, pointer) glatter_glVertexWeightPointerEXT_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeightPointerEXT, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glVertexWeightfEXT(weight) glatter_glVertexWeightfEXT_ptr((weight))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeightfEXT, (GLfloat weight))
#define glVertexWeightfvEXT(weight) glatter_glVertexWeightfvEXT_ptr((weight))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeightfvEXT, (const GLfloat *weight))
#endif // defined(GL_EXT_vertex_weighting)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_ptr((mode), (count), (box))
GLATTER_UBLOCK(void, APIENTRY, glWindowRectanglesEXT, (GLenum mode, GLsizei count, const GLint *box))
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_EXT_x11_sync_object)
#define glImportSyncEXT(external_sync_type, external_sync, flags) glatter_glImportSyncEXT_ptr((external_sync_type), (external_sync), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glImportSyncEXT, (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags))
#endif // defined(GL_EXT_x11_sync_object)
#if defined(GL_GREMEDY_frame_terminator)
#define glFrameTerminatorGREMEDY() glatter_glFrameTerminatorGREMEDY_ptr()
GLATTER_UBLOCK(void, APIENTRY, glFrameTerminatorGREMEDY, (void))
#endif // defined(GL_GREMEDY_frame_terminator)
#if defined(GL_GREMEDY_string_marker)
#define glStringMarkerGREMEDY(len, string) glatter_glStringMarkerGREMEDY_ptr((len), (string))
GLATTER_UBLOCK(void, APIENTRY, glStringMarkerGREMEDY, (GLsizei len, const void *string))
#endif // defined(GL_GREMEDY_string_marker)
#if defined(GL_HP_image_transform)
#define glGetImageTransformParameterfvHP(target, pname, params) glatter_glGetImageTransformParameterfvHP_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetImageTransformParameterfvHP, (GLenum target, GLenum pname, GLfloat *params))
#define glGetImageTransformParameterivHP(target, pname, params) glatter_glGetImageTransformParameterivHP_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetImageTransformParameterivHP, (GLenum target, GLenum pname, GLint *params))
#define glImageTransformParameterfHP(target, pname, param) glatter_glImageTransformParameterfHP_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameterfHP, (GLenum target, GLenum pname, GLfloat param))
#define glImageTransformParameterfvHP(target, pname, params) glatter_glImageTransformParameterfvHP_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameterfvHP, (GLenum target, GLenum pname, const GLfloat *params))
#define glImageTransformParameteriHP(target, pname, param) glatter_glImageTransformParameteriHP_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameteriHP, (GLenum target, GLenum pname, GLint param))
#define glImageTransformParameterivHP(target, pname, params) glatter_glImageTransformParameterivHP_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glImageTransformParameterivHP, (GLenum target, GLenum pname, const GLint *params))
#endif // defined(GL_HP_image_transform)
#if defined(GL_IBM_multimode_draw_arrays)
#define glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride) glatter_glMultiModeDrawArraysIBM_ptr((mode), (first), (count), (primcount), (modestride))
GLATTER_UBLOCK(void, APIENTRY, glMultiModeDrawArraysIBM, (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride))
#define glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride) glatter_glMultiModeDrawElementsIBM_ptr((mode), (count), (type), (indices), (primcount), (modestride))
GLATTER_UBLOCK(void, APIENTRY, glMultiModeDrawElementsIBM, (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride))
#endif // defined(GL_IBM_multimode_draw_arrays)
#if defined(GL_IBM_static_data)
#define glFlushStaticDataIBM(target) glatter_glFlushStaticDataIBM_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glFlushStaticDataIBM, (GLenum target))
#endif // defined(GL_IBM_static_data)
#if defined(GL_IBM_vertex_array_lists)
#define glColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glColorPointerListIBM_ptr((size), (type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glColorPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glEdgeFlagPointerListIBM(stride, pointer, ptrstride) glatter_glEdgeFlagPointerListIBM_ptr((stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagPointerListIBM, (GLint stride, const GLboolean **pointer, GLint ptrstride))
#define glFogCoordPointerListIBM(type, stride, pointer, ptrstride) glatter_glFogCoordPointerListIBM_ptr((type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordPointerListIBM, (GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glIndexPointerListIBM(type, stride, pointer, ptrstride) glatter_glIndexPointerListIBM_ptr((type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glIndexPointerListIBM, (GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glNormalPointerListIBM(type, stride, pointer, ptrstride) glatter_glNormalPointerListIBM_ptr((type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glNormalPointerListIBM, (GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glSecondaryColorPointerListIBM_ptr((size), (type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glTexCoordPointerListIBM_ptr((size), (type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#define glVertexPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glVertexPointerListIBM_ptr((size), (type), (stride), (pointer), (ptrstride))
GLATTER_UBLOCK(void, APIENTRY, glVertexPointerListIBM, (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride))
#endif // defined(GL_IBM_vertex_array_lists)
#if defined(GL_INGR_blend_func_separate)
#define glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateINGR_ptr((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparateINGR, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#endif // defined(GL_INGR_blend_func_separate)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_ptr()
GLATTER_UBLOCK(void, APIENTRY, glApplyFramebufferAttachmentCMAAINTEL, (void))
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_map_texture)
#define glMapTexture2DINTEL(texture, level, access, stride, layout) glatter_glMapTexture2DINTEL_ptr((texture), (level), (access), (stride), (layout))
GLATTER_UBLOCK(void *, APIENTRY, glMapTexture2DINTEL, (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout))
#define glSyncTextureINTEL(texture) glatter_glSyncTextureINTEL_ptr((texture))
GLATTER_UBLOCK(void, APIENTRY, glSyncTextureINTEL, (GLuint texture))
#define glUnmapTexture2DINTEL(texture, level) glatter_glUnmapTexture2DINTEL_ptr((texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glUnmapTexture2DINTEL, (GLuint texture, GLint level))
#endif // defined(GL_INTEL_map_texture)
#if defined(GL_INTEL_parallel_arrays)
#define glColorPointervINTEL(size, type, pointer) glatter_glColorPointervINTEL_ptr((size), (type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glColorPointervINTEL, (GLint size, GLenum type, const void **pointer))
#define glNormalPointervINTEL(type, pointer) glatter_glNormalPointervINTEL_ptr((type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glNormalPointervINTEL, (GLenum type, const void **pointer))
#define glTexCoordPointervINTEL(size, type, pointer) glatter_glTexCoordPointervINTEL_ptr((size), (type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordPointervINTEL, (GLint size, GLenum type, const void **pointer))
#define glVertexPointervINTEL(size, type, pointer) glatter_glVertexPointervINTEL_ptr((size), (type), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexPointervINTEL, (GLint size, GLenum type, const void **pointer))
#endif // defined(GL_INTEL_parallel_arrays)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_ptr((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glBeginPerfQueryINTEL, (GLuint queryHandle))
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_ptr((queryId), (queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glCreatePerfQueryINTEL, (GLuint queryId, GLuint *queryHandle))
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_ptr((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glDeletePerfQueryINTEL, (GLuint queryHandle))
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_ptr((queryHandle))
GLATTER_UBLOCK(void, APIENTRY, glEndPerfQueryINTEL, (GLuint queryHandle))
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_ptr((queryId))
GLATTER_UBLOCK(void, APIENTRY, glGetFirstPerfQueryIdINTEL, (GLuint *queryId))
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_ptr((queryId), (nextQueryId))
GLATTER_UBLOCK(void, APIENTRY, glGetNextPerfQueryIdINTEL, (GLuint queryId, GLuint *nextQueryId))
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_ptr((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfCounterInfoINTEL, (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue))
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_ptr((queryHandle), (flags), (dataSize), (data), (bytesWritten))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryDataINTEL, (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten))
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_ptr((queryName), (queryId))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryIdByNameINTEL, (GLchar *queryName, GLuint *queryId))
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_ptr((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask))
GLATTER_UBLOCK(void, APIENTRY, glGetPerfQueryInfoINTEL, (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask))
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_ptr()
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierKHR, (void))
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_MESA_resize_buffers)
#define glResizeBuffersMESA() glatter_glResizeBuffersMESA_ptr()
GLATTER_UBLOCK(void, APIENTRY, glResizeBuffersMESA, (void))
#endif // defined(GL_MESA_resize_buffers)
#if defined(GL_MESA_window_pos)
#define glWindowPos2dMESA(x, y) glatter_glWindowPos2dMESA_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dMESA, (GLdouble x, GLdouble y))
#define glWindowPos2dvMESA(v) glatter_glWindowPos2dvMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dvMESA, (const GLdouble *v))
#define glWindowPos2fMESA(x, y) glatter_glWindowPos2fMESA_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fMESA, (GLfloat x, GLfloat y))
#define glWindowPos2fvMESA(v) glatter_glWindowPos2fvMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fvMESA, (const GLfloat *v))
#define glWindowPos2iMESA(x, y) glatter_glWindowPos2iMESA_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2iMESA, (GLint x, GLint y))
#define glWindowPos2ivMESA(v) glatter_glWindowPos2ivMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2ivMESA, (const GLint *v))
#define glWindowPos2sMESA(x, y) glatter_glWindowPos2sMESA_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2sMESA, (GLshort x, GLshort y))
#define glWindowPos2svMESA(v) glatter_glWindowPos2svMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2svMESA, (const GLshort *v))
#define glWindowPos3dMESA(x, y, z) glatter_glWindowPos3dMESA_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dMESA, (GLdouble x, GLdouble y, GLdouble z))
#define glWindowPos3dvMESA(v) glatter_glWindowPos3dvMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dvMESA, (const GLdouble *v))
#define glWindowPos3fMESA(x, y, z) glatter_glWindowPos3fMESA_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fMESA, (GLfloat x, GLfloat y, GLfloat z))
#define glWindowPos3fvMESA(v) glatter_glWindowPos3fvMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fvMESA, (const GLfloat *v))
#define glWindowPos3iMESA(x, y, z) glatter_glWindowPos3iMESA_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3iMESA, (GLint x, GLint y, GLint z))
#define glWindowPos3ivMESA(v) glatter_glWindowPos3ivMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3ivMESA, (const GLint *v))
#define glWindowPos3sMESA(x, y, z) glatter_glWindowPos3sMESA_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3sMESA, (GLshort x, GLshort y, GLshort z))
#define glWindowPos3svMESA(v) glatter_glWindowPos3svMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3svMESA, (const GLshort *v))
#define glWindowPos4dMESA(x, y, z, w) glatter_glWindowPos4dMESA_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4dMESA, (GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glWindowPos4dvMESA(v) glatter_glWindowPos4dvMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4dvMESA, (const GLdouble *v))
#define glWindowPos4fMESA(x, y, z, w) glatter_glWindowPos4fMESA_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4fMESA, (GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glWindowPos4fvMESA(v) glatter_glWindowPos4fvMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4fvMESA, (const GLfloat *v))
#define glWindowPos4iMESA(x, y, z, w) glatter_glWindowPos4iMESA_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4iMESA, (GLint x, GLint y, GLint z, GLint w))
#define glWindowPos4ivMESA(v) glatter_glWindowPos4ivMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4ivMESA, (const GLint *v))
#define glWindowPos4sMESA(x, y, z, w) glatter_glWindowPos4sMESA_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4sMESA, (GLshort x, GLshort y, GLshort z, GLshort w))
#define glWindowPos4svMESA(v) glatter_glWindowPos4svMESA_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos4svMESA, (const GLshort *v))
#endif // defined(GL_MESA_window_pos)
#if defined(GL_NVX_conditional_render)
#define glBeginConditionalRenderNVX(id) glatter_glBeginConditionalRenderNVX_ptr((id))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRenderNVX, (GLuint id))
#define glEndConditionalRenderNVX() glatter_glEndConditionalRenderNVX_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRenderNVX, (void))
#endif // defined(GL_NVX_conditional_render)
#if defined(GL_NV_bindless_multi_draw_indirect)
#define glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessNV_ptr((mode), (indirect), (drawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectBindlessNV, (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount))
#define glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessNV_ptr((mode), (type), (indirect), (drawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectBindlessNV, (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount))
#endif // defined(GL_NV_bindless_multi_draw_indirect)
#if defined(GL_NV_bindless_multi_draw_indirect_count)
#define glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessCountNV_ptr((mode), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirectBindlessCountNV, (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount))
#define glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessCountNV_ptr((mode), (type), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirectBindlessCountNV, (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount))
#endif // defined(GL_NV_bindless_multi_draw_indirect_count)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_ptr((texture), (level), (layered), (layer), (format))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetImageHandleNV, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format))
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_ptr((texture))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureHandleNV, (GLuint texture))
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_ptr((texture), (sampler))
GLATTER_UBLOCK(GLuint64, APIENTRY, glGetTextureSamplerHandleNV, (GLuint texture, GLuint sampler))
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_ptr((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsImageHandleResidentNV, (GLuint64 handle))
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_ptr((handle))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTextureHandleResidentNV, (GLuint64 handle))
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleNonResidentNV, (GLuint64 handle))
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_ptr((handle), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeImageHandleResidentNV, (GLuint64 handle, GLenum access))
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleNonResidentNV, (GLuint64 handle))
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_ptr((handle))
GLATTER_UBLOCK(void, APIENTRY, glMakeTextureHandleResidentNV, (GLuint64 handle))
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_ptr((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64NV, (GLuint program, GLint location, GLuint64 value))
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_ptr((program), (location), (count), (values))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformHandleui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64 *values))
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_ptr((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64NV, (GLint location, GLuint64 value))
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformHandleui64vNV, (GLint location, GLsizei count, const GLuint64 *value))
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glBlendBarrierNV, (void))
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_ptr((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glBlendParameteriNV, (GLenum pname, GLint value))
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_clip_space_w_scaling)
#define glViewportPositionWScaleNV(index, xcoeff, ycoeff) glatter_glViewportPositionWScaleNV_ptr((index), (xcoeff), (ycoeff))
GLATTER_UBLOCK(void, APIENTRY, glViewportPositionWScaleNV, (GLuint index, GLfloat xcoeff, GLfloat ycoeff))
#endif // defined(GL_NV_clip_space_w_scaling)
#if defined(GL_NV_command_list)
#define glCallCommandListNV(list) glatter_glCallCommandListNV_ptr((list))
GLATTER_UBLOCK(void, APIENTRY, glCallCommandListNV, (GLuint list))
#define glCommandListSegmentsNV(list, segments) glatter_glCommandListSegmentsNV_ptr((list), (segments))
GLATTER_UBLOCK(void, APIENTRY, glCommandListSegmentsNV, (GLuint list, GLuint segments))
#define glCompileCommandListNV(list) glatter_glCompileCommandListNV_ptr((list))
GLATTER_UBLOCK(void, APIENTRY, glCompileCommandListNV, (GLuint list))
#define glCreateCommandListsNV(n, lists) glatter_glCreateCommandListsNV_ptr((n), (lists))
GLATTER_UBLOCK(void, APIENTRY, glCreateCommandListsNV, (GLsizei n, GLuint *lists))
#define glCreateStatesNV(n, states) glatter_glCreateStatesNV_ptr((n), (states))
GLATTER_UBLOCK(void, APIENTRY, glCreateStatesNV, (GLsizei n, GLuint *states))
#define glDeleteCommandListsNV(n, lists) glatter_glDeleteCommandListsNV_ptr((n), (lists))
GLATTER_UBLOCK(void, APIENTRY, glDeleteCommandListsNV, (GLsizei n, const GLuint *lists))
#define glDeleteStatesNV(n, states) glatter_glDeleteStatesNV_ptr((n), (states))
GLATTER_UBLOCK(void, APIENTRY, glDeleteStatesNV, (GLsizei n, const GLuint *states))
#define glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count) glatter_glDrawCommandsAddressNV_ptr((primitiveMode), (indirects), (sizes), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsAddressNV, (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count))
#define glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count) glatter_glDrawCommandsNV_ptr((primitiveMode), (buffer), (indirects), (sizes), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsNV, (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count))
#define glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesAddressNV_ptr((indirects), (sizes), (states), (fbos), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsStatesAddressNV, (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#define glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesNV_ptr((buffer), (indirects), (sizes), (states), (fbos), (count))
GLATTER_UBLOCK(void, APIENTRY, glDrawCommandsStatesNV, (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#define glGetCommandHeaderNV(tokenID, size) glatter_glGetCommandHeaderNV_ptr((tokenID), (size))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetCommandHeaderNV, (GLenum tokenID, GLuint size))
#define glGetStageIndexNV(shadertype) glatter_glGetStageIndexNV_ptr((shadertype))
GLATTER_UBLOCK(GLushort, APIENTRY, glGetStageIndexNV, (GLenum shadertype))
#define glIsCommandListNV(list) glatter_glIsCommandListNV_ptr((list))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsCommandListNV, (GLuint list))
#define glIsStateNV(state) glatter_glIsStateNV_ptr((state))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsStateNV, (GLuint state))
#define glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count) glatter_glListDrawCommandsStatesClientNV_ptr((list), (segment), (indirects), (sizes), (states), (fbos), (count))
GLATTER_UBLOCK(void, APIENTRY, glListDrawCommandsStatesClientNV, (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count))
#define glStateCaptureNV(state, mode) glatter_glStateCaptureNV_ptr((state), (mode))
GLATTER_UBLOCK(void, APIENTRY, glStateCaptureNV, (GLuint state, GLenum mode))
#endif // defined(GL_NV_command_list)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_ptr((id), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRenderNV, (GLuint id, GLenum mode))
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRenderNV, (void))
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_ptr((xbits), (ybits))
GLATTER_UBLOCK(void, APIENTRY, glSubpixelPrecisionBiasNV, (GLuint xbits, GLuint ybits))
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_dilate)
#define glConservativeRasterParameterfNV(pname, value) glatter_glConservativeRasterParameterfNV_ptr((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glConservativeRasterParameterfNV, (GLenum pname, GLfloat value))
#endif // defined(GL_NV_conservative_raster_dilate)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glConservativeRasterParameteriNV, (GLenum pname, GLint param))
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_image)
#define glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glCopyImageSubDataNV_ptr((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glCopyImageSubDataNV, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_NV_copy_image)
#if defined(GL_NV_depth_buffer_float)
#define glClearDepthdNV(depth) glatter_glClearDepthdNV_ptr((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthdNV, (GLdouble depth))
#define glDepthBoundsdNV(zmin, zmax) glatter_glDepthBoundsdNV_ptr((zmin), (zmax))
GLATTER_UBLOCK(void, APIENTRY, glDepthBoundsdNV, (GLdouble zmin, GLdouble zmax))
#define glDepthRangedNV(zNear, zFar) glatter_glDepthRangedNV_ptr((zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangedNV, (GLdouble zNear, GLdouble zFar))
#endif // defined(GL_NV_depth_buffer_float)
#if defined(GL_NV_draw_texture)
#define glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawTextureNV_ptr((texture), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1))
GLATTER_UBLOCK(void, APIENTRY, glDrawTextureNV, (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1))
#endif // defined(GL_NV_draw_texture)
#if defined(GL_NV_evaluators)
#define glEvalMapsNV(target, mode) glatter_glEvalMapsNV_ptr((target), (mode))
GLATTER_UBLOCK(void, APIENTRY, glEvalMapsNV, (GLenum target, GLenum mode))
#define glGetMapAttribParameterfvNV(target, index, pname, params) glatter_glGetMapAttribParameterfvNV_ptr((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMapAttribParameterfvNV, (GLenum target, GLuint index, GLenum pname, GLfloat *params))
#define glGetMapAttribParameterivNV(target, index, pname, params) glatter_glGetMapAttribParameterivNV_ptr((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMapAttribParameterivNV, (GLenum target, GLuint index, GLenum pname, GLint *params))
#define glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points) glatter_glGetMapControlPointsNV_ptr((target), (index), (type), (ustride), (vstride), (packed), (points))
GLATTER_UBLOCK(void, APIENTRY, glGetMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points))
#define glGetMapParameterfvNV(target, pname, params) glatter_glGetMapParameterfvNV_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMapParameterfvNV, (GLenum target, GLenum pname, GLfloat *params))
#define glGetMapParameterivNV(target, pname, params) glatter_glGetMapParameterivNV_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetMapParameterivNV, (GLenum target, GLenum pname, GLint *params))
#define glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points) glatter_glMapControlPointsNV_ptr((target), (index), (type), (ustride), (vstride), (uorder), (vorder), (packed), (points))
GLATTER_UBLOCK(void, APIENTRY, glMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points))
#define glMapParameterfvNV(target, pname, params) glatter_glMapParameterfvNV_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMapParameterfvNV, (GLenum target, GLenum pname, const GLfloat *params))
#define glMapParameterivNV(target, pname, params) glatter_glMapParameterivNV_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glMapParameterivNV, (GLenum target, GLenum pname, const GLint *params))
#endif // defined(GL_NV_evaluators)
#if defined(GL_NV_explicit_multisample)
#define glGetMultisamplefvNV(pname, index, val) glatter_glGetMultisamplefvNV_ptr((pname), (index), (val))
GLATTER_UBLOCK(void, APIENTRY, glGetMultisamplefvNV, (GLenum pname, GLuint index, GLfloat *val))
#define glSampleMaskIndexedNV(index, mask) glatter_glSampleMaskIndexedNV_ptr((index), (mask))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaskIndexedNV, (GLuint index, GLbitfield mask))
#define glTexRenderbufferNV(target, renderbuffer) glatter_glTexRenderbufferNV_ptr((target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glTexRenderbufferNV, (GLenum target, GLuint renderbuffer))
#endif // defined(GL_NV_explicit_multisample)
#if defined(GL_NV_fence)
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV_ptr((n), (fences))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFencesNV, (GLsizei n, const GLuint *fences))
#define glFinishFenceNV(fence) glatter_glFinishFenceNV_ptr((fence))
GLATTER_UBLOCK(void, APIENTRY, glFinishFenceNV, (GLuint fence))
#define glGenFencesNV(n, fences) glatter_glGenFencesNV_ptr((n), (fences))
GLATTER_UBLOCK(void, APIENTRY, glGenFencesNV, (GLsizei n, GLuint *fences))
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV_ptr((fence), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFenceivNV, (GLuint fence, GLenum pname, GLint *params))
#define glIsFenceNV(fence) glatter_glIsFenceNV_ptr((fence))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFenceNV, (GLuint fence))
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV_ptr((fence), (condition))
GLATTER_UBLOCK(void, APIENTRY, glSetFenceNV, (GLuint fence, GLenum condition))
#define glTestFenceNV(fence) glatter_glTestFenceNV_ptr((fence))
GLATTER_UBLOCK(GLboolean, APIENTRY, glTestFenceNV, (GLuint fence))
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_ptr((color))
GLATTER_UBLOCK(void, APIENTRY, glFragmentCoverageColorNV, (GLuint color))
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_fragment_program)
#define glGetProgramNamedParameterdvNV(id, len, name, params) glatter_glGetProgramNamedParameterdvNV_ptr((id), (len), (name), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramNamedParameterdvNV, (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params))
#define glGetProgramNamedParameterfvNV(id, len, name, params) glatter_glGetProgramNamedParameterfvNV_ptr((id), (len), (name), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramNamedParameterfvNV, (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params))
#define glProgramNamedParameter4dNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4dNV_ptr((id), (len), (name), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4dNV, (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramNamedParameter4dvNV(id, len, name, v) glatter_glProgramNamedParameter4dvNV_ptr((id), (len), (name), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4dvNV, (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v))
#define glProgramNamedParameter4fNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4fNV_ptr((id), (len), (name), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4fNV, (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glProgramNamedParameter4fvNV(id, len, name, v) glatter_glProgramNamedParameter4fvNV_ptr((id), (len), (name), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramNamedParameter4fvNV, (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v))
#endif // defined(GL_NV_fragment_program)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_ptr((components))
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationNV, (GLenum components))
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_ptr((n), (v))
GLATTER_UBLOCK(void, APIENTRY, glCoverageModulationTableNV, (GLsizei n, const GLfloat *v))
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_ptr((bufsize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetCoverageModulationTableNV, (GLsizei bufsize, GLfloat *v))
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample_coverage)
#define glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleCoverageNV_ptr((target), (coverageSamples), (colorSamples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height))
#endif // defined(GL_NV_framebuffer_multisample_coverage)
#if defined(GL_NV_geometry_program4)
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT_ptr((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glFramebufferTextureFaceEXT(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceEXT_ptr((target), (attachment), (texture), (level), (face))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureFaceEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face))
#define glProgramVertexLimitNV(target, limit) glatter_glProgramVertexLimitNV_ptr((target), (limit))
GLATTER_UBLOCK(void, APIENTRY, glProgramVertexLimitNV, (GLenum target, GLint limit))
#endif // defined(GL_NV_geometry_program4)
#if defined(GL_NV_gpu_program4)
#define glGetProgramEnvParameterIivNV(target, index, params) glatter_glGetProgramEnvParameterIivNV_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterIivNV, (GLenum target, GLuint index, GLint *params))
#define glGetProgramEnvParameterIuivNV(target, index, params) glatter_glGetProgramEnvParameterIuivNV_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramEnvParameterIuivNV, (GLenum target, GLuint index, GLuint *params))
#define glGetProgramLocalParameterIivNV(target, index, params) glatter_glGetProgramLocalParameterIivNV_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterIivNV, (GLenum target, GLuint index, GLint *params))
#define glGetProgramLocalParameterIuivNV(target, index, params) glatter_glGetProgramLocalParameterIuivNV_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramLocalParameterIuivNV, (GLenum target, GLuint index, GLuint *params))
#define glProgramEnvParameterI4iNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4iNV_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4iNV, (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glProgramEnvParameterI4ivNV(target, index, params) glatter_glProgramEnvParameterI4ivNV_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4ivNV, (GLenum target, GLuint index, const GLint *params))
#define glProgramEnvParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4uiNV_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4uiNV, (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glProgramEnvParameterI4uivNV(target, index, params) glatter_glProgramEnvParameterI4uivNV_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParameterI4uivNV, (GLenum target, GLuint index, const GLuint *params))
#define glProgramEnvParametersI4ivNV(target, index, count, params) glatter_glProgramEnvParametersI4ivNV_ptr((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParametersI4ivNV, (GLenum target, GLuint index, GLsizei count, const GLint *params))
#define glProgramEnvParametersI4uivNV(target, index, count, params) glatter_glProgramEnvParametersI4uivNV_ptr((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramEnvParametersI4uivNV, (GLenum target, GLuint index, GLsizei count, const GLuint *params))
#define glProgramLocalParameterI4iNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4iNV_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4iNV, (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glProgramLocalParameterI4ivNV(target, index, params) glatter_glProgramLocalParameterI4ivNV_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4ivNV, (GLenum target, GLuint index, const GLint *params))
#define glProgramLocalParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4uiNV_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4uiNV, (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glProgramLocalParameterI4uivNV(target, index, params) glatter_glProgramLocalParameterI4uivNV_ptr((target), (index), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParameterI4uivNV, (GLenum target, GLuint index, const GLuint *params))
#define glProgramLocalParametersI4ivNV(target, index, count, params) glatter_glProgramLocalParametersI4ivNV_ptr((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParametersI4ivNV, (GLenum target, GLuint index, GLsizei count, const GLint *params))
#define glProgramLocalParametersI4uivNV(target, index, count, params) glatter_glProgramLocalParametersI4uivNV_ptr((target), (index), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramLocalParametersI4uivNV, (GLenum target, GLuint index, GLsizei count, const GLuint *params))
#endif // defined(GL_NV_gpu_program4)
#if defined(GL_NV_gpu_program5)
#define glGetProgramSubroutineParameteruivNV(target, index, param) glatter_glGetProgramSubroutineParameteruivNV_ptr((target), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramSubroutineParameteruivNV, (GLenum target, GLuint index, GLuint *param))
#define glProgramSubroutineParametersuivNV(target, count, params) glatter_glProgramSubroutineParametersuivNV_ptr((target), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramSubroutineParametersuivNV, (GLenum target, GLsizei count, const GLuint *params))
#endif // defined(GL_NV_gpu_program5)
#if defined(GL_NV_half_float)
#define glColor3hNV(red, green, blue) glatter_glColor3hNV_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue))
#define glColor3hvNV(v) glatter_glColor3hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor3hvNV, (const GLhalfNV *v))
#define glColor4hNV(red, green, blue, alpha) glatter_glColor4hNV_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha))
#define glColor4hvNV(v) glatter_glColor4hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glColor4hvNV, (const GLhalfNV *v))
#define glFogCoordhNV(fog) glatter_glFogCoordhNV_ptr((fog))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordhNV, (GLhalfNV fog))
#define glFogCoordhvNV(fog) glatter_glFogCoordhvNV_ptr((fog))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordhvNV, (const GLhalfNV *fog))
#define glMultiTexCoord1hNV(target, s) glatter_glMultiTexCoord1hNV_ptr((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1hNV, (GLenum target, GLhalfNV s))
#define glMultiTexCoord1hvNV(target, v) glatter_glMultiTexCoord1hvNV_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1hvNV, (GLenum target, const GLhalfNV *v))
#define glMultiTexCoord2hNV(target, s, t) glatter_glMultiTexCoord2hNV_ptr((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2hNV, (GLenum target, GLhalfNV s, GLhalfNV t))
#define glMultiTexCoord2hvNV(target, v) glatter_glMultiTexCoord2hvNV_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2hvNV, (GLenum target, const GLhalfNV *v))
#define glMultiTexCoord3hNV(target, s, t, r) glatter_glMultiTexCoord3hNV_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3hNV, (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r))
#define glMultiTexCoord3hvNV(target, v) glatter_glMultiTexCoord3hvNV_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3hvNV, (GLenum target, const GLhalfNV *v))
#define glMultiTexCoord4hNV(target, s, t, r, q) glatter_glMultiTexCoord4hNV_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4hNV, (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q))
#define glMultiTexCoord4hvNV(target, v) glatter_glMultiTexCoord4hvNV_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4hvNV, (GLenum target, const GLhalfNV *v))
#define glNormal3hNV(nx, ny, nz) glatter_glNormal3hNV_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3hNV, (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz))
#define glNormal3hvNV(v) glatter_glNormal3hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3hvNV, (const GLhalfNV *v))
#define glSecondaryColor3hNV(red, green, blue) glatter_glSecondaryColor3hNV_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue))
#define glSecondaryColor3hvNV(v) glatter_glSecondaryColor3hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3hvNV, (const GLhalfNV *v))
#define glTexCoord1hNV(s) glatter_glTexCoord1hNV_ptr((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1hNV, (GLhalfNV s))
#define glTexCoord1hvNV(v) glatter_glTexCoord1hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1hvNV, (const GLhalfNV *v))
#define glTexCoord2hNV(s, t) glatter_glTexCoord2hNV_ptr((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2hNV, (GLhalfNV s, GLhalfNV t))
#define glTexCoord2hvNV(v) glatter_glTexCoord2hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2hvNV, (const GLhalfNV *v))
#define glTexCoord3hNV(s, t, r) glatter_glTexCoord3hNV_ptr((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3hNV, (GLhalfNV s, GLhalfNV t, GLhalfNV r))
#define glTexCoord3hvNV(v) glatter_glTexCoord3hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3hvNV, (const GLhalfNV *v))
#define glTexCoord4hNV(s, t, r, q) glatter_glTexCoord4hNV_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4hNV, (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q))
#define glTexCoord4hvNV(v) glatter_glTexCoord4hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4hvNV, (const GLhalfNV *v))
#define glVertex2hNV(x, y) glatter_glVertex2hNV_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2hNV, (GLhalfNV x, GLhalfNV y))
#define glVertex2hvNV(v) glatter_glVertex2hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex2hvNV, (const GLhalfNV *v))
#define glVertex3hNV(x, y, z) glatter_glVertex3hNV_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3hNV, (GLhalfNV x, GLhalfNV y, GLhalfNV z))
#define glVertex3hvNV(v) glatter_glVertex3hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex3hvNV, (const GLhalfNV *v))
#define glVertex4hNV(x, y, z, w) glatter_glVertex4hNV_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4hNV, (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w))
#define glVertex4hvNV(v) glatter_glVertex4hvNV_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glVertex4hvNV, (const GLhalfNV *v))
#define glVertexAttrib1hNV(index, x) glatter_glVertexAttrib1hNV_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1hNV, (GLuint index, GLhalfNV x))
#define glVertexAttrib1hvNV(index, v) glatter_glVertexAttrib1hvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1hvNV, (GLuint index, const GLhalfNV *v))
#define glVertexAttrib2hNV(index, x, y) glatter_glVertexAttrib2hNV_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2hNV, (GLuint index, GLhalfNV x, GLhalfNV y))
#define glVertexAttrib2hvNV(index, v) glatter_glVertexAttrib2hvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2hvNV, (GLuint index, const GLhalfNV *v))
#define glVertexAttrib3hNV(index, x, y, z) glatter_glVertexAttrib3hNV_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3hNV, (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z))
#define glVertexAttrib3hvNV(index, v) glatter_glVertexAttrib3hvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3hvNV, (GLuint index, const GLhalfNV *v))
#define glVertexAttrib4hNV(index, x, y, z, w) glatter_glVertexAttrib4hNV_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4hNV, (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w))
#define glVertexAttrib4hvNV(index, v) glatter_glVertexAttrib4hvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4hvNV, (GLuint index, const GLhalfNV *v))
#define glVertexAttribs1hvNV(index, n, v) glatter_glVertexAttribs1hvNV_ptr((index), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#define glVertexAttribs2hvNV(index, n, v) glatter_glVertexAttribs2hvNV_ptr((index), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#define glVertexAttribs3hvNV(index, n, v) glatter_glVertexAttribs3hvNV_ptr((index), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#define glVertexAttribs4hvNV(index, n, v) glatter_glVertexAttribs4hvNV_ptr((index), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4hvNV, (GLuint index, GLsizei n, const GLhalfNV *v))
#define glVertexWeighthNV(weight) glatter_glVertexWeighthNV_ptr((weight))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeighthNV, (GLhalfNV weight))
#define glVertexWeighthvNV(weight) glatter_glVertexWeighthvNV_ptr((weight))
GLATTER_UBLOCK(void, APIENTRY, glVertexWeighthvNV, (const GLhalfNV *weight))
#endif // defined(GL_NV_half_float)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_ptr((target), (internalformat), (samples), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformatSampleivNV, (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params))
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_occlusion_query)
#define glBeginOcclusionQueryNV(id) glatter_glBeginOcclusionQueryNV_ptr((id))
GLATTER_UBLOCK(void, APIENTRY, glBeginOcclusionQueryNV, (GLuint id))
#define glDeleteOcclusionQueriesNV(n, ids) glatter_glDeleteOcclusionQueriesNV_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteOcclusionQueriesNV, (GLsizei n, const GLuint *ids))
#define glEndOcclusionQueryNV() glatter_glEndOcclusionQueryNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndOcclusionQueryNV, (void))
#define glGenOcclusionQueriesNV(n, ids) glatter_glGenOcclusionQueriesNV_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenOcclusionQueriesNV, (GLsizei n, GLuint *ids))
#define glGetOcclusionQueryivNV(id, pname, params) glatter_glGetOcclusionQueryivNV_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetOcclusionQueryivNV, (GLuint id, GLenum pname, GLint *params))
#define glGetOcclusionQueryuivNV(id, pname, params) glatter_glGetOcclusionQueryuivNV_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetOcclusionQueryuivNV, (GLuint id, GLenum pname, GLuint *params))
#define glIsOcclusionQueryNV(id) glatter_glIsOcclusionQueryNV_ptr((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsOcclusionQueryNV, (GLuint id))
#endif // defined(GL_NV_occlusion_query)
#if defined(GL_NV_parameter_buffer_object)
#define glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIivNV_ptr((target), (bindingIndex), (wordIndex), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramBufferParametersIivNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params))
#define glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIuivNV_ptr((target), (bindingIndex), (wordIndex), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramBufferParametersIuivNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params))
#define glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersfvNV_ptr((target), (bindingIndex), (wordIndex), (count), (params))
GLATTER_UBLOCK(void, APIENTRY, glProgramBufferParametersfvNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params))
#endif // defined(GL_NV_parameter_buffer_object)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_ptr((resultPath), (srcPath))
GLATTER_UBLOCK(void, APIENTRY, glCopyPathNV, (GLuint resultPath, GLuint srcPath))
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_ptr((path), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glCoverFillPathNV, (GLuint path, GLenum coverMode))
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_ptr((path), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glCoverStrokePathNV, (GLuint path, GLenum coverMode))
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_ptr((path), (range))
GLATTER_UBLOCK(void, APIENTRY, glDeletePathsNV, (GLuint path, GLsizei range))
#define glGenPathsNV(range) glatter_glGenPathsNV_ptr((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenPathsNV, (GLsizei range))
#define glGetPathColorGenfvNV(color, pname, value) glatter_glGetPathColorGenfvNV_ptr((color), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathColorGenfvNV, (GLenum color, GLenum pname, GLfloat *value))
#define glGetPathColorGenivNV(color, pname, value) glatter_glGetPathColorGenivNV_ptr((color), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathColorGenivNV, (GLenum color, GLenum pname, GLint *value))
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_ptr((path), (commands))
GLATTER_UBLOCK(void, APIENTRY, glGetPathCommandsNV, (GLuint path, GLubyte *commands))
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_ptr((path), (coords))
GLATTER_UBLOCK(void, APIENTRY, glGetPathCoordsNV, (GLuint path, GLfloat *coords))
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_ptr((path), (dashArray))
GLATTER_UBLOCK(void, APIENTRY, glGetPathDashArrayNV, (GLuint path, GLfloat *dashArray))
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_ptr((path), (startSegment), (numSegments))
GLATTER_UBLOCK(GLfloat, APIENTRY, glGetPathLengthNV, (GLuint path, GLsizei startSegment, GLsizei numSegments))
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_ptr((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics))
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricRangeNV, (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics))
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_ptr((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics))
GLATTER_UBLOCK(void, APIENTRY, glGetPathMetricsNV, (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics))
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterfvNV, (GLuint path, GLenum pname, GLfloat *value))
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathParameterivNV, (GLuint path, GLenum pname, GLint *value))
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_ptr((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing))
GLATTER_UBLOCK(void, APIENTRY, glGetPathSpacingNV, (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing))
#define glGetPathTexGenfvNV(texCoordSet, pname, value) glatter_glGetPathTexGenfvNV_ptr((texCoordSet), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathTexGenfvNV, (GLenum texCoordSet, GLenum pname, GLfloat *value))
#define glGetPathTexGenivNV(texCoordSet, pname, value) glatter_glGetPathTexGenivNV_ptr((texCoordSet), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glGetPathTexGenivNV, (GLenum texCoordSet, GLenum pname, GLint *value))
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_ptr((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourcefvNV, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params))
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_ptr((resultPath), (pathA), (pathB), (weight))
GLATTER_UBLOCK(void, APIENTRY, glInterpolatePathsNV, (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight))
#define glIsPathNV(path) glatter_glIsPathNV_ptr((path))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPathNV, (GLuint path))
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_ptr((path), (mask), (x), (y))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInFillPathNV, (GLuint path, GLuint mask, GLfloat x, GLfloat y))
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_ptr((path), (x), (y))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsPointInStrokePathNV, (GLuint path, GLfloat x, GLfloat y))
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoad3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixLoadTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x2fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMult3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_ptr((matrixMode), (m))
GLATTER_UBLOCK(void, APIENTRY, glMatrixMultTranspose3x3fNV, (GLenum matrixMode, const GLfloat *m))
#define glPathColorGenNV(color, genMode, colorFormat, coeffs) glatter_glPathColorGenNV_ptr((color), (genMode), (colorFormat), (coeffs))
GLATTER_UBLOCK(void, APIENTRY, glPathColorGenNV, (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs))
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_ptr((path), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathCommandsNV, (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_ptr((path), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathCoordsNV, (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_ptr((func))
GLATTER_UBLOCK(void, APIENTRY, glPathCoverDepthFuncNV, (GLenum func))
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_ptr((path), (dashCount), (dashArray))
GLATTER_UBLOCK(void, APIENTRY, glPathDashArrayNV, (GLuint path, GLsizei dashCount, const GLfloat *dashArray))
#define glPathFogGenNV(genMode) glatter_glPathFogGenNV_ptr((genMode))
GLATTER_UBLOCK(void, APIENTRY, glPathFogGenNV, (GLenum genMode))
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_ptr((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_ptr((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathGlyphIndexRangeNV, (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]))
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_ptr((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphRangeNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_ptr((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(void, APIENTRY, glPathGlyphsNV, (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_ptr((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale))
GLATTER_UBLOCK(GLenum, APIENTRY, glPathMemoryGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale))
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfNV, (GLuint path, GLenum pname, GLfloat value))
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterfvNV, (GLuint path, GLenum pname, const GLfloat *value))
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameteriNV, (GLuint path, GLenum pname, GLint value))
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_ptr((path), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPathParameterivNV, (GLuint path, GLenum pname, const GLint *value))
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_ptr((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPathStencilDepthOffsetNV, (GLfloat factor, GLfloat units))
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_ptr((func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glPathStencilFuncNV, (GLenum func, GLint ref, GLuint mask))
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_ptr((path), (format), (length), (pathString))
GLATTER_UBLOCK(void, APIENTRY, glPathStringNV, (GLuint path, GLenum format, GLsizei length, const void *pathString))
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_ptr((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathSubCommandsNV, (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_ptr((path), (coordStart), (numCoords), (coordType), (coords))
GLATTER_UBLOCK(void, APIENTRY, glPathSubCoordsNV, (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords))
#define glPathTexGenNV(texCoordSet, genMode, components, coeffs) glatter_glPathTexGenNV_ptr((texCoordSet), (genMode), (components), (coeffs))
GLATTER_UBLOCK(void, APIENTRY, glPathTexGenNV, (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs))
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_ptr((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY))
GLATTER_UBLOCK(GLboolean, APIENTRY, glPointAlongPathNV, (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY))
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_ptr((program), (location), (genMode), (components), (coeffs))
GLATTER_UBLOCK(void, APIENTRY, glProgramPathFragmentInputGenNV, (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs))
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_ptr((path), (fillMode), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFillPathNV, (GLuint path, GLenum fillMode, GLuint mask))
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues))
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_ptr((path), (reference), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilStrokePathNV, (GLuint path, GLint reference, GLuint mask))
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_ptr((path), (fillMode), (mask), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverFillPathNV, (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode))
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_ptr((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues))
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_ptr((path), (reference), (mask), (coverMode))
GLATTER_UBLOCK(void, APIENTRY, glStencilThenCoverStrokePathNV, (GLuint path, GLint reference, GLuint mask, GLenum coverMode))
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_ptr((resultPath), (srcPath), (transformType), (transformValues))
GLATTER_UBLOCK(void, APIENTRY, glTransformPathNV, (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues))
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_ptr((resultPath), (numPaths), (paths), (weights))
GLATTER_UBLOCK(void, APIENTRY, glWeightPathsNV, (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights))
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_pixel_data_range)
#define glFlushPixelDataRangeNV(target) glatter_glFlushPixelDataRangeNV_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glFlushPixelDataRangeNV, (GLenum target))
#define glPixelDataRangeNV(target, length, pointer) glatter_glPixelDataRangeNV_ptr((target), (length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glPixelDataRangeNV, (GLenum target, GLsizei length, const void *pointer))
#endif // defined(GL_NV_pixel_data_range)
#if defined(GL_NV_point_sprite)
#define glPointParameteriNV(pname, param) glatter_glPointParameteriNV_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteriNV, (GLenum pname, GLint param))
#define glPointParameterivNV(pname, params) glatter_glPointParameterivNV_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterivNV, (GLenum pname, const GLint *params))
#endif // defined(GL_NV_point_sprite)
#if defined(GL_NV_present_video)
#define glGetVideoi64vNV(video_slot, pname, params) glatter_glGetVideoi64vNV_ptr((video_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoi64vNV, (GLuint video_slot, GLenum pname, GLint64EXT *params))
#define glGetVideoivNV(video_slot, pname, params) glatter_glGetVideoivNV_ptr((video_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoivNV, (GLuint video_slot, GLenum pname, GLint *params))
#define glGetVideoui64vNV(video_slot, pname, params) glatter_glGetVideoui64vNV_ptr((video_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoui64vNV, (GLuint video_slot, GLenum pname, GLuint64EXT *params))
#define glGetVideouivNV(video_slot, pname, params) glatter_glGetVideouivNV_ptr((video_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideouivNV, (GLuint video_slot, GLenum pname, GLuint *params))
#define glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3) glatter_glPresentFrameDualFillNV_ptr((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (target1), (fill1), (target2), (fill2), (target3), (fill3))
GLATTER_UBLOCK(void, APIENTRY, glPresentFrameDualFillNV, (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3))
#define glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1) glatter_glPresentFrameKeyedNV_ptr((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (key0), (target1), (fill1), (key1))
GLATTER_UBLOCK(void, APIENTRY, glPresentFrameKeyedNV, (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1))
#endif // defined(GL_NV_present_video)
#if defined(GL_NV_primitive_restart)
#define glPrimitiveRestartIndexNV(index) glatter_glPrimitiveRestartIndexNV_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartIndexNV, (GLuint index))
#define glPrimitiveRestartNV() glatter_glPrimitiveRestartNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartNV, (void))
#endif // defined(GL_NV_primitive_restart)
#if defined(GL_NV_register_combiners)
#define glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage) glatter_glCombinerInputNV_ptr((stage), (portion), (variable), (input), (mapping), (componentUsage))
GLATTER_UBLOCK(void, APIENTRY, glCombinerInputNV, (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage))
#define glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) glatter_glCombinerOutputNV_ptr((stage), (portion), (abOutput), (cdOutput), (sumOutput), (scale), (bias), (abDotProduct), (cdDotProduct), (muxSum))
GLATTER_UBLOCK(void, APIENTRY, glCombinerOutputNV, (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum))
#define glCombinerParameterfNV(pname, param) glatter_glCombinerParameterfNV_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameterfNV, (GLenum pname, GLfloat param))
#define glCombinerParameterfvNV(pname, params) glatter_glCombinerParameterfvNV_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameterfvNV, (GLenum pname, const GLfloat *params))
#define glCombinerParameteriNV(pname, param) glatter_glCombinerParameteriNV_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameteriNV, (GLenum pname, GLint param))
#define glCombinerParameterivNV(pname, params) glatter_glCombinerParameterivNV_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCombinerParameterivNV, (GLenum pname, const GLint *params))
#define glFinalCombinerInputNV(variable, input, mapping, componentUsage) glatter_glFinalCombinerInputNV_ptr((variable), (input), (mapping), (componentUsage))
GLATTER_UBLOCK(void, APIENTRY, glFinalCombinerInputNV, (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage))
#define glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterfvNV_ptr((stage), (portion), (variable), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerInputParameterfvNV, (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params))
#define glGetCombinerInputParameterivNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterivNV_ptr((stage), (portion), (variable), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerInputParameterivNV, (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params))
#define glGetCombinerOutputParameterfvNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterfvNV_ptr((stage), (portion), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerOutputParameterfvNV, (GLenum stage, GLenum portion, GLenum pname, GLfloat *params))
#define glGetCombinerOutputParameterivNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterivNV_ptr((stage), (portion), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerOutputParameterivNV, (GLenum stage, GLenum portion, GLenum pname, GLint *params))
#define glGetFinalCombinerInputParameterfvNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterfvNV_ptr((variable), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFinalCombinerInputParameterfvNV, (GLenum variable, GLenum pname, GLfloat *params))
#define glGetFinalCombinerInputParameterivNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterivNV_ptr((variable), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFinalCombinerInputParameterivNV, (GLenum variable, GLenum pname, GLint *params))
#endif // defined(GL_NV_register_combiners)
#if defined(GL_NV_register_combiners2)
#define glCombinerStageParameterfvNV(stage, pname, params) glatter_glCombinerStageParameterfvNV_ptr((stage), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glCombinerStageParameterfvNV, (GLenum stage, GLenum pname, const GLfloat *params))
#define glGetCombinerStageParameterfvNV(stage, pname, params) glatter_glGetCombinerStageParameterfvNV_ptr((stage), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetCombinerStageParameterfvNV, (GLenum stage, GLenum pname, GLfloat *params))
#endif // defined(GL_NV_register_combiners2)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_ptr((target), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferSampleLocationsfvNV, (GLenum target, GLuint start, GLsizei count, const GLfloat *v))
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_ptr((framebuffer), (start), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferSampleLocationsfvNV, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v))
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glResolveDepthValuesNV, (void))
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_shader_buffer_load)
#define glGetBufferParameterui64vNV(target, pname, params) glatter_glGetBufferParameterui64vNV_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameterui64vNV, (GLenum target, GLenum pname, GLuint64EXT *params))
#define glGetIntegerui64vNV(value, result) glatter_glGetIntegerui64vNV_ptr((value), (result))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerui64vNV, (GLenum value, GLuint64EXT *result))
#define glGetNamedBufferParameterui64vNV(buffer, pname, params) glatter_glGetNamedBufferParameterui64vNV_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameterui64vNV, (GLuint buffer, GLenum pname, GLuint64EXT *params))
#define glIsBufferResidentNV(target) glatter_glIsBufferResidentNV_ptr((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBufferResidentNV, (GLenum target))
#define glIsNamedBufferResidentNV(buffer) glatter_glIsNamedBufferResidentNV_ptr((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsNamedBufferResidentNV, (GLuint buffer))
#define glMakeBufferNonResidentNV(target) glatter_glMakeBufferNonResidentNV_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glMakeBufferNonResidentNV, (GLenum target))
#define glMakeBufferResidentNV(target, access) glatter_glMakeBufferResidentNV_ptr((target), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeBufferResidentNV, (GLenum target, GLenum access))
#define glMakeNamedBufferNonResidentNV(buffer) glatter_glMakeNamedBufferNonResidentNV_ptr((buffer))
GLATTER_UBLOCK(void, APIENTRY, glMakeNamedBufferNonResidentNV, (GLuint buffer))
#define glMakeNamedBufferResidentNV(buffer, access) glatter_glMakeNamedBufferResidentNV_ptr((buffer), (access))
GLATTER_UBLOCK(void, APIENTRY, glMakeNamedBufferResidentNV, (GLuint buffer, GLenum access))
#define glProgramUniformui64NV(program, location, value) glatter_glProgramUniformui64NV_ptr((program), (location), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformui64NV, (GLuint program, GLint location, GLuint64EXT value))
#define glProgramUniformui64vNV(program, location, count, value) glatter_glProgramUniformui64vNV_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value))
#define glUniformui64NV(location, value) glatter_glUniformui64NV_ptr((location), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformui64NV, (GLint location, GLuint64EXT value))
#define glUniformui64vNV(location, count, value) glatter_glUniformui64vNV_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformui64vNV, (GLint location, GLsizei count, const GLuint64EXT *value))
#endif // defined(GL_NV_shader_buffer_load)
#if defined(GL_NV_texture_barrier)
#define glTextureBarrierNV() glatter_glTextureBarrierNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrierNV, (void))
#endif // defined(GL_NV_texture_barrier)
#if defined(GL_NV_texture_multisample)
#define glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTexImage2DMultisampleCoverageNV_ptr((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2DMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations))
#define glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTexImage3DMultisampleCoverageNV_ptr((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations))
#define glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleCoverageNV_ptr((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DMultisampleCoverageNV, (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations))
#define glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleNV_ptr((texture), (target), (samples), (internalFormat), (width), (height), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage2DMultisampleNV, (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations))
#define glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleCoverageNV_ptr((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DMultisampleCoverageNV, (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations))
#define glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleNV_ptr((texture), (target), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureImage3DMultisampleNV, (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations))
#endif // defined(GL_NV_texture_multisample)
#if defined(GL_NV_transform_feedback)
#define glActiveVaryingNV(program, name) glatter_glActiveVaryingNV_ptr((program), (name))
GLATTER_UBLOCK(void, APIENTRY, glActiveVaryingNV, (GLuint program, const GLchar *name))
#define glBeginTransformFeedbackNV(primitiveMode) glatter_glBeginTransformFeedbackNV_ptr((primitiveMode))
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedbackNV, (GLenum primitiveMode))
#define glBindBufferBaseNV(target, index, buffer) glatter_glBindBufferBaseNV_ptr((target), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBaseNV, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferOffsetNV(target, index, buffer, offset) glatter_glBindBufferOffsetNV_ptr((target), (index), (buffer), (offset))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferOffsetNV, (GLenum target, GLuint index, GLuint buffer, GLintptr offset))
#define glBindBufferRangeNV(target, index, buffer, offset, size) glatter_glBindBufferRangeNV_ptr((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRangeNV, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glEndTransformFeedbackNV() glatter_glEndTransformFeedbackNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedbackNV, (void))
#define glGetActiveVaryingNV(program, index, bufSize, length, size, type, name) glatter_glGetActiveVaryingNV_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveVaryingNV, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetTransformFeedbackVaryingNV(program, index, location) glatter_glGetTransformFeedbackVaryingNV_ptr((program), (index), (location))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVaryingNV, (GLuint program, GLuint index, GLint *location))
#define glGetVaryingLocationNV(program, name) glatter_glGetVaryingLocationNV_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetVaryingLocationNV, (GLuint program, const GLchar *name))
#define glTransformFeedbackAttribsNV(count, attribs, bufferMode) glatter_glTransformFeedbackAttribsNV_ptr((count), (attribs), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackAttribsNV, (GLsizei count, const GLint *attribs, GLenum bufferMode))
#define glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode) glatter_glTransformFeedbackStreamAttribsNV_ptr((count), (attribs), (nbuffers), (bufstreams), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackStreamAttribsNV, (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode))
#define glTransformFeedbackVaryingsNV(program, count, locations, bufferMode) glatter_glTransformFeedbackVaryingsNV_ptr((program), (count), (locations), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryingsNV, (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode))
#endif // defined(GL_NV_transform_feedback)
#if defined(GL_NV_transform_feedback2)
#define glBindTransformFeedbackNV(target, id) glatter_glBindTransformFeedbackNV_ptr((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBindTransformFeedbackNV, (GLenum target, GLuint id))
#define glDeleteTransformFeedbacksNV(n, ids) glatter_glDeleteTransformFeedbacksNV_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTransformFeedbacksNV, (GLsizei n, const GLuint *ids))
#define glDrawTransformFeedbackNV(mode, id) glatter_glDrawTransformFeedbackNV_ptr((mode), (id))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackNV, (GLenum mode, GLuint id))
#define glGenTransformFeedbacksNV(n, ids) glatter_glGenTransformFeedbacksNV_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenTransformFeedbacksNV, (GLsizei n, GLuint *ids))
#define glIsTransformFeedbackNV(id) glatter_glIsTransformFeedbackNV_ptr((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTransformFeedbackNV, (GLuint id))
#define glPauseTransformFeedbackNV() glatter_glPauseTransformFeedbackNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPauseTransformFeedbackNV, (void))
#define glResumeTransformFeedbackNV() glatter_glResumeTransformFeedbackNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glResumeTransformFeedbackNV, (void))
#endif // defined(GL_NV_transform_feedback2)
#if defined(GL_NV_vdpau_interop)
#define glVDPAUFiniNV() glatter_glVDPAUFiniNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glVDPAUFiniNV, (void))
#define glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values) glatter_glVDPAUGetSurfaceivNV_ptr((surface), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUGetSurfaceivNV, (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glVDPAUInitNV(vdpDevice, getProcAddress) glatter_glVDPAUInitNV_ptr((vdpDevice), (getProcAddress))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUInitNV, (const void *vdpDevice, const void *getProcAddress))
#define glVDPAUIsSurfaceNV(surface) glatter_glVDPAUIsSurfaceNV_ptr((surface))
GLATTER_UBLOCK(GLboolean, APIENTRY, glVDPAUIsSurfaceNV, (GLvdpauSurfaceNV surface))
#define glVDPAUMapSurfacesNV(numSurfaces, surfaces) glatter_glVDPAUMapSurfacesNV_ptr((numSurfaces), (surfaces))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUMapSurfacesNV, (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces))
#define glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterOutputSurfaceNV_ptr((vdpSurface), (target), (numTextureNames), (textureNames))
GLATTER_UBLOCK(GLvdpauSurfaceNV, APIENTRY, glVDPAURegisterOutputSurfaceNV, (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames))
#define glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterVideoSurfaceNV_ptr((vdpSurface), (target), (numTextureNames), (textureNames))
GLATTER_UBLOCK(GLvdpauSurfaceNV, APIENTRY, glVDPAURegisterVideoSurfaceNV, (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames))
#define glVDPAUSurfaceAccessNV(surface, access) glatter_glVDPAUSurfaceAccessNV_ptr((surface), (access))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUSurfaceAccessNV, (GLvdpauSurfaceNV surface, GLenum access))
#define glVDPAUUnmapSurfacesNV(numSurface, surfaces) glatter_glVDPAUUnmapSurfacesNV_ptr((numSurface), (surfaces))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUUnmapSurfacesNV, (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces))
#define glVDPAUUnregisterSurfaceNV(surface) glatter_glVDPAUUnregisterSurfaceNV_ptr((surface))
GLATTER_UBLOCK(void, APIENTRY, glVDPAUUnregisterSurfaceNV, (GLvdpauSurfaceNV surface))
#endif // defined(GL_NV_vdpau_interop)
#if defined(GL_NV_vertex_array_range)
#define glFlushVertexArrayRangeNV() glatter_glFlushVertexArrayRangeNV_ptr()
GLATTER_UBLOCK(void, APIENTRY, glFlushVertexArrayRangeNV, (void))
#define glVertexArrayRangeNV(length, pointer) glatter_glVertexArrayRangeNV_ptr((length), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayRangeNV, (GLsizei length, const void *pointer))
#endif // defined(GL_NV_vertex_array_range)
#if defined(GL_NV_vertex_attrib_integer_64bit)
#define glGetVertexAttribLi64vNV(index, pname, params) glatter_glGetVertexAttribLi64vNV_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLi64vNV, (GLuint index, GLenum pname, GLint64EXT *params))
#define glGetVertexAttribLui64vNV(index, pname, params) glatter_glGetVertexAttribLui64vNV_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLui64vNV, (GLuint index, GLenum pname, GLuint64EXT *params))
#define glVertexAttribL1i64NV(index, x) glatter_glVertexAttribL1i64NV_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1i64NV, (GLuint index, GLint64EXT x))
#define glVertexAttribL1i64vNV(index, v) glatter_glVertexAttribL1i64vNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL1ui64NV(index, x) glatter_glVertexAttribL1ui64NV_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64NV, (GLuint index, GLuint64EXT x))
#define glVertexAttribL1ui64vNV(index, v) glatter_glVertexAttribL1ui64vNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribL2i64NV(index, x, y) glatter_glVertexAttribL2i64NV_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2i64NV, (GLuint index, GLint64EXT x, GLint64EXT y))
#define glVertexAttribL2i64vNV(index, v) glatter_glVertexAttribL2i64vNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL2ui64NV(index, x, y) glatter_glVertexAttribL2ui64NV_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y))
#define glVertexAttribL2ui64vNV(index, v) glatter_glVertexAttribL2ui64vNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribL3i64NV(index, x, y, z) glatter_glVertexAttribL3i64NV_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z))
#define glVertexAttribL3i64vNV(index, v) glatter_glVertexAttribL3i64vNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL3ui64NV(index, x, y, z) glatter_glVertexAttribL3ui64NV_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z))
#define glVertexAttribL3ui64vNV(index, v) glatter_glVertexAttribL3ui64vNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribL4i64NV(index, x, y, z, w) glatter_glVertexAttribL4i64NV_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w))
#define glVertexAttribL4i64vNV(index, v) glatter_glVertexAttribL4i64vNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4i64vNV, (GLuint index, const GLint64EXT *v))
#define glVertexAttribL4ui64NV(index, x, y, z, w) glatter_glVertexAttribL4ui64NV_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w))
#define glVertexAttribL4ui64vNV(index, v) glatter_glVertexAttribL4ui64vNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4ui64vNV, (GLuint index, const GLuint64EXT *v))
#define glVertexAttribLFormatNV(index, size, type, stride) glatter_glVertexAttribLFormatNV_ptr((index), (size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride))
#endif // defined(GL_NV_vertex_attrib_integer_64bit)
#if defined(GL_NV_vertex_buffer_unified_memory)
#define glBufferAddressRangeNV(pname, index, address, length) glatter_glBufferAddressRangeNV_ptr((pname), (index), (address), (length))
GLATTER_UBLOCK(void, APIENTRY, glBufferAddressRangeNV, (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length))
#define glColorFormatNV(size, type, stride) glatter_glColorFormatNV_ptr((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glColorFormatNV, (GLint size, GLenum type, GLsizei stride))
#define glEdgeFlagFormatNV(stride) glatter_glEdgeFlagFormatNV_ptr((stride))
GLATTER_UBLOCK(void, APIENTRY, glEdgeFlagFormatNV, (GLsizei stride))
#define glFogCoordFormatNV(type, stride) glatter_glFogCoordFormatNV_ptr((type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordFormatNV, (GLenum type, GLsizei stride))
#define glGetIntegerui64i_vNV(value, index, result) glatter_glGetIntegerui64i_vNV_ptr((value), (index), (result))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegerui64i_vNV, (GLenum value, GLuint index, GLuint64EXT *result))
#define glIndexFormatNV(type, stride) glatter_glIndexFormatNV_ptr((type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glIndexFormatNV, (GLenum type, GLsizei stride))
#define glNormalFormatNV(type, stride) glatter_glNormalFormatNV_ptr((type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glNormalFormatNV, (GLenum type, GLsizei stride))
#define glSecondaryColorFormatNV(size, type, stride) glatter_glSecondaryColorFormatNV_ptr((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorFormatNV, (GLint size, GLenum type, GLsizei stride))
#define glTexCoordFormatNV(size, type, stride) glatter_glTexCoordFormatNV_ptr((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordFormatNV, (GLint size, GLenum type, GLsizei stride))
#define glVertexAttribFormatNV(index, size, type, normalized, stride) glatter_glVertexAttribFormatNV_ptr((index), (size), (type), (normalized), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormatNV, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride))
#define glVertexAttribIFormatNV(index, size, type, stride) glatter_glVertexAttribIFormatNV_ptr((index), (size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride))
#define glVertexFormatNV(size, type, stride) glatter_glVertexFormatNV_ptr((size), (type), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexFormatNV, (GLint size, GLenum type, GLsizei stride))
#endif // defined(GL_NV_vertex_buffer_unified_memory)
#if defined(GL_NV_vertex_program)
#define glAreProgramsResidentNV(n, programs, residences) glatter_glAreProgramsResidentNV_ptr((n), (programs), (residences))
GLATTER_UBLOCK(GLboolean, APIENTRY, glAreProgramsResidentNV, (GLsizei n, const GLuint *programs, GLboolean *residences))
#define glBindProgramNV(target, id) glatter_glBindProgramNV_ptr((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBindProgramNV, (GLenum target, GLuint id))
#define glDeleteProgramsNV(n, programs) glatter_glDeleteProgramsNV_ptr((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramsNV, (GLsizei n, const GLuint *programs))
#define glExecuteProgramNV(target, id, params) glatter_glExecuteProgramNV_ptr((target), (id), (params))
GLATTER_UBLOCK(void, APIENTRY, glExecuteProgramNV, (GLenum target, GLuint id, const GLfloat *params))
#define glGenProgramsNV(n, programs) glatter_glGenProgramsNV_ptr((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glGenProgramsNV, (GLsizei n, GLuint *programs))
#define glGetProgramParameterdvNV(target, index, pname, params) glatter_glGetProgramParameterdvNV_ptr((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramParameterdvNV, (GLenum target, GLuint index, GLenum pname, GLdouble *params))
#define glGetProgramParameterfvNV(target, index, pname, params) glatter_glGetProgramParameterfvNV_ptr((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramParameterfvNV, (GLenum target, GLuint index, GLenum pname, GLfloat *params))
#define glGetProgramStringNV(id, pname, program) glatter_glGetProgramStringNV_ptr((id), (pname), (program))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStringNV, (GLuint id, GLenum pname, GLubyte *program))
#define glGetProgramivNV(id, pname, params) glatter_glGetProgramivNV_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramivNV, (GLuint id, GLenum pname, GLint *params))
#define glGetTrackMatrixivNV(target, address, pname, params) glatter_glGetTrackMatrixivNV_ptr((target), (address), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTrackMatrixivNV, (GLenum target, GLuint address, GLenum pname, GLint *params))
#define glGetVertexAttribPointervNV(index, pname, pointer) glatter_glGetVertexAttribPointervNV_ptr((index), (pname), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointervNV, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribdvNV(index, pname, params) glatter_glGetVertexAttribdvNV_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdvNV, (GLuint index, GLenum pname, GLdouble *params))
#define glGetVertexAttribfvNV(index, pname, params) glatter_glGetVertexAttribfvNV_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfvNV, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribivNV(index, pname, params) glatter_glGetVertexAttribivNV_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribivNV, (GLuint index, GLenum pname, GLint *params))
#define glIsProgramNV(id) glatter_glIsProgramNV_ptr((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramNV, (GLuint id))
#define glLoadProgramNV(target, id, len, program) glatter_glLoadProgramNV_ptr((target), (id), (len), (program))
GLATTER_UBLOCK(void, APIENTRY, glLoadProgramNV, (GLenum target, GLuint id, GLsizei len, const GLubyte *program))
#define glProgramParameter4dNV(target, index, x, y, z, w) glatter_glProgramParameter4dNV_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4dNV, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glProgramParameter4dvNV(target, index, v) glatter_glProgramParameter4dvNV_ptr((target), (index), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4dvNV, (GLenum target, GLuint index, const GLdouble *v))
#define glProgramParameter4fNV(target, index, x, y, z, w) glatter_glProgramParameter4fNV_ptr((target), (index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4fNV, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glProgramParameter4fvNV(target, index, v) glatter_glProgramParameter4fvNV_ptr((target), (index), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameter4fvNV, (GLenum target, GLuint index, const GLfloat *v))
#define glProgramParameters4dvNV(target, index, count, v) glatter_glProgramParameters4dvNV_ptr((target), (index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameters4dvNV, (GLenum target, GLuint index, GLsizei count, const GLdouble *v))
#define glProgramParameters4fvNV(target, index, count, v) glatter_glProgramParameters4fvNV_ptr((target), (index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameters4fvNV, (GLenum target, GLuint index, GLsizei count, const GLfloat *v))
#define glRequestResidentProgramsNV(n, programs) glatter_glRequestResidentProgramsNV_ptr((n), (programs))
GLATTER_UBLOCK(void, APIENTRY, glRequestResidentProgramsNV, (GLsizei n, const GLuint *programs))
#define glTrackMatrixNV(target, address, matrix, transform) glatter_glTrackMatrixNV_ptr((target), (address), (matrix), (transform))
GLATTER_UBLOCK(void, APIENTRY, glTrackMatrixNV, (GLenum target, GLuint address, GLenum matrix, GLenum transform))
#define glVertexAttrib1dNV(index, x) glatter_glVertexAttrib1dNV_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dNV, (GLuint index, GLdouble x))
#define glVertexAttrib1dvNV(index, v) glatter_glVertexAttrib1dvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dvNV, (GLuint index, const GLdouble *v))
#define glVertexAttrib1fNV(index, x) glatter_glVertexAttrib1fNV_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fNV, (GLuint index, GLfloat x))
#define glVertexAttrib1fvNV(index, v) glatter_glVertexAttrib1fvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fvNV, (GLuint index, const GLfloat *v))
#define glVertexAttrib1sNV(index, x) glatter_glVertexAttrib1sNV_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sNV, (GLuint index, GLshort x))
#define glVertexAttrib1svNV(index, v) glatter_glVertexAttrib1svNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1svNV, (GLuint index, const GLshort *v))
#define glVertexAttrib2dNV(index, x, y) glatter_glVertexAttrib2dNV_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dNV, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttrib2dvNV(index, v) glatter_glVertexAttrib2dvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dvNV, (GLuint index, const GLdouble *v))
#define glVertexAttrib2fNV(index, x, y) glatter_glVertexAttrib2fNV_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fNV, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fvNV(index, v) glatter_glVertexAttrib2fvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fvNV, (GLuint index, const GLfloat *v))
#define glVertexAttrib2sNV(index, x, y) glatter_glVertexAttrib2sNV_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sNV, (GLuint index, GLshort x, GLshort y))
#define glVertexAttrib2svNV(index, v) glatter_glVertexAttrib2svNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2svNV, (GLuint index, const GLshort *v))
#define glVertexAttrib3dNV(index, x, y, z) glatter_glVertexAttrib3dNV_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dNV, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttrib3dvNV(index, v) glatter_glVertexAttrib3dvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dvNV, (GLuint index, const GLdouble *v))
#define glVertexAttrib3fNV(index, x, y, z) glatter_glVertexAttrib3fNV_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fNV, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fvNV(index, v) glatter_glVertexAttrib3fvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fvNV, (GLuint index, const GLfloat *v))
#define glVertexAttrib3sNV(index, x, y, z) glatter_glVertexAttrib3sNV_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sNV, (GLuint index, GLshort x, GLshort y, GLshort z))
#define glVertexAttrib3svNV(index, v) glatter_glVertexAttrib3svNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3svNV, (GLuint index, const GLshort *v))
#define glVertexAttrib4dNV(index, x, y, z, w) glatter_glVertexAttrib4dNV_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dNV, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttrib4dvNV(index, v) glatter_glVertexAttrib4dvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dvNV, (GLuint index, const GLdouble *v))
#define glVertexAttrib4fNV(index, x, y, z, w) glatter_glVertexAttrib4fNV_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fNV, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fvNV(index, v) glatter_glVertexAttrib4fvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fvNV, (GLuint index, const GLfloat *v))
#define glVertexAttrib4sNV(index, x, y, z, w) glatter_glVertexAttrib4sNV_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sNV, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexAttrib4svNV(index, v) glatter_glVertexAttrib4svNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4svNV, (GLuint index, const GLshort *v))
#define glVertexAttrib4ubNV(index, x, y, z, w) glatter_glVertexAttrib4ubNV_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubNV, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#define glVertexAttrib4ubvNV(index, v) glatter_glVertexAttrib4ubvNV_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubvNV, (GLuint index, const GLubyte *v))
#define glVertexAttribPointerNV(index, fsize, type, stride, pointer) glatter_glVertexAttribPointerNV_ptr((index), (fsize), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointerNV, (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer))
#define glVertexAttribs1dvNV(index, count, v) glatter_glVertexAttribs1dvNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#define glVertexAttribs1fvNV(index, count, v) glatter_glVertexAttribs1fvNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#define glVertexAttribs1svNV(index, count, v) glatter_glVertexAttribs1svNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs1svNV, (GLuint index, GLsizei count, const GLshort *v))
#define glVertexAttribs2dvNV(index, count, v) glatter_glVertexAttribs2dvNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#define glVertexAttribs2fvNV(index, count, v) glatter_glVertexAttribs2fvNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#define glVertexAttribs2svNV(index, count, v) glatter_glVertexAttribs2svNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs2svNV, (GLuint index, GLsizei count, const GLshort *v))
#define glVertexAttribs3dvNV(index, count, v) glatter_glVertexAttribs3dvNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#define glVertexAttribs3fvNV(index, count, v) glatter_glVertexAttribs3fvNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#define glVertexAttribs3svNV(index, count, v) glatter_glVertexAttribs3svNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs3svNV, (GLuint index, GLsizei count, const GLshort *v))
#define glVertexAttribs4dvNV(index, count, v) glatter_glVertexAttribs4dvNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4dvNV, (GLuint index, GLsizei count, const GLdouble *v))
#define glVertexAttribs4fvNV(index, count, v) glatter_glVertexAttribs4fvNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4fvNV, (GLuint index, GLsizei count, const GLfloat *v))
#define glVertexAttribs4svNV(index, count, v) glatter_glVertexAttribs4svNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4svNV, (GLuint index, GLsizei count, const GLshort *v))
#define glVertexAttribs4ubvNV(index, count, v) glatter_glVertexAttribs4ubvNV_ptr((index), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribs4ubvNV, (GLuint index, GLsizei count, const GLubyte *v))
#endif // defined(GL_NV_vertex_program)
#if defined(GL_NV_vertex_program4)
#define glGetVertexAttribIivEXT(index, pname, params) glatter_glGetVertexAttribIivEXT_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIivEXT, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuivEXT(index, pname, params) glatter_glGetVertexAttribIuivEXT_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIuivEXT, (GLuint index, GLenum pname, GLuint *params))
#define glVertexAttribI1iEXT(index, x) glatter_glVertexAttribI1iEXT_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1iEXT, (GLuint index, GLint x))
#define glVertexAttribI1ivEXT(index, v) glatter_glVertexAttribI1ivEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1ivEXT, (GLuint index, const GLint *v))
#define glVertexAttribI1uiEXT(index, x) glatter_glVertexAttribI1uiEXT_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uiEXT, (GLuint index, GLuint x))
#define glVertexAttribI1uivEXT(index, v) glatter_glVertexAttribI1uivEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uivEXT, (GLuint index, const GLuint *v))
#define glVertexAttribI2iEXT(index, x, y) glatter_glVertexAttribI2iEXT_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2iEXT, (GLuint index, GLint x, GLint y))
#define glVertexAttribI2ivEXT(index, v) glatter_glVertexAttribI2ivEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2ivEXT, (GLuint index, const GLint *v))
#define glVertexAttribI2uiEXT(index, x, y) glatter_glVertexAttribI2uiEXT_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uiEXT, (GLuint index, GLuint x, GLuint y))
#define glVertexAttribI2uivEXT(index, v) glatter_glVertexAttribI2uivEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uivEXT, (GLuint index, const GLuint *v))
#define glVertexAttribI3iEXT(index, x, y, z) glatter_glVertexAttribI3iEXT_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3iEXT, (GLuint index, GLint x, GLint y, GLint z))
#define glVertexAttribI3ivEXT(index, v) glatter_glVertexAttribI3ivEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3ivEXT, (GLuint index, const GLint *v))
#define glVertexAttribI3uiEXT(index, x, y, z) glatter_glVertexAttribI3uiEXT_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uiEXT, (GLuint index, GLuint x, GLuint y, GLuint z))
#define glVertexAttribI3uivEXT(index, v) glatter_glVertexAttribI3uivEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uivEXT, (GLuint index, const GLuint *v))
#define glVertexAttribI4bvEXT(index, v) glatter_glVertexAttribI4bvEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4bvEXT, (GLuint index, const GLbyte *v))
#define glVertexAttribI4iEXT(index, x, y, z, w) glatter_glVertexAttribI4iEXT_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4iEXT, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4ivEXT(index, v) glatter_glVertexAttribI4ivEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ivEXT, (GLuint index, const GLint *v))
#define glVertexAttribI4svEXT(index, v) glatter_glVertexAttribI4svEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4svEXT, (GLuint index, const GLshort *v))
#define glVertexAttribI4ubvEXT(index, v) glatter_glVertexAttribI4ubvEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ubvEXT, (GLuint index, const GLubyte *v))
#define glVertexAttribI4uiEXT(index, x, y, z, w) glatter_glVertexAttribI4uiEXT_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uiEXT, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uivEXT(index, v) glatter_glVertexAttribI4uivEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uivEXT, (GLuint index, const GLuint *v))
#define glVertexAttribI4usvEXT(index, v) glatter_glVertexAttribI4usvEXT_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4usvEXT, (GLuint index, const GLushort *v))
#define glVertexAttribIPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribIPointerEXT_ptr((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIPointerEXT, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_NV_vertex_program4)
#if defined(GL_NV_video_capture)
#define glBeginVideoCaptureNV(video_capture_slot) glatter_glBeginVideoCaptureNV_ptr((video_capture_slot))
GLATTER_UBLOCK(void, APIENTRY, glBeginVideoCaptureNV, (GLuint video_capture_slot))
#define glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset) glatter_glBindVideoCaptureStreamBufferNV_ptr((video_capture_slot), (stream), (frame_region), (offset))
GLATTER_UBLOCK(void, APIENTRY, glBindVideoCaptureStreamBufferNV, (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset))
#define glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture) glatter_glBindVideoCaptureStreamTextureNV_ptr((video_capture_slot), (stream), (frame_region), (target), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindVideoCaptureStreamTextureNV, (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture))
#define glEndVideoCaptureNV(video_capture_slot) glatter_glEndVideoCaptureNV_ptr((video_capture_slot))
GLATTER_UBLOCK(void, APIENTRY, glEndVideoCaptureNV, (GLuint video_capture_slot))
#define glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamdvNV_ptr((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureStreamdvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params))
#define glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamfvNV_ptr((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureStreamfvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params))
#define glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamivNV_ptr((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureStreamivNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params))
#define glGetVideoCaptureivNV(video_capture_slot, pname, params) glatter_glGetVideoCaptureivNV_ptr((video_capture_slot), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVideoCaptureivNV, (GLuint video_capture_slot, GLenum pname, GLint *params))
#define glVideoCaptureNV(video_capture_slot, sequence_num, capture_time) glatter_glVideoCaptureNV_ptr((video_capture_slot), (sequence_num), (capture_time))
GLATTER_UBLOCK(GLenum, APIENTRY, glVideoCaptureNV, (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time))
#define glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterdvNV_ptr((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glVideoCaptureStreamParameterdvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params))
#define glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterfvNV_ptr((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glVideoCaptureStreamParameterfvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params))
#define glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterivNV_ptr((video_capture_slot), (stream), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glVideoCaptureStreamParameterivNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params))
#endif // defined(GL_NV_video_capture)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_ptr((index), (swizzlex), (swizzley), (swizzlez), (swizzlew))
GLATTER_UBLOCK(void, APIENTRY, glViewportSwizzleNV, (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew))
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_byte_coordinates)
#define glMultiTexCoord1bOES(texture, s) glatter_glMultiTexCoord1bOES_ptr((texture), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1bOES, (GLenum texture, GLbyte s))
#define glMultiTexCoord1bvOES(texture, coords) glatter_glMultiTexCoord1bvOES_ptr((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1bvOES, (GLenum texture, const GLbyte *coords))
#define glMultiTexCoord2bOES(texture, s, t) glatter_glMultiTexCoord2bOES_ptr((texture), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2bOES, (GLenum texture, GLbyte s, GLbyte t))
#define glMultiTexCoord2bvOES(texture, coords) glatter_glMultiTexCoord2bvOES_ptr((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2bvOES, (GLenum texture, const GLbyte *coords))
#define glMultiTexCoord3bOES(texture, s, t, r) glatter_glMultiTexCoord3bOES_ptr((texture), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3bOES, (GLenum texture, GLbyte s, GLbyte t, GLbyte r))
#define glMultiTexCoord3bvOES(texture, coords) glatter_glMultiTexCoord3bvOES_ptr((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3bvOES, (GLenum texture, const GLbyte *coords))
#define glMultiTexCoord4bOES(texture, s, t, r, q) glatter_glMultiTexCoord4bOES_ptr((texture), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4bOES, (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q))
#define glMultiTexCoord4bvOES(texture, coords) glatter_glMultiTexCoord4bvOES_ptr((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4bvOES, (GLenum texture, const GLbyte *coords))
#define glTexCoord1bOES(s) glatter_glTexCoord1bOES_ptr((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1bOES, (GLbyte s))
#define glTexCoord1bvOES(coords) glatter_glTexCoord1bvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1bvOES, (const GLbyte *coords))
#define glTexCoord2bOES(s, t) glatter_glTexCoord2bOES_ptr((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2bOES, (GLbyte s, GLbyte t))
#define glTexCoord2bvOES(coords) glatter_glTexCoord2bvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2bvOES, (const GLbyte *coords))
#define glTexCoord3bOES(s, t, r) glatter_glTexCoord3bOES_ptr((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3bOES, (GLbyte s, GLbyte t, GLbyte r))
#define glTexCoord3bvOES(coords) glatter_glTexCoord3bvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3bvOES, (const GLbyte *coords))
#define glTexCoord4bOES(s, t, r, q) glatter_glTexCoord4bOES_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4bOES, (GLbyte s, GLbyte t, GLbyte r, GLbyte q))
#define glTexCoord4bvOES(coords) glatter_glTexCoord4bvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4bvOES, (const GLbyte *coords))
#define glVertex2bOES(x, y) glatter_glVertex2bOES_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex2bOES, (GLbyte x, GLbyte y))
#define glVertex2bvOES(coords) glatter_glVertex2bvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex2bvOES, (const GLbyte *coords))
#define glVertex3bOES(x, y, z) glatter_glVertex3bOES_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex3bOES, (GLbyte x, GLbyte y, GLbyte z))
#define glVertex3bvOES(coords) glatter_glVertex3bvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex3bvOES, (const GLbyte *coords))
#define glVertex4bOES(x, y, z, w) glatter_glVertex4bOES_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertex4bOES, (GLbyte x, GLbyte y, GLbyte z, GLbyte w))
#define glVertex4bvOES(coords) glatter_glVertex4bvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex4bvOES, (const GLbyte *coords))
#endif // defined(GL_OES_byte_coordinates)
#if defined(GL_OES_fixed_point)
#define glAccumxOES(op, value) glatter_glAccumxOES_ptr((op), (value))
GLATTER_UBLOCK(void, APIENTRY, glAccumxOES, (GLenum op, GLfixed value))
#define glAlphaFuncxOES(func, ref) glatter_glAlphaFuncxOES_ptr((func), (ref))
GLATTER_UBLOCK(void, APIENTRY, glAlphaFuncxOES, (GLenum func, GLfixed ref))
#define glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmapxOES_ptr((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap))
GLATTER_UBLOCK(void, APIENTRY, glBitmapxOES, (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap))
#define glBlendColorxOES(red, green, blue, alpha) glatter_glBlendColorxOES_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendColorxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glClearAccumxOES(red, green, blue, alpha) glatter_glClearAccumxOES_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearAccumxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glClearColorxOES(red, green, blue, alpha) glatter_glClearColorxOES_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glClearColorxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glClearDepthxOES(depth) glatter_glClearDepthxOES_ptr((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthxOES, (GLfixed depth))
#define glClipPlanexOES(plane, equation) glatter_glClipPlanexOES_ptr((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glClipPlanexOES, (GLenum plane, const GLfixed *equation))
#define glColor3xOES(red, green, blue) glatter_glColor3xOES_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glColor3xOES, (GLfixed red, GLfixed green, GLfixed blue))
#define glColor3xvOES(components) glatter_glColor3xvOES_ptr((components))
GLATTER_UBLOCK(void, APIENTRY, glColor3xvOES, (const GLfixed *components))
#define glColor4xOES(red, green, blue, alpha) glatter_glColor4xOES_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glColor4xOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha))
#define glColor4xvOES(components) glatter_glColor4xvOES_ptr((components))
GLATTER_UBLOCK(void, APIENTRY, glColor4xvOES, (const GLfixed *components))
#define glConvolutionParameterxOES(target, pname, param) glatter_glConvolutionParameterxOES_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterxOES, (GLenum target, GLenum pname, GLfixed param))
#define glConvolutionParameterxvOES(target, pname, params) glatter_glConvolutionParameterxvOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glConvolutionParameterxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#define glDepthRangexOES(n, f) glatter_glDepthRangexOES_ptr((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangexOES, (GLfixed n, GLfixed f))
#define glEvalCoord1xOES(u) glatter_glEvalCoord1xOES_ptr((u))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1xOES, (GLfixed u))
#define glEvalCoord1xvOES(coords) glatter_glEvalCoord1xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord1xvOES, (const GLfixed *coords))
#define glEvalCoord2xOES(u, v) glatter_glEvalCoord2xOES_ptr((u), (v))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2xOES, (GLfixed u, GLfixed v))
#define glEvalCoord2xvOES(coords) glatter_glEvalCoord2xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glEvalCoord2xvOES, (const GLfixed *coords))
#define glFeedbackBufferxOES(n, type, buffer) glatter_glFeedbackBufferxOES_ptr((n), (type), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glFeedbackBufferxOES, (GLsizei n, GLenum type, const GLfixed *buffer))
#define glFogxOES(pname, param) glatter_glFogxOES_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFogxOES, (GLenum pname, GLfixed param))
#define glFogxvOES(pname, param) glatter_glFogxvOES_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFogxvOES, (GLenum pname, const GLfixed *param))
#define glFrustumxOES(l, r, b, t, n, f) glatter_glFrustumxOES_ptr((l), (r), (b), (t), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glFrustumxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#define glGetClipPlanexOES(plane, equation) glatter_glGetClipPlanexOES_ptr((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glGetClipPlanexOES, (GLenum plane, GLfixed *equation))
#define glGetConvolutionParameterxvOES(target, pname, params) glatter_glGetConvolutionParameterxvOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetConvolutionParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#define glGetFixedvOES(pname, params) glatter_glGetFixedvOES_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFixedvOES, (GLenum pname, GLfixed *params))
#define glGetHistogramParameterxvOES(target, pname, params) glatter_glGetHistogramParameterxvOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetHistogramParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#define glGetLightxOES(light, pname, params) glatter_glGetLightxOES_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetLightxOES, (GLenum light, GLenum pname, GLfixed *params))
#define glGetMapxvOES(target, query, v) glatter_glGetMapxvOES_ptr((target), (query), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetMapxvOES, (GLenum target, GLenum query, GLfixed *v))
#define glGetMaterialxOES(face, pname, param) glatter_glGetMaterialxOES_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetMaterialxOES, (GLenum face, GLenum pname, GLfixed param))
#define glGetPixelMapxv(map, size, values) glatter_glGetPixelMapxv_ptr((map), (size), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelMapxv, (GLenum map, GLint size, GLfixed *values))
#define glGetTexEnvxvOES(target, pname, params) glatter_glGetTexEnvxvOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexEnvxvOES, (GLenum target, GLenum pname, GLfixed *params))
#define glGetTexGenxvOES(coord, pname, params) glatter_glGetTexGenxvOES_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexGenxvOES, (GLenum coord, GLenum pname, GLfixed *params))
#define glGetTexLevelParameterxvOES(target, level, pname, params) glatter_glGetTexLevelParameterxvOES_ptr((target), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexLevelParameterxvOES, (GLenum target, GLint level, GLenum pname, GLfixed *params))
#define glGetTexParameterxvOES(target, pname, params) glatter_glGetTexParameterxvOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterxvOES, (GLenum target, GLenum pname, GLfixed *params))
#define glIndexxOES(component) glatter_glIndexxOES_ptr((component))
GLATTER_UBLOCK(void, APIENTRY, glIndexxOES, (GLfixed component))
#define glIndexxvOES(component) glatter_glIndexxvOES_ptr((component))
GLATTER_UBLOCK(void, APIENTRY, glIndexxvOES, (const GLfixed *component))
#define glLightModelxOES(pname, param) glatter_glLightModelxOES_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightModelxOES, (GLenum pname, GLfixed param))
#define glLightModelxvOES(pname, param) glatter_glLightModelxvOES_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightModelxvOES, (GLenum pname, const GLfixed *param))
#define glLightxOES(light, pname, param) glatter_glLightxOES_ptr((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightxOES, (GLenum light, GLenum pname, GLfixed param))
#define glLightxvOES(light, pname, params) glatter_glLightxvOES_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glLightxvOES, (GLenum light, GLenum pname, const GLfixed *params))
#define glLineWidthxOES(width) glatter_glLineWidthxOES_ptr((width))
GLATTER_UBLOCK(void, APIENTRY, glLineWidthxOES, (GLfixed width))
#define glLoadMatrixxOES(m) glatter_glLoadMatrixxOES_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadMatrixxOES, (const GLfixed *m))
#define glLoadTransposeMatrixxOES(m) glatter_glLoadTransposeMatrixxOES_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixxOES, (const GLfixed *m))
#define glMap1xOES(target, u1, u2, stride, order, points) glatter_glMap1xOES_ptr((target), (u1), (u2), (stride), (order), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap1xOES, (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points))
#define glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2xOES_ptr((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points))
GLATTER_UBLOCK(void, APIENTRY, glMap2xOES, (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points))
#define glMapGrid1xOES(n, u1, u2) glatter_glMapGrid1xOES_ptr((n), (u1), (u2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid1xOES, (GLint n, GLfixed u1, GLfixed u2))
#define glMapGrid2xOES(n, u1, u2, v1, v2) glatter_glMapGrid2xOES_ptr((n), (u1), (u2), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glMapGrid2xOES, (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2))
#define glMaterialxOES(face, pname, param) glatter_glMaterialxOES_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMaterialxOES, (GLenum face, GLenum pname, GLfixed param))
#define glMaterialxvOES(face, pname, param) glatter_glMaterialxvOES_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glMaterialxvOES, (GLenum face, GLenum pname, const GLfixed *param))
#define glMultMatrixxOES(m) glatter_glMultMatrixxOES_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glMultMatrixxOES, (const GLfixed *m))
#define glMultTransposeMatrixxOES(m) glatter_glMultTransposeMatrixxOES_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixxOES, (const GLfixed *m))
#define glMultiTexCoord1xOES(texture, s) glatter_glMultiTexCoord1xOES_ptr((texture), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1xOES, (GLenum texture, GLfixed s))
#define glMultiTexCoord1xvOES(texture, coords) glatter_glMultiTexCoord1xvOES_ptr((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1xvOES, (GLenum texture, const GLfixed *coords))
#define glMultiTexCoord2xOES(texture, s, t) glatter_glMultiTexCoord2xOES_ptr((texture), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2xOES, (GLenum texture, GLfixed s, GLfixed t))
#define glMultiTexCoord2xvOES(texture, coords) glatter_glMultiTexCoord2xvOES_ptr((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2xvOES, (GLenum texture, const GLfixed *coords))
#define glMultiTexCoord3xOES(texture, s, t, r) glatter_glMultiTexCoord3xOES_ptr((texture), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3xOES, (GLenum texture, GLfixed s, GLfixed t, GLfixed r))
#define glMultiTexCoord3xvOES(texture, coords) glatter_glMultiTexCoord3xvOES_ptr((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3xvOES, (GLenum texture, const GLfixed *coords))
#define glMultiTexCoord4xOES(texture, s, t, r, q) glatter_glMultiTexCoord4xOES_ptr((texture), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4xOES, (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#define glMultiTexCoord4xvOES(texture, coords) glatter_glMultiTexCoord4xvOES_ptr((texture), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4xvOES, (GLenum texture, const GLfixed *coords))
#define glNormal3xOES(nx, ny, nz) glatter_glNormal3xOES_ptr((nx), (ny), (nz))
GLATTER_UBLOCK(void, APIENTRY, glNormal3xOES, (GLfixed nx, GLfixed ny, GLfixed nz))
#define glNormal3xvOES(coords) glatter_glNormal3xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glNormal3xvOES, (const GLfixed *coords))
#define glOrthoxOES(l, r, b, t, n, f) glatter_glOrthoxOES_ptr((l), (r), (b), (t), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glOrthoxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f))
#define glPassThroughxOES(token) glatter_glPassThroughxOES_ptr((token))
GLATTER_UBLOCK(void, APIENTRY, glPassThroughxOES, (GLfixed token))
#define glPixelMapx(map, size, values) glatter_glPixelMapx_ptr((map), (size), (values))
GLATTER_UBLOCK(void, APIENTRY, glPixelMapx, (GLenum map, GLint size, const GLfixed *values))
#define glPixelStorex(pname, param) glatter_glPixelStorex_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelStorex, (GLenum pname, GLfixed param))
#define glPixelTransferxOES(pname, param) glatter_glPixelTransferxOES_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTransferxOES, (GLenum pname, GLfixed param))
#define glPixelZoomxOES(xfactor, yfactor) glatter_glPixelZoomxOES_ptr((xfactor), (yfactor))
GLATTER_UBLOCK(void, APIENTRY, glPixelZoomxOES, (GLfixed xfactor, GLfixed yfactor))
#define glPointParameterxvOES(pname, params) glatter_glPointParameterxvOES_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterxvOES, (GLenum pname, const GLfixed *params))
#define glPointSizexOES(size) glatter_glPointSizexOES_ptr((size))
GLATTER_UBLOCK(void, APIENTRY, glPointSizexOES, (GLfixed size))
#define glPolygonOffsetxOES(factor, units) glatter_glPolygonOffsetxOES_ptr((factor), (units))
GLATTER_UBLOCK(void, APIENTRY, glPolygonOffsetxOES, (GLfixed factor, GLfixed units))
#define glPrioritizeTexturesxOES(n, textures, priorities) glatter_glPrioritizeTexturesxOES_ptr((n), (textures), (priorities))
GLATTER_UBLOCK(void, APIENTRY, glPrioritizeTexturesxOES, (GLsizei n, const GLuint *textures, const GLfixed *priorities))
#define glRasterPos2xOES(x, y) glatter_glRasterPos2xOES_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2xOES, (GLfixed x, GLfixed y))
#define glRasterPos2xvOES(coords) glatter_glRasterPos2xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos2xvOES, (const GLfixed *coords))
#define glRasterPos3xOES(x, y, z) glatter_glRasterPos3xOES_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3xOES, (GLfixed x, GLfixed y, GLfixed z))
#define glRasterPos3xvOES(coords) glatter_glRasterPos3xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos3xvOES, (const GLfixed *coords))
#define glRasterPos4xOES(x, y, z, w) glatter_glRasterPos4xOES_ptr((x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4xOES, (GLfixed x, GLfixed y, GLfixed z, GLfixed w))
#define glRasterPos4xvOES(coords) glatter_glRasterPos4xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glRasterPos4xvOES, (const GLfixed *coords))
#define glRectxOES(x1, y1, x2, y2) glatter_glRectxOES_ptr((x1), (y1), (x2), (y2))
GLATTER_UBLOCK(void, APIENTRY, glRectxOES, (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2))
#define glRectxvOES(v1, v2) glatter_glRectxvOES_ptr((v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glRectxvOES, (const GLfixed *v1, const GLfixed *v2))
#define glRotatexOES(angle, x, y, z) glatter_glRotatexOES_ptr((angle), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glRotatexOES, (GLfixed angle, GLfixed x, GLfixed y, GLfixed z))
#define glScalexOES(x, y, z) glatter_glScalexOES_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glScalexOES, (GLfixed x, GLfixed y, GLfixed z))
#define glTexCoord1xOES(s) glatter_glTexCoord1xOES_ptr((s))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1xOES, (GLfixed s))
#define glTexCoord1xvOES(coords) glatter_glTexCoord1xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord1xvOES, (const GLfixed *coords))
#define glTexCoord2xOES(s, t) glatter_glTexCoord2xOES_ptr((s), (t))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2xOES, (GLfixed s, GLfixed t))
#define glTexCoord2xvOES(coords) glatter_glTexCoord2xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2xvOES, (const GLfixed *coords))
#define glTexCoord3xOES(s, t, r) glatter_glTexCoord3xOES_ptr((s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3xOES, (GLfixed s, GLfixed t, GLfixed r))
#define glTexCoord3xvOES(coords) glatter_glTexCoord3xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord3xvOES, (const GLfixed *coords))
#define glTexCoord4xOES(s, t, r, q) glatter_glTexCoord4xOES_ptr((s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4xOES, (GLfixed s, GLfixed t, GLfixed r, GLfixed q))
#define glTexCoord4xvOES(coords) glatter_glTexCoord4xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4xvOES, (const GLfixed *coords))
#define glTexEnvxOES(target, pname, param) glatter_glTexEnvxOES_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvxOES, (GLenum target, GLenum pname, GLfixed param))
#define glTexEnvxvOES(target, pname, params) glatter_glTexEnvxvOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexEnvxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#define glTexGenxOES(coord, pname, param) glatter_glTexGenxOES_ptr((coord), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexGenxOES, (GLenum coord, GLenum pname, GLfixed param))
#define glTexGenxvOES(coord, pname, params) glatter_glTexGenxvOES_ptr((coord), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexGenxvOES, (GLenum coord, GLenum pname, const GLfixed *params))
#define glTexParameterxOES(target, pname, param) glatter_glTexParameterxOES_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterxOES, (GLenum target, GLenum pname, GLfixed param))
#define glTexParameterxvOES(target, pname, params) glatter_glTexParameterxvOES_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterxvOES, (GLenum target, GLenum pname, const GLfixed *params))
#define glTranslatexOES(x, y, z) glatter_glTranslatexOES_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTranslatexOES, (GLfixed x, GLfixed y, GLfixed z))
#define glVertex2xOES(x) glatter_glVertex2xOES_ptr((x))
GLATTER_UBLOCK(void, APIENTRY, glVertex2xOES, (GLfixed x))
#define glVertex2xvOES(coords) glatter_glVertex2xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex2xvOES, (const GLfixed *coords))
#define glVertex3xOES(x, y) glatter_glVertex3xOES_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertex3xOES, (GLfixed x, GLfixed y))
#define glVertex3xvOES(coords) glatter_glVertex3xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex3xvOES, (const GLfixed *coords))
#define glVertex4xOES(x, y, z) glatter_glVertex4xOES_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertex4xOES, (GLfixed x, GLfixed y, GLfixed z))
#define glVertex4xvOES(coords) glatter_glVertex4xvOES_ptr((coords))
GLATTER_UBLOCK(void, APIENTRY, glVertex4xvOES, (const GLfixed *coords))
#endif // defined(GL_OES_fixed_point)
#if defined(GL_OES_query_matrix)
#define glQueryMatrixxOES(mantissa, exponent) glatter_glQueryMatrixxOES_ptr((mantissa), (exponent))
GLATTER_UBLOCK(GLbitfield, APIENTRY, glQueryMatrixxOES, (GLfixed *mantissa, GLint *exponent))
#endif // defined(GL_OES_query_matrix)
#if defined(GL_OES_single_precision)
#define glClearDepthfOES(depth) glatter_glClearDepthfOES_ptr((depth))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthfOES, (GLclampf depth))
#define glClipPlanefOES(plane, equation) glatter_glClipPlanefOES_ptr((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glClipPlanefOES, (GLenum plane, const GLfloat *equation))
#define glDepthRangefOES(n, f) glatter_glDepthRangefOES_ptr((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangefOES, (GLclampf n, GLclampf f))
#define glFrustumfOES(l, r, b, t, n, f) glatter_glFrustumfOES_ptr((l), (r), (b), (t), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glFrustumfOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#define glGetClipPlanefOES(plane, equation) glatter_glGetClipPlanefOES_ptr((plane), (equation))
GLATTER_UBLOCK(void, APIENTRY, glGetClipPlanefOES, (GLenum plane, GLfloat *equation))
#define glOrthofOES(l, r, b, t, n, f) glatter_glOrthofOES_ptr((l), (r), (b), (t), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glOrthofOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f))
#endif // defined(GL_OES_single_precision)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_ptr((target), (attachment), (texture), (level), (baseViewIndex), (numViews))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews))
#endif // defined(GL_OVR_multiview)
#if defined(GL_PGI_misc_hints)
#define glHintPGI(target, mode) glatter_glHintPGI_ptr((target), (mode))
GLATTER_UBLOCK(void, APIENTRY, glHintPGI, (GLenum target, GLint mode))
#endif // defined(GL_PGI_misc_hints)
#if defined(GL_SGIS_detail_texture)
#define glDetailTexFuncSGIS(target, n, points) glatter_glDetailTexFuncSGIS_ptr((target), (n), (points))
GLATTER_UBLOCK(void, APIENTRY, glDetailTexFuncSGIS, (GLenum target, GLsizei n, const GLfloat *points))
#define glGetDetailTexFuncSGIS(target, points) glatter_glGetDetailTexFuncSGIS_ptr((target), (points))
GLATTER_UBLOCK(void, APIENTRY, glGetDetailTexFuncSGIS, (GLenum target, GLfloat *points))
#endif // defined(GL_SGIS_detail_texture)
#if defined(GL_SGIS_fog_function)
#define glFogFuncSGIS(n, points) glatter_glFogFuncSGIS_ptr((n), (points))
GLATTER_UBLOCK(void, APIENTRY, glFogFuncSGIS, (GLsizei n, const GLfloat *points))
#define glGetFogFuncSGIS(points) glatter_glGetFogFuncSGIS_ptr((points))
GLATTER_UBLOCK(void, APIENTRY, glGetFogFuncSGIS, (GLfloat *points))
#endif // defined(GL_SGIS_fog_function)
#if defined(GL_SGIS_multisample)
#define glSampleMaskSGIS(value, invert) glatter_glSampleMaskSGIS_ptr((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaskSGIS, (GLclampf value, GLboolean invert))
#define glSamplePatternSGIS(pattern) glatter_glSamplePatternSGIS_ptr((pattern))
GLATTER_UBLOCK(void, APIENTRY, glSamplePatternSGIS, (GLenum pattern))
#endif // defined(GL_SGIS_multisample)
#if defined(GL_SGIS_pixel_texture)
#define glGetPixelTexGenParameterfvSGIS(pname, params) glatter_glGetPixelTexGenParameterfvSGIS_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTexGenParameterfvSGIS, (GLenum pname, GLfloat *params))
#define glGetPixelTexGenParameterivSGIS(pname, params) glatter_glGetPixelTexGenParameterivSGIS_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetPixelTexGenParameterivSGIS, (GLenum pname, GLint *params))
#define glPixelTexGenParameterfSGIS(pname, param) glatter_glPixelTexGenParameterfSGIS_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameterfSGIS, (GLenum pname, GLfloat param))
#define glPixelTexGenParameterfvSGIS(pname, params) glatter_glPixelTexGenParameterfvSGIS_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameterfvSGIS, (GLenum pname, const GLfloat *params))
#define glPixelTexGenParameteriSGIS(pname, param) glatter_glPixelTexGenParameteriSGIS_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameteriSGIS, (GLenum pname, GLint param))
#define glPixelTexGenParameterivSGIS(pname, params) glatter_glPixelTexGenParameterivSGIS_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenParameterivSGIS, (GLenum pname, const GLint *params))
#endif // defined(GL_SGIS_pixel_texture)
#if defined(GL_SGIS_point_parameters)
#define glPointParameterfSGIS(pname, param) glatter_glPointParameterfSGIS_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfSGIS, (GLenum pname, GLfloat param))
#define glPointParameterfvSGIS(pname, params) glatter_glPointParameterfvSGIS_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfvSGIS, (GLenum pname, const GLfloat *params))
#endif // defined(GL_SGIS_point_parameters)
#if defined(GL_SGIS_sharpen_texture)
#define glGetSharpenTexFuncSGIS(target, points) glatter_glGetSharpenTexFuncSGIS_ptr((target), (points))
GLATTER_UBLOCK(void, APIENTRY, glGetSharpenTexFuncSGIS, (GLenum target, GLfloat *points))
#define glSharpenTexFuncSGIS(target, n, points) glatter_glSharpenTexFuncSGIS_ptr((target), (n), (points))
GLATTER_UBLOCK(void, APIENTRY, glSharpenTexFuncSGIS, (GLenum target, GLsizei n, const GLfloat *points))
#endif // defined(GL_SGIS_sharpen_texture)
#if defined(GL_SGIS_texture4D)
#define glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) glatter_glTexImage4DSGIS_ptr((target), (level), (internalformat), (width), (height), (depth), (size4d), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage4DSGIS, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) glatter_glTexSubImage4DSGIS_ptr((target), (level), (xoffset), (yoffset), (zoffset), (woffset), (width), (height), (depth), (size4d), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage4DSGIS, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_SGIS_texture4D)
#if defined(GL_SGIS_texture_color_mask)
#define glTextureColorMaskSGIS(red, green, blue, alpha) glatter_glTextureColorMaskSGIS_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glTextureColorMaskSGIS, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))
#endif // defined(GL_SGIS_texture_color_mask)
#if defined(GL_SGIS_texture_filter4)
#define glGetTexFilterFuncSGIS(target, filter, weights) glatter_glGetTexFilterFuncSGIS_ptr((target), (filter), (weights))
GLATTER_UBLOCK(void, APIENTRY, glGetTexFilterFuncSGIS, (GLenum target, GLenum filter, GLfloat *weights))
#define glTexFilterFuncSGIS(target, filter, n, weights) glatter_glTexFilterFuncSGIS_ptr((target), (filter), (n), (weights))
GLATTER_UBLOCK(void, APIENTRY, glTexFilterFuncSGIS, (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights))
#endif // defined(GL_SGIS_texture_filter4)
#if defined(GL_SGIX_async)
#define glAsyncMarkerSGIX(marker) glatter_glAsyncMarkerSGIX_ptr((marker))
GLATTER_UBLOCK(void, APIENTRY, glAsyncMarkerSGIX, (GLuint marker))
#define glDeleteAsyncMarkersSGIX(marker, range) glatter_glDeleteAsyncMarkersSGIX_ptr((marker), (range))
GLATTER_UBLOCK(void, APIENTRY, glDeleteAsyncMarkersSGIX, (GLuint marker, GLsizei range))
#define glFinishAsyncSGIX(markerp) glatter_glFinishAsyncSGIX_ptr((markerp))
GLATTER_UBLOCK(GLint, APIENTRY, glFinishAsyncSGIX, (GLuint *markerp))
#define glGenAsyncMarkersSGIX(range) glatter_glGenAsyncMarkersSGIX_ptr((range))
GLATTER_UBLOCK(GLuint, APIENTRY, glGenAsyncMarkersSGIX, (GLsizei range))
#define glIsAsyncMarkerSGIX(marker) glatter_glIsAsyncMarkerSGIX_ptr((marker))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsAsyncMarkerSGIX, (GLuint marker))
#define glPollAsyncSGIX(markerp) glatter_glPollAsyncSGIX_ptr((markerp))
GLATTER_UBLOCK(GLint, APIENTRY, glPollAsyncSGIX, (GLuint *markerp))
#endif // defined(GL_SGIX_async)
#if defined(GL_SGIX_flush_raster)
#define glFlushRasterSGIX() glatter_glFlushRasterSGIX_ptr()
GLATTER_UBLOCK(void, APIENTRY, glFlushRasterSGIX, (void))
#endif // defined(GL_SGIX_flush_raster)
#if defined(GL_SGIX_fragment_lighting)
#define glFragmentColorMaterialSGIX(face, mode) glatter_glFragmentColorMaterialSGIX_ptr((face), (mode))
GLATTER_UBLOCK(void, APIENTRY, glFragmentColorMaterialSGIX, (GLenum face, GLenum mode))
#define glFragmentLightModelfSGIX(pname, param) glatter_glFragmentLightModelfSGIX_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModelfSGIX, (GLenum pname, GLfloat param))
#define glFragmentLightModelfvSGIX(pname, params) glatter_glFragmentLightModelfvSGIX_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModelfvSGIX, (GLenum pname, const GLfloat *params))
#define glFragmentLightModeliSGIX(pname, param) glatter_glFragmentLightModeliSGIX_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModeliSGIX, (GLenum pname, GLint param))
#define glFragmentLightModelivSGIX(pname, params) glatter_glFragmentLightModelivSGIX_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightModelivSGIX, (GLenum pname, const GLint *params))
#define glFragmentLightfSGIX(light, pname, param) glatter_glFragmentLightfSGIX_ptr((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightfSGIX, (GLenum light, GLenum pname, GLfloat param))
#define glFragmentLightfvSGIX(light, pname, params) glatter_glFragmentLightfvSGIX_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightfvSGIX, (GLenum light, GLenum pname, const GLfloat *params))
#define glFragmentLightiSGIX(light, pname, param) glatter_glFragmentLightiSGIX_ptr((light), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightiSGIX, (GLenum light, GLenum pname, GLint param))
#define glFragmentLightivSGIX(light, pname, params) glatter_glFragmentLightivSGIX_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentLightivSGIX, (GLenum light, GLenum pname, const GLint *params))
#define glFragmentMaterialfSGIX(face, pname, param) glatter_glFragmentMaterialfSGIX_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialfSGIX, (GLenum face, GLenum pname, GLfloat param))
#define glFragmentMaterialfvSGIX(face, pname, params) glatter_glFragmentMaterialfvSGIX_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialfvSGIX, (GLenum face, GLenum pname, const GLfloat *params))
#define glFragmentMaterialiSGIX(face, pname, param) glatter_glFragmentMaterialiSGIX_ptr((face), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialiSGIX, (GLenum face, GLenum pname, GLint param))
#define glFragmentMaterialivSGIX(face, pname, params) glatter_glFragmentMaterialivSGIX_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glFragmentMaterialivSGIX, (GLenum face, GLenum pname, const GLint *params))
#define glGetFragmentLightfvSGIX(light, pname, params) glatter_glGetFragmentLightfvSGIX_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentLightfvSGIX, (GLenum light, GLenum pname, GLfloat *params))
#define glGetFragmentLightivSGIX(light, pname, params) glatter_glGetFragmentLightivSGIX_ptr((light), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentLightivSGIX, (GLenum light, GLenum pname, GLint *params))
#define glGetFragmentMaterialfvSGIX(face, pname, params) glatter_glGetFragmentMaterialfvSGIX_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentMaterialfvSGIX, (GLenum face, GLenum pname, GLfloat *params))
#define glGetFragmentMaterialivSGIX(face, pname, params) glatter_glGetFragmentMaterialivSGIX_ptr((face), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFragmentMaterialivSGIX, (GLenum face, GLenum pname, GLint *params))
#define glLightEnviSGIX(pname, param) glatter_glLightEnviSGIX_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glLightEnviSGIX, (GLenum pname, GLint param))
#endif // defined(GL_SGIX_fragment_lighting)
#if defined(GL_SGIX_framezoom)
#define glFrameZoomSGIX(factor) glatter_glFrameZoomSGIX_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glFrameZoomSGIX, (GLint factor))
#endif // defined(GL_SGIX_framezoom)
#if defined(GL_SGIX_igloo_interface)
#define glIglooInterfaceSGIX(pname, params) glatter_glIglooInterfaceSGIX_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glIglooInterfaceSGIX, (GLenum pname, const void *params))
#endif // defined(GL_SGIX_igloo_interface)
#if defined(GL_SGIX_instruments)
#define glGetInstrumentsSGIX() glatter_glGetInstrumentsSGIX_ptr()
GLATTER_UBLOCK(GLint, APIENTRY, glGetInstrumentsSGIX, (void))
#define glInstrumentsBufferSGIX(size, buffer) glatter_glInstrumentsBufferSGIX_ptr((size), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glInstrumentsBufferSGIX, (GLsizei size, GLint *buffer))
#define glPollInstrumentsSGIX(marker_p) glatter_glPollInstrumentsSGIX_ptr((marker_p))
GLATTER_UBLOCK(GLint, APIENTRY, glPollInstrumentsSGIX, (GLint *marker_p))
#define glReadInstrumentsSGIX(marker) glatter_glReadInstrumentsSGIX_ptr((marker))
GLATTER_UBLOCK(void, APIENTRY, glReadInstrumentsSGIX, (GLint marker))
#define glStartInstrumentsSGIX() glatter_glStartInstrumentsSGIX_ptr()
GLATTER_UBLOCK(void, APIENTRY, glStartInstrumentsSGIX, (void))
#define glStopInstrumentsSGIX(marker) glatter_glStopInstrumentsSGIX_ptr((marker))
GLATTER_UBLOCK(void, APIENTRY, glStopInstrumentsSGIX, (GLint marker))
#endif // defined(GL_SGIX_instruments)
#if defined(GL_SGIX_list_priority)
#define glGetListParameterfvSGIX(list, pname, params) glatter_glGetListParameterfvSGIX_ptr((list), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetListParameterfvSGIX, (GLuint list, GLenum pname, GLfloat *params))
#define glGetListParameterivSGIX(list, pname, params) glatter_glGetListParameterivSGIX_ptr((list), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetListParameterivSGIX, (GLuint list, GLenum pname, GLint *params))
#define glListParameterfSGIX(list, pname, param) glatter_glListParameterfSGIX_ptr((list), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glListParameterfSGIX, (GLuint list, GLenum pname, GLfloat param))
#define glListParameterfvSGIX(list, pname, params) glatter_glListParameterfvSGIX_ptr((list), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glListParameterfvSGIX, (GLuint list, GLenum pname, const GLfloat *params))
#define glListParameteriSGIX(list, pname, param) glatter_glListParameteriSGIX_ptr((list), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glListParameteriSGIX, (GLuint list, GLenum pname, GLint param))
#define glListParameterivSGIX(list, pname, params) glatter_glListParameterivSGIX_ptr((list), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glListParameterivSGIX, (GLuint list, GLenum pname, const GLint *params))
#endif // defined(GL_SGIX_list_priority)
#if defined(GL_SGIX_pixel_texture)
#define glPixelTexGenSGIX(mode) glatter_glPixelTexGenSGIX_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glPixelTexGenSGIX, (GLenum mode))
#endif // defined(GL_SGIX_pixel_texture)
#if defined(GL_SGIX_polynomial_ffd)
#define glDeformSGIX(mask) glatter_glDeformSGIX_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glDeformSGIX, (GLbitfield mask))
#define glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3dSGIX_ptr((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points))
GLATTER_UBLOCK(void, APIENTRY, glDeformationMap3dSGIX, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points))
#define glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3fSGIX_ptr((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points))
GLATTER_UBLOCK(void, APIENTRY, glDeformationMap3fSGIX, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points))
#define glLoadIdentityDeformationMapSGIX(mask) glatter_glLoadIdentityDeformationMapSGIX_ptr((mask))
GLATTER_UBLOCK(void, APIENTRY, glLoadIdentityDeformationMapSGIX, (GLbitfield mask))
#endif // defined(GL_SGIX_polynomial_ffd)
#if defined(GL_SGIX_reference_plane)
#define glReferencePlaneSGIX(equation) glatter_glReferencePlaneSGIX_ptr((equation))
GLATTER_UBLOCK(void, APIENTRY, glReferencePlaneSGIX, (const GLdouble *equation))
#endif // defined(GL_SGIX_reference_plane)
#if defined(GL_SGIX_sprite)
#define glSpriteParameterfSGIX(pname, param) glatter_glSpriteParameterfSGIX_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameterfSGIX, (GLenum pname, GLfloat param))
#define glSpriteParameterfvSGIX(pname, params) glatter_glSpriteParameterfvSGIX_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameterfvSGIX, (GLenum pname, const GLfloat *params))
#define glSpriteParameteriSGIX(pname, param) glatter_glSpriteParameteriSGIX_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameteriSGIX, (GLenum pname, GLint param))
#define glSpriteParameterivSGIX(pname, params) glatter_glSpriteParameterivSGIX_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glSpriteParameterivSGIX, (GLenum pname, const GLint *params))
#endif // defined(GL_SGIX_sprite)
#if defined(GL_SGIX_tag_sample_buffer)
#define glTagSampleBufferSGIX() glatter_glTagSampleBufferSGIX_ptr()
GLATTER_UBLOCK(void, APIENTRY, glTagSampleBufferSGIX, (void))
#endif // defined(GL_SGIX_tag_sample_buffer)
#if defined(GL_SGI_color_table)
#define glColorTableParameterfvSGI(target, pname, params) glatter_glColorTableParameterfvSGI_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameterfvSGI, (GLenum target, GLenum pname, const GLfloat *params))
#define glColorTableParameterivSGI(target, pname, params) glatter_glColorTableParameterivSGI_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glColorTableParameterivSGI, (GLenum target, GLenum pname, const GLint *params))
#define glColorTableSGI(target, internalformat, width, format, type, table) glatter_glColorTableSGI_ptr((target), (internalformat), (width), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glColorTableSGI, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table))
#define glCopyColorTableSGI(target, internalformat, x, y, width) glatter_glCopyColorTableSGI_ptr((target), (internalformat), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyColorTableSGI, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width))
#define glGetColorTableParameterfvSGI(target, pname, params) glatter_glGetColorTableParameterfvSGI_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterfvSGI, (GLenum target, GLenum pname, GLfloat *params))
#define glGetColorTableParameterivSGI(target, pname, params) glatter_glGetColorTableParameterivSGI_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableParameterivSGI, (GLenum target, GLenum pname, GLint *params))
#define glGetColorTableSGI(target, format, type, table) glatter_glGetColorTableSGI_ptr((target), (format), (type), (table))
GLATTER_UBLOCK(void, APIENTRY, glGetColorTableSGI, (GLenum target, GLenum format, GLenum type, void *table))
#endif // defined(GL_SGI_color_table)
#if defined(GL_SUNX_constant_data)
#define glFinishTextureSUNX() glatter_glFinishTextureSUNX_ptr()
GLATTER_UBLOCK(void, APIENTRY, glFinishTextureSUNX, (void))
#endif // defined(GL_SUNX_constant_data)
#if defined(GL_SUN_global_alpha)
#define glGlobalAlphaFactorbSUN(factor) glatter_glGlobalAlphaFactorbSUN_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorbSUN, (GLbyte factor))
#define glGlobalAlphaFactordSUN(factor) glatter_glGlobalAlphaFactordSUN_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactordSUN, (GLdouble factor))
#define glGlobalAlphaFactorfSUN(factor) glatter_glGlobalAlphaFactorfSUN_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorfSUN, (GLfloat factor))
#define glGlobalAlphaFactoriSUN(factor) glatter_glGlobalAlphaFactoriSUN_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactoriSUN, (GLint factor))
#define glGlobalAlphaFactorsSUN(factor) glatter_glGlobalAlphaFactorsSUN_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorsSUN, (GLshort factor))
#define glGlobalAlphaFactorubSUN(factor) glatter_glGlobalAlphaFactorubSUN_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorubSUN, (GLubyte factor))
#define glGlobalAlphaFactoruiSUN(factor) glatter_glGlobalAlphaFactoruiSUN_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactoruiSUN, (GLuint factor))
#define glGlobalAlphaFactorusSUN(factor) glatter_glGlobalAlphaFactorusSUN_ptr((factor))
GLATTER_UBLOCK(void, APIENTRY, glGlobalAlphaFactorusSUN, (GLushort factor))
#endif // defined(GL_SUN_global_alpha)
#if defined(GL_SUN_mesh_array)
#define glDrawMeshArraysSUN(mode, first, count, width) glatter_glDrawMeshArraysSUN_ptr((mode), (first), (count), (width))
GLATTER_UBLOCK(void, APIENTRY, glDrawMeshArraysSUN, (GLenum mode, GLint first, GLsizei count, GLsizei width))
#endif // defined(GL_SUN_mesh_array)
#if defined(GL_SUN_triangle_list)
#define glReplacementCodePointerSUN(type, stride, pointer) glatter_glReplacementCodePointerSUN_ptr((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodePointerSUN, (GLenum type, GLsizei stride, const void **pointer))
#define glReplacementCodeubSUN(code) glatter_glReplacementCodeubSUN_ptr((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeubSUN, (GLubyte code))
#define glReplacementCodeubvSUN(code) glatter_glReplacementCodeubvSUN_ptr((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeubvSUN, (const GLubyte *code))
#define glReplacementCodeuiSUN(code) glatter_glReplacementCodeuiSUN_ptr((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiSUN, (GLuint code))
#define glReplacementCodeuivSUN(code) glatter_glReplacementCodeuivSUN_ptr((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuivSUN, (const GLuint *code))
#define glReplacementCodeusSUN(code) glatter_glReplacementCodeusSUN_ptr((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeusSUN, (GLushort code))
#define glReplacementCodeusvSUN(code) glatter_glReplacementCodeusvSUN_ptr((code))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeusvSUN, (const GLushort *code))
#endif // defined(GL_SUN_triangle_list)
#if defined(GL_SUN_vertex)
#define glColor3fVertex3fSUN(r, g, b, x, y, z) glatter_glColor3fVertex3fSUN_ptr((r), (g), (b), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glColor3fVertex3fSUN, (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z))
#define glColor3fVertex3fvSUN(c, v) glatter_glColor3fVertex3fvSUN_ptr((c), (v))
GLATTER_UBLOCK(void, APIENTRY, glColor3fVertex3fvSUN, (const GLfloat *c, const GLfloat *v))
#define glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z) glatter_glColor4fNormal3fVertex3fSUN_ptr((r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glColor4fNormal3fVertex3fSUN, (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glColor4fNormal3fVertex3fvSUN(c, n, v) glatter_glColor4fNormal3fVertex3fvSUN_ptr((c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glColor4fNormal3fVertex3fvSUN, (const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glColor4ubVertex2fSUN(r, g, b, a, x, y) glatter_glColor4ubVertex2fSUN_ptr((r), (g), (b), (a), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex2fSUN, (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y))
#define glColor4ubVertex2fvSUN(c, v) glatter_glColor4ubVertex2fvSUN_ptr((c), (v))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex2fvSUN, (const GLubyte *c, const GLfloat *v))
#define glColor4ubVertex3fSUN(r, g, b, a, x, y, z) glatter_glColor4ubVertex3fSUN_ptr((r), (g), (b), (a), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex3fSUN, (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z))
#define glColor4ubVertex3fvSUN(c, v) glatter_glColor4ubVertex3fvSUN_ptr((c), (v))
GLATTER_UBLOCK(void, APIENTRY, glColor4ubVertex3fvSUN, (const GLubyte *c, const GLfloat *v))
#define glNormal3fVertex3fSUN(nx, ny, nz, x, y, z) glatter_glNormal3fVertex3fSUN_ptr((nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glNormal3fVertex3fSUN, (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glNormal3fVertex3fvSUN(n, v) glatter_glNormal3fVertex3fvSUN_ptr((n), (v))
GLATTER_UBLOCK(void, APIENTRY, glNormal3fVertex3fvSUN, (const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z) glatter_glReplacementCodeuiColor3fVertex3fSUN_ptr((rc), (r), (g), (b), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor3fVertex3fSUN, (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor3fVertex3fvSUN_ptr((rc), (c), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor3fVertex3fvSUN, (const GLuint *rc, const GLfloat *c, const GLfloat *v))
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiColor4fNormal3fVertex3fSUN_ptr((rc), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4fNormal3fVertex3fSUN, (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v) glatter_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_ptr((rc), (c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4fNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z) glatter_glReplacementCodeuiColor4ubVertex3fSUN_ptr((rc), (r), (g), (b), (a), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4ubVertex3fSUN, (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor4ubVertex3fvSUN_ptr((rc), (c), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiColor4ubVertex3fvSUN, (const GLuint *rc, const GLubyte *c, const GLfloat *v))
#define glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiNormal3fVertex3fSUN_ptr((rc), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiNormal3fVertex3fSUN, (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v) glatter_glReplacementCodeuiNormal3fVertex3fvSUN_ptr((rc), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_ptr((rc), (s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ptr((rc), (tc), (c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_ptr((rc), (s), (t), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ptr((rc), (tc), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v))
#define glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z) glatter_glReplacementCodeuiTexCoord2fVertex3fSUN_ptr((rc), (s), (t), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v) glatter_glReplacementCodeuiTexCoord2fVertex3fvSUN_ptr((rc), (tc), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiTexCoord2fVertex3fvSUN, (const GLuint *rc, const GLfloat *tc, const GLfloat *v))
#define glReplacementCodeuiVertex3fSUN(rc, x, y, z) glatter_glReplacementCodeuiVertex3fSUN_ptr((rc), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiVertex3fSUN, (GLuint rc, GLfloat x, GLfloat y, GLfloat z))
#define glReplacementCodeuiVertex3fvSUN(rc, v) glatter_glReplacementCodeuiVertex3fvSUN_ptr((rc), (v))
GLATTER_UBLOCK(void, APIENTRY, glReplacementCodeuiVertex3fvSUN, (const GLuint *rc, const GLfloat *v))
#define glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z) glatter_glTexCoord2fColor3fVertex3fSUN_ptr((s), (t), (r), (g), (b), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fColor3fVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor3fVertex3fvSUN_ptr((tc), (c), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor3fVertex3fvSUN, (const GLfloat *tc, const GLfloat *c, const GLfloat *v))
#define glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glTexCoord2fColor4fNormal3fVertex3fSUN_ptr((s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4fNormal3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v) glatter_glTexCoord2fColor4fNormal3fVertex3fvSUN_ptr((tc), (c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4fNormal3fVertex3fvSUN, (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z) glatter_glTexCoord2fColor4ubVertex3fSUN_ptr((s), (t), (r), (g), (b), (a), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4ubVertex3fSUN, (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fColor4ubVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor4ubVertex3fvSUN_ptr((tc), (c), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fColor4ubVertex3fvSUN, (const GLfloat *tc, const GLubyte *c, const GLfloat *v))
#define glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z) glatter_glTexCoord2fNormal3fVertex3fSUN_ptr((s), (t), (nx), (ny), (nz), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fNormal3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fNormal3fVertex3fvSUN(tc, n, v) glatter_glTexCoord2fNormal3fVertex3fvSUN_ptr((tc), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fNormal3fVertex3fvSUN, (const GLfloat *tc, const GLfloat *n, const GLfloat *v))
#define glTexCoord2fVertex3fSUN(s, t, x, y, z) glatter_glTexCoord2fVertex3fSUN_ptr((s), (t), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z))
#define glTexCoord2fVertex3fvSUN(tc, v) glatter_glTexCoord2fVertex3fvSUN_ptr((tc), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord2fVertex3fvSUN, (const GLfloat *tc, const GLfloat *v))
#define glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) glatter_glTexCoord4fColor4fNormal3fVertex4fSUN_ptr((s), (t), (p), (q), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fColor4fNormal3fVertex4fSUN, (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v) glatter_glTexCoord4fColor4fNormal3fVertex4fvSUN_ptr((tc), (c), (n), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fColor4fNormal3fVertex4fvSUN, (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v))
#define glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w) glatter_glTexCoord4fVertex4fSUN_ptr((s), (t), (p), (q), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fVertex4fSUN, (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glTexCoord4fVertex4fvSUN(tc, v) glatter_glTexCoord4fVertex4fvSUN_ptr((tc), (v))
GLATTER_UBLOCK(void, APIENTRY, glTexCoord4fVertex4fvSUN, (const GLfloat *tc, const GLfloat *v))
#endif // defined(GL_SUN_vertex)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_ptr((mode), (start), (end), (count), (type), (indices))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices))
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels))
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, APIENTRY, glActiveTexture, (GLenum texture))
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_ptr((texture))
GLATTER_UBLOCK(void, APIENTRY, glClientActiveTexture, (GLenum texture))
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_ptr((target), (level), (internalformat), (width), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_ptr((target), (level), (internalformat), (width), (height), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_ptr((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_ptr((target), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_ptr((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_ptr((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage_ptr((target), (level), (img))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTexImage, (GLenum target, GLint level, void *img))
#define glLoadTransposeMatrixd(m) glatter_glLoadTransposeMatrixd_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixd, (const GLdouble *m))
#define glLoadTransposeMatrixf(m) glatter_glLoadTransposeMatrixf_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glLoadTransposeMatrixf, (const GLfloat *m))
#define glMultTransposeMatrixd(m) glatter_glMultTransposeMatrixd_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixd, (const GLdouble *m))
#define glMultTransposeMatrixf(m) glatter_glMultTransposeMatrixf_ptr((m))
GLATTER_UBLOCK(void, APIENTRY, glMultTransposeMatrixf, (const GLfloat *m))
#define glMultiTexCoord1d(target, s) glatter_glMultiTexCoord1d_ptr((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1d, (GLenum target, GLdouble s))
#define glMultiTexCoord1dv(target, v) glatter_glMultiTexCoord1dv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord1f(target, s) glatter_glMultiTexCoord1f_ptr((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1f, (GLenum target, GLfloat s))
#define glMultiTexCoord1fv(target, v) glatter_glMultiTexCoord1fv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord1i(target, s) glatter_glMultiTexCoord1i_ptr((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1i, (GLenum target, GLint s))
#define glMultiTexCoord1iv(target, v) glatter_glMultiTexCoord1iv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1iv, (GLenum target, const GLint *v))
#define glMultiTexCoord1s(target, s) glatter_glMultiTexCoord1s_ptr((target), (s))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1s, (GLenum target, GLshort s))
#define glMultiTexCoord1sv(target, v) glatter_glMultiTexCoord1sv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord1sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord2d(target, s, t) glatter_glMultiTexCoord2d_ptr((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2d, (GLenum target, GLdouble s, GLdouble t))
#define glMultiTexCoord2dv(target, v) glatter_glMultiTexCoord2dv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord2f(target, s, t) glatter_glMultiTexCoord2f_ptr((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2f, (GLenum target, GLfloat s, GLfloat t))
#define glMultiTexCoord2fv(target, v) glatter_glMultiTexCoord2fv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord2i(target, s, t) glatter_glMultiTexCoord2i_ptr((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2i, (GLenum target, GLint s, GLint t))
#define glMultiTexCoord2iv(target, v) glatter_glMultiTexCoord2iv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2iv, (GLenum target, const GLint *v))
#define glMultiTexCoord2s(target, s, t) glatter_glMultiTexCoord2s_ptr((target), (s), (t))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2s, (GLenum target, GLshort s, GLshort t))
#define glMultiTexCoord2sv(target, v) glatter_glMultiTexCoord2sv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord2sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord3d(target, s, t, r) glatter_glMultiTexCoord3d_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3d, (GLenum target, GLdouble s, GLdouble t, GLdouble r))
#define glMultiTexCoord3dv(target, v) glatter_glMultiTexCoord3dv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord3f(target, s, t, r) glatter_glMultiTexCoord3f_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3f, (GLenum target, GLfloat s, GLfloat t, GLfloat r))
#define glMultiTexCoord3fv(target, v) glatter_glMultiTexCoord3fv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord3i(target, s, t, r) glatter_glMultiTexCoord3i_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3i, (GLenum target, GLint s, GLint t, GLint r))
#define glMultiTexCoord3iv(target, v) glatter_glMultiTexCoord3iv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3iv, (GLenum target, const GLint *v))
#define glMultiTexCoord3s(target, s, t, r) glatter_glMultiTexCoord3s_ptr((target), (s), (t), (r))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3s, (GLenum target, GLshort s, GLshort t, GLshort r))
#define glMultiTexCoord3sv(target, v) glatter_glMultiTexCoord3sv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord3sv, (GLenum target, const GLshort *v))
#define glMultiTexCoord4d(target, s, t, r, q) glatter_glMultiTexCoord4d_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4d, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q))
#define glMultiTexCoord4dv(target, v) glatter_glMultiTexCoord4dv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4dv, (GLenum target, const GLdouble *v))
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4f, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q))
#define glMultiTexCoord4fv(target, v) glatter_glMultiTexCoord4fv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4fv, (GLenum target, const GLfloat *v))
#define glMultiTexCoord4i(target, s, t, r, q) glatter_glMultiTexCoord4i_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4i, (GLenum target, GLint s, GLint t, GLint r, GLint q))
#define glMultiTexCoord4iv(target, v) glatter_glMultiTexCoord4iv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4iv, (GLenum target, const GLint *v))
#define glMultiTexCoord4s(target, s, t, r, q) glatter_glMultiTexCoord4s_ptr((target), (s), (t), (r), (q))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4s, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q))
#define glMultiTexCoord4sv(target, v) glatter_glMultiTexCoord4sv_ptr((target), (v))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoord4sv, (GLenum target, const GLshort *v))
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_ptr((value), (invert))
GLATTER_UBLOCK(void, APIENTRY, glSampleCoverage, (GLfloat value, GLboolean invert))
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_ptr((red), (green), (blue), (alpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))
#define glBlendEquation(mode) glatter_glBlendEquation_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquation, (GLenum mode))
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_ptr((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha))
#define glFogCoordPointer(type, stride, pointer) glatter_glFogCoordPointer_ptr((type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordPointer, (GLenum type, GLsizei stride, const void *pointer))
#define glFogCoordd(coord) glatter_glFogCoordd_ptr((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordd, (GLdouble coord))
#define glFogCoorddv(coord) glatter_glFogCoorddv_ptr((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoorddv, (const GLdouble *coord))
#define glFogCoordf(coord) glatter_glFogCoordf_ptr((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordf, (GLfloat coord))
#define glFogCoordfv(coord) glatter_glFogCoordfv_ptr((coord))
GLATTER_UBLOCK(void, APIENTRY, glFogCoordfv, (const GLfloat *coord))
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays_ptr((mode), (first), (count), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArrays, (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount))
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements_ptr((mode), (count), (type), (indices), (drawcount))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElements, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount))
#define glPointParameterf(pname, param) glatter_glPointParameterf_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterf, (GLenum pname, GLfloat param))
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameterfv, (GLenum pname, const GLfloat *params))
#define glPointParameteri(pname, param) glatter_glPointParameteri_ptr((pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteri, (GLenum pname, GLint param))
#define glPointParameteriv(pname, params) glatter_glPointParameteriv_ptr((pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glPointParameteriv, (GLenum pname, const GLint *params))
#define glSecondaryColor3b(red, green, blue) glatter_glSecondaryColor3b_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3b, (GLbyte red, GLbyte green, GLbyte blue))
#define glSecondaryColor3bv(v) glatter_glSecondaryColor3bv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3bv, (const GLbyte *v))
#define glSecondaryColor3d(red, green, blue) glatter_glSecondaryColor3d_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3d, (GLdouble red, GLdouble green, GLdouble blue))
#define glSecondaryColor3dv(v) glatter_glSecondaryColor3dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3dv, (const GLdouble *v))
#define glSecondaryColor3f(red, green, blue) glatter_glSecondaryColor3f_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3f, (GLfloat red, GLfloat green, GLfloat blue))
#define glSecondaryColor3fv(v) glatter_glSecondaryColor3fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3fv, (const GLfloat *v))
#define glSecondaryColor3i(red, green, blue) glatter_glSecondaryColor3i_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3i, (GLint red, GLint green, GLint blue))
#define glSecondaryColor3iv(v) glatter_glSecondaryColor3iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3iv, (const GLint *v))
#define glSecondaryColor3s(red, green, blue) glatter_glSecondaryColor3s_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3s, (GLshort red, GLshort green, GLshort blue))
#define glSecondaryColor3sv(v) glatter_glSecondaryColor3sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3sv, (const GLshort *v))
#define glSecondaryColor3ub(red, green, blue) glatter_glSecondaryColor3ub_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ub, (GLubyte red, GLubyte green, GLubyte blue))
#define glSecondaryColor3ubv(v) glatter_glSecondaryColor3ubv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ubv, (const GLubyte *v))
#define glSecondaryColor3ui(red, green, blue) glatter_glSecondaryColor3ui_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3ui, (GLuint red, GLuint green, GLuint blue))
#define glSecondaryColor3uiv(v) glatter_glSecondaryColor3uiv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3uiv, (const GLuint *v))
#define glSecondaryColor3us(red, green, blue) glatter_glSecondaryColor3us_ptr((red), (green), (blue))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3us, (GLushort red, GLushort green, GLushort blue))
#define glSecondaryColor3usv(v) glatter_glSecondaryColor3usv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColor3usv, (const GLushort *v))
#define glSecondaryColorPointer(size, type, stride, pointer) glatter_glSecondaryColorPointer_ptr((size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorPointer, (GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glWindowPos2d(x, y) glatter_glWindowPos2d_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2d, (GLdouble x, GLdouble y))
#define glWindowPos2dv(v) glatter_glWindowPos2dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2dv, (const GLdouble *v))
#define glWindowPos2f(x, y) glatter_glWindowPos2f_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2f, (GLfloat x, GLfloat y))
#define glWindowPos2fv(v) glatter_glWindowPos2fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2fv, (const GLfloat *v))
#define glWindowPos2i(x, y) glatter_glWindowPos2i_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2i, (GLint x, GLint y))
#define glWindowPos2iv(v) glatter_glWindowPos2iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2iv, (const GLint *v))
#define glWindowPos2s(x, y) glatter_glWindowPos2s_ptr((x), (y))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2s, (GLshort x, GLshort y))
#define glWindowPos2sv(v) glatter_glWindowPos2sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos2sv, (const GLshort *v))
#define glWindowPos3d(x, y, z) glatter_glWindowPos3d_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3d, (GLdouble x, GLdouble y, GLdouble z))
#define glWindowPos3dv(v) glatter_glWindowPos3dv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3dv, (const GLdouble *v))
#define glWindowPos3f(x, y, z) glatter_glWindowPos3f_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3f, (GLfloat x, GLfloat y, GLfloat z))
#define glWindowPos3fv(v) glatter_glWindowPos3fv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3fv, (const GLfloat *v))
#define glWindowPos3i(x, y, z) glatter_glWindowPos3i_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3i, (GLint x, GLint y, GLint z))
#define glWindowPos3iv(v) glatter_glWindowPos3iv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3iv, (const GLint *v))
#define glWindowPos3s(x, y, z) glatter_glWindowPos3s_ptr((x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3s, (GLshort x, GLshort y, GLshort z))
#define glWindowPos3sv(v) glatter_glWindowPos3sv_ptr((v))
GLATTER_UBLOCK(void, APIENTRY, glWindowPos3sv, (const GLshort *v))
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery_ptr((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQuery, (GLenum target, GLuint id))
#define glBindBuffer(target, buffer) glatter_glBindBuffer_ptr((target), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffer, (GLenum target, GLuint buffer))
#define glBufferData(target, size, data, usage) glatter_glBufferData_ptr((target), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glBufferData, (GLenum target, GLsizeiptr size, const void *data, GLenum usage))
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void *data))
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteBuffers, (GLsizei n, const GLuint *buffers))
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteQueries, (GLsizei n, const GLuint *ids))
#define glEndQuery(target) glatter_glEndQuery_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glEndQuery, (GLenum target))
#define glGenBuffers(n, buffers) glatter_glGenBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glGenBuffers, (GLsizei n, GLuint *buffers))
#define glGenQueries(n, ids) glatter_glGenQueries_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenQueries, (GLsizei n, GLuint *ids))
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferPointerv, (GLenum target, GLenum pname, void **params))
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData_ptr((target), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, void *data))
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectiv, (GLuint id, GLenum pname, GLint *params))
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint *params))
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryiv, (GLenum target, GLenum pname, GLint *params))
#define glIsBuffer(buffer) glatter_glIsBuffer_ptr((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsBuffer, (GLuint buffer))
#define glIsQuery(id) glatter_glIsQuery_ptr((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsQuery, (GLuint id))
#define glMapBuffer(target, access) glatter_glMapBuffer_ptr((target), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBuffer, (GLenum target, GLenum access))
#define glUnmapBuffer(target) glatter_glUnmapBuffer_ptr((target))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapBuffer, (GLenum target))
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glAttachShader, (GLuint program, GLuint shader))
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_ptr((program), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindAttribLocation, (GLuint program, GLuint index, const GLchar *name))
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_ptr((modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha))
#define glCompileShader(shader) glatter_glCompileShader_ptr((shader))
GLATTER_UBLOCK(void, APIENTRY, glCompileShader, (GLuint shader))
#define glCreateProgram() glatter_glCreateProgram_ptr()
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateProgram, (void))
#define glCreateShader(type) glatter_glCreateShader_ptr((type))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShader, (GLenum type))
#define glDeleteProgram(program) glatter_glDeleteProgram_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgram, (GLuint program))
#define glDeleteShader(shader) glatter_glDeleteShader_ptr((shader))
GLATTER_UBLOCK(void, APIENTRY, glDeleteShader, (GLuint shader))
#define glDetachShader(program, shader) glatter_glDetachShader_ptr((program), (shader))
GLATTER_UBLOCK(void, APIENTRY, glDetachShader, (GLuint program, GLuint shader))
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexAttribArray, (GLuint index))
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_ptr((n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glDrawBuffers, (GLsizei n, const GLenum *bufs))
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexAttribArray, (GLuint index))
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name))
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_ptr((program), (maxCount), (count), (shaders))
GLATTER_UBLOCK(void, APIENTRY, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders))
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetAttribLocation, (GLuint program, const GLchar *name))
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_ptr((program), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_ptr((program), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramiv, (GLuint program, GLenum pname, GLint *params))
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_ptr((shader), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_ptr((shader), (bufSize), (length), (source))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source))
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_ptr((shader), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderiv, (GLuint shader, GLenum pname, GLint *params))
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetUniformLocation, (GLuint program, const GLchar *name))
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformfv, (GLuint program, GLint location, GLfloat *params))
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformiv, (GLuint program, GLint location, GLint *params))
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_ptr((index), (pname), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void **pointer))
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribdv, (GLuint index, GLenum pname, GLdouble *params))
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat *params))
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint *params))
#define glIsProgram(program) glatter_glIsProgram_ptr((program))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgram, (GLuint program))
#define glIsShader(shader) glatter_glIsShader_ptr((shader))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsShader, (GLuint shader))
#define glLinkProgram(program) glatter_glLinkProgram_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glLinkProgram, (GLuint program))
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_ptr((shader), (count), (string), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length))
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_ptr((face), (func), (ref), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask))
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_ptr((face), (mask))
GLATTER_UBLOCK(void, APIENTRY, glStencilMaskSeparate, (GLenum face, GLuint mask))
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_ptr((face), (sfail), (dpfail), (dppass))
GLATTER_UBLOCK(void, APIENTRY, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass))
#define glUniform1f(location, v0) glatter_glUniform1f_ptr((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1f, (GLint location, GLfloat v0))
#define glUniform1fv(location, count, value) glatter_glUniform1fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform1i(location, v0) glatter_glUniform1i_ptr((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1i, (GLint location, GLint v0))
#define glUniform1iv(location, count, value) glatter_glUniform1iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform2f(location, v0, v1) glatter_glUniform2f_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2f, (GLint location, GLfloat v0, GLfloat v1))
#define glUniform2fv(location, count, value) glatter_glUniform2fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform2i(location, v0, v1) glatter_glUniform2i_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2i, (GLint location, GLint v0, GLint v1))
#define glUniform2iv(location, count, value) glatter_glUniform2iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glUniform3fv(location, count, value) glatter_glUniform3fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2))
#define glUniform3iv(location, count, value) glatter_glUniform3iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3iv, (GLint location, GLsizei count, const GLint *value))
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glUniform4fv(location, count, value) glatter_glUniform4fv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4fv, (GLint location, GLsizei count, const GLfloat *value))
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glUniform4iv(location, count, value) glatter_glUniform4iv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4iv, (GLint location, GLsizei count, const GLint *value))
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUseProgram(program) glatter_glUseProgram_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgram, (GLuint program))
#define glValidateProgram(program) glatter_glValidateProgram_ptr((program))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgram, (GLuint program))
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1d, (GLuint index, GLdouble x))
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1f, (GLuint index, GLfloat x))
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1s, (GLuint index, GLshort x))
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib1sv, (GLuint index, const GLshort *v))
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y))
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2s, (GLuint index, GLshort x, GLshort y))
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib2sv, (GLuint index, const GLshort *v))
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z))
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3s, (GLuint index, GLshort x, GLshort y, GLshort z))
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib3sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nbv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Niv, (GLuint index, const GLint *v))
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nsv, (GLuint index, const GLshort *v))
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nub, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w))
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nuiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4Nusv, (GLuint index, const GLushort *v))
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4bv, (GLuint index, const GLbyte *v))
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4dv, (GLuint index, const GLdouble *v))
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w))
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4fv, (GLuint index, const GLfloat *v))
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4iv, (GLuint index, const GLint *v))
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4s, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w))
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4sv, (GLuint index, const GLshort *v))
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4uiv, (GLuint index, const GLuint *v))
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttrib4usv, (GLuint index, const GLushort *v))
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_ptr((index), (size), (type), (normalized), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender_ptr((id), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBeginConditionalRender, (GLuint id, GLenum mode))
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_ptr((primitiveMode))
GLATTER_UBLOCK(void, APIENTRY, glBeginTransformFeedback, (GLenum primitiveMode))
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_ptr((target), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer))
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_ptr((target), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation_ptr((program), (color), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocation, (GLuint program, GLuint color, const GLchar *name))
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_ptr((target), (framebuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindFramebuffer, (GLenum target, GLuint framebuffer))
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_ptr((target), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glBindRenderbuffer, (GLenum target, GLuint renderbuffer))
#define glBindVertexArray(array) glatter_glBindVertexArray_ptr((array))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexArray, (GLuint array))
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_ptr((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_ptr((target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckFramebufferStatus, (GLenum target))
#define glClampColor(target, clamp) glatter_glClampColor_ptr((target), (clamp))
GLATTER_UBLOCK(void, APIENTRY, glClampColor, (GLenum target, GLenum clamp))
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_ptr((buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_ptr((buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_ptr((index), (r), (g), (b), (a))
GLATTER_UBLOCK(void, APIENTRY, glColorMaski, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a))
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteFramebuffers, (GLsizei n, const GLuint *framebuffers))
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteRenderbuffers, (GLsizei n, const GLuint *renderbuffers))
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glDeleteVertexArrays, (GLsizei n, const GLuint *arrays))
#define glDisablei(target, index) glatter_glDisablei_ptr((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisablei, (GLenum target, GLuint index))
#define glEnablei(target, index) glatter_glEnablei_ptr((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnablei, (GLenum target, GLuint index))
#define glEndConditionalRender() glatter_glEndConditionalRender_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndConditionalRender, (void))
#define glEndTransformFeedback() glatter_glEndTransformFeedback_ptr()
GLATTER_UBLOCK(void, APIENTRY, glEndTransformFeedback, (void))
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_ptr((target), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length))
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_ptr((target), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture1D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_ptr((target), (attachment), (textarget), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level))
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D_ptr((target), (attachment), (textarget), (texture), (level), (zoffset))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture3D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset))
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_ptr((target), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glGenRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glGenVertexArrays, (GLsizei n, GLuint *arrays))
#define glGenerateMipmap(target) glatter_glGenerateMipmap_ptr((target))
GLATTER_UBLOCK(void, APIENTRY, glGenerateMipmap, (GLenum target))
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetBooleani_v, (GLenum target, GLuint index, GLboolean *data))
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataLocation, (GLuint program, const GLchar *name))
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_ptr((target), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint *params))
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetIntegeri_v, (GLenum target, GLuint index, GLint *data))
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetStringi(name, index) glatter_glGetStringi_ptr((name), (index))
GLATTER_UBLOCK(const GLubyte *, APIENTRY, glGetStringi, (GLenum name, GLuint index))
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIiv, (GLenum target, GLenum pname, GLint *params))
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTexParameterIuiv, (GLenum target, GLenum pname, GLuint *params))
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_ptr((program), (index), (bufSize), (length), (size), (type), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name))
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformuiv, (GLuint program, GLint location, GLuint *params))
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint *params))
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint *params))
#define glIsEnabledi(target, index) glatter_glIsEnabledi_ptr((target), (index))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsEnabledi, (GLenum target, GLuint index))
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_ptr((framebuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsFramebuffer, (GLuint framebuffer))
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_ptr((renderbuffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsRenderbuffer, (GLuint renderbuffer))
#define glIsVertexArray(array) glatter_glIsVertexArray_ptr((array))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsVertexArray, (GLuint array))
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_ptr((target), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_ptr((target), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height))
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_ptr((target), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIiv, (GLenum target, GLenum pname, const GLint *params))
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTexParameterIuiv, (GLenum target, GLenum pname, const GLuint *params))
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_ptr((program), (count), (varyings), (bufferMode))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode))
#define glUniform1ui(location, v0) glatter_glUniform1ui_ptr((location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glUniform1ui, (GLint location, GLuint v0))
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_ptr((location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glUniform2ui, (GLint location, GLuint v0, GLuint v1))
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_ptr((location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3uiv, (GLint location, GLsizei count, const GLuint *value))
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_ptr((location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4uiv, (GLint location, GLsizei count, const GLuint *value))
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1i, (GLuint index, GLint x))
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1iv, (GLuint index, const GLint *v))
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1ui, (GLuint index, GLuint x))
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI1uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2i, (GLuint index, GLint x, GLint y))
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2iv, (GLuint index, const GLint *v))
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2ui, (GLuint index, GLuint x, GLuint y))
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI2uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3i, (GLuint index, GLint x, GLint y, GLint z))
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3iv, (GLuint index, const GLint *v))
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3ui, (GLuint index, GLuint x, GLuint y, GLuint z))
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI3uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4bv, (GLuint index, const GLbyte *v))
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w))
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4iv, (GLuint index, const GLint *v))
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4sv, (GLuint index, const GLshort *v))
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ubv, (GLuint index, const GLubyte *v))
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w))
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4uiv, (GLuint index, const GLuint *v))
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribI4usv, (GLuint index, const GLushort *v))
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_ptr((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_ptr((readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_ptr((mode), (first), (count), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount))
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_ptr((mode), (count), (type), (indices), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount))
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_ptr((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName))
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_ptr((program), (uniformBlockIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params))
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName_ptr((program), (uniformIndex), (bufSize), (length), (uniformName))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformName, (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName))
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_ptr((program), (uniformCount), (uniformIndices), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params))
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_ptr((program), (uniformBlockName))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetUniformBlockIndex, (GLuint program, const GLchar *uniformBlockName))
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_ptr((program), (uniformCount), (uniformNames), (uniformIndices))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices))
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex_ptr((index))
GLATTER_UBLOCK(void, APIENTRY, glPrimitiveRestartIndex, (GLuint index))
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_ptr((target), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTexBuffer, (GLenum target, GLenum internalformat, GLuint buffer))
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_ptr((program), (uniformBlockIndex), (uniformBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding))
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(GLenum, APIENTRY, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#define glDeleteSync(sync) glatter_glDeleteSync_ptr((sync))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSync, (GLsync sync))
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_ptr((mode), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_ptr((mode), (count), (type), (indices), (instancecount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex))
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_ptr((mode), (start), (end), (count), (type), (indices), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glDrawRangeElementsBaseVertex, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex))
#define glFenceSync(condition, flags) glatter_glFenceSync_ptr((condition), (flags))
GLATTER_UBLOCK(GLsync, APIENTRY, glFenceSync, (GLenum condition, GLbitfield flags))
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_ptr((target), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferTexture, (GLenum target, GLenum attachment, GLuint texture, GLint level))
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 *params))
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 *data))
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_ptr((pname), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetInteger64v, (GLenum pname, GLint64 *data))
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_ptr((pname), (index), (val))
GLATTER_UBLOCK(void, APIENTRY, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat *val))
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_ptr((sync), (pname), (bufSize), (length), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values))
#define glIsSync(sync) glatter_glIsSync_ptr((sync))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSync, (GLsync sync))
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex_ptr((mode), (count), (type), (indices), (drawcount), (basevertex))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsBaseVertex, (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex))
#define glProvokingVertex(mode) glatter_glProvokingVertex_ptr((mode))
GLATTER_UBLOCK(void, APIENTRY, glProvokingVertex, (GLenum mode))
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_ptr((maskNumber), (mask))
GLATTER_UBLOCK(void, APIENTRY, glSampleMaski, (GLuint maskNumber, GLbitfield mask))
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample_ptr((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample_ptr((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexImage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(void, APIENTRY, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout))
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed_ptr((program), (colorNumber), (index), (name))
GLATTER_UBLOCK(void, APIENTRY, glBindFragDataLocationIndexed, (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name))
#define glBindSampler(unit, sampler) glatter_glBindSampler_ptr((unit), (sampler))
GLATTER_UBLOCK(void, APIENTRY, glBindSampler, (GLuint unit, GLuint sampler))
#define glColorP3ui(type, color) glatter_glColorP3ui_ptr((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glColorP3ui, (GLenum type, GLuint color))
#define glColorP3uiv(type, color) glatter_glColorP3uiv_ptr((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glColorP3uiv, (GLenum type, const GLuint *color))
#define glColorP4ui(type, color) glatter_glColorP4ui_ptr((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glColorP4ui, (GLenum type, GLuint color))
#define glColorP4uiv(type, color) glatter_glColorP4uiv_ptr((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glColorP4uiv, (GLenum type, const GLuint *color))
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glDeleteSamplers, (GLsizei count, const GLuint *samplers))
#define glGenSamplers(count, samplers) glatter_glGenSamplers_ptr((count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glGenSamplers, (GLsizei count, GLuint *samplers))
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex_ptr((program), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetFragDataIndex, (GLuint program, const GLchar *name))
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjecti64v, (GLuint id, GLenum pname, GLint64 *params))
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v_ptr((id), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryObjectui64v, (GLuint id, GLenum pname, GLuint64 *params))
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIiv, (GLuint sampler, GLenum pname, GLint *params))
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterIuiv, (GLuint sampler, GLenum pname, GLuint *params))
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat *params))
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_ptr((sampler), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint *params))
#define glIsSampler(sampler) glatter_glIsSampler_ptr((sampler))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsSampler, (GLuint sampler))
#define glMultiTexCoordP1ui(texture, type, coords) glatter_glMultiTexCoordP1ui_ptr((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP1ui, (GLenum texture, GLenum type, GLuint coords))
#define glMultiTexCoordP1uiv(texture, type, coords) glatter_glMultiTexCoordP1uiv_ptr((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP1uiv, (GLenum texture, GLenum type, const GLuint *coords))
#define glMultiTexCoordP2ui(texture, type, coords) glatter_glMultiTexCoordP2ui_ptr((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP2ui, (GLenum texture, GLenum type, GLuint coords))
#define glMultiTexCoordP2uiv(texture, type, coords) glatter_glMultiTexCoordP2uiv_ptr((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP2uiv, (GLenum texture, GLenum type, const GLuint *coords))
#define glMultiTexCoordP3ui(texture, type, coords) glatter_glMultiTexCoordP3ui_ptr((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP3ui, (GLenum texture, GLenum type, GLuint coords))
#define glMultiTexCoordP3uiv(texture, type, coords) glatter_glMultiTexCoordP3uiv_ptr((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP3uiv, (GLenum texture, GLenum type, const GLuint *coords))
#define glMultiTexCoordP4ui(texture, type, coords) glatter_glMultiTexCoordP4ui_ptr((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP4ui, (GLenum texture, GLenum type, GLuint coords))
#define glMultiTexCoordP4uiv(texture, type, coords) glatter_glMultiTexCoordP4uiv_ptr((texture), (type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glMultiTexCoordP4uiv, (GLenum texture, GLenum type, const GLuint *coords))
#define glNormalP3ui(type, coords) glatter_glNormalP3ui_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalP3ui, (GLenum type, GLuint coords))
#define glNormalP3uiv(type, coords) glatter_glNormalP3uiv_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glNormalP3uiv, (GLenum type, const GLuint *coords))
#define glQueryCounter(id, target) glatter_glQueryCounter_ptr((id), (target))
GLATTER_UBLOCK(void, APIENTRY, glQueryCounter, (GLuint id, GLenum target))
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIiv, (GLuint sampler, GLenum pname, const GLint *param))
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterIuiv, (GLuint sampler, GLenum pname, const GLuint *param))
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param))
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat *param))
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param))
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_ptr((sampler), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint *param))
#define glSecondaryColorP3ui(type, color) glatter_glSecondaryColorP3ui_ptr((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorP3ui, (GLenum type, GLuint color))
#define glSecondaryColorP3uiv(type, color) glatter_glSecondaryColorP3uiv_ptr((type), (color))
GLATTER_UBLOCK(void, APIENTRY, glSecondaryColorP3uiv, (GLenum type, const GLuint *color))
#define glTexCoordP1ui(type, coords) glatter_glTexCoordP1ui_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP1ui, (GLenum type, GLuint coords))
#define glTexCoordP1uiv(type, coords) glatter_glTexCoordP1uiv_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP1uiv, (GLenum type, const GLuint *coords))
#define glTexCoordP2ui(type, coords) glatter_glTexCoordP2ui_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP2ui, (GLenum type, GLuint coords))
#define glTexCoordP2uiv(type, coords) glatter_glTexCoordP2uiv_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP2uiv, (GLenum type, const GLuint *coords))
#define glTexCoordP3ui(type, coords) glatter_glTexCoordP3ui_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP3ui, (GLenum type, GLuint coords))
#define glTexCoordP3uiv(type, coords) glatter_glTexCoordP3uiv_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP3uiv, (GLenum type, const GLuint *coords))
#define glTexCoordP4ui(type, coords) glatter_glTexCoordP4ui_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP4ui, (GLenum type, GLuint coords))
#define glTexCoordP4uiv(type, coords) glatter_glTexCoordP4uiv_ptr((type), (coords))
GLATTER_UBLOCK(void, APIENTRY, glTexCoordP4uiv, (GLenum type, const GLuint *coords))
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_ptr((index), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribDivisor, (GLuint index, GLuint divisor))
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP1uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP2uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP3uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value))
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv_ptr((index), (type), (normalized), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribP4uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint *value))
#define glVertexP2ui(type, value) glatter_glVertexP2ui_ptr((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP2ui, (GLenum type, GLuint value))
#define glVertexP2uiv(type, value) glatter_glVertexP2uiv_ptr((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP2uiv, (GLenum type, const GLuint *value))
#define glVertexP3ui(type, value) glatter_glVertexP3ui_ptr((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP3ui, (GLenum type, GLuint value))
#define glVertexP3uiv(type, value) glatter_glVertexP3uiv_ptr((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP3uiv, (GLenum type, const GLuint *value))
#define glVertexP4ui(type, value) glatter_glVertexP4ui_ptr((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP4ui, (GLenum type, GLuint value))
#define glVertexP4uiv(type, value) glatter_glVertexP4uiv_ptr((type), (value))
GLATTER_UBLOCK(void, APIENTRY, glVertexP4uiv, (GLenum type, const GLuint *value))
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed_ptr((target), (index), (id))
GLATTER_UBLOCK(void, APIENTRY, glBeginQueryIndexed, (GLenum target, GLuint index, GLuint id))
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_ptr((target), (id))
GLATTER_UBLOCK(void, APIENTRY, glBindTransformFeedback, (GLenum target, GLuint id))
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_ptr((buf), (modeRGB), (modeAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationSeparatei, (GLuint buf, GLenum modeRGB, GLenum modeAlpha))
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_ptr((buf), (mode))
GLATTER_UBLOCK(void, APIENTRY, glBlendEquationi, (GLuint buf, GLenum mode))
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_ptr((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha))
GLATTER_UBLOCK(void, APIENTRY, glBlendFuncSeparatei, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha))
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_ptr((buf), (src), (dst))
GLATTER_UBLOCK(void, APIENTRY, glBlendFunci, (GLuint buf, GLenum src, GLenum dst))
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glDeleteTransformFeedbacks, (GLsizei n, const GLuint *ids))
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_ptr((mode), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysIndirect, (GLenum mode, const void *indirect))
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_ptr((mode), (type), (indirect))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect))
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback_ptr((mode), (id))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedback, (GLenum mode, GLuint id))
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream_ptr((mode), (id), (stream))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStream, (GLenum mode, GLuint id, GLuint stream))
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed_ptr((target), (index))
GLATTER_UBLOCK(void, APIENTRY, glEndQueryIndexed, (GLenum target, GLuint index))
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glGenTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName_ptr((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName_ptr((program), (shadertype), (index), (bufsize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name))
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv_ptr((program), (shadertype), (index), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveSubroutineUniformiv, (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values))
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv_ptr((program), (shadertype), (pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramStageiv, (GLuint program, GLenum shadertype, GLenum pname, GLint *values))
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv_ptr((target), (index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryIndexediv, (GLenum target, GLuint index, GLenum pname, GLint *params))
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex_ptr((program), (shadertype), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetSubroutineIndex, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation_ptr((program), (shadertype), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetSubroutineUniformLocation, (GLuint program, GLenum shadertype, const GLchar *name))
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv_ptr((shadertype), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformSubroutineuiv, (GLenum shadertype, GLint location, GLuint *params))
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv_ptr((program), (location), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetUniformdv, (GLuint program, GLint location, GLdouble *params))
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_ptr((id))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsTransformFeedback, (GLuint id))
#define glMinSampleShading(value) glatter_glMinSampleShading_ptr((value))
GLATTER_UBLOCK(void, APIENTRY, glMinSampleShading, (GLfloat value))
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv_ptr((pname), (values))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameterfv, (GLenum pname, const GLfloat *values))
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_ptr((pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glPatchParameteri, (GLenum pname, GLint value))
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPauseTransformFeedback, (void))
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_ptr()
GLATTER_UBLOCK(void, APIENTRY, glResumeTransformFeedback, (void))
#define glUniform1d(location, x) glatter_glUniform1d_ptr((location), (x))
GLATTER_UBLOCK(void, APIENTRY, glUniform1d, (GLint location, GLdouble x))
#define glUniform1dv(location, count, value) glatter_glUniform1dv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform1dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform2d(location, x, y) glatter_glUniform2d_ptr((location), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glUniform2d, (GLint location, GLdouble x, GLdouble y))
#define glUniform2dv(location, count, value) glatter_glUniform2dv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform2dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform3d(location, x, y, z) glatter_glUniform3d_ptr((location), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glUniform3d, (GLint location, GLdouble x, GLdouble y, GLdouble z))
#define glUniform3dv(location, count, value) glatter_glUniform3dv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform3dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d_ptr((location), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glUniform4d, (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glUniform4dv(location, count, value) glatter_glUniform4dv_ptr((location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniform4dv, (GLint location, GLsizei count, const GLdouble *value))
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix2x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix3x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv_ptr((location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glUniformMatrix4x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv_ptr((shadertype), (count), (indices))
GLATTER_UBLOCK(void, APIENTRY, glUniformSubroutinesuiv, (GLenum shadertype, GLsizei count, const GLuint *indices))
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_ptr((pipeline), (program))
GLATTER_UBLOCK(void, APIENTRY, glActiveShaderProgram, (GLuint pipeline, GLuint program))
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glBindProgramPipeline, (GLuint pipeline))
#define glClearDepthf(d) glatter_glClearDepthf_ptr((d))
GLATTER_UBLOCK(void, APIENTRY, glClearDepthf, (GLfloat d))
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_ptr((type), (count), (strings))
GLATTER_UBLOCK(GLuint, APIENTRY, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const*strings))
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glDeleteProgramPipelines, (GLsizei n, const GLuint *pipelines))
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv_ptr((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeArrayv, (GLuint first, GLsizei count, const GLdouble *v))
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed_ptr((index), (n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangeIndexed, (GLuint index, GLdouble n, GLdouble f))
#define glDepthRangef(n, f) glatter_glDepthRangef_ptr((n), (f))
GLATTER_UBLOCK(void, APIENTRY, glDepthRangef, (GLfloat n, GLfloat f))
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glGenProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetDoublei_v, (GLenum target, GLuint index, GLdouble *data))
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v_ptr((target), (index), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetFloati_v, (GLenum target, GLuint index, GLfloat *data))
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_ptr((program), (bufSize), (length), (binaryFormat), (binary))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary))
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_ptr((pipeline), (bufSize), (length), (infoLog))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog))
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_ptr((pipeline), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint *params))
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_ptr((shadertype), (precisiontype), (range), (precision))
GLATTER_UBLOCK(void, APIENTRY, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision))
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv_ptr((index), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexAttribLdv, (GLuint index, GLenum pname, GLdouble *params))
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(GLboolean, APIENTRY, glIsProgramPipeline, (GLuint pipeline))
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_ptr((program), (binaryFormat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glProgramBinary, (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length))
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_ptr((program), (pname), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramParameteri, (GLuint program, GLenum pname, GLint value))
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1d, (GLuint program, GLint location, GLdouble v0))
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0))
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1i, (GLuint program, GLint location, GLint v0))
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_ptr((program), (location), (v0))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0))
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2d, (GLuint program, GLint location, GLdouble v0, GLdouble v1))
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1))
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1))
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_ptr((program), (location), (v0), (v1))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1))
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2))
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2))
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2))
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_ptr((program), (location), (v0), (v1), (v2))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2))
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3))
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4dv, (GLuint program, GLint location, GLsizei count, const GLdouble *value))
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3))
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat *value))
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3))
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint *value))
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_ptr((program), (location), (v0), (v1), (v2), (v3))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3))
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_ptr((program), (location), (count), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint *value))
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value))
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_ptr((program), (location), (count), (transpose), (value))
GLATTER_UBLOCK(void, APIENTRY, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value))
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_ptr()
GLATTER_UBLOCK(void, APIENTRY, glReleaseShaderCompiler, (void))
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv_ptr((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorArrayv, (GLuint first, GLsizei count, const GLint *v))
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed_ptr((index), (left), (bottom), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexed, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height))
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glScissorIndexedv, (GLuint index, const GLint *v))
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_ptr((count), (shaders), (binaryformat), (binary), (length))
GLATTER_UBLOCK(void, APIENTRY, glShaderBinary, (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length))
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_ptr((pipeline), (stages), (program))
GLATTER_UBLOCK(void, APIENTRY, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program))
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_ptr((pipeline))
GLATTER_UBLOCK(void, APIENTRY, glValidateProgramPipeline, (GLuint pipeline))
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d_ptr((index), (x))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1d, (GLuint index, GLdouble x))
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL1dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d_ptr((index), (x), (y))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2d, (GLuint index, GLdouble x, GLdouble y))
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL2dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d_ptr((index), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z))
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL3dv, (GLuint index, const GLdouble *v))
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d_ptr((index), (x), (y), (z), (w))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w))
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribL4dv, (GLuint index, const GLdouble *v))
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer_ptr((index), (size), (type), (stride), (pointer))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer))
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv_ptr((first), (count), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportArrayv, (GLuint first, GLsizei count, const GLfloat *v))
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf_ptr((index), (x), (y), (w), (h))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedf, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h))
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv_ptr((index), (v))
GLATTER_UBLOCK(void, APIENTRY, glViewportIndexedfv, (GLuint index, const GLfloat *v))
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_ptr((unit), (texture), (level), (layered), (layer), (access), (format))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format))
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance_ptr((mode), (first), (count), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawArraysInstancedBaseInstance, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance_ptr((mode), (count), (type), (indices), (instancecount), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance))
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance_ptr((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance))
GLATTER_UBLOCK(void, APIENTRY, glDrawElementsInstancedBaseVertexBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance))
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced_ptr((mode), (id), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackInstanced, (GLenum mode, GLuint id, GLsizei instancecount))
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced_ptr((mode), (id), (stream), (instancecount))
GLATTER_UBLOCK(void, APIENTRY, glDrawTransformFeedbackStreamInstanced, (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount))
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv_ptr((program), (bufferIndex), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetActiveAtomicCounterBufferiv, (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params))
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_ptr((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params))
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_ptr((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrier, (GLbitfield barriers))
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D_ptr((target), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage1D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_ptr((target), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_ptr((target), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_ptr((bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData_ptr((target), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferData, (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData_ptr((target), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearBufferSubData, (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_ptr((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth))
GLATTER_UBLOCK(void, APIENTRY, glCopyImageSubData, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth))
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_ptr((callback), (userParam))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageCallback, (GLDEBUGPROC callback, const void *userParam))
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_ptr((source), (type), (severity), (count), (ids), (enabled))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageControl, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled))
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_ptr((source), (type), (id), (severity), (length), (buf))
GLATTER_UBLOCK(void, APIENTRY, glDebugMessageInsert, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf))
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_ptr((num_groups_x), (num_groups_y), (num_groups_z))
GLATTER_UBLOCK(void, APIENTRY, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z))
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_ptr((indirect))
GLATTER_UBLOCK(void, APIENTRY, glDispatchComputeIndirect, (GLintptr indirect))
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_ptr((target), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param))
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_ptr((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetDebugMessageLog, (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog))
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_ptr((target), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint *params))
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v_ptr((target), (internalformat), (pname), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetInternalformati64v, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params))
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_ptr((identifier), (name), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectLabel, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_ptr((ptr), (bufSize), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glGetObjectPtrLabel, (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label))
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_ptr((program), (programInterface), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint *params))
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLuint, APIENTRY, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex_ptr((program), (programInterface), (name))
GLATTER_UBLOCK(GLint, APIENTRY, glGetProgramResourceLocationIndex, (GLuint program, GLenum programInterface, const GLchar *name))
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_ptr((program), (programInterface), (index), (bufSize), (length), (name))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name))
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_ptr((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params))
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData_ptr((buffer))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferData, (GLuint buffer))
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData_ptr((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_ptr((target), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_ptr((target), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage_ptr((texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexImage, (GLuint texture, GLint level))
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth))
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect_ptr((mode), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawArraysIndirect, (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect_ptr((mode), (type), (indirect), (drawcount), (stride))
GLATTER_UBLOCK(void, APIENTRY, glMultiDrawElementsIndirect, (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride))
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_ptr((identifier), (name), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectLabel, (GLenum identifier, GLuint name, GLsizei length, const GLchar *label))
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_ptr((ptr), (length), (label))
GLATTER_UBLOCK(void, APIENTRY, glObjectPtrLabel, (const void *ptr, GLsizei length, const GLchar *label))
#define glPopDebugGroup() glatter_glPopDebugGroup_ptr()
GLATTER_UBLOCK(void, APIENTRY, glPopDebugGroup, (void))
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_ptr((source), (id), (length), (message))
GLATTER_UBLOCK(void, APIENTRY, glPushDebugGroup, (GLenum source, GLuint id, GLsizei length, const GLchar *message))
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding_ptr((program), (storageBlockIndex), (storageBlockBinding))
GLATTER_UBLOCK(void, APIENTRY, glShaderStorageBlockBinding, (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding))
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_ptr((target), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTexBufferRange, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_ptr((target), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_ptr((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTexStorage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView_ptr((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers))
GLATTER_UBLOCK(void, APIENTRY, glTextureView, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers))
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_ptr((attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex))
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_ptr((attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_ptr((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat_ptr((attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexAttribLFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_ptr((bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor))
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase_ptr((target), (first), (count), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersBase, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers))
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange_ptr((target), (first), (count), (buffers), (offsets), (sizes))
GLATTER_UBLOCK(void, APIENTRY, glBindBuffersRange, (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes))
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures_ptr((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindImageTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers_ptr((first), (count), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glBindSamplers, (GLuint first, GLsizei count, const GLuint *samplers))
#define glBindTextures(first, count, textures) glatter_glBindTextures_ptr((first), (count), (textures))
GLATTER_UBLOCK(void, APIENTRY, glBindTextures, (GLuint first, GLsizei count, const GLuint *textures))
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers_ptr((first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glBindVertexBuffers, (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage_ptr((target), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glBufferStorage, (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags))
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage_ptr((texture), (level), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexImage, (GLuint texture, GLint level, GLenum format, GLenum type, const void *data))
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit_ptr((unit), (texture))
GLATTER_UBLOCK(void, APIENTRY, glBindTextureUnit, (GLuint unit, GLuint texture))
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer_ptr((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, APIENTRY, glBlitNamedFramebuffer, (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus_ptr((framebuffer), (target))
GLATTER_UBLOCK(GLenum, APIENTRY, glCheckNamedFramebufferStatus, (GLuint framebuffer, GLenum target))
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData_ptr((buffer), (internalformat), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferData, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data))
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData_ptr((buffer), (internalformat), (offset), (size), (format), (type), (data))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedBufferSubData, (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data))
#define glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) glatter_glClearNamedFramebufferfi_ptr((framebuffer), (buffer), (drawbuffer), (depth), (stencil))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfi, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil))
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv_ptr((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferfv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value))
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv_ptr((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value))
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv_ptr((framebuffer), (buffer), (drawbuffer), (value))
GLATTER_UBLOCK(void, APIENTRY, glClearNamedFramebufferuiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value))
#define glClipControl(origin, depth) glatter_glClipControl_ptr((origin), (depth))
GLATTER_UBLOCK(void, APIENTRY, glClipControl, (GLenum origin, GLenum depth))
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D_ptr((texture), (level), (xoffset), (width), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D_ptr((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data))
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glCompressedTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data))
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData_ptr((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, APIENTRY, glCopyNamedBufferSubData, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D_ptr((texture), (level), (xoffset), (x), (y), (width))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D_ptr((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glCopyTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height))
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers_ptr((n), (buffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateBuffers, (GLsizei n, GLuint *buffers))
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers_ptr((n), (framebuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateFramebuffers, (GLsizei n, GLuint *framebuffers))
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines_ptr((n), (pipelines))
GLATTER_UBLOCK(void, APIENTRY, glCreateProgramPipelines, (GLsizei n, GLuint *pipelines))
#define glCreateQueries(target, n, ids) glatter_glCreateQueries_ptr((target), (n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateQueries, (GLenum target, GLsizei n, GLuint *ids))
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers_ptr((n), (renderbuffers))
GLATTER_UBLOCK(void, APIENTRY, glCreateRenderbuffers, (GLsizei n, GLuint *renderbuffers))
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers_ptr((n), (samplers))
GLATTER_UBLOCK(void, APIENTRY, glCreateSamplers, (GLsizei n, GLuint *samplers))
#define glCreateTextures(target, n, textures) glatter_glCreateTextures_ptr((target), (n), (textures))
GLATTER_UBLOCK(void, APIENTRY, glCreateTextures, (GLenum target, GLsizei n, GLuint *textures))
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks_ptr((n), (ids))
GLATTER_UBLOCK(void, APIENTRY, glCreateTransformFeedbacks, (GLsizei n, GLuint *ids))
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays_ptr((n), (arrays))
GLATTER_UBLOCK(void, APIENTRY, glCreateVertexArrays, (GLsizei n, GLuint *arrays))
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib_ptr((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glDisableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib_ptr((vaobj), (index))
GLATTER_UBLOCK(void, APIENTRY, glEnableVertexArrayAttrib, (GLuint vaobj, GLuint index))
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange_ptr((buffer), (offset), (length))
GLATTER_UBLOCK(void, APIENTRY, glFlushMappedNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length))
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap_ptr((texture))
GLATTER_UBLOCK(void, APIENTRY, glGenerateTextureMipmap, (GLuint texture))
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage_ptr((texture), (level), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureImage, (GLuint texture, GLint level, GLsizei bufSize, void *pixels))
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetCompressedTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels))
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_ptr()
GLATTER_UBLOCK(GLenum, APIENTRY, glGetGraphicsResetStatus, (void))
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteri64v, (GLuint buffer, GLenum pname, GLint64 *params))
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferParameteriv, (GLuint buffer, GLenum pname, GLint *params))
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv_ptr((buffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferPointerv, (GLuint buffer, GLenum pname, void **params))
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData_ptr((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data))
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv_ptr((framebuffer), (attachment), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferAttachmentParameteriv, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params))
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv_ptr((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedFramebufferParameteriv, (GLuint framebuffer, GLenum pname, GLint *param))
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv_ptr((renderbuffer), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetNamedRenderbufferParameteriv, (GLuint renderbuffer, GLenum pname, GLint *params))
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjecti64v_ptr((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjecti64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectiv_ptr((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjectui64v_ptr((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectui64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectuiv_ptr((id), (buffer), (pname), (offset))
GLATTER_UBLOCK(void, APIENTRY, glGetQueryBufferObjectuiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset))
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage_ptr((texture), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureImage, (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv_ptr((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameterfv, (GLuint texture, GLint level, GLenum pname, GLfloat *params))
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv_ptr((texture), (level), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureLevelParameteriv, (GLuint texture, GLint level, GLenum pname, GLint *params))
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIiv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterIuiv, (GLuint texture, GLenum pname, GLuint *params))
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameterfv, (GLuint texture, GLenum pname, GLfloat *params))
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureParameteriv, (GLuint texture, GLenum pname, GLint *params))
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v_ptr((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki64_v, (GLuint xfb, GLenum pname, GLuint index, GLint64 *param))
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v_ptr((xfb), (pname), (index), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbacki_v, (GLuint xfb, GLenum pname, GLuint index, GLint *param))
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv_ptr((xfb), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetTransformFeedbackiv, (GLuint xfb, GLenum pname, GLint *param))
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv_ptr((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexed64iv, (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param))
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv_ptr((vaobj), (index), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayIndexediv, (GLuint vaobj, GLuint index, GLenum pname, GLint *param))
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv_ptr((vaobj), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glGetVertexArrayiv, (GLuint vaobj, GLenum pname, GLint *param))
#define glGetnColorTable(target, format, type, bufSize, table) glatter_glGetnColorTable_ptr((target), (format), (type), (bufSize), (table))
GLATTER_UBLOCK(void, APIENTRY, glGetnColorTable, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table))
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage_ptr((target), (lod), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnCompressedTexImage, (GLenum target, GLint lod, GLsizei bufSize, void *pixels))
#define glGetnConvolutionFilter(target, format, type, bufSize, image) glatter_glGetnConvolutionFilter_ptr((target), (format), (type), (bufSize), (image))
GLATTER_UBLOCK(void, APIENTRY, glGetnConvolutionFilter, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image))
#define glGetnHistogram(target, reset, format, type, bufSize, values) glatter_glGetnHistogram_ptr((target), (reset), (format), (type), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#define glGetnMapdv(target, query, bufSize, v) glatter_glGetnMapdv_ptr((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapdv, (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v))
#define glGetnMapfv(target, query, bufSize, v) glatter_glGetnMapfv_ptr((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapfv, (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v))
#define glGetnMapiv(target, query, bufSize, v) glatter_glGetnMapiv_ptr((target), (query), (bufSize), (v))
GLATTER_UBLOCK(void, APIENTRY, glGetnMapiv, (GLenum target, GLenum query, GLsizei bufSize, GLint *v))
#define glGetnMinmax(target, reset, format, type, bufSize, values) glatter_glGetnMinmax_ptr((target), (reset), (format), (type), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values))
#define glGetnPixelMapfv(map, bufSize, values) glatter_glGetnPixelMapfv_ptr((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapfv, (GLenum map, GLsizei bufSize, GLfloat *values))
#define glGetnPixelMapuiv(map, bufSize, values) glatter_glGetnPixelMapuiv_ptr((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapuiv, (GLenum map, GLsizei bufSize, GLuint *values))
#define glGetnPixelMapusv(map, bufSize, values) glatter_glGetnPixelMapusv_ptr((map), (bufSize), (values))
GLATTER_UBLOCK(void, APIENTRY, glGetnPixelMapusv, (GLenum map, GLsizei bufSize, GLushort *values))
#define glGetnPolygonStipple(bufSize, pattern) glatter_glGetnPolygonStipple_ptr((bufSize), (pattern))
GLATTER_UBLOCK(void, APIENTRY, glGetnPolygonStipple, (GLsizei bufSize, GLubyte *pattern))
#define glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilter_ptr((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span))
GLATTER_UBLOCK(void, APIENTRY, glGetnSeparableFilter, (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span))
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage_ptr((target), (level), (format), (type), (bufSize), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glGetnTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels))
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformdv, (GLuint program, GLint location, GLsizei bufSize, GLdouble *params))
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformfv, (GLuint program, GLint location, GLsizei bufSize, GLfloat *params))
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformiv, (GLuint program, GLint location, GLsizei bufSize, GLint *params))
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_ptr((program), (location), (bufSize), (params))
GLATTER_UBLOCK(void, APIENTRY, glGetnUniformuiv, (GLuint program, GLint location, GLsizei bufSize, GLuint *params))
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData_ptr((framebuffer), (numAttachments), (attachments))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments))
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData_ptr((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glInvalidateNamedFramebufferSubData, (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height))
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer_ptr((buffer), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBuffer, (GLuint buffer, GLenum access))
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange_ptr((buffer), (offset), (length), (access))
GLATTER_UBLOCK(void *, APIENTRY, glMapNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access))
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_ptr((barriers))
GLATTER_UBLOCK(void, APIENTRY, glMemoryBarrierByRegion, (GLbitfield barriers))
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData_ptr((buffer), (size), (data), (usage))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferData, (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage))
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage_ptr((buffer), (size), (data), (flags))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferStorage, (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags))
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData_ptr((buffer), (offset), (size), (data))
GLATTER_UBLOCK(void, APIENTRY, glNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data))
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer_ptr((framebuffer), (buf))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffer, (GLuint framebuffer, GLenum buf))
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers_ptr((framebuffer), (n), (bufs))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferDrawBuffers, (GLuint framebuffer, GLsizei n, const GLenum *bufs))
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri_ptr((framebuffer), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferParameteri, (GLuint framebuffer, GLenum pname, GLint param))
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer_ptr((framebuffer), (src))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferReadBuffer, (GLuint framebuffer, GLenum src))
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer_ptr((framebuffer), (attachment), (renderbuffertarget), (renderbuffer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferRenderbuffer, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer))
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture_ptr((framebuffer), (attachment), (texture), (level))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTexture, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level))
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer_ptr((framebuffer), (attachment), (texture), (level), (layer))
GLATTER_UBLOCK(void, APIENTRY, glNamedFramebufferTextureLayer, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer))
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage_ptr((renderbuffer), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorage, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height))
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample_ptr((renderbuffer), (samples), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glNamedRenderbufferStorageMultisample, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height))
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_ptr((x), (y), (width), (height), (format), (type), (bufSize), (data))
GLATTER_UBLOCK(void, APIENTRY, glReadnPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data))
#define glTextureBarrier() glatter_glTextureBarrier_ptr()
GLATTER_UBLOCK(void, APIENTRY, glTextureBarrier, (void))
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer_ptr((texture), (internalformat), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTextureBuffer, (GLuint texture, GLenum internalformat, GLuint buffer))
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange_ptr((texture), (internalformat), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTextureBufferRange, (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIiv, (GLuint texture, GLenum pname, const GLint *params))
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv_ptr((texture), (pname), (params))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterIuiv, (GLuint texture, GLenum pname, const GLuint *params))
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf_ptr((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterf, (GLuint texture, GLenum pname, GLfloat param))
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv_ptr((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameterfv, (GLuint texture, GLenum pname, const GLfloat *param))
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri_ptr((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteri, (GLuint texture, GLenum pname, GLint param))
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv_ptr((texture), (pname), (param))
GLATTER_UBLOCK(void, APIENTRY, glTextureParameteriv, (GLuint texture, GLenum pname, const GLint *param))
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D_ptr((texture), (levels), (internalformat), (width))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage1D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width))
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D_ptr((texture), (levels), (internalformat), (width), (height))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height))
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample_ptr((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage2DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations))
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D_ptr((texture), (levels), (internalformat), (width), (height), (depth))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth))
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample_ptr((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations))
GLATTER_UBLOCK(void, APIENTRY, glTextureStorage3DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations))
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D_ptr((texture), (level), (xoffset), (width), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D_ptr((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels))
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D_ptr((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels))
GLATTER_UBLOCK(void, APIENTRY, glTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels))
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase_ptr((xfb), (index), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferBase, (GLuint xfb, GLuint index, GLuint buffer))
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange_ptr((xfb), (index), (buffer), (offset), (size))
GLATTER_UBLOCK(void, APIENTRY, glTransformFeedbackBufferRange, (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size))
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer_ptr((buffer))
GLATTER_UBLOCK(GLboolean, APIENTRY, glUnmapNamedBuffer, (GLuint buffer))
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding_ptr((vaobj), (attribindex), (bindingindex))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribBinding, (GLuint vaobj, GLuint attribindex, GLuint bindingindex))
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat_ptr((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset))
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat_ptr((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribIFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat_ptr((vaobj), (attribindex), (size), (type), (relativeoffset))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayAttribLFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset))
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor_ptr((vaobj), (bindingindex), (divisor))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayBindingDivisor, (GLuint vaobj, GLuint bindingindex, GLuint divisor))
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer_ptr((vaobj), (buffer))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayElementBuffer, (GLuint vaobj, GLuint buffer))
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer_ptr((vaobj), (bindingindex), (buffer), (offset), (stride))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffer, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride))
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers_ptr((vaobj), (first), (count), (buffers), (offsets), (strides))
GLATTER_UBLOCK(void, APIENTRY, glVertexArrayVertexBuffers, (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides))
#endif // defined(__glext_h_)
#endif // defined(GL_VERSION_4_5)
#endif // GLATTER_GL

#else // NDEBUG

#ifdef GLATTER_GL
#if !defined(__GL_H__)
#if !defined(GL_VERSION_ES_CM_1_0)
#if defined(__gl_h_)
#if defined(GL_ARB_multitexture)
#define glActiveTextureARB(texture) glatter_glActiveTextureARB_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTextureARB_debug(GLenum texture, const char* file, int line);
#define glClientActiveTextureARB(texture) glatter_glClientActiveTextureARB_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTextureARB_debug(GLenum texture, const char* file, int line);
#define glMultiTexCoord1dARB(target, s) glatter_glMultiTexCoord1dARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dARB_debug(GLenum target, GLdouble s, const char* file, int line);
#define glMultiTexCoord1dvARB(target, v) glatter_glMultiTexCoord1dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord1fARB(target, s) glatter_glMultiTexCoord1fARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fARB_debug(GLenum target, GLfloat s, const char* file, int line);
#define glMultiTexCoord1fvARB(target, v) glatter_glMultiTexCoord1fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord1iARB(target, s) glatter_glMultiTexCoord1iARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1iARB_debug(GLenum target, GLint s, const char* file, int line);
#define glMultiTexCoord1ivARB(target, v) glatter_glMultiTexCoord1ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord1sARB(target, s) glatter_glMultiTexCoord1sARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1sARB_debug(GLenum target, GLshort s, const char* file, int line);
#define glMultiTexCoord1svARB(target, v) glatter_glMultiTexCoord1svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord2dARB(target, s, t) glatter_glMultiTexCoord2dARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dARB_debug(GLenum target, GLdouble s, GLdouble t, const char* file, int line);
#define glMultiTexCoord2dvARB(target, v) glatter_glMultiTexCoord2dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord2fARB(target, s, t) glatter_glMultiTexCoord2fARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fARB_debug(GLenum target, GLfloat s, GLfloat t, const char* file, int line);
#define glMultiTexCoord2fvARB(target, v) glatter_glMultiTexCoord2fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord2iARB(target, s, t) glatter_glMultiTexCoord2iARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2iARB_debug(GLenum target, GLint s, GLint t, const char* file, int line);
#define glMultiTexCoord2ivARB(target, v) glatter_glMultiTexCoord2ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord2sARB(target, s, t) glatter_glMultiTexCoord2sARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2sARB_debug(GLenum target, GLshort s, GLshort t, const char* file, int line);
#define glMultiTexCoord2svARB(target, v) glatter_glMultiTexCoord2svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord3dARB(target, s, t, r) glatter_glMultiTexCoord3dARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dARB_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glMultiTexCoord3dvARB(target, v) glatter_glMultiTexCoord3dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord3fARB(target, s, t, r) glatter_glMultiTexCoord3fARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fARB_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glMultiTexCoord3fvARB(target, v) glatter_glMultiTexCoord3fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord3iARB(target, s, t, r) glatter_glMultiTexCoord3iARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3iARB_debug(GLenum target, GLint s, GLint t, GLint r, const char* file, int line);
#define glMultiTexCoord3ivARB(target, v) glatter_glMultiTexCoord3ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord3sARB(target, s, t, r) glatter_glMultiTexCoord3sARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3sARB_debug(GLenum target, GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glMultiTexCoord3svARB(target, v) glatter_glMultiTexCoord3svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord4dARB(target, s, t, r, q) glatter_glMultiTexCoord4dARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dARB_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glMultiTexCoord4dvARB(target, v) glatter_glMultiTexCoord4dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord4fARB(target, s, t, r, q) glatter_glMultiTexCoord4fARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fARB_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4fvARB(target, v) glatter_glMultiTexCoord4fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord4iARB(target, s, t, r, q) glatter_glMultiTexCoord4iARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4iARB_debug(GLenum target, GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glMultiTexCoord4ivARB(target, v) glatter_glMultiTexCoord4ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord4sARB(target, s, t, r, q) glatter_glMultiTexCoord4sARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4sARB_debug(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glMultiTexCoord4svARB(target, v) glatter_glMultiTexCoord4svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#endif // defined(GL_ARB_multitexture)
#if defined(GL_ATI_blend_equation_separate)
#define glBlendEquationSeparateATI(modeRGB, modeA) glatter_glBlendEquationSeparateATI_debug((modeRGB), (modeA), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateATI_debug(GLenum modeRGB, GLenum modeA, const char* file, int line);
#endif // defined(GL_ATI_blend_equation_separate)
#if defined(GL_OES_EGL_image)
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES_debug((target), (image), __FILE__, __LINE__)
void glatter_glEGLImageTargetRenderbufferStorageOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES_debug((target), (image), __FILE__, __LINE__)
void glatter_glEGLImageTargetTexture2DOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#endif // defined(GL_OES_EGL_image)
#define glAccum(op, value) glatter_glAccum_debug((op), (value), __FILE__, __LINE__)
void glatter_glAccum_debug(GLenum op, GLfloat value, const char* file, int line);
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFunc_debug(GLenum func, GLclampf ref, const char* file, int line);
#define glAreTexturesResident(n, textures, residences) glatter_glAreTexturesResident_debug((n), (textures), (residences), __FILE__, __LINE__)
GLboolean glatter_glAreTexturesResident_debug(GLsizei n, const GLuint *textures, GLboolean *residences, const char* file, int line);
#define glArrayElement(i) glatter_glArrayElement_debug((i), __FILE__, __LINE__)
void glatter_glArrayElement_debug(GLint i, const char* file, int line);
#define glBegin(mode) glatter_glBegin_debug((mode), __FILE__, __LINE__)
void glatter_glBegin_debug(GLenum mode, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmap_debug((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap), __FILE__, __LINE__)
void glatter_glBitmap_debug(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glCallList(list) glatter_glCallList_debug((list), __FILE__, __LINE__)
void glatter_glCallList_debug(GLuint list, const char* file, int line);
#define glCallLists(n, type, lists) glatter_glCallLists_debug((n), (type), (lists), __FILE__, __LINE__)
void glatter_glCallLists_debug(GLsizei n, GLenum type, const GLvoid *lists, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearAccum(red, green, blue, alpha) glatter_glClearAccum_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearAccum_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha, const char* file, int line);
#define glClearDepth(depth) glatter_glClearDepth_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepth_debug(GLclampd depth, const char* file, int line);
#define glClearIndex(c) glatter_glClearIndex_debug((c), __FILE__, __LINE__)
void glatter_glClearIndex_debug(GLfloat c, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTexture_debug(GLenum texture, const char* file, int line);
#define glClipPlane(plane, equation) glatter_glClipPlane_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlane_debug(GLenum plane, const GLdouble *equation, const char* file, int line);
#define glColor3b(red, green, blue) glatter_glColor3b_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3b_debug(GLbyte red, GLbyte green, GLbyte blue, const char* file, int line);
#define glColor3bv(v) glatter_glColor3bv_debug((v), __FILE__, __LINE__)
void glatter_glColor3bv_debug(const GLbyte *v, const char* file, int line);
#define glColor3d(red, green, blue) glatter_glColor3d_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3d_debug(GLdouble red, GLdouble green, GLdouble blue, const char* file, int line);
#define glColor3dv(v) glatter_glColor3dv_debug((v), __FILE__, __LINE__)
void glatter_glColor3dv_debug(const GLdouble *v, const char* file, int line);
#define glColor3f(red, green, blue) glatter_glColor3f_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3f_debug(GLfloat red, GLfloat green, GLfloat blue, const char* file, int line);
#define glColor3fv(v) glatter_glColor3fv_debug((v), __FILE__, __LINE__)
void glatter_glColor3fv_debug(const GLfloat *v, const char* file, int line);
#define glColor3i(red, green, blue) glatter_glColor3i_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3i_debug(GLint red, GLint green, GLint blue, const char* file, int line);
#define glColor3iv(v) glatter_glColor3iv_debug((v), __FILE__, __LINE__)
void glatter_glColor3iv_debug(const GLint *v, const char* file, int line);
#define glColor3s(red, green, blue) glatter_glColor3s_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3s_debug(GLshort red, GLshort green, GLshort blue, const char* file, int line);
#define glColor3sv(v) glatter_glColor3sv_debug((v), __FILE__, __LINE__)
void glatter_glColor3sv_debug(const GLshort *v, const char* file, int line);
#define glColor3ub(red, green, blue) glatter_glColor3ub_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3ub_debug(GLubyte red, GLubyte green, GLubyte blue, const char* file, int line);
#define glColor3ubv(v) glatter_glColor3ubv_debug((v), __FILE__, __LINE__)
void glatter_glColor3ubv_debug(const GLubyte *v, const char* file, int line);
#define glColor3ui(red, green, blue) glatter_glColor3ui_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3ui_debug(GLuint red, GLuint green, GLuint blue, const char* file, int line);
#define glColor3uiv(v) glatter_glColor3uiv_debug((v), __FILE__, __LINE__)
void glatter_glColor3uiv_debug(const GLuint *v, const char* file, int line);
#define glColor3us(red, green, blue) glatter_glColor3us_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3us_debug(GLushort red, GLushort green, GLushort blue, const char* file, int line);
#define glColor3usv(v) glatter_glColor3usv_debug((v), __FILE__, __LINE__)
void glatter_glColor3usv_debug(const GLushort *v, const char* file, int line);
#define glColor4b(red, green, blue, alpha) glatter_glColor4b_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4b_debug(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha, const char* file, int line);
#define glColor4bv(v) glatter_glColor4bv_debug((v), __FILE__, __LINE__)
void glatter_glColor4bv_debug(const GLbyte *v, const char* file, int line);
#define glColor4d(red, green, blue, alpha) glatter_glColor4d_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4d_debug(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha, const char* file, int line);
#define glColor4dv(v) glatter_glColor4dv_debug((v), __FILE__, __LINE__)
void glatter_glColor4dv_debug(const GLdouble *v, const char* file, int line);
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4f_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glColor4fv(v) glatter_glColor4fv_debug((v), __FILE__, __LINE__)
void glatter_glColor4fv_debug(const GLfloat *v, const char* file, int line);
#define glColor4i(red, green, blue, alpha) glatter_glColor4i_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4i_debug(GLint red, GLint green, GLint blue, GLint alpha, const char* file, int line);
#define glColor4iv(v) glatter_glColor4iv_debug((v), __FILE__, __LINE__)
void glatter_glColor4iv_debug(const GLint *v, const char* file, int line);
#define glColor4s(red, green, blue, alpha) glatter_glColor4s_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4s_debug(GLshort red, GLshort green, GLshort blue, GLshort alpha, const char* file, int line);
#define glColor4sv(v) glatter_glColor4sv_debug((v), __FILE__, __LINE__)
void glatter_glColor4sv_debug(const GLshort *v, const char* file, int line);
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ub_debug(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha, const char* file, int line);
#define glColor4ubv(v) glatter_glColor4ubv_debug((v), __FILE__, __LINE__)
void glatter_glColor4ubv_debug(const GLubyte *v, const char* file, int line);
#define glColor4ui(red, green, blue, alpha) glatter_glColor4ui_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ui_debug(GLuint red, GLuint green, GLuint blue, GLuint alpha, const char* file, int line);
#define glColor4uiv(v) glatter_glColor4uiv_debug((v), __FILE__, __LINE__)
void glatter_glColor4uiv_debug(const GLuint *v, const char* file, int line);
#define glColor4us(red, green, blue, alpha) glatter_glColor4us_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4us_debug(GLushort red, GLushort green, GLushort blue, GLushort alpha, const char* file, int line);
#define glColor4usv(v) glatter_glColor4usv_debug((v), __FILE__, __LINE__)
void glatter_glColor4usv_debug(const GLushort *v, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glColorMaterial(face, mode) glatter_glColorMaterial_debug((face), (mode), __FILE__, __LINE__)
void glatter_glColorMaterial_debug(GLenum face, GLenum mode, const char* file, int line);
#define glColorPointer(size, type, stride, ptr) glatter_glColorPointer_debug((size), (type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glColorPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glColorSubTable(target, start, count, format, type, data) glatter_glColorSubTable_debug((target), (start), (count), (format), (type), (data), __FILE__, __LINE__)
void glatter_glColorSubTable_debug(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data, const char* file, int line);
#define glColorTable(target, internalformat, width, format, type, table) glatter_glColorTable_debug((target), (internalformat), (width), (format), (type), (table), __FILE__, __LINE__)
void glatter_glColorTable_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table, const char* file, int line);
#define glColorTableParameterfv(target, pname, params) glatter_glColorTableParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glColorTableParameteriv(target, pname, params) glatter_glColorTableParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_debug((target), (level), (internalformat), (width), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1D_debug((target), (internalformat), (width), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter1D_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image, const char* file, int line);
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2D_debug((target), (internalformat), (width), (height), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter2D_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image, const char* file, int line);
#define glConvolutionParameterf(target, pname, params) glatter_glConvolutionParameterf_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterf_debug(GLenum target, GLenum pname, GLfloat params, const char* file, int line);
#define glConvolutionParameterfv(target, pname, params) glatter_glConvolutionParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glConvolutionParameteri(target, pname, params) glatter_glConvolutionParameteri_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteri_debug(GLenum target, GLenum pname, GLint params, const char* file, int line);
#define glConvolutionParameteriv(target, pname, params) glatter_glConvolutionParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glCopyColorSubTable(target, start, x, y, width) glatter_glCopyColorSubTable_debug((target), (start), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorSubTable_debug(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyColorTable(target, internalformat, x, y, width) glatter_glCopyColorTable_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorTable_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1D_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter1D_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2D_debug((target), (internalformat), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter2D_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyPixels(x, y, width, height, type) glatter_glCopyPixels_debug((x), (y), (width), (height), (type), __FILE__, __LINE__)
void glatter_glCopyPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type, const char* file, int line);
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D_debug((target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_debug((target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteLists(list, range) glatter_glDeleteLists_debug((list), (range), __FILE__, __LINE__)
void glatter_glDeleteLists_debug(GLuint list, GLsizei range, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRange(near_val, far_val) glatter_glDepthRange_debug((near_val), (far_val), __FILE__, __LINE__)
void glatter_glDepthRange_debug(GLclampd near_val, GLclampd far_val, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableClientState(cap) glatter_glDisableClientState_debug((cap), __FILE__, __LINE__)
void glatter_glDisableClientState_debug(GLenum cap, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawBuffer(mode) glatter_glDrawBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glDrawBuffer_debug(GLenum mode, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, const char* file, int line);
#define glDrawPixels(width, height, format, type, pixels) glatter_glDrawPixels_debug((width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glDrawPixels_debug(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, const char* file, int line);
#define glEdgeFlag(flag) glatter_glEdgeFlag_debug((flag), __FILE__, __LINE__)
void glatter_glEdgeFlag_debug(GLboolean flag, const char* file, int line);
#define glEdgeFlagPointer(stride, ptr) glatter_glEdgeFlagPointer_debug((stride), (ptr), __FILE__, __LINE__)
void glatter_glEdgeFlagPointer_debug(GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glEdgeFlagv(flag) glatter_glEdgeFlagv_debug((flag), __FILE__, __LINE__)
void glatter_glEdgeFlagv_debug(const GLboolean *flag, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableClientState(cap) glatter_glEnableClientState_debug((cap), __FILE__, __LINE__)
void glatter_glEnableClientState_debug(GLenum cap, const char* file, int line);
#define glEnd() glatter_glEnd_debug(__FILE__, __LINE__)
void glatter_glEnd_debug(const char* file, int line);
#define glEndList() glatter_glEndList_debug(__FILE__, __LINE__)
void glatter_glEndList_debug(const char* file, int line);
#define glEvalCoord1d(u) glatter_glEvalCoord1d_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1d_debug(GLdouble u, const char* file, int line);
#define glEvalCoord1dv(u) glatter_glEvalCoord1dv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1dv_debug(const GLdouble *u, const char* file, int line);
#define glEvalCoord1f(u) glatter_glEvalCoord1f_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1f_debug(GLfloat u, const char* file, int line);
#define glEvalCoord1fv(u) glatter_glEvalCoord1fv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1fv_debug(const GLfloat *u, const char* file, int line);
#define glEvalCoord2d(u, v) glatter_glEvalCoord2d_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2d_debug(GLdouble u, GLdouble v, const char* file, int line);
#define glEvalCoord2dv(u) glatter_glEvalCoord2dv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord2dv_debug(const GLdouble *u, const char* file, int line);
#define glEvalCoord2f(u, v) glatter_glEvalCoord2f_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2f_debug(GLfloat u, GLfloat v, const char* file, int line);
#define glEvalCoord2fv(u) glatter_glEvalCoord2fv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord2fv_debug(const GLfloat *u, const char* file, int line);
#define glEvalMesh1(mode, i1, i2) glatter_glEvalMesh1_debug((mode), (i1), (i2), __FILE__, __LINE__)
void glatter_glEvalMesh1_debug(GLenum mode, GLint i1, GLint i2, const char* file, int line);
#define glEvalMesh2(mode, i1, i2, j1, j2) glatter_glEvalMesh2_debug((mode), (i1), (i2), (j1), (j2), __FILE__, __LINE__)
void glatter_glEvalMesh2_debug(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2, const char* file, int line);
#define glEvalPoint1(i) glatter_glEvalPoint1_debug((i), __FILE__, __LINE__)
void glatter_glEvalPoint1_debug(GLint i, const char* file, int line);
#define glEvalPoint2(i, j) glatter_glEvalPoint2_debug((i), (j), __FILE__, __LINE__)
void glatter_glEvalPoint2_debug(GLint i, GLint j, const char* file, int line);
#define glFeedbackBuffer(size, type, buffer) glatter_glFeedbackBuffer_debug((size), (type), (buffer), __FILE__, __LINE__)
void glatter_glFeedbackBuffer_debug(GLsizei size, GLenum type, GLfloat *buffer, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFogf(pname, param) glatter_glFogf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glFogfv(pname, params) glatter_glFogfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glFogi(pname, param) glatter_glFogi_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogi_debug(GLenum pname, GLint param, const char* file, int line);
#define glFogiv(pname, params) glatter_glFogiv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogiv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glFrustum(left, right, bottom, top, near_val, far_val) glatter_glFrustum_debug((left), (right), (bottom), (top), (near_val), (far_val), __FILE__, __LINE__)
void glatter_glFrustum_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val, const char* file, int line);
#define glGenLists(range) glatter_glGenLists_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenLists_debug(GLsizei range, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGetBooleanv(pname, params) glatter_glGetBooleanv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *params, const char* file, int line);
#define glGetClipPlane(plane, equation) glatter_glGetClipPlane_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glGetClipPlane_debug(GLenum plane, GLdouble *equation, const char* file, int line);
#define glGetColorTable(target, format, type, table) glatter_glGetColorTable_debug((target), (format), (type), (table), __FILE__, __LINE__)
void glatter_glGetColorTable_debug(GLenum target, GLenum format, GLenum type, GLvoid *table, const char* file, int line);
#define glGetColorTableParameterfv(target, pname, params) glatter_glGetColorTableParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetColorTableParameteriv(target, pname, params) glatter_glGetColorTableParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetCompressedTexImage(target, lod, img) glatter_glGetCompressedTexImage_debug((target), (lod), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTexImage_debug(GLenum target, GLint lod, GLvoid *img, const char* file, int line);
#define glGetConvolutionFilter(target, format, type, image) glatter_glGetConvolutionFilter_debug((target), (format), (type), (image), __FILE__, __LINE__)
void glatter_glGetConvolutionFilter_debug(GLenum target, GLenum format, GLenum type, GLvoid *image, const char* file, int line);
#define glGetConvolutionParameterfv(target, pname, params) glatter_glGetConvolutionParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetConvolutionParameteriv(target, pname, params) glatter_glGetConvolutionParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetDoublev(pname, params) glatter_glGetDoublev_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetDoublev_debug(GLenum pname, GLdouble *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, params) glatter_glGetFloatv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *params, const char* file, int line);
#define glGetHistogram(target, reset, format, type, values) glatter_glGetHistogram_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetHistogram_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values, const char* file, int line);
#define glGetHistogramParameterfv(target, pname, params) glatter_glGetHistogramParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetHistogramParameteriv(target, pname, params) glatter_glGetHistogramParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, params) glatter_glGetIntegerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *params, const char* file, int line);
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightfv_debug(GLenum light, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetLightiv(light, pname, params) glatter_glGetLightiv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightiv_debug(GLenum light, GLenum pname, GLint *params, const char* file, int line);
#define glGetMapdv(target, query, v) glatter_glGetMapdv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapdv_debug(GLenum target, GLenum query, GLdouble *v, const char* file, int line);
#define glGetMapfv(target, query, v) glatter_glGetMapfv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapfv_debug(GLenum target, GLenum query, GLfloat *v, const char* file, int line);
#define glGetMapiv(target, query, v) glatter_glGetMapiv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapiv_debug(GLenum target, GLenum query, GLint *v, const char* file, int line);
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialfv_debug(GLenum face, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMaterialiv(face, pname, params) glatter_glGetMaterialiv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialiv_debug(GLenum face, GLenum pname, GLint *params, const char* file, int line);
#define glGetMinmax(target, reset, format, types, values) glatter_glGetMinmax_debug((target), (reset), (format), (types), (values), __FILE__, __LINE__)
void glatter_glGetMinmax_debug(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values, const char* file, int line);
#define glGetMinmaxParameterfv(target, pname, params) glatter_glGetMinmaxParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMinmaxParameteriv(target, pname, params) glatter_glGetMinmaxParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetPixelMapfv(map, values) glatter_glGetPixelMapfv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapfv_debug(GLenum map, GLfloat *values, const char* file, int line);
#define glGetPixelMapuiv(map, values) glatter_glGetPixelMapuiv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapuiv_debug(GLenum map, GLuint *values, const char* file, int line);
#define glGetPixelMapusv(map, values) glatter_glGetPixelMapusv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapusv_debug(GLenum map, GLushort *values, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, GLvoid **params, const char* file, int line);
#define glGetPolygonStipple(mask) glatter_glGetPolygonStipple_debug((mask), __FILE__, __LINE__)
void glatter_glGetPolygonStipple_debug(GLubyte *mask, const char* file, int line);
#define glGetSeparableFilter(target, format, type, row, column, span) glatter_glGetSeparableFilter_debug((target), (format), (type), (row), (column), (span), __FILE__, __LINE__)
void glatter_glGetSeparableFilter_debug(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnviv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexGendv(coord, pname, params) glatter_glGetTexGendv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGendv_debug(GLenum coord, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetTexGenfv(coord, pname, params) glatter_glGetTexGenfv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGenfv_debug(GLenum coord, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexGeniv(coord, pname, params) glatter_glGetTexGeniv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGeniv_debug(GLenum coord, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_debug((target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glHistogram(target, width, internalformat, sink) glatter_glHistogram_debug((target), (width), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glHistogram_debug(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glIndexMask(mask) glatter_glIndexMask_debug((mask), __FILE__, __LINE__)
void glatter_glIndexMask_debug(GLuint mask, const char* file, int line);
#define glIndexPointer(type, stride, ptr) glatter_glIndexPointer_debug((type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glIndexPointer_debug(GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glIndexd(c) glatter_glIndexd_debug((c), __FILE__, __LINE__)
void glatter_glIndexd_debug(GLdouble c, const char* file, int line);
#define glIndexdv(c) glatter_glIndexdv_debug((c), __FILE__, __LINE__)
void glatter_glIndexdv_debug(const GLdouble *c, const char* file, int line);
#define glIndexf(c) glatter_glIndexf_debug((c), __FILE__, __LINE__)
void glatter_glIndexf_debug(GLfloat c, const char* file, int line);
#define glIndexfv(c) glatter_glIndexfv_debug((c), __FILE__, __LINE__)
void glatter_glIndexfv_debug(const GLfloat *c, const char* file, int line);
#define glIndexi(c) glatter_glIndexi_debug((c), __FILE__, __LINE__)
void glatter_glIndexi_debug(GLint c, const char* file, int line);
#define glIndexiv(c) glatter_glIndexiv_debug((c), __FILE__, __LINE__)
void glatter_glIndexiv_debug(const GLint *c, const char* file, int line);
#define glIndexs(c) glatter_glIndexs_debug((c), __FILE__, __LINE__)
void glatter_glIndexs_debug(GLshort c, const char* file, int line);
#define glIndexsv(c) glatter_glIndexsv_debug((c), __FILE__, __LINE__)
void glatter_glIndexsv_debug(const GLshort *c, const char* file, int line);
#define glIndexub(c) glatter_glIndexub_debug((c), __FILE__, __LINE__)
void glatter_glIndexub_debug(GLubyte c, const char* file, int line);
#define glIndexubv(c) glatter_glIndexubv_debug((c), __FILE__, __LINE__)
void glatter_glIndexubv_debug(const GLubyte *c, const char* file, int line);
#define glInitNames() glatter_glInitNames_debug(__FILE__, __LINE__)
void glatter_glInitNames_debug(const char* file, int line);
#define glInterleavedArrays(format, stride, pointer) glatter_glInterleavedArrays_debug((format), (stride), (pointer), __FILE__, __LINE__)
void glatter_glInterleavedArrays_debug(GLenum format, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsList(list) glatter_glIsList_debug((list), __FILE__, __LINE__)
GLboolean glatter_glIsList_debug(GLuint list, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLightModelf(pname, param) glatter_glLightModelf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glLightModelfv(pname, params) glatter_glLightModelfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModelfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glLightModeli(pname, param) glatter_glLightModeli_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModeli_debug(GLenum pname, GLint param, const char* file, int line);
#define glLightModeliv(pname, params) glatter_glLightModeliv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModeliv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glLightf(light, pname, param) glatter_glLightf_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightf_debug(GLenum light, GLenum pname, GLfloat param, const char* file, int line);
#define glLightfv(light, pname, params) glatter_glLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightfv_debug(GLenum light, GLenum pname, const GLfloat *params, const char* file, int line);
#define glLighti(light, pname, param) glatter_glLighti_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLighti_debug(GLenum light, GLenum pname, GLint param, const char* file, int line);
#define glLightiv(light, pname, params) glatter_glLightiv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightiv_debug(GLenum light, GLenum pname, const GLint *params, const char* file, int line);
#define glLineStipple(factor, pattern) glatter_glLineStipple_debug((factor), (pattern), __FILE__, __LINE__)
void glatter_glLineStipple_debug(GLint factor, GLushort pattern, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glListBase(base) glatter_glListBase_debug((base), __FILE__, __LINE__)
void glatter_glListBase_debug(GLuint base, const char* file, int line);
#define glLoadIdentity() glatter_glLoadIdentity_debug(__FILE__, __LINE__)
void glatter_glLoadIdentity_debug(const char* file, int line);
#define glLoadMatrixd(m) glatter_glLoadMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glLoadMatrixf(m) glatter_glLoadMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glLoadName(name) glatter_glLoadName_debug((name), __FILE__, __LINE__)
void glatter_glLoadName_debug(GLuint name, const char* file, int line);
#define glLoadTransposeMatrixd(m) glatter_glLoadTransposeMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixd_debug(const GLdouble m[16], const char* file, int line);
#define glLoadTransposeMatrixf(m) glatter_glLoadTransposeMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixf_debug(const GLfloat m[16], const char* file, int line);
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#define glMap1d(target, u1, u2, stride, order, points) glatter_glMap1d_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1d_debug(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points, const char* file, int line);
#define glMap1f(target, u1, u2, stride, order, points) glatter_glMap1f_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1f_debug(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points, const char* file, int line);
#define glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2d_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2d_debug(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points, const char* file, int line);
#define glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2f_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2f_debug(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points, const char* file, int line);
#define glMapGrid1d(un, u1, u2) glatter_glMapGrid1d_debug((un), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1d_debug(GLint un, GLdouble u1, GLdouble u2, const char* file, int line);
#define glMapGrid1f(un, u1, u2) glatter_glMapGrid1f_debug((un), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1f_debug(GLint un, GLfloat u1, GLfloat u2, const char* file, int line);
#define glMapGrid2d(un, u1, u2, vn, v1, v2) glatter_glMapGrid2d_debug((un), (u1), (u2), (vn), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2d_debug(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2, const char* file, int line);
#define glMapGrid2f(un, u1, u2, vn, v1, v2) glatter_glMapGrid2f_debug((un), (u1), (u2), (vn), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2f_debug(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2, const char* file, int line);
#define glMaterialf(face, pname, param) glatter_glMaterialf_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialf_debug(GLenum face, GLenum pname, GLfloat param, const char* file, int line);
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialfv_debug(GLenum face, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMateriali(face, pname, param) glatter_glMateriali_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMateriali_debug(GLenum face, GLenum pname, GLint param, const char* file, int line);
#define glMaterialiv(face, pname, params) glatter_glMaterialiv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialiv_debug(GLenum face, GLenum pname, const GLint *params, const char* file, int line);
#define glMatrixMode(mode) glatter_glMatrixMode_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixMode_debug(GLenum mode, const char* file, int line);
#define glMinmax(target, internalformat, sink) glatter_glMinmax_debug((target), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glMinmax_debug(GLenum target, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glMultMatrixd(m) glatter_glMultMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glMultMatrixf(m) glatter_glMultMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glMultTransposeMatrixd(m) glatter_glMultTransposeMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixd_debug(const GLdouble m[16], const char* file, int line);
#define glMultTransposeMatrixf(m) glatter_glMultTransposeMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixf_debug(const GLfloat m[16], const char* file, int line);
#define glMultiTexCoord1d(target, s) glatter_glMultiTexCoord1d_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1d_debug(GLenum target, GLdouble s, const char* file, int line);
#define glMultiTexCoord1dv(target, v) glatter_glMultiTexCoord1dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord1f(target, s) glatter_glMultiTexCoord1f_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1f_debug(GLenum target, GLfloat s, const char* file, int line);
#define glMultiTexCoord1fv(target, v) glatter_glMultiTexCoord1fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord1i(target, s) glatter_glMultiTexCoord1i_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1i_debug(GLenum target, GLint s, const char* file, int line);
#define glMultiTexCoord1iv(target, v) glatter_glMultiTexCoord1iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord1s(target, s) glatter_glMultiTexCoord1s_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1s_debug(GLenum target, GLshort s, const char* file, int line);
#define glMultiTexCoord1sv(target, v) glatter_glMultiTexCoord1sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord2d(target, s, t) glatter_glMultiTexCoord2d_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2d_debug(GLenum target, GLdouble s, GLdouble t, const char* file, int line);
#define glMultiTexCoord2dv(target, v) glatter_glMultiTexCoord2dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord2f(target, s, t) glatter_glMultiTexCoord2f_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2f_debug(GLenum target, GLfloat s, GLfloat t, const char* file, int line);
#define glMultiTexCoord2fv(target, v) glatter_glMultiTexCoord2fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord2i(target, s, t) glatter_glMultiTexCoord2i_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2i_debug(GLenum target, GLint s, GLint t, const char* file, int line);
#define glMultiTexCoord2iv(target, v) glatter_glMultiTexCoord2iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord2s(target, s, t) glatter_glMultiTexCoord2s_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2s_debug(GLenum target, GLshort s, GLshort t, const char* file, int line);
#define glMultiTexCoord2sv(target, v) glatter_glMultiTexCoord2sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord3d(target, s, t, r) glatter_glMultiTexCoord3d_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3d_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glMultiTexCoord3dv(target, v) glatter_glMultiTexCoord3dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord3f(target, s, t, r) glatter_glMultiTexCoord3f_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glMultiTexCoord3fv(target, v) glatter_glMultiTexCoord3fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord3i(target, s, t, r) glatter_glMultiTexCoord3i_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3i_debug(GLenum target, GLint s, GLint t, GLint r, const char* file, int line);
#define glMultiTexCoord3iv(target, v) glatter_glMultiTexCoord3iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord3s(target, s, t, r) glatter_glMultiTexCoord3s_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3s_debug(GLenum target, GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glMultiTexCoord3sv(target, v) glatter_glMultiTexCoord3sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord4d(target, s, t, r, q) glatter_glMultiTexCoord4d_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4d_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glMultiTexCoord4dv(target, v) glatter_glMultiTexCoord4dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4fv(target, v) glatter_glMultiTexCoord4fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord4i(target, s, t, r, q) glatter_glMultiTexCoord4i_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4i_debug(GLenum target, GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glMultiTexCoord4iv(target, v) glatter_glMultiTexCoord4iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord4s(target, s, t, r, q) glatter_glMultiTexCoord4s_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4s_debug(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glMultiTexCoord4sv(target, v) glatter_glMultiTexCoord4sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glNewList(list, mode) glatter_glNewList_debug((list), (mode), __FILE__, __LINE__)
void glatter_glNewList_debug(GLuint list, GLenum mode, const char* file, int line);
#define glNormal3b(nx, ny, nz) glatter_glNormal3b_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3b_debug(GLbyte nx, GLbyte ny, GLbyte nz, const char* file, int line);
#define glNormal3bv(v) glatter_glNormal3bv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3bv_debug(const GLbyte *v, const char* file, int line);
#define glNormal3d(nx, ny, nz) glatter_glNormal3d_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3d_debug(GLdouble nx, GLdouble ny, GLdouble nz, const char* file, int line);
#define glNormal3dv(v) glatter_glNormal3dv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3dv_debug(const GLdouble *v, const char* file, int line);
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3f_debug(GLfloat nx, GLfloat ny, GLfloat nz, const char* file, int line);
#define glNormal3fv(v) glatter_glNormal3fv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3fv_debug(const GLfloat *v, const char* file, int line);
#define glNormal3i(nx, ny, nz) glatter_glNormal3i_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3i_debug(GLint nx, GLint ny, GLint nz, const char* file, int line);
#define glNormal3iv(v) glatter_glNormal3iv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3iv_debug(const GLint *v, const char* file, int line);
#define glNormal3s(nx, ny, nz) glatter_glNormal3s_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3s_debug(GLshort nx, GLshort ny, GLshort nz, const char* file, int line);
#define glNormal3sv(v) glatter_glNormal3sv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3sv_debug(const GLshort *v, const char* file, int line);
#define glNormalPointer(type, stride, ptr) glatter_glNormalPointer_debug((type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glNormalPointer_debug(GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glOrtho(left, right, bottom, top, near_val, far_val) glatter_glOrtho_debug((left), (right), (bottom), (top), (near_val), (far_val), __FILE__, __LINE__)
void glatter_glOrtho_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val, const char* file, int line);
#define glPassThrough(token) glatter_glPassThrough_debug((token), __FILE__, __LINE__)
void glatter_glPassThrough_debug(GLfloat token, const char* file, int line);
#define glPixelMapfv(map, mapsize, values) glatter_glPixelMapfv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapfv_debug(GLenum map, GLsizei mapsize, const GLfloat *values, const char* file, int line);
#define glPixelMapuiv(map, mapsize, values) glatter_glPixelMapuiv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapuiv_debug(GLenum map, GLsizei mapsize, const GLuint *values, const char* file, int line);
#define glPixelMapusv(map, mapsize, values) glatter_glPixelMapusv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapusv_debug(GLenum map, GLsizei mapsize, const GLushort *values, const char* file, int line);
#define glPixelStoref(pname, param) glatter_glPixelStoref_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStoref_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelTransferf(pname, param) glatter_glPixelTransferf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelTransferi(pname, param) glatter_glPixelTransferi_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferi_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelZoom(xfactor, yfactor) glatter_glPixelZoom_debug((xfactor), (yfactor), __FILE__, __LINE__)
void glatter_glPixelZoom_debug(GLfloat xfactor, GLfloat yfactor, const char* file, int line);
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#define glPolygonMode(face, mode) glatter_glPolygonMode_debug((face), (mode), __FILE__, __LINE__)
void glatter_glPolygonMode_debug(GLenum face, GLenum mode, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPolygonStipple(mask) glatter_glPolygonStipple_debug((mask), __FILE__, __LINE__)
void glatter_glPolygonStipple_debug(const GLubyte *mask, const char* file, int line);
#define glPopAttrib() glatter_glPopAttrib_debug(__FILE__, __LINE__)
void glatter_glPopAttrib_debug(const char* file, int line);
#define glPopClientAttrib() glatter_glPopClientAttrib_debug(__FILE__, __LINE__)
void glatter_glPopClientAttrib_debug(const char* file, int line);
#define glPopMatrix() glatter_glPopMatrix_debug(__FILE__, __LINE__)
void glatter_glPopMatrix_debug(const char* file, int line);
#define glPopName() glatter_glPopName_debug(__FILE__, __LINE__)
void glatter_glPopName_debug(const char* file, int line);
#define glPrioritizeTextures(n, textures, priorities) glatter_glPrioritizeTextures_debug((n), (textures), (priorities), __FILE__, __LINE__)
void glatter_glPrioritizeTextures_debug(GLsizei n, const GLuint *textures, const GLclampf *priorities, const char* file, int line);
#define glPushAttrib(mask) glatter_glPushAttrib_debug((mask), __FILE__, __LINE__)
void glatter_glPushAttrib_debug(GLbitfield mask, const char* file, int line);
#define glPushClientAttrib(mask) glatter_glPushClientAttrib_debug((mask), __FILE__, __LINE__)
void glatter_glPushClientAttrib_debug(GLbitfield mask, const char* file, int line);
#define glPushMatrix() glatter_glPushMatrix_debug(__FILE__, __LINE__)
void glatter_glPushMatrix_debug(const char* file, int line);
#define glPushName(name) glatter_glPushName_debug((name), __FILE__, __LINE__)
void glatter_glPushName_debug(GLuint name, const char* file, int line);
#define glRasterPos2d(x, y) glatter_glRasterPos2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glRasterPos2dv(v) glatter_glRasterPos2dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos2f(x, y) glatter_glRasterPos2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glRasterPos2fv(v) glatter_glRasterPos2fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos2i(x, y) glatter_glRasterPos2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2i_debug(GLint x, GLint y, const char* file, int line);
#define glRasterPos2iv(v) glatter_glRasterPos2iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos2s(x, y) glatter_glRasterPos2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glRasterPos2sv(v) glatter_glRasterPos2sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2sv_debug(const GLshort *v, const char* file, int line);
#define glRasterPos3d(x, y, z) glatter_glRasterPos3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glRasterPos3dv(v) glatter_glRasterPos3dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos3f(x, y, z) glatter_glRasterPos3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glRasterPos3fv(v) glatter_glRasterPos3fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos3i(x, y, z) glatter_glRasterPos3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glRasterPos3iv(v) glatter_glRasterPos3iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos3s(x, y, z) glatter_glRasterPos3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glRasterPos3sv(v) glatter_glRasterPos3sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3sv_debug(const GLshort *v, const char* file, int line);
#define glRasterPos4d(x, y, z, w) glatter_glRasterPos4d_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4d_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glRasterPos4dv(v) glatter_glRasterPos4dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos4f(x, y, z, w) glatter_glRasterPos4f_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4f_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glRasterPos4fv(v) glatter_glRasterPos4fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos4i(x, y, z, w) glatter_glRasterPos4i_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4i_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glRasterPos4iv(v) glatter_glRasterPos4iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos4s(x, y, z, w) glatter_glRasterPos4s_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4s_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glRasterPos4sv(v) glatter_glRasterPos4sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4sv_debug(const GLshort *v, const char* file, int line);
#define glReadBuffer(mode) glatter_glReadBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum mode, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glRectd(x1, y1, x2, y2) glatter_glRectd_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectd_debug(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2, const char* file, int line);
#define glRectdv(v1, v2) glatter_glRectdv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectdv_debug(const GLdouble *v1, const GLdouble *v2, const char* file, int line);
#define glRectf(x1, y1, x2, y2) glatter_glRectf_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectf_debug(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2, const char* file, int line);
#define glRectfv(v1, v2) glatter_glRectfv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectfv_debug(const GLfloat *v1, const GLfloat *v2, const char* file, int line);
#define glRecti(x1, y1, x2, y2) glatter_glRecti_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRecti_debug(GLint x1, GLint y1, GLint x2, GLint y2, const char* file, int line);
#define glRectiv(v1, v2) glatter_glRectiv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectiv_debug(const GLint *v1, const GLint *v2, const char* file, int line);
#define glRects(x1, y1, x2, y2) glatter_glRects_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRects_debug(GLshort x1, GLshort y1, GLshort x2, GLshort y2, const char* file, int line);
#define glRectsv(v1, v2) glatter_glRectsv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectsv_debug(const GLshort *v1, const GLshort *v2, const char* file, int line);
#define glRenderMode(mode) glatter_glRenderMode_debug((mode), __FILE__, __LINE__)
GLint glatter_glRenderMode_debug(GLenum mode, const char* file, int line);
#define glResetHistogram(target) glatter_glResetHistogram_debug((target), __FILE__, __LINE__)
void glatter_glResetHistogram_debug(GLenum target, const char* file, int line);
#define glResetMinmax(target) glatter_glResetMinmax_debug((target), __FILE__, __LINE__)
void glatter_glResetMinmax_debug(GLenum target, const char* file, int line);
#define glRotated(angle, x, y, z) glatter_glRotated_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotated_debug(GLdouble angle, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glRotatef(angle, x, y, z) glatter_glRotatef_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatef_debug(GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLclampf value, GLboolean invert, const char* file, int line);
#define glScaled(x, y, z) glatter_glScaled_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScaled_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glScalef(x, y, z) glatter_glScalef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glSelectBuffer(size, buffer) glatter_glSelectBuffer_debug((size), (buffer), __FILE__, __LINE__)
void glatter_glSelectBuffer_debug(GLsizei size, GLuint *buffer, const char* file, int line);
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2D_debug((target), (internalformat), (width), (height), (format), (type), (row), (column), __FILE__, __LINE__)
void glatter_glSeparableFilter2D_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column, const char* file, int line);
#define glShadeModel(mode) glatter_glShadeModel_debug((mode), __FILE__, __LINE__)
void glatter_glShadeModel_debug(GLenum mode, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glTexCoord1d(s) glatter_glTexCoord1d_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1d_debug(GLdouble s, const char* file, int line);
#define glTexCoord1dv(v) glatter_glTexCoord1dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord1f(s) glatter_glTexCoord1f_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1f_debug(GLfloat s, const char* file, int line);
#define glTexCoord1fv(v) glatter_glTexCoord1fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord1i(s) glatter_glTexCoord1i_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1i_debug(GLint s, const char* file, int line);
#define glTexCoord1iv(v) glatter_glTexCoord1iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord1s(s) glatter_glTexCoord1s_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1s_debug(GLshort s, const char* file, int line);
#define glTexCoord1sv(v) glatter_glTexCoord1sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord2d(s, t) glatter_glTexCoord2d_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2d_debug(GLdouble s, GLdouble t, const char* file, int line);
#define glTexCoord2dv(v) glatter_glTexCoord2dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord2f(s, t) glatter_glTexCoord2f_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2f_debug(GLfloat s, GLfloat t, const char* file, int line);
#define glTexCoord2fv(v) glatter_glTexCoord2fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord2i(s, t) glatter_glTexCoord2i_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2i_debug(GLint s, GLint t, const char* file, int line);
#define glTexCoord2iv(v) glatter_glTexCoord2iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord2s(s, t) glatter_glTexCoord2s_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2s_debug(GLshort s, GLshort t, const char* file, int line);
#define glTexCoord2sv(v) glatter_glTexCoord2sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord3d(s, t, r) glatter_glTexCoord3d_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3d_debug(GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glTexCoord3dv(v) glatter_glTexCoord3dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord3f(s, t, r) glatter_glTexCoord3f_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3f_debug(GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glTexCoord3fv(v) glatter_glTexCoord3fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord3i(s, t, r) glatter_glTexCoord3i_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3i_debug(GLint s, GLint t, GLint r, const char* file, int line);
#define glTexCoord3iv(v) glatter_glTexCoord3iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord3s(s, t, r) glatter_glTexCoord3s_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3s_debug(GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glTexCoord3sv(v) glatter_glTexCoord3sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord4d(s, t, r, q) glatter_glTexCoord4d_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4d_debug(GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glTexCoord4dv(v) glatter_glTexCoord4dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord4f(s, t, r, q) glatter_glTexCoord4f_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4f_debug(GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glTexCoord4fv(v) glatter_glTexCoord4fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord4i(s, t, r, q) glatter_glTexCoord4i_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4i_debug(GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glTexCoord4iv(v) glatter_glTexCoord4iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord4s(s, t, r, q) glatter_glTexCoord4s_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4s_debug(GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glTexCoord4sv(v) glatter_glTexCoord4sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoordPointer(size, type, stride, ptr) glatter_glTexCoordPointer_debug((size), (type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glTexCoordPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvi_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnviv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexGend(coord, pname, param) glatter_glTexGend_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGend_debug(GLenum coord, GLenum pname, GLdouble param, const char* file, int line);
#define glTexGendv(coord, pname, params) glatter_glTexGendv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGendv_debug(GLenum coord, GLenum pname, const GLdouble *params, const char* file, int line);
#define glTexGenf(coord, pname, param) glatter_glTexGenf_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGenf_debug(GLenum coord, GLenum pname, GLfloat param, const char* file, int line);
#define glTexGenfv(coord, pname, params) glatter_glTexGenfv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGenfv_debug(GLenum coord, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexGeni(coord, pname, param) glatter_glTexGeni_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGeni_debug(GLenum coord, GLenum pname, GLint param, const char* file, int line);
#define glTexGeniv(coord, pname, params) glatter_glTexGeniv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGeniv_debug(GLenum coord, GLenum pname, const GLint *params, const char* file, int line);
#define glTexImage1D(target, level, internalFormat, width, border, format, type, pixels) glatter_glTexImage1D_debug((target), (level), (internalFormat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage1D_debug(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalFormat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalFormat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTranslated(x, y, z) glatter_glTranslated_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslated_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glTranslatef(x, y, z) glatter_glTranslatef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertex2d(x, y) glatter_glVertex2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glVertex2dv(v) glatter_glVertex2dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex2f(x, y) glatter_glVertex2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glVertex2fv(v) glatter_glVertex2fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex2i(x, y) glatter_glVertex2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2i_debug(GLint x, GLint y, const char* file, int line);
#define glVertex2iv(v) glatter_glVertex2iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2iv_debug(const GLint *v, const char* file, int line);
#define glVertex2s(x, y) glatter_glVertex2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glVertex2sv(v) glatter_glVertex2sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2sv_debug(const GLshort *v, const char* file, int line);
#define glVertex3d(x, y, z) glatter_glVertex3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertex3dv(v) glatter_glVertex3dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex3f(x, y, z) glatter_glVertex3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertex3fv(v) glatter_glVertex3fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex3i(x, y, z) glatter_glVertex3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glVertex3iv(v) glatter_glVertex3iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3iv_debug(const GLint *v, const char* file, int line);
#define glVertex3s(x, y, z) glatter_glVertex3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertex3sv(v) glatter_glVertex3sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3sv_debug(const GLshort *v, const char* file, int line);
#define glVertex4d(x, y, z, w) glatter_glVertex4d_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4d_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertex4dv(v) glatter_glVertex4dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex4f(x, y, z, w) glatter_glVertex4f_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4f_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertex4fv(v) glatter_glVertex4fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex4i(x, y, z, w) glatter_glVertex4i_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4i_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertex4iv(v) glatter_glVertex4iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4iv_debug(const GLint *v, const char* file, int line);
#define glVertex4s(x, y, z, w) glatter_glVertex4s_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4s_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertex4sv(v) glatter_glVertex4sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4sv_debug(const GLshort *v, const char* file, int line);
#define glVertexPointer(size, type, stride, ptr) glatter_glVertexPointer_debug((size), (type), (stride), (ptr), __FILE__, __LINE__)
void glatter_glVertexPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // !defined(GL_VERSION_ES_CM_1_0)
#if defined(GL_VERSION_ES_CM_1_0)
#if defined(GL_OES_point_size_array)
#define glPointSizePointerOES(type, stride, pointer) glatter_glPointSizePointerOES_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glPointSizePointerOES_debug(GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#endif // defined(GL_OES_point_size_array)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFunc_debug(GLenum func, GLclampf ref, const char* file, int line);
#define glAlphaFuncx(func, ref) glatter_glAlphaFuncx_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFuncx_debug(GLenum func, GLclampx ref, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha, const char* file, int line);
#define glClearColorx(red, green, blue, alpha) glatter_glClearColorx_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColorx_debug(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha, const char* file, int line);
#define glClearDepthf(depth) glatter_glClearDepthf_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLclampf depth, const char* file, int line);
#define glClearDepthx(depth) glatter_glClearDepthx_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthx_debug(GLclampx depth, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTexture_debug(GLenum texture, const char* file, int line);
#define glClipPlanef(plane, equation) glatter_glClipPlanef_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlanef_debug(GLenum plane, const GLfloat *equation, const char* file, int line);
#define glClipPlanex(plane, equation) glatter_glClipPlanex_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlanex_debug(GLenum plane, const GLfixed *equation, const char* file, int line);
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4f_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ub_debug(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha, const char* file, int line);
#define glColor4x(red, green, blue, alpha) glatter_glColor4x_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4x_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glColorPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(zNear, zFar) glatter_glDepthRangef_debug((zNear), (zFar), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLclampf zNear, GLclampf zFar, const char* file, int line);
#define glDepthRangex(zNear, zFar) glatter_glDepthRangex_debug((zNear), (zFar), __FILE__, __LINE__)
void glatter_glDepthRangex_debug(GLclampx zNear, GLclampx zFar, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableClientState(array) glatter_glDisableClientState_debug((array), __FILE__, __LINE__)
void glatter_glDisableClientState_debug(GLenum array, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableClientState(array) glatter_glEnableClientState_debug((array), __FILE__, __LINE__)
void glatter_glEnableClientState_debug(GLenum array, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFogf(pname, param) glatter_glFogf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glFogfv(pname, params) glatter_glFogfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glFogx(pname, param) glatter_glFogx_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogx_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glFogxv(pname, params) glatter_glFogxv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogxv_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glFrustumf(left, right, bottom, top, zNear, zFar) glatter_glFrustumf_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glFrustumf_debug(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar, const char* file, int line);
#define glFrustumx(left, right, bottom, top, zNear, zFar) glatter_glFrustumx_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glFrustumx_debug(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGetBooleanv(pname, params) glatter_glGetBooleanv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *params, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetClipPlanef(pname, eqn) glatter_glGetClipPlanef_debug((pname), (eqn), __FILE__, __LINE__)
void glatter_glGetClipPlanef_debug(GLenum pname, GLfloat eqn[4], const char* file, int line);
#define glGetClipPlanex(pname, eqn) glatter_glGetClipPlanex_debug((pname), (eqn), __FILE__, __LINE__)
void glatter_glGetClipPlanex_debug(GLenum pname, GLfixed eqn[4], const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFixedv(pname, params) glatter_glGetFixedv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFixedv_debug(GLenum pname, GLfixed *params, const char* file, int line);
#define glGetFloatv(pname, params) glatter_glGetFloatv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *params, const char* file, int line);
#define glGetIntegerv(pname, params) glatter_glGetIntegerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *params, const char* file, int line);
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightfv_debug(GLenum light, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetLightxv(light, pname, params) glatter_glGetLightxv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightxv_debug(GLenum light, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialfv_debug(GLenum face, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMaterialxv(face, pname, params) glatter_glGetMaterialxv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialxv_debug(GLenum face, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, GLvoid **params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexEnvfv(env, pname, params) glatter_glGetTexEnvfv_debug((env), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvfv_debug(GLenum env, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexEnviv(env, pname, params) glatter_glGetTexEnviv_debug((env), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnviv_debug(GLenum env, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexEnvxv(env, pname, params) glatter_glGetTexEnvxv_debug((env), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvxv_debug(GLenum env, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterxv(target, pname, params) glatter_glGetTexParameterxv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterxv_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLightModelf(pname, param) glatter_glLightModelf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glLightModelfv(pname, params) glatter_glLightModelfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModelfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glLightModelx(pname, param) glatter_glLightModelx_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelx_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glLightModelxv(pname, params) glatter_glLightModelxv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModelxv_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#define glLightf(light, pname, param) glatter_glLightf_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightf_debug(GLenum light, GLenum pname, GLfloat param, const char* file, int line);
#define glLightfv(light, pname, params) glatter_glLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightfv_debug(GLenum light, GLenum pname, const GLfloat *params, const char* file, int line);
#define glLightx(light, pname, param) glatter_glLightx_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightx_debug(GLenum light, GLenum pname, GLfixed param, const char* file, int line);
#define glLightxv(light, pname, params) glatter_glLightxv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightxv_debug(GLenum light, GLenum pname, const GLfixed *params, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLineWidthx(width) glatter_glLineWidthx_debug((width), __FILE__, __LINE__)
void glatter_glLineWidthx_debug(GLfixed width, const char* file, int line);
#define glLoadIdentity() glatter_glLoadIdentity_debug(__FILE__, __LINE__)
void glatter_glLoadIdentity_debug(const char* file, int line);
#define glLoadMatrixf(m) glatter_glLoadMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glLoadMatrixx(m) glatter_glLoadMatrixx_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixx_debug(const GLfixed *m, const char* file, int line);
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#define glMaterialf(face, pname, param) glatter_glMaterialf_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialf_debug(GLenum face, GLenum pname, GLfloat param, const char* file, int line);
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialfv_debug(GLenum face, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMaterialx(face, pname, param) glatter_glMaterialx_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialx_debug(GLenum face, GLenum pname, GLfixed param, const char* file, int line);
#define glMaterialxv(face, pname, params) glatter_glMaterialxv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialxv_debug(GLenum face, GLenum pname, const GLfixed *params, const char* file, int line);
#define glMatrixMode(mode) glatter_glMatrixMode_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixMode_debug(GLenum mode, const char* file, int line);
#define glMultMatrixf(m) glatter_glMultMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glMultMatrixx(m) glatter_glMultMatrixx_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixx_debug(const GLfixed *m, const char* file, int line);
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4x(target, s, t, r, q) glatter_glMultiTexCoord4x_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4x_debug(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q, const char* file, int line);
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3f_debug(GLfloat nx, GLfloat ny, GLfloat nz, const char* file, int line);
#define glNormal3x(nx, ny, nz) glatter_glNormal3x_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3x_debug(GLfixed nx, GLfixed ny, GLfixed nz, const char* file, int line);
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glNormalPointer_debug(GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glOrthof(left, right, bottom, top, zNear, zFar) glatter_glOrthof_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glOrthof_debug(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar, const char* file, int line);
#define glOrthox(left, right, bottom, top, zNear, zFar) glatter_glOrthox_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glOrthox_debug(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointParameterf(pname, param) glatter_glPointParameterf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glPointParameterx(pname, param) glatter_glPointParameterx_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterx_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glPointParameterxv(pname, params) glatter_glPointParameterxv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterxv_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#define glPointSizex(size) glatter_glPointSizex_debug((size), __FILE__, __LINE__)
void glatter_glPointSizex_debug(GLfixed size, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPolygonOffsetx(factor, units) glatter_glPolygonOffsetx_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffsetx_debug(GLfixed factor, GLfixed units, const char* file, int line);
#define glPopMatrix() glatter_glPopMatrix_debug(__FILE__, __LINE__)
void glatter_glPopMatrix_debug(const char* file, int line);
#define glPushMatrix() glatter_glPushMatrix_debug(__FILE__, __LINE__)
void glatter_glPushMatrix_debug(const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glRotatef(angle, x, y, z) glatter_glRotatef_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatef_debug(GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glRotatex(angle, x, y, z) glatter_glRotatex_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatex_debug(GLfixed angle, GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLclampf value, GLboolean invert, const char* file, int line);
#define glSampleCoveragex(value, invert) glatter_glSampleCoveragex_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoveragex_debug(GLclampx value, GLboolean invert, const char* file, int line);
#define glScalef(x, y, z) glatter_glScalef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glScalex(x, y, z) glatter_glScalex_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalex_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShadeModel(mode) glatter_glShadeModel_debug((mode), __FILE__, __LINE__)
void glatter_glShadeModel_debug(GLenum mode, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glTexCoordPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvi_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnviv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexEnvx(target, pname, param) glatter_glTexEnvx_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvx_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glTexEnvxv(target, pname, params) glatter_glTexEnvxv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvxv_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterx(target, pname, param) glatter_glTexParameterx_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterx_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glTexParameterxv(target, pname, params) glatter_glTexParameterxv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterxv_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTranslatef(x, y, z) glatter_glTranslatef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTranslatex(x, y, z) glatter_glTranslatex_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatex_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_VERSION_ES_CM_1_0)
#endif // !defined(__GL_H__)
#if defined(__GL_H__)
#if !defined(GL_VERSION_ES_CM_1_0)
#define glAccum(op, value) glatter_glAccum_debug((op), (value), __FILE__, __LINE__)
void glatter_glAccum_debug(GLenum op, GLfloat value, const char* file, int line);
#define glAlphaFunc(func, ref) glatter_glAlphaFunc_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFunc_debug(GLenum func, GLclampf ref, const char* file, int line);
#define glAreTexturesResident(n, textures, residences) glatter_glAreTexturesResident_debug((n), (textures), (residences), __FILE__, __LINE__)
GLboolean glatter_glAreTexturesResident_debug(GLsizei n, const GLuint *textures, GLboolean *residences, const char* file, int line);
#define glArrayElement(i) glatter_glArrayElement_debug((i), __FILE__, __LINE__)
void glatter_glArrayElement_debug(GLint i, const char* file, int line);
#define glBegin(mode) glatter_glBegin_debug((mode), __FILE__, __LINE__)
void glatter_glBegin_debug(GLenum mode, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmap_debug((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap), __FILE__, __LINE__)
void glatter_glBitmap_debug(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glCallList(list) glatter_glCallList_debug((list), __FILE__, __LINE__)
void glatter_glCallList_debug(GLuint list, const char* file, int line);
#define glCallLists(n, type, lists) glatter_glCallLists_debug((n), (type), (lists), __FILE__, __LINE__)
void glatter_glCallLists_debug(GLsizei n, GLenum type, const GLvoid *lists, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearAccum(red, green, blue, alpha) glatter_glClearAccum_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearAccum_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha, const char* file, int line);
#define glClearDepth(depth) glatter_glClearDepth_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepth_debug(GLclampd depth, const char* file, int line);
#define glClearIndex(c) glatter_glClearIndex_debug((c), __FILE__, __LINE__)
void glatter_glClearIndex_debug(GLfloat c, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glClipPlane(plane, equation) glatter_glClipPlane_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlane_debug(GLenum plane, const GLdouble *equation, const char* file, int line);
#define glColor3b(red, green, blue) glatter_glColor3b_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3b_debug(GLbyte red, GLbyte green, GLbyte blue, const char* file, int line);
#define glColor3bv(v) glatter_glColor3bv_debug((v), __FILE__, __LINE__)
void glatter_glColor3bv_debug(const GLbyte *v, const char* file, int line);
#define glColor3d(red, green, blue) glatter_glColor3d_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3d_debug(GLdouble red, GLdouble green, GLdouble blue, const char* file, int line);
#define glColor3dv(v) glatter_glColor3dv_debug((v), __FILE__, __LINE__)
void glatter_glColor3dv_debug(const GLdouble *v, const char* file, int line);
#define glColor3f(red, green, blue) glatter_glColor3f_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3f_debug(GLfloat red, GLfloat green, GLfloat blue, const char* file, int line);
#define glColor3fv(v) glatter_glColor3fv_debug((v), __FILE__, __LINE__)
void glatter_glColor3fv_debug(const GLfloat *v, const char* file, int line);
#define glColor3i(red, green, blue) glatter_glColor3i_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3i_debug(GLint red, GLint green, GLint blue, const char* file, int line);
#define glColor3iv(v) glatter_glColor3iv_debug((v), __FILE__, __LINE__)
void glatter_glColor3iv_debug(const GLint *v, const char* file, int line);
#define glColor3s(red, green, blue) glatter_glColor3s_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3s_debug(GLshort red, GLshort green, GLshort blue, const char* file, int line);
#define glColor3sv(v) glatter_glColor3sv_debug((v), __FILE__, __LINE__)
void glatter_glColor3sv_debug(const GLshort *v, const char* file, int line);
#define glColor3ub(red, green, blue) glatter_glColor3ub_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3ub_debug(GLubyte red, GLubyte green, GLubyte blue, const char* file, int line);
#define glColor3ubv(v) glatter_glColor3ubv_debug((v), __FILE__, __LINE__)
void glatter_glColor3ubv_debug(const GLubyte *v, const char* file, int line);
#define glColor3ui(red, green, blue) glatter_glColor3ui_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3ui_debug(GLuint red, GLuint green, GLuint blue, const char* file, int line);
#define glColor3uiv(v) glatter_glColor3uiv_debug((v), __FILE__, __LINE__)
void glatter_glColor3uiv_debug(const GLuint *v, const char* file, int line);
#define glColor3us(red, green, blue) glatter_glColor3us_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3us_debug(GLushort red, GLushort green, GLushort blue, const char* file, int line);
#define glColor3usv(v) glatter_glColor3usv_debug((v), __FILE__, __LINE__)
void glatter_glColor3usv_debug(const GLushort *v, const char* file, int line);
#define glColor4b(red, green, blue, alpha) glatter_glColor4b_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4b_debug(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha, const char* file, int line);
#define glColor4bv(v) glatter_glColor4bv_debug((v), __FILE__, __LINE__)
void glatter_glColor4bv_debug(const GLbyte *v, const char* file, int line);
#define glColor4d(red, green, blue, alpha) glatter_glColor4d_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4d_debug(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha, const char* file, int line);
#define glColor4dv(v) glatter_glColor4dv_debug((v), __FILE__, __LINE__)
void glatter_glColor4dv_debug(const GLdouble *v, const char* file, int line);
#define glColor4f(red, green, blue, alpha) glatter_glColor4f_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4f_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glColor4fv(v) glatter_glColor4fv_debug((v), __FILE__, __LINE__)
void glatter_glColor4fv_debug(const GLfloat *v, const char* file, int line);
#define glColor4i(red, green, blue, alpha) glatter_glColor4i_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4i_debug(GLint red, GLint green, GLint blue, GLint alpha, const char* file, int line);
#define glColor4iv(v) glatter_glColor4iv_debug((v), __FILE__, __LINE__)
void glatter_glColor4iv_debug(const GLint *v, const char* file, int line);
#define glColor4s(red, green, blue, alpha) glatter_glColor4s_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4s_debug(GLshort red, GLshort green, GLshort blue, GLshort alpha, const char* file, int line);
#define glColor4sv(v) glatter_glColor4sv_debug((v), __FILE__, __LINE__)
void glatter_glColor4sv_debug(const GLshort *v, const char* file, int line);
#define glColor4ub(red, green, blue, alpha) glatter_glColor4ub_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ub_debug(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha, const char* file, int line);
#define glColor4ubv(v) glatter_glColor4ubv_debug((v), __FILE__, __LINE__)
void glatter_glColor4ubv_debug(const GLubyte *v, const char* file, int line);
#define glColor4ui(red, green, blue, alpha) glatter_glColor4ui_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4ui_debug(GLuint red, GLuint green, GLuint blue, GLuint alpha, const char* file, int line);
#define glColor4uiv(v) glatter_glColor4uiv_debug((v), __FILE__, __LINE__)
void glatter_glColor4uiv_debug(const GLuint *v, const char* file, int line);
#define glColor4us(red, green, blue, alpha) glatter_glColor4us_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4us_debug(GLushort red, GLushort green, GLushort blue, GLushort alpha, const char* file, int line);
#define glColor4usv(v) glatter_glColor4usv_debug((v), __FILE__, __LINE__)
void glatter_glColor4usv_debug(const GLushort *v, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glColorMaterial(face, mode) glatter_glColorMaterial_debug((face), (mode), __FILE__, __LINE__)
void glatter_glColorMaterial_debug(GLenum face, GLenum mode, const char* file, int line);
#define glColorPointer(size, type, stride, pointer) glatter_glColorPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glColorPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glCopyPixels(x, y, width, height, type) glatter_glCopyPixels_debug((x), (y), (width), (height), (type), __FILE__, __LINE__)
void glatter_glCopyPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type, const char* file, int line);
#define glCopyTexImage1D(target, level, internalFormat, x, y, width, border) glatter_glCopyTexImage1D_debug((target), (level), (internalFormat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage1D_debug(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTexImage2D(target, level, internalFormat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalFormat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_debug((target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteLists(list, range) glatter_glDeleteLists_debug((list), (range), __FILE__, __LINE__)
void glatter_glDeleteLists_debug(GLuint list, GLsizei range, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRange(zNear, zFar) glatter_glDepthRange_debug((zNear), (zFar), __FILE__, __LINE__)
void glatter_glDepthRange_debug(GLclampd zNear, GLclampd zFar, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableClientState(array) glatter_glDisableClientState_debug((array), __FILE__, __LINE__)
void glatter_glDisableClientState_debug(GLenum array, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawBuffer(mode) glatter_glDrawBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glDrawBuffer_debug(GLenum mode, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, const char* file, int line);
#define glDrawPixels(width, height, format, type, pixels) glatter_glDrawPixels_debug((width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glDrawPixels_debug(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glEdgeFlag(flag) glatter_glEdgeFlag_debug((flag), __FILE__, __LINE__)
void glatter_glEdgeFlag_debug(GLboolean flag, const char* file, int line);
#define glEdgeFlagPointer(stride, pointer) glatter_glEdgeFlagPointer_debug((stride), (pointer), __FILE__, __LINE__)
void glatter_glEdgeFlagPointer_debug(GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glEdgeFlagv(flag) glatter_glEdgeFlagv_debug((flag), __FILE__, __LINE__)
void glatter_glEdgeFlagv_debug(const GLboolean *flag, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableClientState(array) glatter_glEnableClientState_debug((array), __FILE__, __LINE__)
void glatter_glEnableClientState_debug(GLenum array, const char* file, int line);
#define glEnd() glatter_glEnd_debug(__FILE__, __LINE__)
void glatter_glEnd_debug(const char* file, int line);
#define glEndList() glatter_glEndList_debug(__FILE__, __LINE__)
void glatter_glEndList_debug(const char* file, int line);
#define glEvalCoord1d(u) glatter_glEvalCoord1d_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1d_debug(GLdouble u, const char* file, int line);
#define glEvalCoord1dv(u) glatter_glEvalCoord1dv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1dv_debug(const GLdouble *u, const char* file, int line);
#define glEvalCoord1f(u) glatter_glEvalCoord1f_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1f_debug(GLfloat u, const char* file, int line);
#define glEvalCoord1fv(u) glatter_glEvalCoord1fv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1fv_debug(const GLfloat *u, const char* file, int line);
#define glEvalCoord2d(u, v) glatter_glEvalCoord2d_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2d_debug(GLdouble u, GLdouble v, const char* file, int line);
#define glEvalCoord2dv(u) glatter_glEvalCoord2dv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord2dv_debug(const GLdouble *u, const char* file, int line);
#define glEvalCoord2f(u, v) glatter_glEvalCoord2f_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2f_debug(GLfloat u, GLfloat v, const char* file, int line);
#define glEvalCoord2fv(u) glatter_glEvalCoord2fv_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord2fv_debug(const GLfloat *u, const char* file, int line);
#define glEvalMesh1(mode, i1, i2) glatter_glEvalMesh1_debug((mode), (i1), (i2), __FILE__, __LINE__)
void glatter_glEvalMesh1_debug(GLenum mode, GLint i1, GLint i2, const char* file, int line);
#define glEvalMesh2(mode, i1, i2, j1, j2) glatter_glEvalMesh2_debug((mode), (i1), (i2), (j1), (j2), __FILE__, __LINE__)
void glatter_glEvalMesh2_debug(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2, const char* file, int line);
#define glEvalPoint1(i) glatter_glEvalPoint1_debug((i), __FILE__, __LINE__)
void glatter_glEvalPoint1_debug(GLint i, const char* file, int line);
#define glEvalPoint2(i, j) glatter_glEvalPoint2_debug((i), (j), __FILE__, __LINE__)
void glatter_glEvalPoint2_debug(GLint i, GLint j, const char* file, int line);
#define glFeedbackBuffer(size, type, buffer) glatter_glFeedbackBuffer_debug((size), (type), (buffer), __FILE__, __LINE__)
void glatter_glFeedbackBuffer_debug(GLsizei size, GLenum type, GLfloat *buffer, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFogf(pname, param) glatter_glFogf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glFogfv(pname, params) glatter_glFogfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glFogi(pname, param) glatter_glFogi_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogi_debug(GLenum pname, GLint param, const char* file, int line);
#define glFogiv(pname, params) glatter_glFogiv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFogiv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glFrustum(left, right, bottom, top, zNear, zFar) glatter_glFrustum_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glFrustum_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glGenLists(range) glatter_glGenLists_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenLists_debug(GLsizei range, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGetBooleanv(pname, params) glatter_glGetBooleanv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *params, const char* file, int line);
#define glGetClipPlane(plane, equation) glatter_glGetClipPlane_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glGetClipPlane_debug(GLenum plane, GLdouble *equation, const char* file, int line);
#define glGetDoublev(pname, params) glatter_glGetDoublev_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetDoublev_debug(GLenum pname, GLdouble *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, params) glatter_glGetFloatv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *params, const char* file, int line);
#define glGetIntegerv(pname, params) glatter_glGetIntegerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *params, const char* file, int line);
#define glGetLightfv(light, pname, params) glatter_glGetLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightfv_debug(GLenum light, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetLightiv(light, pname, params) glatter_glGetLightiv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightiv_debug(GLenum light, GLenum pname, GLint *params, const char* file, int line);
#define glGetMapdv(target, query, v) glatter_glGetMapdv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapdv_debug(GLenum target, GLenum query, GLdouble *v, const char* file, int line);
#define glGetMapfv(target, query, v) glatter_glGetMapfv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapfv_debug(GLenum target, GLenum query, GLfloat *v, const char* file, int line);
#define glGetMapiv(target, query, v) glatter_glGetMapiv_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapiv_debug(GLenum target, GLenum query, GLint *v, const char* file, int line);
#define glGetMaterialfv(face, pname, params) glatter_glGetMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialfv_debug(GLenum face, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMaterialiv(face, pname, params) glatter_glGetMaterialiv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMaterialiv_debug(GLenum face, GLenum pname, GLint *params, const char* file, int line);
#define glGetPixelMapfv(map, values) glatter_glGetPixelMapfv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapfv_debug(GLenum map, GLfloat *values, const char* file, int line);
#define glGetPixelMapuiv(map, values) glatter_glGetPixelMapuiv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapuiv_debug(GLenum map, GLuint *values, const char* file, int line);
#define glGetPixelMapusv(map, values) glatter_glGetPixelMapusv_debug((map), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapusv_debug(GLenum map, GLushort *values, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, GLvoid* *params, const char* file, int line);
#define glGetPolygonStipple(mask) glatter_glGetPolygonStipple_debug((mask), __FILE__, __LINE__)
void glatter_glGetPolygonStipple_debug(GLubyte *mask, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexEnvfv(target, pname, params) glatter_glGetTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexEnviv(target, pname, params) glatter_glGetTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnviv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexGendv(coord, pname, params) glatter_glGetTexGendv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGendv_debug(GLenum coord, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetTexGenfv(coord, pname, params) glatter_glGetTexGenfv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGenfv_debug(GLenum coord, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexGeniv(coord, pname, params) glatter_glGetTexGeniv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGeniv_debug(GLenum coord, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_debug((target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIndexMask(mask) glatter_glIndexMask_debug((mask), __FILE__, __LINE__)
void glatter_glIndexMask_debug(GLuint mask, const char* file, int line);
#define glIndexPointer(type, stride, pointer) glatter_glIndexPointer_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glIndexPointer_debug(GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glIndexd(c) glatter_glIndexd_debug((c), __FILE__, __LINE__)
void glatter_glIndexd_debug(GLdouble c, const char* file, int line);
#define glIndexdv(c) glatter_glIndexdv_debug((c), __FILE__, __LINE__)
void glatter_glIndexdv_debug(const GLdouble *c, const char* file, int line);
#define glIndexf(c) glatter_glIndexf_debug((c), __FILE__, __LINE__)
void glatter_glIndexf_debug(GLfloat c, const char* file, int line);
#define glIndexfv(c) glatter_glIndexfv_debug((c), __FILE__, __LINE__)
void glatter_glIndexfv_debug(const GLfloat *c, const char* file, int line);
#define glIndexi(c) glatter_glIndexi_debug((c), __FILE__, __LINE__)
void glatter_glIndexi_debug(GLint c, const char* file, int line);
#define glIndexiv(c) glatter_glIndexiv_debug((c), __FILE__, __LINE__)
void glatter_glIndexiv_debug(const GLint *c, const char* file, int line);
#define glIndexs(c) glatter_glIndexs_debug((c), __FILE__, __LINE__)
void glatter_glIndexs_debug(GLshort c, const char* file, int line);
#define glIndexsv(c) glatter_glIndexsv_debug((c), __FILE__, __LINE__)
void glatter_glIndexsv_debug(const GLshort *c, const char* file, int line);
#define glIndexub(c) glatter_glIndexub_debug((c), __FILE__, __LINE__)
void glatter_glIndexub_debug(GLubyte c, const char* file, int line);
#define glIndexubv(c) glatter_glIndexubv_debug((c), __FILE__, __LINE__)
void glatter_glIndexubv_debug(const GLubyte *c, const char* file, int line);
#define glInitNames() glatter_glInitNames_debug(__FILE__, __LINE__)
void glatter_glInitNames_debug(const char* file, int line);
#define glInterleavedArrays(format, stride, pointer) glatter_glInterleavedArrays_debug((format), (stride), (pointer), __FILE__, __LINE__)
void glatter_glInterleavedArrays_debug(GLenum format, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsList(list) glatter_glIsList_debug((list), __FILE__, __LINE__)
GLboolean glatter_glIsList_debug(GLuint list, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLightModelf(pname, param) glatter_glLightModelf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glLightModelfv(pname, params) glatter_glLightModelfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModelfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glLightModeli(pname, param) glatter_glLightModeli_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModeli_debug(GLenum pname, GLint param, const char* file, int line);
#define glLightModeliv(pname, params) glatter_glLightModeliv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glLightModeliv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glLightf(light, pname, param) glatter_glLightf_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightf_debug(GLenum light, GLenum pname, GLfloat param, const char* file, int line);
#define glLightfv(light, pname, params) glatter_glLightfv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightfv_debug(GLenum light, GLenum pname, const GLfloat *params, const char* file, int line);
#define glLighti(light, pname, param) glatter_glLighti_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLighti_debug(GLenum light, GLenum pname, GLint param, const char* file, int line);
#define glLightiv(light, pname, params) glatter_glLightiv_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightiv_debug(GLenum light, GLenum pname, const GLint *params, const char* file, int line);
#define glLineStipple(factor, pattern) glatter_glLineStipple_debug((factor), (pattern), __FILE__, __LINE__)
void glatter_glLineStipple_debug(GLint factor, GLushort pattern, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glListBase(base) glatter_glListBase_debug((base), __FILE__, __LINE__)
void glatter_glListBase_debug(GLuint base, const char* file, int line);
#define glLoadIdentity() glatter_glLoadIdentity_debug(__FILE__, __LINE__)
void glatter_glLoadIdentity_debug(const char* file, int line);
#define glLoadMatrixd(m) glatter_glLoadMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glLoadMatrixf(m) glatter_glLoadMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glLoadName(name) glatter_glLoadName_debug((name), __FILE__, __LINE__)
void glatter_glLoadName_debug(GLuint name, const char* file, int line);
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#define glMap1d(target, u1, u2, stride, order, points) glatter_glMap1d_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1d_debug(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points, const char* file, int line);
#define glMap1f(target, u1, u2, stride, order, points) glatter_glMap1f_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1f_debug(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points, const char* file, int line);
#define glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2d_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2d_debug(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points, const char* file, int line);
#define glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2f_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2f_debug(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points, const char* file, int line);
#define glMapGrid1d(un, u1, u2) glatter_glMapGrid1d_debug((un), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1d_debug(GLint un, GLdouble u1, GLdouble u2, const char* file, int line);
#define glMapGrid1f(un, u1, u2) glatter_glMapGrid1f_debug((un), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1f_debug(GLint un, GLfloat u1, GLfloat u2, const char* file, int line);
#define glMapGrid2d(un, u1, u2, vn, v1, v2) glatter_glMapGrid2d_debug((un), (u1), (u2), (vn), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2d_debug(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2, const char* file, int line);
#define glMapGrid2f(un, u1, u2, vn, v1, v2) glatter_glMapGrid2f_debug((un), (u1), (u2), (vn), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2f_debug(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2, const char* file, int line);
#define glMaterialf(face, pname, param) glatter_glMaterialf_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialf_debug(GLenum face, GLenum pname, GLfloat param, const char* file, int line);
#define glMaterialfv(face, pname, params) glatter_glMaterialfv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialfv_debug(GLenum face, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMateriali(face, pname, param) glatter_glMateriali_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMateriali_debug(GLenum face, GLenum pname, GLint param, const char* file, int line);
#define glMaterialiv(face, pname, params) glatter_glMaterialiv_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glMaterialiv_debug(GLenum face, GLenum pname, const GLint *params, const char* file, int line);
#define glMatrixMode(mode) glatter_glMatrixMode_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixMode_debug(GLenum mode, const char* file, int line);
#define glMultMatrixd(m) glatter_glMultMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glMultMatrixf(m) glatter_glMultMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glNewList(list, mode) glatter_glNewList_debug((list), (mode), __FILE__, __LINE__)
void glatter_glNewList_debug(GLuint list, GLenum mode, const char* file, int line);
#define glNormal3b(nx, ny, nz) glatter_glNormal3b_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3b_debug(GLbyte nx, GLbyte ny, GLbyte nz, const char* file, int line);
#define glNormal3bv(v) glatter_glNormal3bv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3bv_debug(const GLbyte *v, const char* file, int line);
#define glNormal3d(nx, ny, nz) glatter_glNormal3d_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3d_debug(GLdouble nx, GLdouble ny, GLdouble nz, const char* file, int line);
#define glNormal3dv(v) glatter_glNormal3dv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3dv_debug(const GLdouble *v, const char* file, int line);
#define glNormal3f(nx, ny, nz) glatter_glNormal3f_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3f_debug(GLfloat nx, GLfloat ny, GLfloat nz, const char* file, int line);
#define glNormal3fv(v) glatter_glNormal3fv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3fv_debug(const GLfloat *v, const char* file, int line);
#define glNormal3i(nx, ny, nz) glatter_glNormal3i_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3i_debug(GLint nx, GLint ny, GLint nz, const char* file, int line);
#define glNormal3iv(v) glatter_glNormal3iv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3iv_debug(const GLint *v, const char* file, int line);
#define glNormal3s(nx, ny, nz) glatter_glNormal3s_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3s_debug(GLshort nx, GLshort ny, GLshort nz, const char* file, int line);
#define glNormal3sv(v) glatter_glNormal3sv_debug((v), __FILE__, __LINE__)
void glatter_glNormal3sv_debug(const GLshort *v, const char* file, int line);
#define glNormalPointer(type, stride, pointer) glatter_glNormalPointer_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glNormalPointer_debug(GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glOrtho(left, right, bottom, top, zNear, zFar) glatter_glOrtho_debug((left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glOrtho_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glPassThrough(token) glatter_glPassThrough_debug((token), __FILE__, __LINE__)
void glatter_glPassThrough_debug(GLfloat token, const char* file, int line);
#define glPixelMapfv(map, mapsize, values) glatter_glPixelMapfv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapfv_debug(GLenum map, GLsizei mapsize, const GLfloat *values, const char* file, int line);
#define glPixelMapuiv(map, mapsize, values) glatter_glPixelMapuiv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapuiv_debug(GLenum map, GLsizei mapsize, const GLuint *values, const char* file, int line);
#define glPixelMapusv(map, mapsize, values) glatter_glPixelMapusv_debug((map), (mapsize), (values), __FILE__, __LINE__)
void glatter_glPixelMapusv_debug(GLenum map, GLsizei mapsize, const GLushort *values, const char* file, int line);
#define glPixelStoref(pname, param) glatter_glPixelStoref_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStoref_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelTransferf(pname, param) glatter_glPixelTransferf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelTransferi(pname, param) glatter_glPixelTransferi_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferi_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelZoom(xfactor, yfactor) glatter_glPixelZoom_debug((xfactor), (yfactor), __FILE__, __LINE__)
void glatter_glPixelZoom_debug(GLfloat xfactor, GLfloat yfactor, const char* file, int line);
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#define glPolygonMode(face, mode) glatter_glPolygonMode_debug((face), (mode), __FILE__, __LINE__)
void glatter_glPolygonMode_debug(GLenum face, GLenum mode, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPolygonStipple(mask) glatter_glPolygonStipple_debug((mask), __FILE__, __LINE__)
void glatter_glPolygonStipple_debug(const GLubyte *mask, const char* file, int line);
#define glPopAttrib() glatter_glPopAttrib_debug(__FILE__, __LINE__)
void glatter_glPopAttrib_debug(const char* file, int line);
#define glPopClientAttrib() glatter_glPopClientAttrib_debug(__FILE__, __LINE__)
void glatter_glPopClientAttrib_debug(const char* file, int line);
#define glPopMatrix() glatter_glPopMatrix_debug(__FILE__, __LINE__)
void glatter_glPopMatrix_debug(const char* file, int line);
#define glPopName() glatter_glPopName_debug(__FILE__, __LINE__)
void glatter_glPopName_debug(const char* file, int line);
#define glPrioritizeTextures(n, textures, priorities) glatter_glPrioritizeTextures_debug((n), (textures), (priorities), __FILE__, __LINE__)
void glatter_glPrioritizeTextures_debug(GLsizei n, const GLuint *textures, const GLclampf *priorities, const char* file, int line);
#define glPushAttrib(mask) glatter_glPushAttrib_debug((mask), __FILE__, __LINE__)
void glatter_glPushAttrib_debug(GLbitfield mask, const char* file, int line);
#define glPushClientAttrib(mask) glatter_glPushClientAttrib_debug((mask), __FILE__, __LINE__)
void glatter_glPushClientAttrib_debug(GLbitfield mask, const char* file, int line);
#define glPushMatrix() glatter_glPushMatrix_debug(__FILE__, __LINE__)
void glatter_glPushMatrix_debug(const char* file, int line);
#define glPushName(name) glatter_glPushName_debug((name), __FILE__, __LINE__)
void glatter_glPushName_debug(GLuint name, const char* file, int line);
#define glRasterPos2d(x, y) glatter_glRasterPos2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glRasterPos2dv(v) glatter_glRasterPos2dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos2f(x, y) glatter_glRasterPos2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glRasterPos2fv(v) glatter_glRasterPos2fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos2i(x, y) glatter_glRasterPos2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2i_debug(GLint x, GLint y, const char* file, int line);
#define glRasterPos2iv(v) glatter_glRasterPos2iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos2s(x, y) glatter_glRasterPos2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glRasterPos2sv(v) glatter_glRasterPos2sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos2sv_debug(const GLshort *v, const char* file, int line);
#define glRasterPos3d(x, y, z) glatter_glRasterPos3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glRasterPos3dv(v) glatter_glRasterPos3dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos3f(x, y, z) glatter_glRasterPos3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glRasterPos3fv(v) glatter_glRasterPos3fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos3i(x, y, z) glatter_glRasterPos3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glRasterPos3iv(v) glatter_glRasterPos3iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos3s(x, y, z) glatter_glRasterPos3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glRasterPos3sv(v) glatter_glRasterPos3sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos3sv_debug(const GLshort *v, const char* file, int line);
#define glRasterPos4d(x, y, z, w) glatter_glRasterPos4d_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4d_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glRasterPos4dv(v) glatter_glRasterPos4dv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4dv_debug(const GLdouble *v, const char* file, int line);
#define glRasterPos4f(x, y, z, w) glatter_glRasterPos4f_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4f_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glRasterPos4fv(v) glatter_glRasterPos4fv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4fv_debug(const GLfloat *v, const char* file, int line);
#define glRasterPos4i(x, y, z, w) glatter_glRasterPos4i_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4i_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glRasterPos4iv(v) glatter_glRasterPos4iv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4iv_debug(const GLint *v, const char* file, int line);
#define glRasterPos4s(x, y, z, w) glatter_glRasterPos4s_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4s_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glRasterPos4sv(v) glatter_glRasterPos4sv_debug((v), __FILE__, __LINE__)
void glatter_glRasterPos4sv_debug(const GLshort *v, const char* file, int line);
#define glReadBuffer(mode) glatter_glReadBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum mode, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels, const char* file, int line);
#define glRectd(x1, y1, x2, y2) glatter_glRectd_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectd_debug(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2, const char* file, int line);
#define glRectdv(v1, v2) glatter_glRectdv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectdv_debug(const GLdouble *v1, const GLdouble *v2, const char* file, int line);
#define glRectf(x1, y1, x2, y2) glatter_glRectf_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectf_debug(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2, const char* file, int line);
#define glRectfv(v1, v2) glatter_glRectfv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectfv_debug(const GLfloat *v1, const GLfloat *v2, const char* file, int line);
#define glRecti(x1, y1, x2, y2) glatter_glRecti_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRecti_debug(GLint x1, GLint y1, GLint x2, GLint y2, const char* file, int line);
#define glRectiv(v1, v2) glatter_glRectiv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectiv_debug(const GLint *v1, const GLint *v2, const char* file, int line);
#define glRects(x1, y1, x2, y2) glatter_glRects_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRects_debug(GLshort x1, GLshort y1, GLshort x2, GLshort y2, const char* file, int line);
#define glRectsv(v1, v2) glatter_glRectsv_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectsv_debug(const GLshort *v1, const GLshort *v2, const char* file, int line);
#define glRenderMode(mode) glatter_glRenderMode_debug((mode), __FILE__, __LINE__)
GLint glatter_glRenderMode_debug(GLenum mode, const char* file, int line);
#define glRotated(angle, x, y, z) glatter_glRotated_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotated_debug(GLdouble angle, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glRotatef(angle, x, y, z) glatter_glRotatef_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatef_debug(GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glScaled(x, y, z) glatter_glScaled_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScaled_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glScalef(x, y, z) glatter_glScalef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glSelectBuffer(size, buffer) glatter_glSelectBuffer_debug((size), (buffer), __FILE__, __LINE__)
void glatter_glSelectBuffer_debug(GLsizei size, GLuint *buffer, const char* file, int line);
#define glShadeModel(mode) glatter_glShadeModel_debug((mode), __FILE__, __LINE__)
void glatter_glShadeModel_debug(GLenum mode, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glTexCoord1d(s) glatter_glTexCoord1d_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1d_debug(GLdouble s, const char* file, int line);
#define glTexCoord1dv(v) glatter_glTexCoord1dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord1f(s) glatter_glTexCoord1f_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1f_debug(GLfloat s, const char* file, int line);
#define glTexCoord1fv(v) glatter_glTexCoord1fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord1i(s) glatter_glTexCoord1i_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1i_debug(GLint s, const char* file, int line);
#define glTexCoord1iv(v) glatter_glTexCoord1iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord1s(s) glatter_glTexCoord1s_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1s_debug(GLshort s, const char* file, int line);
#define glTexCoord1sv(v) glatter_glTexCoord1sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord2d(s, t) glatter_glTexCoord2d_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2d_debug(GLdouble s, GLdouble t, const char* file, int line);
#define glTexCoord2dv(v) glatter_glTexCoord2dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord2f(s, t) glatter_glTexCoord2f_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2f_debug(GLfloat s, GLfloat t, const char* file, int line);
#define glTexCoord2fv(v) glatter_glTexCoord2fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord2i(s, t) glatter_glTexCoord2i_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2i_debug(GLint s, GLint t, const char* file, int line);
#define glTexCoord2iv(v) glatter_glTexCoord2iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord2s(s, t) glatter_glTexCoord2s_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2s_debug(GLshort s, GLshort t, const char* file, int line);
#define glTexCoord2sv(v) glatter_glTexCoord2sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord3d(s, t, r) glatter_glTexCoord3d_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3d_debug(GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glTexCoord3dv(v) glatter_glTexCoord3dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord3f(s, t, r) glatter_glTexCoord3f_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3f_debug(GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glTexCoord3fv(v) glatter_glTexCoord3fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord3i(s, t, r) glatter_glTexCoord3i_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3i_debug(GLint s, GLint t, GLint r, const char* file, int line);
#define glTexCoord3iv(v) glatter_glTexCoord3iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord3s(s, t, r) glatter_glTexCoord3s_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3s_debug(GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glTexCoord3sv(v) glatter_glTexCoord3sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoord4d(s, t, r, q) glatter_glTexCoord4d_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4d_debug(GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glTexCoord4dv(v) glatter_glTexCoord4dv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4dv_debug(const GLdouble *v, const char* file, int line);
#define glTexCoord4f(s, t, r, q) glatter_glTexCoord4f_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4f_debug(GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glTexCoord4fv(v) glatter_glTexCoord4fv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4fv_debug(const GLfloat *v, const char* file, int line);
#define glTexCoord4i(s, t, r, q) glatter_glTexCoord4i_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4i_debug(GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glTexCoord4iv(v) glatter_glTexCoord4iv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4iv_debug(const GLint *v, const char* file, int line);
#define glTexCoord4s(s, t, r, q) glatter_glTexCoord4s_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4s_debug(GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glTexCoord4sv(v) glatter_glTexCoord4sv_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4sv_debug(const GLshort *v, const char* file, int line);
#define glTexCoordPointer(size, type, stride, pointer) glatter_glTexCoordPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glTexCoordPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glTexEnvf(target, pname, param) glatter_glTexEnvf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexEnvfv(target, pname, params) glatter_glTexEnvfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexEnvi(target, pname, param) glatter_glTexEnvi_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvi_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexEnviv(target, pname, params) glatter_glTexEnviv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnviv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexGend(coord, pname, param) glatter_glTexGend_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGend_debug(GLenum coord, GLenum pname, GLdouble param, const char* file, int line);
#define glTexGendv(coord, pname, params) glatter_glTexGendv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGendv_debug(GLenum coord, GLenum pname, const GLdouble *params, const char* file, int line);
#define glTexGenf(coord, pname, param) glatter_glTexGenf_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGenf_debug(GLenum coord, GLenum pname, GLfloat param, const char* file, int line);
#define glTexGenfv(coord, pname, params) glatter_glTexGenfv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGenfv_debug(GLenum coord, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexGeni(coord, pname, param) glatter_glTexGeni_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGeni_debug(GLenum coord, GLenum pname, GLint param, const char* file, int line);
#define glTexGeniv(coord, pname, params) glatter_glTexGeniv_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGeniv_debug(GLenum coord, GLenum pname, const GLint *params, const char* file, int line);
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D_debug((target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage1D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels, const char* file, int line);
#define glTranslated(x, y, z) glatter_glTranslated_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslated_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glTranslatef(x, y, z) glatter_glTranslatef_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatef_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertex2d(x, y) glatter_glVertex2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glVertex2dv(v) glatter_glVertex2dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex2f(x, y) glatter_glVertex2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glVertex2fv(v) glatter_glVertex2fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex2i(x, y) glatter_glVertex2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2i_debug(GLint x, GLint y, const char* file, int line);
#define glVertex2iv(v) glatter_glVertex2iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2iv_debug(const GLint *v, const char* file, int line);
#define glVertex2s(x, y) glatter_glVertex2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glVertex2sv(v) glatter_glVertex2sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex2sv_debug(const GLshort *v, const char* file, int line);
#define glVertex3d(x, y, z) glatter_glVertex3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertex3dv(v) glatter_glVertex3dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex3f(x, y, z) glatter_glVertex3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertex3fv(v) glatter_glVertex3fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex3i(x, y, z) glatter_glVertex3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glVertex3iv(v) glatter_glVertex3iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3iv_debug(const GLint *v, const char* file, int line);
#define glVertex3s(x, y, z) glatter_glVertex3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertex3sv(v) glatter_glVertex3sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex3sv_debug(const GLshort *v, const char* file, int line);
#define glVertex4d(x, y, z, w) glatter_glVertex4d_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4d_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertex4dv(v) glatter_glVertex4dv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4dv_debug(const GLdouble *v, const char* file, int line);
#define glVertex4f(x, y, z, w) glatter_glVertex4f_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4f_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertex4fv(v) glatter_glVertex4fv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4fv_debug(const GLfloat *v, const char* file, int line);
#define glVertex4i(x, y, z, w) glatter_glVertex4i_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4i_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertex4iv(v) glatter_glVertex4iv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4iv_debug(const GLint *v, const char* file, int line);
#define glVertex4s(x, y, z, w) glatter_glVertex4s_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4s_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertex4sv(v) glatter_glVertex4sv_debug((v), __FILE__, __LINE__)
void glatter_glVertex4sv_debug(const GLshort *v, const char* file, int line);
#define glVertexPointer(size, type, stride, pointer) glatter_glVertexPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexPointer_debug(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(__gl_h_)
#endif // !defined(GL_VERSION_ES_CM_1_0)
#endif // defined(__GL_H__)
#if defined(__gl2_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#endif // defined(__gl2_h_)
#if defined(__gl2ext_h_)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glBeginPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glDeletePerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glEndPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glGenPerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_debug((monitor), (pname), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterDataAMD_debug(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten, const char* file, int line);
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_debug((group), (counter), (pname), (data), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterInfoAMD_debug(GLuint group, GLuint counter, GLenum pname, void *data, const char* file, int line);
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_debug((group), (counter), (bufSize), (length), (counterString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterStringAMD_debug(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString, const char* file, int line);
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_debug((group), (numCounters), (maxActiveCounters), (counterSize), (counters), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCountersAMD_debug(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters, const char* file, int line);
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_debug((group), (bufSize), (length), (groupString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupStringAMD_debug(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString, const char* file, int line);
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_debug((numGroups), (groupsSize), (groups), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupsAMD_debug(GLint *numGroups, GLsizei groupsSize, GLuint *groups, const char* file, int line);
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_debug((monitor), (enable), (group), (numCounters), (counterList), __FILE__, __LINE__)
void glatter_glSelectPerfMonitorCountersAMD_debug(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList, const char* file, int line);
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_ANGLE_framebuffer_blit)
#define glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferANGLE_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebufferANGLE_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#endif // defined(GL_ANGLE_framebuffer_blit)
#if defined(GL_ANGLE_framebuffer_multisample)
#define glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleANGLE_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleANGLE_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ANGLE_framebuffer_multisample)
#if defined(GL_ANGLE_instanced_arrays)
#define glDrawArraysInstancedANGLE(mode, first, count, primcount) glatter_glDrawArraysInstancedANGLE_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedANGLE_debug(GLenum mode, GLint first, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedANGLE_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedANGLE_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#define glVertexAttribDivisorANGLE(index, divisor) glatter_glVertexAttribDivisorANGLE_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisorANGLE_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_ANGLE_instanced_arrays)
#if defined(GL_ANGLE_translated_shader_source)
#define glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source) glatter_glGetTranslatedShaderSourceANGLE_debug((shader), (bufsize), (length), (source), __FILE__, __LINE__)
void glatter_glGetTranslatedShaderSourceANGLE_debug(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source, const char* file, int line);
#endif // defined(GL_ANGLE_translated_shader_source)
#if defined(GL_APPLE_copy_texture_levels)
#define glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) glatter_glCopyTextureLevelsAPPLE_debug((destinationTexture), (sourceTexture), (sourceBaseLevel), (sourceLevelCount), __FILE__, __LINE__)
void glatter_glCopyTextureLevelsAPPLE_debug(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount, const char* file, int line);
#endif // defined(GL_APPLE_copy_texture_levels)
#if defined(GL_APPLE_framebuffer_multisample)
#define glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleAPPLE_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleAPPLE_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glResolveMultisampleFramebufferAPPLE() glatter_glResolveMultisampleFramebufferAPPLE_debug(__FILE__, __LINE__)
void glatter_glResolveMultisampleFramebufferAPPLE_debug(const char* file, int line);
#endif // defined(GL_APPLE_framebuffer_multisample)
#if defined(GL_APPLE_sync)
#define glClientWaitSyncAPPLE(sync, flags, timeout) glatter_glClientWaitSyncAPPLE_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSyncAPPLE_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glDeleteSyncAPPLE(sync) glatter_glDeleteSyncAPPLE_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSyncAPPLE_debug(GLsync sync, const char* file, int line);
#define glFenceSyncAPPLE(condition, flags) glatter_glFenceSyncAPPLE_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSyncAPPLE_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glGetInteger64vAPPLE(pname, params) glatter_glGetInteger64vAPPLE_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetInteger64vAPPLE_debug(GLenum pname, GLint64 *params, const char* file, int line);
#define glGetSyncivAPPLE(sync, pname, bufSize, length, values) glatter_glGetSyncivAPPLE_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSyncivAPPLE_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glIsSyncAPPLE(sync) glatter_glIsSyncAPPLE_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSyncAPPLE_debug(GLsync sync, const char* file, int line);
#define glWaitSyncAPPLE(sync, flags, timeout) glatter_glWaitSyncAPPLE_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSyncAPPLE_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_APPLE_sync)
#if defined(GL_EXT_base_instance)
#define glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstanceEXT_debug((mode), (first), (count), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedBaseInstanceEXT_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstanceEXT_debug((mode), (count), (type), (indices), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseInstanceEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstanceEXT_debug((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexBaseInstanceEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, const char* file, int line);
#endif // defined(GL_EXT_base_instance)
#if defined(GL_EXT_blend_func_extended)
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT_debug((program), (color), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationEXT_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#define glBindFragDataLocationIndexedEXT(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexedEXT_debug((program), (colorNumber), (index), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationIndexedEXT_debug(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name, const char* file, int line);
#define glGetFragDataIndexEXT(program, name) glatter_glGetFragDataIndexEXT_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataIndexEXT_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocationIndexEXT(program, programInterface, name) glatter_glGetProgramResourceLocationIndexEXT_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocationIndexEXT_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#endif // defined(GL_EXT_blend_func_extended)
#if defined(GL_EXT_buffer_storage)
#define glBufferStorageEXT(target, size, data, flags) glatter_glBufferStorageEXT_debug((target), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glBufferStorageEXT_debug(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#endif // defined(GL_EXT_buffer_storage)
#if defined(GL_EXT_clear_texture)
#define glClearTexImageEXT(texture, level, format, type, data) glatter_glClearTexImageEXT_debug((texture), (level), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexImageEXT_debug(GLuint texture, GLint level, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImageEXT_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexSubImageEXT_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // defined(GL_EXT_clear_texture)
#if defined(GL_EXT_copy_image)
#define glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataEXT_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubDataEXT_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#endif // defined(GL_EXT_copy_image)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_debug((type), (object), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabelEXT_debug(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_debug((type), (object), (length), (label), __FILE__, __LINE__)
void glatter_glLabelObjectEXT_debug(GLenum type, GLuint object, GLsizei length, const GLchar *label, const char* file, int line);
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glInsertEventMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_debug(__FILE__, __LINE__)
void glatter_glPopGroupMarkerEXT_debug(const char* file, int line);
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glPushGroupMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_discard_framebuffer)
#define glDiscardFramebufferEXT(target, numAttachments, attachments) glatter_glDiscardFramebufferEXT_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glDiscardFramebufferEXT_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#endif // defined(GL_EXT_discard_framebuffer)
#if defined(GL_EXT_disjoint_timer_query)
#define glBeginQueryEXT(target, id) glatter_glBeginQueryEXT_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQueryEXT_debug(GLenum target, GLuint id, const char* file, int line);
#define glDeleteQueriesEXT(n, ids) glatter_glDeleteQueriesEXT_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueriesEXT_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndQueryEXT(target) glatter_glEndQueryEXT_debug((target), __FILE__, __LINE__)
void glatter_glEndQueryEXT_debug(GLenum target, const char* file, int line);
#define glGenQueriesEXT(n, ids) glatter_glGenQueriesEXT_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueriesEXT_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjecti64vEXT_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetQueryObjectivEXT(id, pname, params) glatter_glGetQueryObjectivEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectivEXT_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectui64vEXT_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#define glGetQueryObjectuivEXT(id, pname, params) glatter_glGetQueryObjectuivEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuivEXT_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryivEXT(target, pname, params) glatter_glGetQueryivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsQueryEXT(id) glatter_glIsQueryEXT_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQueryEXT_debug(GLuint id, const char* file, int line);
#define glQueryCounterEXT(id, target) glatter_glQueryCounterEXT_debug((id), (target), __FILE__, __LINE__)
void glatter_glQueryCounterEXT_debug(GLuint id, GLenum target, const char* file, int line);
#endif // defined(GL_EXT_disjoint_timer_query)
#if defined(GL_EXT_draw_buffers)
#define glDrawBuffersEXT(n, bufs) glatter_glDrawBuffersEXT_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffersEXT_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_EXT_draw_buffers)
#if defined(GL_EXT_draw_buffers_indexed)
#define glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiEXT_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateiEXT_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationiEXT(buf, mode) glatter_glBlendEquationiEXT_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationiEXT_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiEXT_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateiEXT_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunciEXT(buf, src, dst) glatter_glBlendFunciEXT_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunciEXT_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glColorMaskiEXT(index, r, g, b, a) glatter_glColorMaskiEXT_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaskiEXT_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glDisableiEXT(target, index) glatter_glDisableiEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisableiEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnableiEXT(target, index) glatter_glEnableiEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnableiEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glIsEnablediEXT(target, index) glatter_glIsEnablediEXT_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnablediEXT_debug(GLenum target, GLuint index, const char* file, int line);
#endif // defined(GL_EXT_draw_buffers_indexed)
#if defined(GL_EXT_draw_elements_base_vertex)
#define glDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexEXT_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertexEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexEXT_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexEXT_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertexEXT_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex) glatter_glMultiDrawElementsBaseVertexEXT_debug((mode), (count), (type), (indices), (primcount), (basevertex), __FILE__, __LINE__)
void glatter_glMultiDrawElementsBaseVertexEXT_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex, const char* file, int line);
#endif // defined(GL_EXT_draw_elements_base_vertex)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_debug((mode), (start), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedEXT_debug(GLenum mode, GLint start, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_transform_feedback)
#define glDrawTransformFeedbackEXT(mode, id) glatter_glDrawTransformFeedbackEXT_debug((mode), (id), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackEXT_debug(GLenum mode, GLuint id, const char* file, int line);
#define glDrawTransformFeedbackInstancedEXT(mode, id, instancecount) glatter_glDrawTransformFeedbackInstancedEXT_debug((mode), (id), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackInstancedEXT_debug(GLenum mode, GLuint id, GLsizei instancecount, const char* file, int line);
#endif // defined(GL_EXT_draw_transform_feedback)
#if defined(GL_EXT_geometry_shader)
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTextureEXT_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#endif // defined(GL_EXT_geometry_shader)
#if defined(GL_EXT_instanced_arrays)
#define glVertexAttribDivisorEXT(index, divisor) glatter_glVertexAttribDivisorEXT_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisorEXT_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_EXT_instanced_arrays)
#if defined(GL_EXT_map_buffer_range)
#define glFlushMappedBufferRangeEXT(target, offset, length) glatter_glFlushMappedBufferRangeEXT_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRangeEXT_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glMapBufferRangeEXT(target, offset, length, access) glatter_glMapBufferRangeEXT_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRangeEXT_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#endif // defined(GL_EXT_map_buffer_range)
#if defined(GL_EXT_multi_draw_arrays)
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysEXT_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsEXT_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multi_draw_indirect)
#define glMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirectEXT_debug((mode), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectEXT_debug(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirectEXT_debug((mode), (type), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectEXT_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_EXT_multi_draw_indirect)
#if defined(GL_EXT_multisampled_render_to_texture)
#define glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleEXT_debug((target), (attachment), (textarget), (texture), (level), (samples), __FILE__, __LINE__)
void glatter_glFramebufferTexture2DMultisampleEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples, const char* file, int line);
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_multisampled_render_to_texture)
#if defined(GL_EXT_multiview_draw_buffers)
#define glDrawBuffersIndexedEXT(n, location, indices) glatter_glDrawBuffersIndexedEXT_debug((n), (location), (indices), __FILE__, __LINE__)
void glatter_glDrawBuffersIndexedEXT_debug(GLint n, const GLenum *location, const GLint *indices, const char* file, int line);
#define glGetIntegeri_vEXT(target, index, data) glatter_glGetIntegeri_vEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_vEXT_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glReadBufferIndexedEXT(src, index) glatter_glReadBufferIndexedEXT_debug((src), (index), __FILE__, __LINE__)
void glatter_glReadBufferIndexedEXT_debug(GLenum src, GLint index, const char* file, int line);
#endif // defined(GL_EXT_multiview_draw_buffers)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_debug((factor), (units), (clamp), __FILE__, __LINE__)
void glatter_glPolygonOffsetClampEXT_debug(GLfloat factor, GLfloat units, GLfloat clamp, const char* file, int line);
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_primitive_bounding_box)
#define glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxEXT_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
void glatter_glPrimitiveBoundingBoxEXT_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#endif // defined(GL_EXT_primitive_bounding_box)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_debug((samples), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glRasterSamplesEXT_debug(GLuint samples, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_robustness)
#define glGetGraphicsResetStatusEXT() glatter_glGetGraphicsResetStatusEXT_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatusEXT_debug(const char* file, int line);
#define glGetnUniformfvEXT(program, location, bufSize, params) glatter_glGetnUniformfvEXT_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfvEXT_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformivEXT(program, location, bufSize, params) glatter_glGetnUniformivEXT_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformivEXT_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsEXT_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixelsEXT_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_EXT_robustness)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveShaderProgramEXT(pipeline, program) glatter_glActiveShaderProgramEXT_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgramEXT_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindProgramPipelineEXT(pipeline) glatter_glBindProgramPipelineEXT_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipelineEXT_debug(GLuint pipeline, const char* file, int line);
#define glCreateShaderProgramvEXT(type, count, strings) glatter_glCreateShaderProgramvEXT_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramvEXT_debug(GLenum type, GLsizei count, const GLchar **strings, const char* file, int line);
#define glDeleteProgramPipelinesEXT(n, pipelines) glatter_glDeleteProgramPipelinesEXT_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelinesEXT_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glGenProgramPipelinesEXT(n, pipelines) glatter_glGenProgramPipelinesEXT_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelinesEXT_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLogEXT_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLogEXT_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineivEXT(pipeline, pname, params) glatter_glGetProgramPipelineivEXT_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineivEXT_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramPipelineEXT(pipeline) glatter_glIsProgramPipelineEXT_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipelineEXT_debug(GLuint pipeline, const char* file, int line);
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteriEXT_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1fEXT_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1iEXT_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1uiEXT_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgramStagesEXT(pipeline, stages, program) glatter_glUseProgramStagesEXT_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStagesEXT_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipelineEXT(pipeline) glatter_glValidateProgramPipelineEXT_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipelineEXT_debug(GLuint pipeline, const char* file, int line);
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_pixel_local_storage2)
#define glClearPixelLocalStorageuiEXT(offset, n, values) glatter_glClearPixelLocalStorageuiEXT_debug((offset), (n), (values), __FILE__, __LINE__)
void glatter_glClearPixelLocalStorageuiEXT_debug(GLsizei offset, GLsizei n, const GLuint *values, const char* file, int line);
#define glFramebufferPixelLocalStorageSizeEXT(target, size) glatter_glFramebufferPixelLocalStorageSizeEXT_debug((target), (size), __FILE__, __LINE__)
void glatter_glFramebufferPixelLocalStorageSizeEXT_debug(GLuint target, GLsizei size, const char* file, int line);
#define glGetFramebufferPixelLocalStorageSizeEXT(target) glatter_glGetFramebufferPixelLocalStorageSizeEXT_debug((target), __FILE__, __LINE__)
GLsizei glatter_glGetFramebufferPixelLocalStorageSizeEXT_debug(GLuint target, const char* file, int line);
#endif // defined(GL_EXT_shader_pixel_local_storage2)
#if defined(GL_EXT_sparse_texture)
#define glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentEXT_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit), __FILE__, __LINE__)
void glatter_glTexPageCommitmentEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, const char* file, int line);
#endif // defined(GL_EXT_sparse_texture)
#if defined(GL_EXT_tessellation_shader)
#define glPatchParameteriEXT(pname, value) glatter_glPatchParameteriEXT_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteriEXT_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_EXT_tessellation_shader)
#if defined(GL_EXT_texture_border_clamp)
#define glGetSamplerParameterIivEXT(sampler, pname, params) glatter_glGetSamplerParameterIivEXT_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIivEXT_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuivEXT(sampler, pname, params) glatter_glGetSamplerParameterIuivEXT_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuivEXT_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuivEXT_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glSamplerParameterIivEXT(sampler, pname, param) glatter_glSamplerParameterIivEXT_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIivEXT_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuivEXT(sampler, pname, param) glatter_glSamplerParameterIuivEXT_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuivEXT_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIivEXT_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuivEXT_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#endif // defined(GL_EXT_texture_border_clamp)
#if defined(GL_EXT_texture_buffer)
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBufferEXT_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTexBufferRangeEXT(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeEXT_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRangeEXT_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_EXT_texture_buffer)
#if defined(GL_EXT_texture_storage)
#define glTexStorage1DEXT(target, levels, internalformat, width) glatter_glTexStorage1DEXT_debug((target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTexStorage1DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTexStorage2DEXT(target, levels, internalformat, width, height) glatter_glTexStorage2DEXT_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3DEXT(target, levels, internalformat, width, height, depth) glatter_glTexStorage3DEXT_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3DEXT_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT_debug((texture), (target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_EXT_texture_storage)
#if defined(GL_EXT_texture_view)
#define glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewEXT_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
void glatter_glTextureViewEXT_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#endif // defined(GL_EXT_texture_view)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_debug((mode), (count), (box), __FILE__, __LINE__)
void glatter_glWindowRectanglesEXT_debug(GLenum mode, GLsizei count, const GLint *box, const char* file, int line);
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_IMG_bindless_texture)
#define glGetTextureHandleIMG(texture) glatter_glGetTextureHandleIMG_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleIMG_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleIMG(texture, sampler) glatter_glGetTextureSamplerHandleIMG_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleIMG_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glProgramUniformHandleui64IMG(program, location, value) glatter_glProgramUniformHandleui64IMG_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64IMG_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vIMG(program, location, count, values) glatter_glProgramUniformHandleui64vIMG_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vIMG_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64IMG(location, value) glatter_glUniformHandleui64IMG_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64IMG_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vIMG(location, count, value) glatter_glUniformHandleui64vIMG_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vIMG_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_IMG_bindless_texture)
#if defined(GL_IMG_framebuffer_downsample)
#define glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale) glatter_glFramebufferTexture2DDownsampleIMG_debug((target), (attachment), (textarget), (texture), (level), (xscale), (yscale), __FILE__, __LINE__)
void glatter_glFramebufferTexture2DDownsampleIMG_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale, const char* file, int line);
#define glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale) glatter_glFramebufferTextureLayerDownsampleIMG_debug((target), (attachment), (texture), (level), (layer), (xscale), (yscale), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayerDownsampleIMG_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale, const char* file, int line);
#endif // defined(GL_IMG_framebuffer_downsample)
#if defined(GL_IMG_multisampled_render_to_texture)
#define glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples) glatter_glFramebufferTexture2DMultisampleIMG_debug((target), (attachment), (textarget), (texture), (level), (samples), __FILE__, __LINE__)
void glatter_glFramebufferTexture2DMultisampleIMG_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples, const char* file, int line);
#define glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleIMG_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleIMG_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_IMG_multisampled_render_to_texture)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(__FILE__, __LINE__)
void glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(const char* file, int line);
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glBeginPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_debug((queryId), (queryHandle), __FILE__, __LINE__)
void glatter_glCreatePerfQueryINTEL_debug(GLuint queryId, GLuint *queryHandle, const char* file, int line);
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glDeletePerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glEndPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_debug((queryId), __FILE__, __LINE__)
void glatter_glGetFirstPerfQueryIdINTEL_debug(GLuint *queryId, const char* file, int line);
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_debug((queryId), (nextQueryId), __FILE__, __LINE__)
void glatter_glGetNextPerfQueryIdINTEL_debug(GLuint queryId, GLuint *nextQueryId, const char* file, int line);
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_debug((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue), __FILE__, __LINE__)
void glatter_glGetPerfCounterInfoINTEL_debug(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue, const char* file, int line);
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_debug((queryHandle), (flags), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfQueryDataINTEL_debug(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten, const char* file, int line);
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_debug((queryName), (queryId), __FILE__, __LINE__)
void glatter_glGetPerfQueryIdByNameINTEL_debug(GLchar *queryName, GLuint *queryId, const char* file, int line);
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_debug((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask), __FILE__, __LINE__)
void glatter_glGetPerfQueryInfoINTEL_debug(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask, const char* file, int line);
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierKHR_debug(const char* file, int line);
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_KHR_debug)
#define glDebugMessageCallbackKHR(callback, userParam) glatter_glDebugMessageCallbackKHR_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallbackKHR_debug(GLDEBUGPROCKHR callback, const void *userParam, const char* file, int line);
#define glDebugMessageControlKHR(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlKHR_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControlKHR_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsertKHR(source, type, id, severity, length, buf) glatter_glDebugMessageInsertKHR_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsertKHR_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogKHR_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLogKHR_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#define glGetObjectLabelKHR(identifier, name, bufSize, length, label) glatter_glGetObjectLabelKHR_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabelKHR_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetObjectPtrLabelKHR(ptr, bufSize, length, label) glatter_glGetObjectPtrLabelKHR_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectPtrLabelKHR_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetPointervKHR(pname, params) glatter_glGetPointervKHR_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointervKHR_debug(GLenum pname, void **params, const char* file, int line);
#define glObjectLabelKHR(identifier, name, length, label) glatter_glObjectLabelKHR_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
void glatter_glObjectLabelKHR_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#define glObjectPtrLabelKHR(ptr, length, label) glatter_glObjectPtrLabelKHR_debug((ptr), (length), (label), __FILE__, __LINE__)
void glatter_glObjectPtrLabelKHR_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#define glPopDebugGroupKHR() glatter_glPopDebugGroupKHR_debug(__FILE__, __LINE__)
void glatter_glPopDebugGroupKHR_debug(const char* file, int line);
#define glPushDebugGroupKHR(source, id, length, message) glatter_glPushDebugGroupKHR_debug((source), (id), (length), (message), __FILE__, __LINE__)
void glatter_glPushDebugGroupKHR_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#endif // defined(GL_KHR_debug)
#if defined(GL_KHR_robustness)
#define glGetGraphicsResetStatusKHR() glatter_glGetGraphicsResetStatusKHR_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatusKHR_debug(const char* file, int line);
#define glGetnUniformfvKHR(program, location, bufSize, params) glatter_glGetnUniformfvKHR_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfvKHR_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformivKHR(program, location, bufSize, params) glatter_glGetnUniformivKHR_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformivKHR_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuivKHR(program, location, bufSize, params) glatter_glGetnUniformuivKHR_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuivKHR_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glReadnPixelsKHR(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsKHR_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixelsKHR_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_KHR_robustness)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleNV_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleNV_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleNV_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentNV_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64NV_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64NV_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vNV_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierNV_debug(const char* file, int line);
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_debug((pname), (value), __FILE__, __LINE__)
void glatter_glBlendParameteriNV_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRenderNV_debug(GLuint id, GLenum mode, const char* file, int line);
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRenderNV_debug(const char* file, int line);
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_debug((xbits), (ybits), __FILE__, __LINE__)
void glatter_glSubpixelPrecisionBiasNV_debug(GLuint xbits, GLuint ybits, const char* file, int line);
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glConservativeRasterParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_buffer)
#define glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubDataNV_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubDataNV_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_NV_copy_buffer)
#if defined(GL_NV_coverage_sample)
#define glCoverageMaskNV(mask) glatter_glCoverageMaskNV_debug((mask), __FILE__, __LINE__)
void glatter_glCoverageMaskNV_debug(GLboolean mask, const char* file, int line);
#define glCoverageOperationNV(operation) glatter_glCoverageOperationNV_debug((operation), __FILE__, __LINE__)
void glatter_glCoverageOperationNV_debug(GLenum operation, const char* file, int line);
#endif // defined(GL_NV_coverage_sample)
#if defined(GL_NV_draw_buffers)
#define glDrawBuffersNV(n, bufs) glatter_glDrawBuffersNV_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffersNV_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_NV_draw_buffers)
#if defined(GL_NV_draw_instanced)
#define glDrawArraysInstancedNV(mode, first, count, primcount) glatter_glDrawArraysInstancedNV_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedNV_debug(GLenum mode, GLint first, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedNV(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedNV_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedNV_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_NV_draw_instanced)
#if defined(GL_NV_fence)
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV_debug((n), (fences), __FILE__, __LINE__)
void glatter_glDeleteFencesNV_debug(GLsizei n, const GLuint *fences, const char* file, int line);
#define glFinishFenceNV(fence) glatter_glFinishFenceNV_debug((fence), __FILE__, __LINE__)
void glatter_glFinishFenceNV_debug(GLuint fence, const char* file, int line);
#define glGenFencesNV(n, fences) glatter_glGenFencesNV_debug((n), (fences), __FILE__, __LINE__)
void glatter_glGenFencesNV_debug(GLsizei n, GLuint *fences, const char* file, int line);
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV_debug((fence), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFenceivNV_debug(GLuint fence, GLenum pname, GLint *params, const char* file, int line);
#define glIsFenceNV(fence) glatter_glIsFenceNV_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glIsFenceNV_debug(GLuint fence, const char* file, int line);
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV_debug((fence), (condition), __FILE__, __LINE__)
void glatter_glSetFenceNV_debug(GLuint fence, GLenum condition, const char* file, int line);
#define glTestFenceNV(fence) glatter_glTestFenceNV_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glTestFenceNV_debug(GLuint fence, const char* file, int line);
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_debug((color), __FILE__, __LINE__)
void glatter_glFragmentCoverageColorNV_debug(GLuint color, const char* file, int line);
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_framebuffer_blit)
#define glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferNV_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebufferNV_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#endif // defined(GL_NV_framebuffer_blit)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_debug((components), __FILE__, __LINE__)
void glatter_glCoverageModulationNV_debug(GLenum components, const char* file, int line);
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_debug((n), (v), __FILE__, __LINE__)
void glatter_glCoverageModulationTableNV_debug(GLsizei n, const GLfloat *v, const char* file, int line);
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_debug((bufsize), (v), __FILE__, __LINE__)
void glatter_glGetCoverageModulationTableNV_debug(GLsizei bufsize, GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample)
#define glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleNV_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleNV_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_NV_framebuffer_multisample)
#if defined(GL_NV_gpu_shader5)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformi64vNV_debug(GLuint program, GLint location, GLint64EXT *params, const char* file, int line);
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1i64NV_debug(GLuint program, GLint location, GLint64EXT x, const char* file, int line);
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, const char* file, int line);
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1i64NV_debug(GLint location, GLint64EXT x, const char* file, int line);
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1ui64NV_debug(GLint location, GLuint64EXT x, const char* file, int line);
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_NV_gpu_shader5)
#if defined(GL_NV_instanced_arrays)
#define glVertexAttribDivisorNV(index, divisor) glatter_glVertexAttribDivisorNV_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisorNV_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_NV_instanced_arrays)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_debug((target), (internalformat), (samples), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformatSampleivNV_debug(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_non_square_matrices)
#define glUniformMatrix2x3fvNV(location, count, transpose, value) glatter_glUniformMatrix2x3fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fvNV(location, count, transpose, value) glatter_glUniformMatrix2x4fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fvNV(location, count, transpose, value) glatter_glUniformMatrix3x2fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fvNV(location, count, transpose, value) glatter_glUniformMatrix3x4fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fvNV(location, count, transpose, value) glatter_glUniformMatrix4x2fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fvNV(location, count, transpose, value) glatter_glUniformMatrix4x3fvNV_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fvNV_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#endif // defined(GL_NV_non_square_matrices)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_debug((resultPath), (srcPath), __FILE__, __LINE__)
void glatter_glCopyPathNV_debug(GLuint resultPath, GLuint srcPath, const char* file, int line);
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverFillPathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverStrokePathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_debug((path), (range), __FILE__, __LINE__)
void glatter_glDeletePathsNV_debug(GLuint path, GLsizei range, const char* file, int line);
#define glGenPathsNV(range) glatter_glGenPathsNV_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenPathsNV_debug(GLsizei range, const char* file, int line);
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_debug((path), (commands), __FILE__, __LINE__)
void glatter_glGetPathCommandsNV_debug(GLuint path, GLubyte *commands, const char* file, int line);
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_debug((path), (coords), __FILE__, __LINE__)
void glatter_glGetPathCoordsNV_debug(GLuint path, GLfloat *coords, const char* file, int line);
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_debug((path), (dashArray), __FILE__, __LINE__)
void glatter_glGetPathDashArrayNV_debug(GLuint path, GLfloat *dashArray, const char* file, int line);
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_debug((path), (startSegment), (numSegments), __FILE__, __LINE__)
GLfloat glatter_glGetPathLengthNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, const char* file, int line);
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_debug((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricRangeNV_debug(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_debug((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricsNV_debug(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterfvNV_debug(GLuint path, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterivNV_debug(GLuint path, GLenum pname, GLint *value, const char* file, int line);
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_debug((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing), __FILE__, __LINE__)
void glatter_glGetPathSpacingNV_debug(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing, const char* file, int line);
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourcefvNV_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params, const char* file, int line);
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_debug((resultPath), (pathA), (pathB), (weight), __FILE__, __LINE__)
void glatter_glInterpolatePathsNV_debug(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight, const char* file, int line);
#define glIsPathNV(path) glatter_glIsPathNV_debug((path), __FILE__, __LINE__)
GLboolean glatter_glIsPathNV_debug(GLuint path, const char* file, int line);
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_debug((path), (mask), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInFillPathNV_debug(GLuint path, GLuint mask, GLfloat x, GLfloat y, const char* file, int line);
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_debug((path), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInStrokePathNV_debug(GLuint path, GLfloat x, GLfloat y, const char* file, int line);
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_debug((path), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCommandsNV_debug(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_debug((path), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCoordsNV_debug(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_debug((func), __FILE__, __LINE__)
void glatter_glPathCoverDepthFuncNV_debug(GLenum func, const char* file, int line);
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_debug((path), (dashCount), (dashArray), __FILE__, __LINE__)
void glatter_glPathDashArrayNV_debug(GLuint path, GLsizei dashCount, const GLfloat *dashArray, const char* file, int line);
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_debug((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexRangeNV_debug(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2], const char* file, int line);
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphRangeNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphsNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathMemoryGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfNV_debug(GLuint path, GLenum pname, GLfloat value, const char* file, int line);
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfvNV_debug(GLuint path, GLenum pname, const GLfloat *value, const char* file, int line);
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameteriNV_debug(GLuint path, GLenum pname, GLint value, const char* file, int line);
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterivNV_debug(GLuint path, GLenum pname, const GLint *value, const char* file, int line);
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPathStencilDepthOffsetNV_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glPathStencilFuncNV_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_debug((path), (format), (length), (pathString), __FILE__, __LINE__)
void glatter_glPathStringNV_debug(GLuint path, GLenum format, GLsizei length, const void *pathString, const char* file, int line);
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_debug((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCommandsNV_debug(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_debug((path), (coordStart), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCoordsNV_debug(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_debug((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY), __FILE__, __LINE__)
GLboolean glatter_glPointAlongPathNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY, const char* file, int line);
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_debug((program), (location), (genMode), (components), (coeffs), __FILE__, __LINE__)
void glatter_glProgramPathFragmentInputGenNV_debug(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs, const char* file, int line);
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_debug((path), (fillMode), (mask), __FILE__, __LINE__)
void glatter_glStencilFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, const char* file, int line);
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_debug((path), (reference), (mask), __FILE__, __LINE__)
void glatter_glStencilStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, const char* file, int line);
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_debug((path), (fillMode), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode, const char* file, int line);
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_debug((path), (reference), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, GLenum coverMode, const char* file, int line);
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_debug((resultPath), (srcPath), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glTransformPathNV_debug(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_debug((resultPath), (numPaths), (paths), (weights), __FILE__, __LINE__)
void glatter_glWeightPathsNV_debug(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights, const char* file, int line);
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_polygon_mode)
#define glPolygonModeNV(face, mode) glatter_glPolygonModeNV_debug((face), (mode), __FILE__, __LINE__)
void glatter_glPolygonModeNV_debug(GLenum face, GLenum mode, const char* file, int line);
#endif // defined(GL_NV_polygon_mode)
#if defined(GL_NV_read_buffer)
#define glReadBufferNV(mode) glatter_glReadBufferNV_debug((mode), __FILE__, __LINE__)
void glatter_glReadBufferNV_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_NV_read_buffer)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_debug((target), (start), (count), (v), __FILE__, __LINE__)
void glatter_glFramebufferSampleLocationsfvNV_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glNamedFramebufferSampleLocationsfvNV_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_debug(__FILE__, __LINE__)
void glatter_glResolveDepthValuesNV_debug(const char* file, int line);
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_viewport_array)
#define glDepthRangeArrayfvNV(first, count, v) glatter_glDepthRangeArrayfvNV_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glDepthRangeArrayfvNV_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glDepthRangeIndexedfNV(index, n, f) glatter_glDepthRangeIndexedfNV_debug((index), (n), (f), __FILE__, __LINE__)
void glatter_glDepthRangeIndexedfNV_debug(GLuint index, GLfloat n, GLfloat f, const char* file, int line);
#define glDisableiNV(target, index) glatter_glDisableiNV_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisableiNV_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnableiNV(target, index) glatter_glEnableiNV_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnableiNV_debug(GLenum target, GLuint index, const char* file, int line);
#define glGetFloati_vNV(target, index, data) glatter_glGetFloati_vNV_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloati_vNV_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glIsEnablediNV(target, index) glatter_glIsEnablediNV_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnablediNV_debug(GLenum target, GLuint index, const char* file, int line);
#define glScissorArrayvNV(first, count, v) glatter_glScissorArrayvNV_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glScissorArrayvNV_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#define glScissorIndexedNV(index, left, bottom, width, height) glatter_glScissorIndexedNV_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
void glatter_glScissorIndexedNV_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#define glScissorIndexedvNV(index, v) glatter_glScissorIndexedvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glScissorIndexedvNV_debug(GLuint index, const GLint *v, const char* file, int line);
#define glViewportArrayvNV(first, count, v) glatter_glViewportArrayvNV_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glViewportArrayvNV_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glViewportIndexedfNV(index, x, y, w, h) glatter_glViewportIndexedfNV_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
void glatter_glViewportIndexedfNV_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#define glViewportIndexedfvNV(index, v) glatter_glViewportIndexedfvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glViewportIndexedfvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_viewport_array)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_debug((index), (swizzlex), (swizzley), (swizzlez), (swizzlew), __FILE__, __LINE__)
void glatter_glViewportSwizzleNV_debug(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew, const char* file, int line);
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_EGL_image)
#define glEGLImageTargetRenderbufferStorageOES(target, image) glatter_glEGLImageTargetRenderbufferStorageOES_debug((target), (image), __FILE__, __LINE__)
void glatter_glEGLImageTargetRenderbufferStorageOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#define glEGLImageTargetTexture2DOES(target, image) glatter_glEGLImageTargetTexture2DOES_debug((target), (image), __FILE__, __LINE__)
void glatter_glEGLImageTargetTexture2DOES_debug(GLenum target, GLeglImageOES image, const char* file, int line);
#endif // defined(GL_OES_EGL_image)
#if defined(GL_OES_copy_image)
#define glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubDataOES_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubDataOES_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#endif // defined(GL_OES_copy_image)
#if defined(GL_OES_draw_buffers_indexed)
#define glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiOES_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateiOES_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationiOES(buf, mode) glatter_glBlendEquationiOES_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationiOES_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiOES_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateiOES_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunciOES(buf, src, dst) glatter_glBlendFunciOES_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunciOES_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glColorMaskiOES(index, r, g, b, a) glatter_glColorMaskiOES_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaskiOES_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glDisableiOES(target, index) glatter_glDisableiOES_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisableiOES_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnableiOES(target, index) glatter_glEnableiOES_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnableiOES_debug(GLenum target, GLuint index, const char* file, int line);
#define glIsEnablediOES(target, index) glatter_glIsEnablediOES_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnablediOES_debug(GLenum target, GLuint index, const char* file, int line);
#endif // defined(GL_OES_draw_buffers_indexed)
#if defined(GL_OES_draw_elements_base_vertex)
#define glDrawElementsBaseVertexOES(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertexOES_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertexOES_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertexOES_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexOES_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertexOES_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertexOES_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glMultiDrawElementsBaseVertexOES(mode, count, type, indices, primcount, basevertex) glatter_glMultiDrawElementsBaseVertexOES_debug((mode), (count), (type), (indices), (primcount), (basevertex), __FILE__, __LINE__)
void glatter_glMultiDrawElementsBaseVertexOES_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const GLint *basevertex, const char* file, int line);
#endif // defined(GL_OES_draw_elements_base_vertex)
#if defined(GL_OES_geometry_shader)
#define glFramebufferTextureOES(target, attachment, texture, level) glatter_glFramebufferTextureOES_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTextureOES_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#endif // defined(GL_OES_geometry_shader)
#if defined(GL_OES_get_program_binary)
#define glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinaryOES_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinaryOES_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glProgramBinaryOES(program, binaryFormat, binary, length) glatter_glProgramBinaryOES_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinaryOES_debug(GLuint program, GLenum binaryFormat, const void *binary, GLint length, const char* file, int line);
#endif // defined(GL_OES_get_program_binary)
#if defined(GL_OES_mapbuffer)
#define glGetBufferPointervOES(target, pname, params) glatter_glGetBufferPointervOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointervOES_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glMapBufferOES(target, access) glatter_glMapBufferOES_debug((target), (access), __FILE__, __LINE__)
void * glatter_glMapBufferOES_debug(GLenum target, GLenum access, const char* file, int line);
#define glUnmapBufferOES(target) glatter_glUnmapBufferOES_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBufferOES_debug(GLenum target, const char* file, int line);
#endif // defined(GL_OES_mapbuffer)
#if defined(GL_OES_primitive_bounding_box)
#define glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxOES_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
void glatter_glPrimitiveBoundingBoxOES_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#endif // defined(GL_OES_primitive_bounding_box)
#if defined(GL_OES_sample_shading)
#define glMinSampleShadingOES(value) glatter_glMinSampleShadingOES_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShadingOES_debug(GLfloat value, const char* file, int line);
#endif // defined(GL_OES_sample_shading)
#if defined(GL_OES_tessellation_shader)
#define glPatchParameteriOES(pname, value) glatter_glPatchParameteriOES_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteriOES_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_OES_tessellation_shader)
#if defined(GL_OES_texture_3D)
#define glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DOES_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3DOES_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DOES_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3DOES_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DOES_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3DOES_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DOES_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glFramebufferTexture3DOES_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DOES_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3DOES_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DOES_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3DOES_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_OES_texture_3D)
#if defined(GL_OES_texture_border_clamp)
#define glGetSamplerParameterIivOES(sampler, pname, params) glatter_glGetSamplerParameterIivOES_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIivOES_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuivOES(sampler, pname, params) glatter_glGetSamplerParameterIuivOES_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuivOES_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTexParameterIivOES(target, pname, params) glatter_glGetTexParameterIivOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIivOES_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuivOES(target, pname, params) glatter_glGetTexParameterIuivOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuivOES_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glSamplerParameterIivOES(sampler, pname, param) glatter_glSamplerParameterIivOES_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIivOES_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuivOES(sampler, pname, param) glatter_glSamplerParameterIuivOES_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuivOES_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glTexParameterIivOES(target, pname, params) glatter_glTexParameterIivOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIivOES_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuivOES(target, pname, params) glatter_glTexParameterIuivOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuivOES_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#endif // defined(GL_OES_texture_border_clamp)
#if defined(GL_OES_texture_buffer)
#define glTexBufferOES(target, internalformat, buffer) glatter_glTexBufferOES_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBufferOES_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTexBufferRangeOES(target, internalformat, buffer, offset, size) glatter_glTexBufferRangeOES_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRangeOES_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_OES_texture_buffer)
#if defined(GL_OES_texture_storage_multisample_2d_array)
#define glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisampleOES_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage3DMultisampleOES_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_OES_texture_storage_multisample_2d_array)
#if defined(GL_OES_texture_view)
#define glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureViewOES_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
void glatter_glTextureViewOES_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#endif // defined(GL_OES_texture_view)
#if defined(GL_OES_vertex_array_object)
#define glBindVertexArrayOES(array) glatter_glBindVertexArrayOES_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArrayOES_debug(GLuint array, const char* file, int line);
#define glDeleteVertexArraysOES(n, arrays) glatter_glDeleteVertexArraysOES_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArraysOES_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glGenVertexArraysOES(n, arrays) glatter_glGenVertexArraysOES_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArraysOES_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glIsVertexArrayOES(array) glatter_glIsVertexArrayOES_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArrayOES_debug(GLuint array, const char* file, int line);
#endif // defined(GL_OES_vertex_array_object)
#if defined(GL_OES_viewport_array)
#define glDepthRangeArrayfvOES(first, count, v) glatter_glDepthRangeArrayfvOES_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glDepthRangeArrayfvOES_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glDepthRangeIndexedfOES(index, n, f) glatter_glDepthRangeIndexedfOES_debug((index), (n), (f), __FILE__, __LINE__)
void glatter_glDepthRangeIndexedfOES_debug(GLuint index, GLfloat n, GLfloat f, const char* file, int line);
#define glGetFloati_vOES(target, index, data) glatter_glGetFloati_vOES_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloati_vOES_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glScissorArrayvOES(first, count, v) glatter_glScissorArrayvOES_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glScissorArrayvOES_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#define glScissorIndexedOES(index, left, bottom, width, height) glatter_glScissorIndexedOES_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
void glatter_glScissorIndexedOES_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#define glScissorIndexedvOES(index, v) glatter_glScissorIndexedvOES_debug((index), (v), __FILE__, __LINE__)
void glatter_glScissorIndexedvOES_debug(GLuint index, const GLint *v, const char* file, int line);
#define glViewportArrayvOES(first, count, v) glatter_glViewportArrayvOES_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glViewportArrayvOES_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glViewportIndexedfOES(index, x, y, w, h) glatter_glViewportIndexedfOES_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
void glatter_glViewportIndexedfOES_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#define glViewportIndexedfvOES(index, v) glatter_glViewportIndexedfvOES_debug((index), (v), __FILE__, __LINE__)
void glatter_glViewportIndexedfvOES_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_OES_viewport_array)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_debug((target), (attachment), (texture), (level), (baseViewIndex), (numViews), __FILE__, __LINE__)
void glatter_glFramebufferTextureMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview)
#if defined(GL_OVR_multiview_multisampled_render_to_texture)
#define glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews) glatter_glFramebufferTextureMultisampleMultiviewOVR_debug((target), (attachment), (texture), (level), (samples), (baseViewIndex), (numViews), __FILE__, __LINE__)
void glatter_glFramebufferTextureMultisampleMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview_multisampled_render_to_texture)
#if defined(GL_QCOM_alpha_test)
#define glAlphaFuncQCOM(func, ref) glatter_glAlphaFuncQCOM_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFuncQCOM_debug(GLenum func, GLclampf ref, const char* file, int line);
#endif // defined(GL_QCOM_alpha_test)
#if defined(GL_QCOM_driver_control)
#define glDisableDriverControlQCOM(driverControl) glatter_glDisableDriverControlQCOM_debug((driverControl), __FILE__, __LINE__)
void glatter_glDisableDriverControlQCOM_debug(GLuint driverControl, const char* file, int line);
#define glEnableDriverControlQCOM(driverControl) glatter_glEnableDriverControlQCOM_debug((driverControl), __FILE__, __LINE__)
void glatter_glEnableDriverControlQCOM_debug(GLuint driverControl, const char* file, int line);
#define glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString) glatter_glGetDriverControlStringQCOM_debug((driverControl), (bufSize), (length), (driverControlString), __FILE__, __LINE__)
void glatter_glGetDriverControlStringQCOM_debug(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString, const char* file, int line);
#define glGetDriverControlsQCOM(num, size, driverControls) glatter_glGetDriverControlsQCOM_debug((num), (size), (driverControls), __FILE__, __LINE__)
void glatter_glGetDriverControlsQCOM_debug(GLint *num, GLsizei size, GLuint *driverControls, const char* file, int line);
#endif // defined(GL_QCOM_driver_control)
#if defined(GL_QCOM_extended_get)
#define glExtGetBufferPointervQCOM(target, params) glatter_glExtGetBufferPointervQCOM_debug((target), (params), __FILE__, __LINE__)
void glatter_glExtGetBufferPointervQCOM_debug(GLenum target, void **params, const char* file, int line);
#define glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers) glatter_glExtGetBuffersQCOM_debug((buffers), (maxBuffers), (numBuffers), __FILE__, __LINE__)
void glatter_glExtGetBuffersQCOM_debug(GLuint *buffers, GLint maxBuffers, GLint *numBuffers, const char* file, int line);
#define glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers) glatter_glExtGetFramebuffersQCOM_debug((framebuffers), (maxFramebuffers), (numFramebuffers), __FILE__, __LINE__)
void glatter_glExtGetFramebuffersQCOM_debug(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers, const char* file, int line);
#define glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers) glatter_glExtGetRenderbuffersQCOM_debug((renderbuffers), (maxRenderbuffers), (numRenderbuffers), __FILE__, __LINE__)
void glatter_glExtGetRenderbuffersQCOM_debug(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers, const char* file, int line);
#define glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params) glatter_glExtGetTexLevelParameterivQCOM_debug((texture), (face), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glExtGetTexLevelParameterivQCOM_debug(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels) glatter_glExtGetTexSubImageQCOM_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (texels), __FILE__, __LINE__)
void glatter_glExtGetTexSubImageQCOM_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels, const char* file, int line);
#define glExtGetTexturesQCOM(textures, maxTextures, numTextures) glatter_glExtGetTexturesQCOM_debug((textures), (maxTextures), (numTextures), __FILE__, __LINE__)
void glatter_glExtGetTexturesQCOM_debug(GLuint *textures, GLint maxTextures, GLint *numTextures, const char* file, int line);
#define glExtTexObjectStateOverrideiQCOM(target, pname, param) glatter_glExtTexObjectStateOverrideiQCOM_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glExtTexObjectStateOverrideiQCOM_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_QCOM_extended_get)
#if defined(GL_QCOM_extended_get2)
#define glExtGetProgramBinarySourceQCOM(program, shadertype, source, length) glatter_glExtGetProgramBinarySourceQCOM_debug((program), (shadertype), (source), (length), __FILE__, __LINE__)
void glatter_glExtGetProgramBinarySourceQCOM_debug(GLuint program, GLenum shadertype, GLchar *source, GLint *length, const char* file, int line);
#define glExtGetProgramsQCOM(programs, maxPrograms, numPrograms) glatter_glExtGetProgramsQCOM_debug((programs), (maxPrograms), (numPrograms), __FILE__, __LINE__)
void glatter_glExtGetProgramsQCOM_debug(GLuint *programs, GLint maxPrograms, GLint *numPrograms, const char* file, int line);
#define glExtGetShadersQCOM(shaders, maxShaders, numShaders) glatter_glExtGetShadersQCOM_debug((shaders), (maxShaders), (numShaders), __FILE__, __LINE__)
void glatter_glExtGetShadersQCOM_debug(GLuint *shaders, GLint maxShaders, GLint *numShaders, const char* file, int line);
#define glExtIsProgramBinaryQCOM(program) glatter_glExtIsProgramBinaryQCOM_debug((program), __FILE__, __LINE__)
GLboolean glatter_glExtIsProgramBinaryQCOM_debug(GLuint program, const char* file, int line);
#endif // defined(GL_QCOM_extended_get2)
#if defined(GL_QCOM_tiled_rendering)
#define glEndTilingQCOM(preserveMask) glatter_glEndTilingQCOM_debug((preserveMask), __FILE__, __LINE__)
void glatter_glEndTilingQCOM_debug(GLbitfield preserveMask, const char* file, int line);
#define glStartTilingQCOM(x, y, width, height, preserveMask) glatter_glStartTilingQCOM_debug((x), (y), (width), (height), (preserveMask), __FILE__, __LINE__)
void glatter_glStartTilingQCOM_debug(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask, const char* file, int line);
#endif // defined(GL_QCOM_tiled_rendering)
#endif // defined(__gl2ext_h_)
#if defined(__gl31_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glReadBuffer(mode) glatter_glReadBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum mode, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_1)
#endif // defined(__gl31_h_)
#if defined(__gl32_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glReadBuffer(src) glatter_glReadBuffer_debug((src), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum src, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_0)
#if defined(GL_ES_VERSION_3_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_1)
#if defined(GL_ES_VERSION_3_2)
#define glBlendBarrier() glatter_glBlendBarrier_debug(__FILE__, __LINE__)
void glatter_glBlendBarrier_debug(const char* file, int line);
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparatei_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationi_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparatei_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunci_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaski_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubData_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallback_debug(GLDEBUGPROC callback, const void *userParam, const char* file, int line);
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControl_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsert_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glDisablei(target, index) glatter_glDisablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertex_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glEnablei(target, index) glatter_glEnablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLog_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatus_debug(const char* file, int line);
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabel_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectPtrLabel_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, void **params, const char* file, int line);
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIiv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuiv_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfv_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformiv_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuiv_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glIsEnabledi(target, index) glatter_glIsEnabledi_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledi_debug(GLenum target, GLuint index, const char* file, int line);
#define glMinSampleShading(value) glatter_glMinSampleShading_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShading_debug(GLfloat value, const char* file, int line);
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
void glatter_glObjectLabel_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_debug((ptr), (length), (label), __FILE__, __LINE__)
void glatter_glObjectPtrLabel_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteri_debug(GLenum pname, GLint value, const char* file, int line);
#define glPopDebugGroup() glatter_glPopDebugGroup_debug(__FILE__, __LINE__)
void glatter_glPopDebugGroup_debug(const char* file, int line);
#define glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBox_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
void glatter_glPrimitiveBoundingBox_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_debug((source), (id), (length), (message), __FILE__, __LINE__)
void glatter_glPushDebugGroup_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIiv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBuffer_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRange_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIiv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuiv_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_2)
#endif // defined(__gl32_h_)
#if defined(__gl3_h_)
#if defined(GL_ES_VERSION_2_0)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_ES_VERSION_2_0)
#if defined(GL_ES_VERSION_3_0)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glReadBuffer(mode) glatter_glReadBuffer_debug((mode), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum mode, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_ES_VERSION_3_0)
#endif // defined(__gl3_h_)
#if defined(__glcorearb_h_)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glBeginPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glDeletePerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glEndPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glGenPerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_debug((monitor), (pname), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterDataAMD_debug(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten, const char* file, int line);
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_debug((group), (counter), (pname), (data), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterInfoAMD_debug(GLuint group, GLuint counter, GLenum pname, void *data, const char* file, int line);
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_debug((group), (counter), (bufSize), (length), (counterString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterStringAMD_debug(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString, const char* file, int line);
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_debug((group), (numCounters), (maxActiveCounters), (counterSize), (counters), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCountersAMD_debug(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters, const char* file, int line);
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_debug((group), (bufSize), (length), (groupString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupStringAMD_debug(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString, const char* file, int line);
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_debug((numGroups), (groupsSize), (groups), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupsAMD_debug(GLint *numGroups, GLsizei groupsSize, GLuint *groups, const char* file, int line);
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_debug((monitor), (enable), (group), (numCounters), (counterList), __FILE__, __LINE__)
void glatter_glSelectPerfMonitorCountersAMD_debug(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList, const char* file, int line);
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleARB_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleARB_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleARB_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLui64vARB_debug(GLuint index, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentARB_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64ARB_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64ARB_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64ARB_debug(GLuint index, GLuint64EXT x, const char* file, int line);
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64vARB_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB_debug((context), (event), (flags), __FILE__, __LINE__)
GLsync glatter_glCreateSyncFromCLeventARB_debug(struct _cl_context *context, struct _cl_event *event, GLbitfield flags, const char* file, int line);
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB_debug((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z), __FILE__, __LINE__)
void glatter_glDispatchComputeGroupSizeARB_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z, const char* file, int line);
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallbackARB_debug(GLDEBUGPROCARB callback, const void *userParam, const char* file, int line);
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControlARB_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsertARB_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLogARB_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateiARB_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationiARB_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateiARB_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunciARB_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB_debug((mode), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectCountARB_debug(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB_debug((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectCountARB_debug(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatusARB_debug(const char* file, int line);
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB_debug((target), (lod), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImageARB_debug(GLenum target, GLint lod, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB_debug((target), (level), (format), (type), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnTexImageARB_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixelsARB_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShadingARB_debug(GLfloat value, const char* file, int line);
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB_debug((shader), (count), (path), (length), __FILE__, __LINE__)
void glatter_glCompileShaderIncludeARB_debug(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length, const char* file, int line);
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
void glatter_glDeleteNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB_debug((namelen), (name), (bufSize), (stringlen), (string), __FILE__, __LINE__)
void glatter_glGetNamedStringARB_debug(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string, const char* file, int line);
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB_debug((namelen), (name), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedStringivARB_debug(GLint namelen, const GLchar *name, GLenum pname, GLint *params, const char* file, int line);
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
GLboolean glatter_glIsNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB_debug((type), (namelen), (name), (stringlen), (string), __FILE__, __LINE__)
void glatter_glNamedStringARB_debug(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string, const char* file, int line);
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB_debug((target), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glBufferPageCommitmentARB_debug(GLenum target, GLintptr offset, GLsizei size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentARB_debug(GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentEXT_debug(GLuint buffer, GLintptr offset, GLsizei size, GLboolean commit, const char* file, int line);
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, resident) glatter_glTexPageCommitmentARB_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (resident), __FILE__, __LINE__)
void glatter_glTexPageCommitmentARB_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident, const char* file, int line);
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_debug((type), (object), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabelEXT_debug(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_debug((type), (object), (length), (label), __FILE__, __LINE__)
void glatter_glLabelObjectEXT_debug(GLenum type, GLuint object, GLsizei length, const GLchar *label, const char* file, int line);
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glInsertEventMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_debug(__FILE__, __LINE__)
void glatter_glPopGroupMarkerEXT_debug(const char* file, int line);
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glPushGroupMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_debug((mode), (start), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedEXT_debug(GLenum mode, GLint start, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_debug((factor), (units), (clamp), __FILE__, __LINE__)
void glatter_glPolygonOffsetClampEXT_debug(GLfloat factor, GLfloat units, GLfloat clamp, const char* file, int line);
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_debug((samples), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glRasterSamplesEXT_debug(GLuint samples, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveProgramEXT(program) glatter_glActiveProgramEXT_debug((program), __FILE__, __LINE__)
void glatter_glActiveProgramEXT_debug(GLuint program, const char* file, int line);
#define glCreateShaderProgramEXT(type, string) glatter_glCreateShaderProgramEXT_debug((type), (string), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramEXT_debug(GLenum type, const GLchar *string, const char* file, int line);
#define glUseShaderProgramEXT(type, program) glatter_glUseShaderProgramEXT_debug((type), (program), __FILE__, __LINE__)
void glatter_glUseShaderProgramEXT_debug(GLenum type, GLuint program, const char* file, int line);
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_debug((mode), (count), (box), __FILE__, __LINE__)
void glatter_glWindowRectanglesEXT_debug(GLenum mode, GLsizei count, const GLint *box, const char* file, int line);
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(__FILE__, __LINE__)
void glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(const char* file, int line);
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glBeginPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_debug((queryId), (queryHandle), __FILE__, __LINE__)
void glatter_glCreatePerfQueryINTEL_debug(GLuint queryId, GLuint *queryHandle, const char* file, int line);
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glDeletePerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glEndPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_debug((queryId), __FILE__, __LINE__)
void glatter_glGetFirstPerfQueryIdINTEL_debug(GLuint *queryId, const char* file, int line);
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_debug((queryId), (nextQueryId), __FILE__, __LINE__)
void glatter_glGetNextPerfQueryIdINTEL_debug(GLuint queryId, GLuint *nextQueryId, const char* file, int line);
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_debug((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue), __FILE__, __LINE__)
void glatter_glGetPerfCounterInfoINTEL_debug(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue, const char* file, int line);
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_debug((queryHandle), (flags), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfQueryDataINTEL_debug(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten, const char* file, int line);
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_debug((queryName), (queryId), __FILE__, __LINE__)
void glatter_glGetPerfQueryIdByNameINTEL_debug(GLchar *queryName, GLuint *queryId, const char* file, int line);
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_debug((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask), __FILE__, __LINE__)
void glatter_glGetPerfQueryInfoINTEL_debug(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask, const char* file, int line);
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierKHR_debug(const char* file, int line);
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleNV_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleNV_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleNV_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentNV_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64NV_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64NV_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vNV_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierNV_debug(const char* file, int line);
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_debug((pname), (value), __FILE__, __LINE__)
void glatter_glBlendParameteriNV_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRenderNV_debug(GLuint id, GLenum mode, const char* file, int line);
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRenderNV_debug(const char* file, int line);
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_debug((xbits), (ybits), __FILE__, __LINE__)
void glatter_glSubpixelPrecisionBiasNV_debug(GLuint xbits, GLuint ybits, const char* file, int line);
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glConservativeRasterParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_debug((color), __FILE__, __LINE__)
void glatter_glFragmentCoverageColorNV_debug(GLuint color, const char* file, int line);
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_debug((components), __FILE__, __LINE__)
void glatter_glCoverageModulationNV_debug(GLenum components, const char* file, int line);
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_debug((n), (v), __FILE__, __LINE__)
void glatter_glCoverageModulationTableNV_debug(GLsizei n, const GLfloat *v, const char* file, int line);
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_debug((bufsize), (v), __FILE__, __LINE__)
void glatter_glGetCoverageModulationTableNV_debug(GLsizei bufsize, GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_gpu_shader5)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformi64vNV_debug(GLuint program, GLint location, GLint64EXT *params, const char* file, int line);
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1i64NV_debug(GLuint program, GLint location, GLint64EXT x, const char* file, int line);
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, const char* file, int line);
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1i64NV_debug(GLint location, GLint64EXT x, const char* file, int line);
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1ui64NV_debug(GLint location, GLuint64EXT x, const char* file, int line);
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_NV_gpu_shader5)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_debug((target), (internalformat), (samples), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformatSampleivNV_debug(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_debug((resultPath), (srcPath), __FILE__, __LINE__)
void glatter_glCopyPathNV_debug(GLuint resultPath, GLuint srcPath, const char* file, int line);
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverFillPathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverStrokePathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_debug((path), (range), __FILE__, __LINE__)
void glatter_glDeletePathsNV_debug(GLuint path, GLsizei range, const char* file, int line);
#define glGenPathsNV(range) glatter_glGenPathsNV_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenPathsNV_debug(GLsizei range, const char* file, int line);
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_debug((path), (commands), __FILE__, __LINE__)
void glatter_glGetPathCommandsNV_debug(GLuint path, GLubyte *commands, const char* file, int line);
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_debug((path), (coords), __FILE__, __LINE__)
void glatter_glGetPathCoordsNV_debug(GLuint path, GLfloat *coords, const char* file, int line);
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_debug((path), (dashArray), __FILE__, __LINE__)
void glatter_glGetPathDashArrayNV_debug(GLuint path, GLfloat *dashArray, const char* file, int line);
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_debug((path), (startSegment), (numSegments), __FILE__, __LINE__)
GLfloat glatter_glGetPathLengthNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, const char* file, int line);
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_debug((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricRangeNV_debug(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_debug((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricsNV_debug(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterfvNV_debug(GLuint path, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterivNV_debug(GLuint path, GLenum pname, GLint *value, const char* file, int line);
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_debug((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing), __FILE__, __LINE__)
void glatter_glGetPathSpacingNV_debug(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing, const char* file, int line);
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourcefvNV_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params, const char* file, int line);
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_debug((resultPath), (pathA), (pathB), (weight), __FILE__, __LINE__)
void glatter_glInterpolatePathsNV_debug(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight, const char* file, int line);
#define glIsPathNV(path) glatter_glIsPathNV_debug((path), __FILE__, __LINE__)
GLboolean glatter_glIsPathNV_debug(GLuint path, const char* file, int line);
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_debug((path), (mask), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInFillPathNV_debug(GLuint path, GLuint mask, GLfloat x, GLfloat y, const char* file, int line);
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_debug((path), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInStrokePathNV_debug(GLuint path, GLfloat x, GLfloat y, const char* file, int line);
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_debug((path), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCommandsNV_debug(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_debug((path), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCoordsNV_debug(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_debug((func), __FILE__, __LINE__)
void glatter_glPathCoverDepthFuncNV_debug(GLenum func, const char* file, int line);
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_debug((path), (dashCount), (dashArray), __FILE__, __LINE__)
void glatter_glPathDashArrayNV_debug(GLuint path, GLsizei dashCount, const GLfloat *dashArray, const char* file, int line);
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_debug((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexRangeNV_debug(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2], const char* file, int line);
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphRangeNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphsNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathMemoryGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfNV_debug(GLuint path, GLenum pname, GLfloat value, const char* file, int line);
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfvNV_debug(GLuint path, GLenum pname, const GLfloat *value, const char* file, int line);
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameteriNV_debug(GLuint path, GLenum pname, GLint value, const char* file, int line);
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterivNV_debug(GLuint path, GLenum pname, const GLint *value, const char* file, int line);
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPathStencilDepthOffsetNV_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glPathStencilFuncNV_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_debug((path), (format), (length), (pathString), __FILE__, __LINE__)
void glatter_glPathStringNV_debug(GLuint path, GLenum format, GLsizei length, const void *pathString, const char* file, int line);
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_debug((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCommandsNV_debug(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_debug((path), (coordStart), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCoordsNV_debug(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_debug((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY), __FILE__, __LINE__)
GLboolean glatter_glPointAlongPathNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY, const char* file, int line);
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_debug((program), (location), (genMode), (components), (coeffs), __FILE__, __LINE__)
void glatter_glProgramPathFragmentInputGenNV_debug(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs, const char* file, int line);
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_debug((path), (fillMode), (mask), __FILE__, __LINE__)
void glatter_glStencilFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, const char* file, int line);
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_debug((path), (reference), (mask), __FILE__, __LINE__)
void glatter_glStencilStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, const char* file, int line);
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_debug((path), (fillMode), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode, const char* file, int line);
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_debug((path), (reference), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, GLenum coverMode, const char* file, int line);
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_debug((resultPath), (srcPath), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glTransformPathNV_debug(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_debug((resultPath), (numPaths), (paths), (weights), __FILE__, __LINE__)
void glatter_glWeightPathsNV_debug(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights, const char* file, int line);
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_debug((target), (start), (count), (v), __FILE__, __LINE__)
void glatter_glFramebufferSampleLocationsfvNV_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glNamedFramebufferSampleLocationsfvNV_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_debug(__FILE__, __LINE__)
void glatter_glResolveDepthValuesNV_debug(const char* file, int line);
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_debug((index), (swizzlex), (swizzley), (swizzlez), (swizzlew), __FILE__, __LINE__)
void glatter_glViewportSwizzleNV_debug(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew, const char* file, int line);
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_debug((target), (attachment), (texture), (level), (baseViewIndex), (numViews), __FILE__, __LINE__)
void glatter_glFramebufferTextureMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview)
#if defined(GL_VERSION_1_0)
#define glBlendFunc(sfactor, dfactor) glatter_glBlendFunc_debug((sfactor), (dfactor), __FILE__, __LINE__)
void glatter_glBlendFunc_debug(GLenum sfactor, GLenum dfactor, const char* file, int line);
#define glClear(mask) glatter_glClear_debug((mask), __FILE__, __LINE__)
void glatter_glClear_debug(GLbitfield mask, const char* file, int line);
#define glClearColor(red, green, blue, alpha) glatter_glClearColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glClearDepth(depth) glatter_glClearDepth_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepth_debug(GLdouble depth, const char* file, int line);
#define glClearStencil(s) glatter_glClearStencil_debug((s), __FILE__, __LINE__)
void glatter_glClearStencil_debug(GLint s, const char* file, int line);
#define glColorMask(red, green, blue, alpha) glatter_glColorMask_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColorMask_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#define glCullFace(mode) glatter_glCullFace_debug((mode), __FILE__, __LINE__)
void glatter_glCullFace_debug(GLenum mode, const char* file, int line);
#define glDepthFunc(func) glatter_glDepthFunc_debug((func), __FILE__, __LINE__)
void glatter_glDepthFunc_debug(GLenum func, const char* file, int line);
#define glDepthMask(flag) glatter_glDepthMask_debug((flag), __FILE__, __LINE__)
void glatter_glDepthMask_debug(GLboolean flag, const char* file, int line);
#define glDepthRange(near, far) glatter_glDepthRange_debug((near), (far), __FILE__, __LINE__)
void glatter_glDepthRange_debug(GLdouble near, GLdouble far, const char* file, int line);
#define glDisable(cap) glatter_glDisable_debug((cap), __FILE__, __LINE__)
void glatter_glDisable_debug(GLenum cap, const char* file, int line);
#define glDrawBuffer(buf) glatter_glDrawBuffer_debug((buf), __FILE__, __LINE__)
void glatter_glDrawBuffer_debug(GLenum buf, const char* file, int line);
#define glEnable(cap) glatter_glEnable_debug((cap), __FILE__, __LINE__)
void glatter_glEnable_debug(GLenum cap, const char* file, int line);
#define glFinish() glatter_glFinish_debug(__FILE__, __LINE__)
void glatter_glFinish_debug(const char* file, int line);
#define glFlush() glatter_glFlush_debug(__FILE__, __LINE__)
void glatter_glFlush_debug(const char* file, int line);
#define glFrontFace(mode) glatter_glFrontFace_debug((mode), __FILE__, __LINE__)
void glatter_glFrontFace_debug(GLenum mode, const char* file, int line);
#define glGetBooleanv(pname, data) glatter_glGetBooleanv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetBooleanv_debug(GLenum pname, GLboolean *data, const char* file, int line);
#define glGetDoublev(pname, data) glatter_glGetDoublev_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetDoublev_debug(GLenum pname, GLdouble *data, const char* file, int line);
#define glGetError() glatter_glGetError_debug(__FILE__, __LINE__)
GLenum glatter_glGetError_debug(const char* file, int line);
#define glGetFloatv(pname, data) glatter_glGetFloatv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetFloatv_debug(GLenum pname, GLfloat *data, const char* file, int line);
#define glGetIntegerv(pname, data) glatter_glGetIntegerv_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetIntegerv_debug(GLenum pname, GLint *data, const char* file, int line);
#define glGetString(name) glatter_glGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_glGetString_debug(GLenum name, const char* file, int line);
#define glGetTexImage(target, level, format, type, pixels) glatter_glGetTexImage_debug((target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glGetTexLevelParameterfv(target, level, pname, params) glatter_glGetTexLevelParameterfv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterfv_debug(GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexLevelParameteriv(target, level, pname, params) glatter_glGetTexLevelParameteriv_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameteriv_debug(GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterfv(target, pname, params) glatter_glGetTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTexParameteriv(target, pname, params) glatter_glGetTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glHint(target, mode) glatter_glHint_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHint_debug(GLenum target, GLenum mode, const char* file, int line);
#define glIsEnabled(cap) glatter_glIsEnabled_debug((cap), __FILE__, __LINE__)
GLboolean glatter_glIsEnabled_debug(GLenum cap, const char* file, int line);
#define glLineWidth(width) glatter_glLineWidth_debug((width), __FILE__, __LINE__)
void glatter_glLineWidth_debug(GLfloat width, const char* file, int line);
#define glLogicOp(opcode) glatter_glLogicOp_debug((opcode), __FILE__, __LINE__)
void glatter_glLogicOp_debug(GLenum opcode, const char* file, int line);
#define glPixelStoref(pname, param) glatter_glPixelStoref_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStoref_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelStorei(pname, param) glatter_glPixelStorei_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorei_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointSize(size) glatter_glPointSize_debug((size), __FILE__, __LINE__)
void glatter_glPointSize_debug(GLfloat size, const char* file, int line);
#define glPolygonMode(face, mode) glatter_glPolygonMode_debug((face), (mode), __FILE__, __LINE__)
void glatter_glPolygonMode_debug(GLenum face, GLenum mode, const char* file, int line);
#define glReadBuffer(src) glatter_glReadBuffer_debug((src), __FILE__, __LINE__)
void glatter_glReadBuffer_debug(GLenum src, const char* file, int line);
#define glReadPixels(x, y, width, height, format, type, pixels) glatter_glReadPixels_debug((x), (y), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glReadPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glScissor(x, y, width, height) glatter_glScissor_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glScissor_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glStencilFunc(func, ref, mask) glatter_glStencilFunc_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFunc_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMask(mask) glatter_glStencilMask_debug((mask), __FILE__, __LINE__)
void glatter_glStencilMask_debug(GLuint mask, const char* file, int line);
#define glStencilOp(fail, zfail, zpass) glatter_glStencilOp_debug((fail), (zfail), (zpass), __FILE__, __LINE__)
void glatter_glStencilOp_debug(GLenum fail, GLenum zfail, GLenum zpass, const char* file, int line);
#define glTexImage1D(target, level, internalformat, width, border, format, type, pixels) glatter_glTexImage1D_debug((target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage1D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) glatter_glTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage2D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexParameterf(target, pname, param) glatter_glTexParameterf_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterf_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTexParameterfv(target, pname, params) glatter_glTexParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTexParameteri(target, pname, param) glatter_glTexParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTexParameteriv(target, pname, params) glatter_glTexParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glViewport(x, y, width, height) glatter_glViewport_debug((x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glViewport_debug(GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_VERSION_1_0)
#if defined(GL_VERSION_1_1)
#define glBindTexture(target, texture) glatter_glBindTexture_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTexture_debug(GLenum target, GLuint texture, const char* file, int line);
#define glCopyTexImage1D(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1D_debug((target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2D_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage1D(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1D_debug((target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDeleteTextures(n, textures) glatter_glDeleteTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTextures_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glDrawArrays(mode, first, count) glatter_glDrawArrays_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArrays_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawElements(mode, count, type, indices) glatter_glDrawElements_debug((mode), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawElements_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glGenTextures(n, textures) glatter_glGenTextures_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTextures_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glGetPointerv(pname, params) glatter_glGetPointerv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointerv_debug(GLenum pname, void **params, const char* file, int line);
#define glIsTexture(texture) glatter_glIsTexture_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTexture_debug(GLuint texture, const char* file, int line);
#define glPolygonOffset(factor, units) glatter_glPolygonOffset_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffset_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glTexSubImage1D(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_VERSION_1_1)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_debug((target), (level), (internalformat), (width), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage_debug((target), (level), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTexImage_debug(GLenum target, GLint level, void *img, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays_debug((mode), (first), (count), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawArrays_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount, const char* file, int line);
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements_debug((mode), (count), (type), (indices), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawElements_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const char* file, int line);
#define glPointParameterf(pname, param) glatter_glPointParameterf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glPointParameteri(pname, param) glatter_glPointParameteri_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameteri_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointParameteriv(pname, params) glatter_glPointParameteriv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameteriv_debug(GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectiv_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glMapBuffer(target, access) glatter_glMapBuffer_debug((target), (access), __FILE__, __LINE__)
void * glatter_glMapBuffer_debug(GLenum target, GLenum access, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1s_debug(GLuint index, GLshort x, const char* file, int line);
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2s_debug(GLuint index, GLshort x, GLshort y, const char* file, int line);
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3s_debug(GLuint index, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nbv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Niv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nsv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nub_debug(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, const char* file, int line);
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nuiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nusv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4s_debug(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRender_debug(GLuint id, GLenum mode, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation_debug((program), (color), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocation_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClampColor(target, clamp) glatter_glClampColor_debug((target), (clamp), __FILE__, __LINE__)
void glatter_glClampColor_debug(GLenum target, GLenum clamp, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaski_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDisablei(target, index) glatter_glDisablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnablei(target, index) glatter_glEnablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEndConditionalRender() glatter_glEndConditionalRender_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRender_debug(const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture1D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glFramebufferTexture3D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuiv_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glIsEnabledi(target, index) glatter_glIsEnabledi_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledi_debug(GLenum target, GLuint index, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIiv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuiv_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1i_debug(GLuint index, GLint x, const char* file, int line);
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1ui_debug(GLuint index, GLuint x, const char* file, int line);
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2i_debug(GLuint index, GLint x, GLint y, const char* file, int line);
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2ui_debug(GLuint index, GLuint x, GLuint y, const char* file, int line);
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3i_debug(GLuint index, GLint x, GLint y, GLint z, const char* file, int line);
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, const char* file, int line);
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName_debug((program), (uniformIndex), (bufSize), (length), (uniformName), __FILE__, __LINE__)
void glatter_glGetActiveUniformName_debug(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex_debug((index), __FILE__, __LINE__)
void glatter_glPrimitiveRestartIndex_debug(GLuint index, const char* file, int line);
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBuffer_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertex_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (drawcount), (basevertex), __FILE__, __LINE__)
void glatter_glMultiDrawElementsBaseVertex_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex, const char* file, int line);
#define glProvokingVertex(mode) glatter_glProvokingVertex_debug((mode), __FILE__, __LINE__)
void glatter_glProvokingVertex_debug(GLenum mode, const char* file, int line);
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed_debug((program), (colorNumber), (index), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationIndexed_debug(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataIndex_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjecti64v_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectui64v_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIiv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glQueryCounter(id, target) glatter_glQueryCounter_debug((id), (target), __FILE__, __LINE__)
void glatter_glQueryCounter_debug(GLuint id, GLenum target, const char* file, int line);
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIiv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed_debug((target), (index), (id), __FILE__, __LINE__)
void glatter_glBeginQueryIndexed_debug(GLenum target, GLuint index, GLuint id, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparatei_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationi_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparatei_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunci_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback_debug((mode), (id), __FILE__, __LINE__)
void glatter_glDrawTransformFeedback_debug(GLenum mode, GLuint id, const char* file, int line);
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream_debug((mode), (id), (stream), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStream_debug(GLenum mode, GLuint id, GLuint stream, const char* file, int line);
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed_debug((target), (index), __FILE__, __LINE__)
void glatter_glEndQueryIndexed_debug(GLenum target, GLuint index, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv_debug((program), (shadertype), (index), (pname), (values), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformiv_debug(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values, const char* file, int line);
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv_debug((program), (shadertype), (pname), (values), __FILE__, __LINE__)
void glatter_glGetProgramStageiv_debug(GLuint program, GLenum shadertype, GLenum pname, GLint *values, const char* file, int line);
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryIndexediv_debug(GLenum target, GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLuint glatter_glGetSubroutineIndex_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLint glatter_glGetSubroutineUniformLocation_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv_debug((shadertype), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformSubroutineuiv_debug(GLenum shadertype, GLint location, GLuint *params, const char* file, int line);
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformdv_debug(GLuint program, GLint location, GLdouble *params, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glMinSampleShading(value) glatter_glMinSampleShading_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShading_debug(GLfloat value, const char* file, int line);
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv_debug((pname), (values), __FILE__, __LINE__)
void glatter_glPatchParameterfv_debug(GLenum pname, const GLfloat *values, const char* file, int line);
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteri_debug(GLenum pname, GLint value, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glUniform1d(location, x) glatter_glUniform1d_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1d_debug(GLint location, GLdouble x, const char* file, int line);
#define glUniform1dv(location, count, value) glatter_glUniform1dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform2d(location, x, y) glatter_glUniform2d_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2d_debug(GLint location, GLdouble x, GLdouble y, const char* file, int line);
#define glUniform2dv(location, count, value) glatter_glUniform2dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform3d(location, x, y, z) glatter_glUniform3d_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glUniform3dv(location, count, value) glatter_glUniform3dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glUniform4dv(location, count, value) glatter_glUniform4dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv_debug((shadertype), (count), (indices), __FILE__, __LINE__)
void glatter_glUniformSubroutinesuiv_debug(GLenum shadertype, GLsizei count, const GLuint *indices, const char* file, int line);
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glDepthRangeArrayv_debug(GLuint first, GLsizei count, const GLdouble *v, const char* file, int line);
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed_debug((index), (n), (f), __FILE__, __LINE__)
void glatter_glDepthRangeIndexed_debug(GLuint index, GLdouble n, GLdouble f, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetDoublei_v_debug(GLenum target, GLuint index, GLdouble *data, const char* file, int line);
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloati_v_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1d_debug(GLuint program, GLint location, GLdouble v0, const char* file, int line);
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, const char* file, int line);
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, const char* file, int line);
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3, const char* file, int line);
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glScissorArrayv_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
void glatter_glScissorIndexed_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv_debug((index), (v), __FILE__, __LINE__)
void glatter_glScissorIndexedv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribLPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glViewportArrayv_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
void glatter_glViewportIndexedf_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv_debug((index), (v), __FILE__, __LINE__)
void glatter_glViewportIndexedfv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance_debug((mode), (first), (count), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedBaseInstance_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, const char* file, int line);
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced_debug((mode), (id), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackInstanced_debug(GLenum mode, GLuint id, GLsizei instancecount, const char* file, int line);
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced_debug((mode), (id), (stream), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStreamInstanced_debug(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount, const char* file, int line);
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv_debug((program), (bufferIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveAtomicCounterBufferiv_debug(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D_debug((target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTexStorage1D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData_debug((target), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferData_debug(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData_debug((target), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferSubData_debug(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubData_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallback_debug(GLDEBUGPROC callback, const void *userParam, const char* file, int line);
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControl_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsert_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLog_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformati64v_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params, const char* file, int line);
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabel_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectPtrLabel_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocationIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData_debug((buffer), __FILE__, __LINE__)
void glatter_glInvalidateBufferData_debug(GLuint buffer, const char* file, int line);
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glInvalidateBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage_debug((texture), (level), __FILE__, __LINE__)
void glatter_glInvalidateTexImage_debug(GLuint texture, GLint level, const char* file, int line);
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glInvalidateTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect_debug((mode), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirect_debug(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect_debug((mode), (type), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
void glatter_glObjectLabel_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_debug((ptr), (length), (label), __FILE__, __LINE__)
void glatter_glObjectPtrLabel_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#define glPopDebugGroup() glatter_glPopDebugGroup_debug(__FILE__, __LINE__)
void glatter_glPopDebugGroup_debug(const char* file, int line);
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_debug((source), (id), (length), (message), __FILE__, __LINE__)
void glatter_glPushDebugGroup_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding_debug((program), (storageBlockIndex), (storageBlockBinding), __FILE__, __LINE__)
void glatter_glShaderStorageBlockBinding_debug(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding, const char* file, int line);
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRange_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
void glatter_glTextureView_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribLFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase_debug((target), (first), (count), (buffers), __FILE__, __LINE__)
void glatter_glBindBuffersBase_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const char* file, int line);
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange_debug((target), (first), (count), (buffers), (offsets), (sizes), __FILE__, __LINE__)
void glatter_glBindBuffersRange_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes, const char* file, int line);
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindImageTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers_debug((first), (count), (samplers), __FILE__, __LINE__)
void glatter_glBindSamplers_debug(GLuint first, GLsizei count, const GLuint *samplers, const char* file, int line);
#define glBindTextures(first, count, textures) glatter_glBindTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers_debug((first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glBindVertexBuffers_debug(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage_debug((target), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glBufferStorage_debug(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage_debug((texture), (level), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit_debug((unit), (texture), __FILE__, __LINE__)
void glatter_glBindTextureUnit_debug(GLuint unit, GLuint texture, const char* file, int line);
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer_debug((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitNamedFramebuffer_debug(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus_debug((framebuffer), (target), __FILE__, __LINE__)
GLenum glatter_glCheckNamedFramebufferStatus_debug(GLuint framebuffer, GLenum target, const char* file, int line);
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData_debug((buffer), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferData_debug(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData_debug((buffer), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferSubData_debug(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizei size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedFramebufferfi(framebuffer, buffer, depth, stencil) glatter_glClearNamedFramebufferfi_debug((framebuffer), (buffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfi_debug(GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil, const char* file, int line);
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferuiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClipControl(origin, depth) glatter_glClipControl_debug((origin), (depth), __FILE__, __LINE__)
void glatter_glClipControl_debug(GLenum origin, GLenum depth, const char* file, int line);
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData_debug((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyNamedBufferSubData_debug(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizei size, const char* file, int line);
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D_debug((texture), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glCreateBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glCreateFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glCreateProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glCreateQueries(target, n, ids) glatter_glCreateQueries_debug((target), (n), (ids), __FILE__, __LINE__)
void glatter_glCreateQueries_debug(GLenum target, GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glCreateRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers_debug((n), (samplers), __FILE__, __LINE__)
void glatter_glCreateSamplers_debug(GLsizei n, GLuint *samplers, const char* file, int line);
#define glCreateTextures(target, n, textures) glatter_glCreateTextures_debug((target), (n), (textures), __FILE__, __LINE__)
void glatter_glCreateTextures_debug(GLenum target, GLsizei n, GLuint *textures, const char* file, int line);
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glCreateTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glCreateVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glDisableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glEnableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizei length, const char* file, int line);
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap_debug((texture), __FILE__, __LINE__)
void glatter_glGenerateTextureMipmap_debug(GLuint texture, const char* file, int line);
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage_debug((texture), (level), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureImage_debug(GLuint texture, GLint level, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatus_debug(const char* file, int line);
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteri64v_debug(GLuint buffer, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteriv_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferPointerv_debug(GLuint buffer, GLenum pname, void **params, const char* file, int line);
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizei size, void *data, const char* file, int line);
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv_debug((framebuffer), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferAttachmentParameteriv_debug(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameteriv_debug(GLuint framebuffer, GLenum pname, GLint *param, const char* file, int line);
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv_debug((renderbuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedRenderbufferParameteriv_debug(GLuint renderbuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjecti64v_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjecti64v_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectiv_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectiv_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjectui64v_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectui64v_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectuiv_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectuiv_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage_debug((texture), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterfv_debug(GLuint texture, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameteriv_debug(GLuint texture, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIiv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIuiv_debug(GLuint texture, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterfv_debug(GLuint texture, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameteriv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki64_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint64 *param, const char* file, int line);
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint *param, const char* file, int line);
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv_debug((xfb), (pname), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackiv_debug(GLuint xfb, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexed64iv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param, const char* file, int line);
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexediv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayiv_debug(GLuint vaobj, GLenum pname, GLint *param, const char* file, int line);
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage_debug((target), (lod), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImage_debug(GLenum target, GLint lod, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage_debug((target), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdv_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfv_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformiv_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuiv_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData_debug((framebuffer), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData_debug((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferSubData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer_debug((buffer), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBuffer_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange_debug((buffer), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizei length, GLbitfield access, const char* file, int line);
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData_debug((buffer), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glNamedBufferData_debug(GLuint buffer, GLsizei size, const void *data, GLenum usage, const char* file, int line);
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage_debug((buffer), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glNamedBufferStorage_debug(GLuint buffer, GLsizei size, const void *data, GLbitfield flags, const char* file, int line);
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizei size, const void *data, const char* file, int line);
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer_debug((framebuffer), (buf), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffer_debug(GLuint framebuffer, GLenum buf, const char* file, int line);
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers_debug((framebuffer), (n), (bufs), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffers_debug(GLuint framebuffer, GLsizei n, const GLenum *bufs, const char* file, int line);
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glNamedFramebufferParameteri_debug(GLuint framebuffer, GLenum pname, GLint param, const char* file, int line);
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer_debug((framebuffer), (src), __FILE__, __LINE__)
void glatter_glNamedFramebufferReadBuffer_debug(GLuint framebuffer, GLenum src, const char* file, int line);
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer_debug((framebuffer), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glNamedFramebufferRenderbuffer_debug(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture_debug((framebuffer), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer_debug((framebuffer), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureLayer_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage_debug((renderbuffer), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorage_debug(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample_debug((renderbuffer), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisample_debug(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#define glTextureBarrier() glatter_glTextureBarrier_debug(__FILE__, __LINE__)
void glatter_glTextureBarrier_debug(const char* file, int line);
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer_debug((texture), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTextureBuffer_debug(GLuint texture, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange_debug((texture), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTextureBufferRange_debug(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizei size, const char* file, int line);
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIiv_debug(GLuint texture, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIuiv_debug(GLuint texture, GLenum pname, const GLuint *params, const char* file, int line);
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterf_debug(GLuint texture, GLenum pname, GLfloat param, const char* file, int line);
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterfv_debug(GLuint texture, GLenum pname, const GLfloat *param, const char* file, int line);
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteri_debug(GLuint texture, GLenum pname, GLint param, const char* file, int line);
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteriv_debug(GLuint texture, GLenum pname, const GLint *param, const char* file, int line);
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D_debug((texture), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D_debug((texture), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample_debug((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage2DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D_debug((texture), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample_debug((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage3DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase_debug((xfb), (index), (buffer), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferBase_debug(GLuint xfb, GLuint index, GLuint buffer, const char* file, int line);
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange_debug((xfb), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferRange_debug(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizei size, const char* file, int line);
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glUnmapNamedBuffer_debug(GLuint buffer, const char* file, int line);
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding_debug((vaobj), (attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexArrayAttribBinding_debug(GLuint vaobj, GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat_debug((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribIFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribLFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor_debug((vaobj), (bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayBindingDivisor_debug(GLuint vaobj, GLuint bindingindex, GLuint divisor, const char* file, int line);
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer_debug((vaobj), (buffer), __FILE__, __LINE__)
void glatter_glVertexArrayElementBuffer_debug(GLuint vaobj, GLuint buffer, const char* file, int line);
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer_debug((vaobj), (bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffer_debug(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers_debug((vaobj), (first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffers_debug(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#endif // defined(GL_VERSION_4_5)
#endif // defined(__glcorearb_h_)
#if defined(__glext_h_)
#if defined(GL_3DFX_tbuffer)
#define glTbufferMask3DFX(mask) glatter_glTbufferMask3DFX_debug((mask), __FILE__, __LINE__)
void glatter_glTbufferMask3DFX_debug(GLuint mask, const char* file, int line);
#endif // defined(GL_3DFX_tbuffer)
#if defined(GL_AMD_debug_output)
#define glDebugMessageCallbackAMD(callback, userParam) glatter_glDebugMessageCallbackAMD_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallbackAMD_debug(GLDEBUGPROCAMD callback, void *userParam, const char* file, int line);
#define glDebugMessageEnableAMD(category, severity, count, ids, enabled) glatter_glDebugMessageEnableAMD_debug((category), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageEnableAMD_debug(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsertAMD(category, severity, id, length, buf) glatter_glDebugMessageInsertAMD_debug((category), (severity), (id), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsertAMD_debug(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf, const char* file, int line);
#define glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message) glatter_glGetDebugMessageLogAMD_debug((count), (bufsize), (categories), (severities), (ids), (lengths), (message), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLogAMD_debug(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message, const char* file, int line);
#endif // defined(GL_AMD_debug_output)
#if defined(GL_AMD_draw_buffers_blend)
#define glBlendEquationIndexedAMD(buf, mode) glatter_glBlendEquationIndexedAMD_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationIndexedAMD_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateIndexedAMD_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateIndexedAMD_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendFuncIndexedAMD(buf, src, dst) glatter_glBlendFuncIndexedAMD_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFuncIndexedAMD_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateIndexedAMD_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateIndexedAMD_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#endif // defined(GL_AMD_draw_buffers_blend)
#if defined(GL_AMD_framebuffer_sample_positions)
#define glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values) glatter_glFramebufferSamplePositionsfvAMD_debug((target), (numsamples), (pixelindex), (values), __FILE__, __LINE__)
void glatter_glFramebufferSamplePositionsfvAMD_debug(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values, const char* file, int line);
#define glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values) glatter_glGetFramebufferParameterfvAMD_debug((target), (pname), (numsamples), (pixelindex), (size), (values), __FILE__, __LINE__)
void glatter_glGetFramebufferParameterfvAMD_debug(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values, const char* file, int line);
#define glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values) glatter_glGetNamedFramebufferParameterfvAMD_debug((framebuffer), (pname), (numsamples), (pixelindex), (size), (values), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameterfvAMD_debug(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values, const char* file, int line);
#define glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values) glatter_glNamedFramebufferSamplePositionsfvAMD_debug((framebuffer), (numsamples), (pixelindex), (values), __FILE__, __LINE__)
void glatter_glNamedFramebufferSamplePositionsfvAMD_debug(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values, const char* file, int line);
#endif // defined(GL_AMD_framebuffer_sample_positions)
#if defined(GL_AMD_gpu_shader_int64)
#define glGetUniformi64vNV(program, location, params) glatter_glGetUniformi64vNV_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformi64vNV_debug(GLuint program, GLint location, GLint64EXT *params, const char* file, int line);
#define glGetUniformui64vNV(program, location, params) glatter_glGetUniformui64vNV_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformui64vNV_debug(GLuint program, GLint location, GLuint64EXT *params, const char* file, int line);
#define glProgramUniform1i64NV(program, location, x) glatter_glProgramUniform1i64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1i64NV_debug(GLuint program, GLint location, GLint64EXT x, const char* file, int line);
#define glProgramUniform1i64vNV(program, location, count, value) glatter_glProgramUniform1i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform1ui64NV(program, location, x) glatter_glProgramUniform1ui64NV_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, const char* file, int line);
#define glProgramUniform1ui64vNV(program, location, count, value) glatter_glProgramUniform1ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform2i64NV(program, location, x, y) glatter_glProgramUniform2i64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glProgramUniform2i64vNV(program, location, count, value) glatter_glProgramUniform2i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform2ui64NV(program, location, x, y) glatter_glProgramUniform2ui64NV_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glProgramUniform2ui64vNV(program, location, count, value) glatter_glProgramUniform2ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform3i64NV(program, location, x, y, z) glatter_glProgramUniform3i64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glProgramUniform3i64vNV(program, location, count, value) glatter_glProgramUniform3i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform3ui64NV(program, location, x, y, z) glatter_glProgramUniform3ui64NV_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glProgramUniform3ui64vNV(program, location, count, value) glatter_glProgramUniform3ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glProgramUniform4i64NV(program, location, x, y, z, w) glatter_glProgramUniform4i64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4i64NV_debug(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glProgramUniform4i64vNV(program, location, count, value) glatter_glProgramUniform4i64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4i64vNV_debug(GLuint program, GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glProgramUniform4ui64NV(program, location, x, y, z, w) glatter_glProgramUniform4ui64NV_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64NV_debug(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glProgramUniform4ui64vNV(program, location, count, value) glatter_glProgramUniform4ui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform1i64NV(location, x) glatter_glUniform1i64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1i64NV_debug(GLint location, GLint64EXT x, const char* file, int line);
#define glUniform1i64vNV(location, count, value) glatter_glUniform1i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform1ui64NV(location, x) glatter_glUniform1ui64NV_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1ui64NV_debug(GLint location, GLuint64EXT x, const char* file, int line);
#define glUniform1ui64vNV(location, count, value) glatter_glUniform1ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform2i64NV(location, x, y) glatter_glUniform2i64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glUniform2i64vNV(location, count, value) glatter_glUniform2i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform2ui64NV(location, x, y) glatter_glUniform2ui64NV_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glUniform2ui64vNV(location, count, value) glatter_glUniform2ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform3i64NV(location, x, y, z) glatter_glUniform3i64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glUniform3i64vNV(location, count, value) glatter_glUniform3i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform3ui64NV(location, x, y, z) glatter_glUniform3ui64NV_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glUniform3ui64vNV(location, count, value) glatter_glUniform3ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniform4i64NV(location, x, y, z, w) glatter_glUniform4i64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4i64NV_debug(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glUniform4i64vNV(location, count, value) glatter_glUniform4i64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4i64vNV_debug(GLint location, GLsizei count, const GLint64EXT *value, const char* file, int line);
#define glUniform4ui64NV(location, x, y, z, w) glatter_glUniform4ui64NV_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4ui64NV_debug(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glUniform4ui64vNV(location, count, value) glatter_glUniform4ui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_AMD_gpu_shader_int64)
#if defined(GL_AMD_interleaved_elements)
#define glVertexAttribParameteriAMD(index, pname, param) glatter_glVertexAttribParameteriAMD_debug((index), (pname), (param), __FILE__, __LINE__)
void glatter_glVertexAttribParameteriAMD_debug(GLuint index, GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_AMD_interleaved_elements)
#if defined(GL_AMD_multi_draw_indirect)
#define glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride) glatter_glMultiDrawArraysIndirectAMD_debug((mode), (indirect), (primcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectAMD_debug(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride) glatter_glMultiDrawElementsIndirectAMD_debug((mode), (type), (indirect), (primcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectAMD_debug(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_AMD_multi_draw_indirect)
#if defined(GL_AMD_name_gen_delete)
#define glDeleteNamesAMD(identifier, num, names) glatter_glDeleteNamesAMD_debug((identifier), (num), (names), __FILE__, __LINE__)
void glatter_glDeleteNamesAMD_debug(GLenum identifier, GLuint num, const GLuint *names, const char* file, int line);
#define glGenNamesAMD(identifier, num, names) glatter_glGenNamesAMD_debug((identifier), (num), (names), __FILE__, __LINE__)
void glatter_glGenNamesAMD_debug(GLenum identifier, GLuint num, GLuint *names, const char* file, int line);
#define glIsNameAMD(identifier, name) glatter_glIsNameAMD_debug((identifier), (name), __FILE__, __LINE__)
GLboolean glatter_glIsNameAMD_debug(GLenum identifier, GLuint name, const char* file, int line);
#endif // defined(GL_AMD_name_gen_delete)
#if defined(GL_AMD_occlusion_query_event)
#define glQueryObjectParameteruiAMD(target, id, pname, param) glatter_glQueryObjectParameteruiAMD_debug((target), (id), (pname), (param), __FILE__, __LINE__)
void glatter_glQueryObjectParameteruiAMD_debug(GLenum target, GLuint id, GLenum pname, GLuint param, const char* file, int line);
#endif // defined(GL_AMD_occlusion_query_event)
#if defined(GL_AMD_performance_monitor)
#define glBeginPerfMonitorAMD(monitor) glatter_glBeginPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glBeginPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glDeletePerfMonitorsAMD(n, monitors) glatter_glDeletePerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glDeletePerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glEndPerfMonitorAMD(monitor) glatter_glEndPerfMonitorAMD_debug((monitor), __FILE__, __LINE__)
void glatter_glEndPerfMonitorAMD_debug(GLuint monitor, const char* file, int line);
#define glGenPerfMonitorsAMD(n, monitors) glatter_glGenPerfMonitorsAMD_debug((n), (monitors), __FILE__, __LINE__)
void glatter_glGenPerfMonitorsAMD_debug(GLsizei n, GLuint *monitors, const char* file, int line);
#define glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) glatter_glGetPerfMonitorCounterDataAMD_debug((monitor), (pname), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterDataAMD_debug(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten, const char* file, int line);
#define glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) glatter_glGetPerfMonitorCounterInfoAMD_debug((group), (counter), (pname), (data), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterInfoAMD_debug(GLuint group, GLuint counter, GLenum pname, void *data, const char* file, int line);
#define glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) glatter_glGetPerfMonitorCounterStringAMD_debug((group), (counter), (bufSize), (length), (counterString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCounterStringAMD_debug(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString, const char* file, int line);
#define glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) glatter_glGetPerfMonitorCountersAMD_debug((group), (numCounters), (maxActiveCounters), (counterSize), (counters), __FILE__, __LINE__)
void glatter_glGetPerfMonitorCountersAMD_debug(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters, const char* file, int line);
#define glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) glatter_glGetPerfMonitorGroupStringAMD_debug((group), (bufSize), (length), (groupString), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupStringAMD_debug(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString, const char* file, int line);
#define glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) glatter_glGetPerfMonitorGroupsAMD_debug((numGroups), (groupsSize), (groups), __FILE__, __LINE__)
void glatter_glGetPerfMonitorGroupsAMD_debug(GLint *numGroups, GLsizei groupsSize, GLuint *groups, const char* file, int line);
#define glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) glatter_glSelectPerfMonitorCountersAMD_debug((monitor), (enable), (group), (numCounters), (counterList), __FILE__, __LINE__)
void glatter_glSelectPerfMonitorCountersAMD_debug(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList, const char* file, int line);
#endif // defined(GL_AMD_performance_monitor)
#if defined(GL_AMD_sample_positions)
#define glSetMultisamplefvAMD(pname, index, val) glatter_glSetMultisamplefvAMD_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glSetMultisamplefvAMD_debug(GLenum pname, GLuint index, const GLfloat *val, const char* file, int line);
#endif // defined(GL_AMD_sample_positions)
#if defined(GL_AMD_sparse_texture)
#define glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags) glatter_glTexStorageSparseAMD_debug((target), (internalFormat), (width), (height), (depth), (layers), (flags), __FILE__, __LINE__)
void glatter_glTexStorageSparseAMD_debug(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags, const char* file, int line);
#define glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags) glatter_glTextureStorageSparseAMD_debug((texture), (target), (internalFormat), (width), (height), (depth), (layers), (flags), __FILE__, __LINE__)
void glatter_glTextureStorageSparseAMD_debug(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags, const char* file, int line);
#endif // defined(GL_AMD_sparse_texture)
#if defined(GL_AMD_stencil_operation_extended)
#define glStencilOpValueAMD(face, value) glatter_glStencilOpValueAMD_debug((face), (value), __FILE__, __LINE__)
void glatter_glStencilOpValueAMD_debug(GLenum face, GLuint value, const char* file, int line);
#endif // defined(GL_AMD_stencil_operation_extended)
#if defined(GL_AMD_vertex_shader_tessellator)
#define glTessellationFactorAMD(factor) glatter_glTessellationFactorAMD_debug((factor), __FILE__, __LINE__)
void glatter_glTessellationFactorAMD_debug(GLfloat factor, const char* file, int line);
#define glTessellationModeAMD(mode) glatter_glTessellationModeAMD_debug((mode), __FILE__, __LINE__)
void glatter_glTessellationModeAMD_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_AMD_vertex_shader_tessellator)
#if defined(GL_APPLE_element_array)
#define glDrawElementArrayAPPLE(mode, first, count) glatter_glDrawElementArrayAPPLE_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawElementArrayAPPLE_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glDrawRangeElementArrayAPPLE(mode, start, end, first, count) glatter_glDrawRangeElementArrayAPPLE_debug((mode), (start), (end), (first), (count), __FILE__, __LINE__)
void glatter_glDrawRangeElementArrayAPPLE_debug(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count, const char* file, int line);
#define glElementPointerAPPLE(type, pointer) glatter_glElementPointerAPPLE_debug((type), (pointer), __FILE__, __LINE__)
void glatter_glElementPointerAPPLE_debug(GLenum type, const void *pointer, const char* file, int line);
#define glMultiDrawElementArrayAPPLE(mode, first, count, primcount) glatter_glMultiDrawElementArrayAPPLE_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawElementArrayAPPLE_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#define glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount) glatter_glMultiDrawRangeElementArrayAPPLE_debug((mode), (start), (end), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawRangeElementArrayAPPLE_debug(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#endif // defined(GL_APPLE_element_array)
#if defined(GL_APPLE_fence)
#define glDeleteFencesAPPLE(n, fences) glatter_glDeleteFencesAPPLE_debug((n), (fences), __FILE__, __LINE__)
void glatter_glDeleteFencesAPPLE_debug(GLsizei n, const GLuint *fences, const char* file, int line);
#define glFinishFenceAPPLE(fence) glatter_glFinishFenceAPPLE_debug((fence), __FILE__, __LINE__)
void glatter_glFinishFenceAPPLE_debug(GLuint fence, const char* file, int line);
#define glFinishObjectAPPLE(object, name) glatter_glFinishObjectAPPLE_debug((object), (name), __FILE__, __LINE__)
void glatter_glFinishObjectAPPLE_debug(GLenum object, GLint name, const char* file, int line);
#define glGenFencesAPPLE(n, fences) glatter_glGenFencesAPPLE_debug((n), (fences), __FILE__, __LINE__)
void glatter_glGenFencesAPPLE_debug(GLsizei n, GLuint *fences, const char* file, int line);
#define glIsFenceAPPLE(fence) glatter_glIsFenceAPPLE_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glIsFenceAPPLE_debug(GLuint fence, const char* file, int line);
#define glSetFenceAPPLE(fence) glatter_glSetFenceAPPLE_debug((fence), __FILE__, __LINE__)
void glatter_glSetFenceAPPLE_debug(GLuint fence, const char* file, int line);
#define glTestFenceAPPLE(fence) glatter_glTestFenceAPPLE_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glTestFenceAPPLE_debug(GLuint fence, const char* file, int line);
#define glTestObjectAPPLE(object, name) glatter_glTestObjectAPPLE_debug((object), (name), __FILE__, __LINE__)
GLboolean glatter_glTestObjectAPPLE_debug(GLenum object, GLuint name, const char* file, int line);
#endif // defined(GL_APPLE_fence)
#if defined(GL_APPLE_flush_buffer_range)
#define glBufferParameteriAPPLE(target, pname, param) glatter_glBufferParameteriAPPLE_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glBufferParameteriAPPLE_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glFlushMappedBufferRangeAPPLE(target, offset, size) glatter_glFlushMappedBufferRangeAPPLE_debug((target), (offset), (size), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRangeAPPLE_debug(GLenum target, GLintptr offset, GLsizeiptr size, const char* file, int line);
#endif // defined(GL_APPLE_flush_buffer_range)
#if defined(GL_APPLE_object_purgeable)
#define glGetObjectParameterivAPPLE(objectType, name, pname, params) glatter_glGetObjectParameterivAPPLE_debug((objectType), (name), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectParameterivAPPLE_debug(GLenum objectType, GLuint name, GLenum pname, GLint *params, const char* file, int line);
#define glObjectPurgeableAPPLE(objectType, name, option) glatter_glObjectPurgeableAPPLE_debug((objectType), (name), (option), __FILE__, __LINE__)
GLenum glatter_glObjectPurgeableAPPLE_debug(GLenum objectType, GLuint name, GLenum option, const char* file, int line);
#define glObjectUnpurgeableAPPLE(objectType, name, option) glatter_glObjectUnpurgeableAPPLE_debug((objectType), (name), (option), __FILE__, __LINE__)
GLenum glatter_glObjectUnpurgeableAPPLE_debug(GLenum objectType, GLuint name, GLenum option, const char* file, int line);
#endif // defined(GL_APPLE_object_purgeable)
#if defined(GL_APPLE_texture_range)
#define glGetTexParameterPointervAPPLE(target, pname, params) glatter_glGetTexParameterPointervAPPLE_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterPointervAPPLE_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glTextureRangeAPPLE(target, length, pointer) glatter_glTextureRangeAPPLE_debug((target), (length), (pointer), __FILE__, __LINE__)
void glatter_glTextureRangeAPPLE_debug(GLenum target, GLsizei length, const void *pointer, const char* file, int line);
#endif // defined(GL_APPLE_texture_range)
#if defined(GL_APPLE_vertex_array_object)
#define glBindVertexArrayAPPLE(array) glatter_glBindVertexArrayAPPLE_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArrayAPPLE_debug(GLuint array, const char* file, int line);
#define glDeleteVertexArraysAPPLE(n, arrays) glatter_glDeleteVertexArraysAPPLE_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArraysAPPLE_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glGenVertexArraysAPPLE(n, arrays) glatter_glGenVertexArraysAPPLE_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArraysAPPLE_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glIsVertexArrayAPPLE(array) glatter_glIsVertexArrayAPPLE_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArrayAPPLE_debug(GLuint array, const char* file, int line);
#endif // defined(GL_APPLE_vertex_array_object)
#if defined(GL_APPLE_vertex_array_range)
#define glFlushVertexArrayRangeAPPLE(length, pointer) glatter_glFlushVertexArrayRangeAPPLE_debug((length), (pointer), __FILE__, __LINE__)
void glatter_glFlushVertexArrayRangeAPPLE_debug(GLsizei length, void *pointer, const char* file, int line);
#define glVertexArrayParameteriAPPLE(pname, param) glatter_glVertexArrayParameteriAPPLE_debug((pname), (param), __FILE__, __LINE__)
void glatter_glVertexArrayParameteriAPPLE_debug(GLenum pname, GLint param, const char* file, int line);
#define glVertexArrayRangeAPPLE(length, pointer) glatter_glVertexArrayRangeAPPLE_debug((length), (pointer), __FILE__, __LINE__)
void glatter_glVertexArrayRangeAPPLE_debug(GLsizei length, void *pointer, const char* file, int line);
#endif // defined(GL_APPLE_vertex_array_range)
#if defined(GL_APPLE_vertex_program_evaluators)
#define glDisableVertexAttribAPPLE(index, pname) glatter_glDisableVertexAttribAPPLE_debug((index), (pname), __FILE__, __LINE__)
void glatter_glDisableVertexAttribAPPLE_debug(GLuint index, GLenum pname, const char* file, int line);
#define glEnableVertexAttribAPPLE(index, pname) glatter_glEnableVertexAttribAPPLE_debug((index), (pname), __FILE__, __LINE__)
void glatter_glEnableVertexAttribAPPLE_debug(GLuint index, GLenum pname, const char* file, int line);
#define glIsVertexAttribEnabledAPPLE(index, pname) glatter_glIsVertexAttribEnabledAPPLE_debug((index), (pname), __FILE__, __LINE__)
GLboolean glatter_glIsVertexAttribEnabledAPPLE_debug(GLuint index, GLenum pname, const char* file, int line);
#define glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1dAPPLE_debug((index), (size), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMapVertexAttrib1dAPPLE_debug(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points, const char* file, int line);
#define glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points) glatter_glMapVertexAttrib1fAPPLE_debug((index), (size), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMapVertexAttrib1fAPPLE_debug(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points, const char* file, int line);
#define glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2dAPPLE_debug((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMapVertexAttrib2dAPPLE_debug(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points, const char* file, int line);
#define glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMapVertexAttrib2fAPPLE_debug((index), (size), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMapVertexAttrib2fAPPLE_debug(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points, const char* file, int line);
#endif // defined(GL_APPLE_vertex_program_evaluators)
#if defined(GL_ARB_ES3_2_compatibility)
#define glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW) glatter_glPrimitiveBoundingBoxARB_debug((minX), (minY), (minZ), (minW), (maxX), (maxY), (maxZ), (maxW), __FILE__, __LINE__)
void glatter_glPrimitiveBoundingBoxARB_debug(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW, const char* file, int line);
#endif // defined(GL_ARB_ES3_2_compatibility)
#if defined(GL_ARB_bindless_texture)
#define glGetImageHandleARB(texture, level, layered, layer, format) glatter_glGetImageHandleARB_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleARB_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleARB(texture) glatter_glGetTextureHandleARB_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleARB_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleARB(texture, sampler) glatter_glGetTextureSamplerHandleARB_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleARB_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glGetVertexAttribLui64vARB(index, pname, params) glatter_glGetVertexAttribLui64vARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLui64vARB_debug(GLuint index, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glIsImageHandleResidentARB(handle) glatter_glIsImageHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentARB(handle) glatter_glIsTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentARB(handle) glatter_glMakeImageHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentARB(handle, access) glatter_glMakeImageHandleResidentARB_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentARB_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentARB(handle) glatter_glMakeTextureHandleNonResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentARB(handle) glatter_glMakeTextureHandleResidentARB_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentARB_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64ARB(program, location, value) glatter_glProgramUniformHandleui64ARB_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64ARB_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vARB(program, location, count, values) glatter_glProgramUniformHandleui64vARB_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64ARB(location, value) glatter_glUniformHandleui64ARB_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64ARB_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vARB(location, count, value) glatter_glUniformHandleui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glVertexAttribL1ui64ARB(index, x) glatter_glVertexAttribL1ui64ARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64ARB_debug(GLuint index, GLuint64EXT x, const char* file, int line);
#define glVertexAttribL1ui64vARB(index, v) glatter_glVertexAttribL1ui64vARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64vARB_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#endif // defined(GL_ARB_bindless_texture)
#if defined(GL_ARB_cl_event)
#define glCreateSyncFromCLeventARB(context, event, flags) glatter_glCreateSyncFromCLeventARB_debug((context), (event), (flags), __FILE__, __LINE__)
GLsync glatter_glCreateSyncFromCLeventARB_debug(struct _cl_context *context, struct _cl_event *event, GLbitfield flags, const char* file, int line);
#endif // defined(GL_ARB_cl_event)
#if defined(GL_ARB_color_buffer_float)
#define glClampColorARB(target, clamp) glatter_glClampColorARB_debug((target), (clamp), __FILE__, __LINE__)
void glatter_glClampColorARB_debug(GLenum target, GLenum clamp, const char* file, int line);
#endif // defined(GL_ARB_color_buffer_float)
#if defined(GL_ARB_compute_variable_group_size)
#define glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) glatter_glDispatchComputeGroupSizeARB_debug((num_groups_x), (num_groups_y), (num_groups_z), (group_size_x), (group_size_y), (group_size_z), __FILE__, __LINE__)
void glatter_glDispatchComputeGroupSizeARB_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z, const char* file, int line);
#endif // defined(GL_ARB_compute_variable_group_size)
#if defined(GL_ARB_debug_output)
#define glDebugMessageCallbackARB(callback, userParam) glatter_glDebugMessageCallbackARB_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallbackARB_debug(GLDEBUGPROCARB callback, const void *userParam, const char* file, int line);
#define glDebugMessageControlARB(source, type, severity, count, ids, enabled) glatter_glDebugMessageControlARB_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControlARB_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsertARB(source, type, id, severity, length, buf) glatter_glDebugMessageInsertARB_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsertARB_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLogARB_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLogARB_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#endif // defined(GL_ARB_debug_output)
#if defined(GL_ARB_draw_buffers)
#define glDrawBuffersARB(n, bufs) glatter_glDrawBuffersARB_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffersARB_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_ARB_draw_buffers)
#if defined(GL_ARB_draw_buffers_blend)
#define glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparateiARB_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateiARB_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationiARB(buf, mode) glatter_glBlendEquationiARB_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationiARB_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparateiARB_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateiARB_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunciARB(buf, src, dst) glatter_glBlendFunciARB_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunciARB_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#endif // defined(GL_ARB_draw_buffers_blend)
#if defined(GL_ARB_draw_instanced)
#define glDrawArraysInstancedARB(mode, first, count, primcount) glatter_glDrawArraysInstancedARB_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedARB_debug(GLenum mode, GLint first, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedARB(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedARB_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedARB_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_ARB_draw_instanced)
#if defined(GL_ARB_fragment_program)
#define glBindProgramARB(target, program) glatter_glBindProgramARB_debug((target), (program), __FILE__, __LINE__)
void glatter_glBindProgramARB_debug(GLenum target, GLuint program, const char* file, int line);
#define glDeleteProgramsARB(n, programs) glatter_glDeleteProgramsARB_debug((n), (programs), __FILE__, __LINE__)
void glatter_glDeleteProgramsARB_debug(GLsizei n, const GLuint *programs, const char* file, int line);
#define glGenProgramsARB(n, programs) glatter_glGenProgramsARB_debug((n), (programs), __FILE__, __LINE__)
void glatter_glGenProgramsARB_debug(GLsizei n, GLuint *programs, const char* file, int line);
#define glGetProgramEnvParameterdvARB(target, index, params) glatter_glGetProgramEnvParameterdvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramEnvParameterdvARB_debug(GLenum target, GLuint index, GLdouble *params, const char* file, int line);
#define glGetProgramEnvParameterfvARB(target, index, params) glatter_glGetProgramEnvParameterfvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramEnvParameterfvARB_debug(GLenum target, GLuint index, GLfloat *params, const char* file, int line);
#define glGetProgramLocalParameterdvARB(target, index, params) glatter_glGetProgramLocalParameterdvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramLocalParameterdvARB_debug(GLenum target, GLuint index, GLdouble *params, const char* file, int line);
#define glGetProgramLocalParameterfvARB(target, index, params) glatter_glGetProgramLocalParameterfvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramLocalParameterfvARB_debug(GLenum target, GLuint index, GLfloat *params, const char* file, int line);
#define glGetProgramStringARB(target, pname, string) glatter_glGetProgramStringARB_debug((target), (pname), (string), __FILE__, __LINE__)
void glatter_glGetProgramStringARB_debug(GLenum target, GLenum pname, void *string, const char* file, int line);
#define glGetProgramivARB(target, pname, params) glatter_glGetProgramivARB_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramivARB_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramARB(program) glatter_glIsProgramARB_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgramARB_debug(GLuint program, const char* file, int line);
#define glProgramEnvParameter4dARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4dARB_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramEnvParameter4dARB_debug(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramEnvParameter4dvARB(target, index, params) glatter_glProgramEnvParameter4dvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameter4dvARB_debug(GLenum target, GLuint index, const GLdouble *params, const char* file, int line);
#define glProgramEnvParameter4fARB(target, index, x, y, z, w) glatter_glProgramEnvParameter4fARB_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramEnvParameter4fARB_debug(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glProgramEnvParameter4fvARB(target, index, params) glatter_glProgramEnvParameter4fvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameter4fvARB_debug(GLenum target, GLuint index, const GLfloat *params, const char* file, int line);
#define glProgramLocalParameter4dARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4dARB_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramLocalParameter4dARB_debug(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramLocalParameter4dvARB(target, index, params) glatter_glProgramLocalParameter4dvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameter4dvARB_debug(GLenum target, GLuint index, const GLdouble *params, const char* file, int line);
#define glProgramLocalParameter4fARB(target, index, x, y, z, w) glatter_glProgramLocalParameter4fARB_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramLocalParameter4fARB_debug(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glProgramLocalParameter4fvARB(target, index, params) glatter_glProgramLocalParameter4fvARB_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameter4fvARB_debug(GLenum target, GLuint index, const GLfloat *params, const char* file, int line);
#define glProgramStringARB(target, format, len, string) glatter_glProgramStringARB_debug((target), (format), (len), (string), __FILE__, __LINE__)
void glatter_glProgramStringARB_debug(GLenum target, GLenum format, GLsizei len, const void *string, const char* file, int line);
#endif // defined(GL_ARB_fragment_program)
#if defined(GL_ARB_geometry_shader4)
#define glFramebufferTextureARB(target, attachment, texture, level) glatter_glFramebufferTextureARB_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTextureARB_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTextureFaceARB(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceARB_debug((target), (attachment), (texture), (level), (face), __FILE__, __LINE__)
void glatter_glFramebufferTextureFaceARB_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face, const char* file, int line);
#define glFramebufferTextureLayerARB(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerARB_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayerARB_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glProgramParameteriARB(program, pname, value) glatter_glProgramParameteriARB_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteriARB_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_ARB_geometry_shader4)
#if defined(GL_ARB_gpu_shader_int64)
#define glGetUniformi64vARB(program, location, params) glatter_glGetUniformi64vARB_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformi64vARB_debug(GLuint program, GLint location, GLint64 *params, const char* file, int line);
#define glGetUniformui64vARB(program, location, params) glatter_glGetUniformui64vARB_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformui64vARB_debug(GLuint program, GLint location, GLuint64 *params, const char* file, int line);
#define glGetnUniformi64vARB(program, location, bufSize, params) glatter_glGetnUniformi64vARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformi64vARB_debug(GLuint program, GLint location, GLsizei bufSize, GLint64 *params, const char* file, int line);
#define glGetnUniformui64vARB(program, location, bufSize, params) glatter_glGetnUniformui64vARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformui64vARB_debug(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params, const char* file, int line);
#define glProgramUniform1i64ARB(program, location, x) glatter_glProgramUniform1i64ARB_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1i64ARB_debug(GLuint program, GLint location, GLint64 x, const char* file, int line);
#define glProgramUniform1i64vARB(program, location, count, value) glatter_glProgramUniform1i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform1ui64ARB(program, location, x) glatter_glProgramUniform1ui64ARB_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64ARB_debug(GLuint program, GLint location, GLuint64 x, const char* file, int line);
#define glProgramUniform1ui64vARB(program, location, count, value) glatter_glProgramUniform1ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glProgramUniform2i64ARB(program, location, x, y) glatter_glProgramUniform2i64ARB_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2i64ARB_debug(GLuint program, GLint location, GLint64 x, GLint64 y, const char* file, int line);
#define glProgramUniform2i64vARB(program, location, count, value) glatter_glProgramUniform2i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform2ui64ARB(program, location, x, y) glatter_glProgramUniform2ui64ARB_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64ARB_debug(GLuint program, GLint location, GLuint64 x, GLuint64 y, const char* file, int line);
#define glProgramUniform2ui64vARB(program, location, count, value) glatter_glProgramUniform2ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glProgramUniform3i64ARB(program, location, x, y, z) glatter_glProgramUniform3i64ARB_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3i64ARB_debug(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, const char* file, int line);
#define glProgramUniform3i64vARB(program, location, count, value) glatter_glProgramUniform3i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform3ui64ARB(program, location, x, y, z) glatter_glProgramUniform3ui64ARB_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64ARB_debug(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, const char* file, int line);
#define glProgramUniform3ui64vARB(program, location, count, value) glatter_glProgramUniform3ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glProgramUniform4i64ARB(program, location, x, y, z, w) glatter_glProgramUniform4i64ARB_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4i64ARB_debug(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w, const char* file, int line);
#define glProgramUniform4i64vARB(program, location, count, value) glatter_glProgramUniform4i64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4i64vARB_debug(GLuint program, GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glProgramUniform4ui64ARB(program, location, x, y, z, w) glatter_glProgramUniform4ui64ARB_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64ARB_debug(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w, const char* file, int line);
#define glProgramUniform4ui64vARB(program, location, count, value) glatter_glProgramUniform4ui64vARB_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ui64vARB_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform1i64ARB(location, x) glatter_glUniform1i64ARB_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1i64ARB_debug(GLint location, GLint64 x, const char* file, int line);
#define glUniform1i64vARB(location, count, value) glatter_glUniform1i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform1ui64ARB(location, x) glatter_glUniform1ui64ARB_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1ui64ARB_debug(GLint location, GLuint64 x, const char* file, int line);
#define glUniform1ui64vARB(location, count, value) glatter_glUniform1ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform2i64ARB(location, x, y) glatter_glUniform2i64ARB_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2i64ARB_debug(GLint location, GLint64 x, GLint64 y, const char* file, int line);
#define glUniform2i64vARB(location, count, value) glatter_glUniform2i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform2ui64ARB(location, x, y) glatter_glUniform2ui64ARB_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2ui64ARB_debug(GLint location, GLuint64 x, GLuint64 y, const char* file, int line);
#define glUniform2ui64vARB(location, count, value) glatter_glUniform2ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform3i64ARB(location, x, y, z) glatter_glUniform3i64ARB_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3i64ARB_debug(GLint location, GLint64 x, GLint64 y, GLint64 z, const char* file, int line);
#define glUniform3i64vARB(location, count, value) glatter_glUniform3i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform3ui64ARB(location, x, y, z) glatter_glUniform3ui64ARB_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3ui64ARB_debug(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, const char* file, int line);
#define glUniform3ui64vARB(location, count, value) glatter_glUniform3ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#define glUniform4i64ARB(location, x, y, z, w) glatter_glUniform4i64ARB_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4i64ARB_debug(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w, const char* file, int line);
#define glUniform4i64vARB(location, count, value) glatter_glUniform4i64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4i64vARB_debug(GLint location, GLsizei count, const GLint64 *value, const char* file, int line);
#define glUniform4ui64ARB(location, x, y, z, w) glatter_glUniform4ui64ARB_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4ui64ARB_debug(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w, const char* file, int line);
#define glUniform4ui64vARB(location, count, value) glatter_glUniform4ui64vARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ui64vARB_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_ARB_gpu_shader_int64)
#if defined(GL_ARB_imaging)
#define glColorSubTable(target, start, count, format, type, data) glatter_glColorSubTable_debug((target), (start), (count), (format), (type), (data), __FILE__, __LINE__)
void glatter_glColorSubTable_debug(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glColorTable(target, internalformat, width, format, type, table) glatter_glColorTable_debug((target), (internalformat), (width), (format), (type), (table), __FILE__, __LINE__)
void glatter_glColorTable_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table, const char* file, int line);
#define glColorTableParameterfv(target, pname, params) glatter_glColorTableParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glColorTableParameteriv(target, pname, params) glatter_glColorTableParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glConvolutionFilter1D(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1D_debug((target), (internalformat), (width), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter1D_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image, const char* file, int line);
#define glConvolutionFilter2D(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2D_debug((target), (internalformat), (width), (height), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter2D_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image, const char* file, int line);
#define glConvolutionParameterf(target, pname, params) glatter_glConvolutionParameterf_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterf_debug(GLenum target, GLenum pname, GLfloat params, const char* file, int line);
#define glConvolutionParameterfv(target, pname, params) glatter_glConvolutionParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterfv_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glConvolutionParameteri(target, pname, params) glatter_glConvolutionParameteri_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteri_debug(GLenum target, GLenum pname, GLint params, const char* file, int line);
#define glConvolutionParameteriv(target, pname, params) glatter_glConvolutionParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteriv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glCopyColorSubTable(target, start, x, y, width) glatter_glCopyColorSubTable_debug((target), (start), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorSubTable_debug(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyColorTable(target, internalformat, x, y, width) glatter_glCopyColorTable_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorTable_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter1D(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1D_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter1D_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2D_debug((target), (internalformat), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter2D_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glGetColorTable(target, format, type, table) glatter_glGetColorTable_debug((target), (format), (type), (table), __FILE__, __LINE__)
void glatter_glGetColorTable_debug(GLenum target, GLenum format, GLenum type, void *table, const char* file, int line);
#define glGetColorTableParameterfv(target, pname, params) glatter_glGetColorTableParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetColorTableParameteriv(target, pname, params) glatter_glGetColorTableParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetConvolutionFilter(target, format, type, image) glatter_glGetConvolutionFilter_debug((target), (format), (type), (image), __FILE__, __LINE__)
void glatter_glGetConvolutionFilter_debug(GLenum target, GLenum format, GLenum type, void *image, const char* file, int line);
#define glGetConvolutionParameterfv(target, pname, params) glatter_glGetConvolutionParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetConvolutionParameteriv(target, pname, params) glatter_glGetConvolutionParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetHistogram(target, reset, format, type, values) glatter_glGetHistogram_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetHistogram_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values, const char* file, int line);
#define glGetHistogramParameterfv(target, pname, params) glatter_glGetHistogramParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetHistogramParameteriv(target, pname, params) glatter_glGetHistogramParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMinmax(target, reset, format, type, values) glatter_glGetMinmax_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetMinmax_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values, const char* file, int line);
#define glGetMinmaxParameterfv(target, pname, params) glatter_glGetMinmaxParameterfv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameterfv_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMinmaxParameteriv(target, pname, params) glatter_glGetMinmaxParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSeparableFilter(target, format, type, row, column, span) glatter_glGetSeparableFilter_debug((target), (format), (type), (row), (column), (span), __FILE__, __LINE__)
void glatter_glGetSeparableFilter_debug(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span, const char* file, int line);
#define glHistogram(target, width, internalformat, sink) glatter_glHistogram_debug((target), (width), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glHistogram_debug(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glMinmax(target, internalformat, sink) glatter_glMinmax_debug((target), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glMinmax_debug(GLenum target, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glResetHistogram(target) glatter_glResetHistogram_debug((target), __FILE__, __LINE__)
void glatter_glResetHistogram_debug(GLenum target, const char* file, int line);
#define glResetMinmax(target) glatter_glResetMinmax_debug((target), __FILE__, __LINE__)
void glatter_glResetMinmax_debug(GLenum target, const char* file, int line);
#define glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2D_debug((target), (internalformat), (width), (height), (format), (type), (row), (column), __FILE__, __LINE__)
void glatter_glSeparableFilter2D_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column, const char* file, int line);
#endif // defined(GL_ARB_imaging)
#if defined(GL_ARB_indirect_parameters)
#define glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawArraysIndirectCountARB_debug((mode), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectCountARB_debug(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride) glatter_glMultiDrawElementsIndirectCountARB_debug((mode), (type), (indirect), (drawcount), (maxdrawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectCountARB_debug(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, const char* file, int line);
#endif // defined(GL_ARB_indirect_parameters)
#if defined(GL_ARB_instanced_arrays)
#define glVertexAttribDivisorARB(index, divisor) glatter_glVertexAttribDivisorARB_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisorARB_debug(GLuint index, GLuint divisor, const char* file, int line);
#endif // defined(GL_ARB_instanced_arrays)
#if defined(GL_ARB_matrix_palette)
#define glCurrentPaletteMatrixARB(index) glatter_glCurrentPaletteMatrixARB_debug((index), __FILE__, __LINE__)
void glatter_glCurrentPaletteMatrixARB_debug(GLint index, const char* file, int line);
#define glMatrixIndexPointerARB(size, type, stride, pointer) glatter_glMatrixIndexPointerARB_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glMatrixIndexPointerARB_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glMatrixIndexubvARB(size, indices) glatter_glMatrixIndexubvARB_debug((size), (indices), __FILE__, __LINE__)
void glatter_glMatrixIndexubvARB_debug(GLint size, const GLubyte *indices, const char* file, int line);
#define glMatrixIndexuivARB(size, indices) glatter_glMatrixIndexuivARB_debug((size), (indices), __FILE__, __LINE__)
void glatter_glMatrixIndexuivARB_debug(GLint size, const GLuint *indices, const char* file, int line);
#define glMatrixIndexusvARB(size, indices) glatter_glMatrixIndexusvARB_debug((size), (indices), __FILE__, __LINE__)
void glatter_glMatrixIndexusvARB_debug(GLint size, const GLushort *indices, const char* file, int line);
#endif // defined(GL_ARB_matrix_palette)
#if defined(GL_ARB_multisample)
#define glSampleCoverageARB(value, invert) glatter_glSampleCoverageARB_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverageARB_debug(GLfloat value, GLboolean invert, const char* file, int line);
#endif // defined(GL_ARB_multisample)
#if defined(GL_ARB_multitexture)
#define glActiveTextureARB(texture) glatter_glActiveTextureARB_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTextureARB_debug(GLenum texture, const char* file, int line);
#define glClientActiveTextureARB(texture) glatter_glClientActiveTextureARB_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTextureARB_debug(GLenum texture, const char* file, int line);
#define glMultiTexCoord1dARB(target, s) glatter_glMultiTexCoord1dARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dARB_debug(GLenum target, GLdouble s, const char* file, int line);
#define glMultiTexCoord1dvARB(target, v) glatter_glMultiTexCoord1dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord1fARB(target, s) glatter_glMultiTexCoord1fARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fARB_debug(GLenum target, GLfloat s, const char* file, int line);
#define glMultiTexCoord1fvARB(target, v) glatter_glMultiTexCoord1fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord1iARB(target, s) glatter_glMultiTexCoord1iARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1iARB_debug(GLenum target, GLint s, const char* file, int line);
#define glMultiTexCoord1ivARB(target, v) glatter_glMultiTexCoord1ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord1sARB(target, s) glatter_glMultiTexCoord1sARB_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1sARB_debug(GLenum target, GLshort s, const char* file, int line);
#define glMultiTexCoord1svARB(target, v) glatter_glMultiTexCoord1svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord2dARB(target, s, t) glatter_glMultiTexCoord2dARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dARB_debug(GLenum target, GLdouble s, GLdouble t, const char* file, int line);
#define glMultiTexCoord2dvARB(target, v) glatter_glMultiTexCoord2dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord2fARB(target, s, t) glatter_glMultiTexCoord2fARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fARB_debug(GLenum target, GLfloat s, GLfloat t, const char* file, int line);
#define glMultiTexCoord2fvARB(target, v) glatter_glMultiTexCoord2fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord2iARB(target, s, t) glatter_glMultiTexCoord2iARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2iARB_debug(GLenum target, GLint s, GLint t, const char* file, int line);
#define glMultiTexCoord2ivARB(target, v) glatter_glMultiTexCoord2ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord2sARB(target, s, t) glatter_glMultiTexCoord2sARB_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2sARB_debug(GLenum target, GLshort s, GLshort t, const char* file, int line);
#define glMultiTexCoord2svARB(target, v) glatter_glMultiTexCoord2svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord3dARB(target, s, t, r) glatter_glMultiTexCoord3dARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dARB_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glMultiTexCoord3dvARB(target, v) glatter_glMultiTexCoord3dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord3fARB(target, s, t, r) glatter_glMultiTexCoord3fARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fARB_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glMultiTexCoord3fvARB(target, v) glatter_glMultiTexCoord3fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord3iARB(target, s, t, r) glatter_glMultiTexCoord3iARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3iARB_debug(GLenum target, GLint s, GLint t, GLint r, const char* file, int line);
#define glMultiTexCoord3ivARB(target, v) glatter_glMultiTexCoord3ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord3sARB(target, s, t, r) glatter_glMultiTexCoord3sARB_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3sARB_debug(GLenum target, GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glMultiTexCoord3svARB(target, v) glatter_glMultiTexCoord3svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord4dARB(target, s, t, r, q) glatter_glMultiTexCoord4dARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dARB_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glMultiTexCoord4dvARB(target, v) glatter_glMultiTexCoord4dvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dvARB_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord4fARB(target, s, t, r, q) glatter_glMultiTexCoord4fARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fARB_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4fvARB(target, v) glatter_glMultiTexCoord4fvARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fvARB_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord4iARB(target, s, t, r, q) glatter_glMultiTexCoord4iARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4iARB_debug(GLenum target, GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glMultiTexCoord4ivARB(target, v) glatter_glMultiTexCoord4ivARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4ivARB_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord4sARB(target, s, t, r, q) glatter_glMultiTexCoord4sARB_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4sARB_debug(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glMultiTexCoord4svARB(target, v) glatter_glMultiTexCoord4svARB_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4svARB_debug(GLenum target, const GLshort *v, const char* file, int line);
#endif // defined(GL_ARB_multitexture)
#if defined(GL_ARB_occlusion_query)
#define glBeginQueryARB(target, id) glatter_glBeginQueryARB_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQueryARB_debug(GLenum target, GLuint id, const char* file, int line);
#define glDeleteQueriesARB(n, ids) glatter_glDeleteQueriesARB_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueriesARB_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndQueryARB(target) glatter_glEndQueryARB_debug((target), __FILE__, __LINE__)
void glatter_glEndQueryARB_debug(GLenum target, const char* file, int line);
#define glGenQueriesARB(n, ids) glatter_glGenQueriesARB_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueriesARB_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetQueryObjectivARB(id, pname, params) glatter_glGetQueryObjectivARB_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectivARB_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryObjectuivARB(id, pname, params) glatter_glGetQueryObjectuivARB_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuivARB_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryivARB(target, pname, params) glatter_glGetQueryivARB_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryivARB_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsQueryARB(id) glatter_glIsQueryARB_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQueryARB_debug(GLuint id, const char* file, int line);
#endif // defined(GL_ARB_occlusion_query)
#if defined(GL_ARB_parallel_shader_compile)
#define glMaxShaderCompilerThreadsARB(count) glatter_glMaxShaderCompilerThreadsARB_debug((count), __FILE__, __LINE__)
void glatter_glMaxShaderCompilerThreadsARB_debug(GLuint count, const char* file, int line);
#endif // defined(GL_ARB_parallel_shader_compile)
#if defined(GL_ARB_point_parameters)
#define glPointParameterfARB(pname, param) glatter_glPointParameterfARB_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterfARB_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfvARB(pname, params) glatter_glPointParameterfvARB_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfvARB_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#endif // defined(GL_ARB_point_parameters)
#if defined(GL_ARB_robustness)
#define glGetGraphicsResetStatusARB() glatter_glGetGraphicsResetStatusARB_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatusARB_debug(const char* file, int line);
#define glGetnColorTableARB(target, format, type, bufSize, table) glatter_glGetnColorTableARB_debug((target), (format), (type), (bufSize), (table), __FILE__, __LINE__)
void glatter_glGetnColorTableARB_debug(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table, const char* file, int line);
#define glGetnCompressedTexImageARB(target, lod, bufSize, img) glatter_glGetnCompressedTexImageARB_debug((target), (lod), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImageARB_debug(GLenum target, GLint lod, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnConvolutionFilterARB(target, format, type, bufSize, image) glatter_glGetnConvolutionFilterARB_debug((target), (format), (type), (bufSize), (image), __FILE__, __LINE__)
void glatter_glGetnConvolutionFilterARB_debug(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image, const char* file, int line);
#define glGetnHistogramARB(target, reset, format, type, bufSize, values) glatter_glGetnHistogramARB_debug((target), (reset), (format), (type), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnHistogramARB_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values, const char* file, int line);
#define glGetnMapdvARB(target, query, bufSize, v) glatter_glGetnMapdvARB_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapdvARB_debug(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v, const char* file, int line);
#define glGetnMapfvARB(target, query, bufSize, v) glatter_glGetnMapfvARB_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapfvARB_debug(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v, const char* file, int line);
#define glGetnMapivARB(target, query, bufSize, v) glatter_glGetnMapivARB_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapivARB_debug(GLenum target, GLenum query, GLsizei bufSize, GLint *v, const char* file, int line);
#define glGetnMinmaxARB(target, reset, format, type, bufSize, values) glatter_glGetnMinmaxARB_debug((target), (reset), (format), (type), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnMinmaxARB_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values, const char* file, int line);
#define glGetnPixelMapfvARB(map, bufSize, values) glatter_glGetnPixelMapfvARB_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapfvARB_debug(GLenum map, GLsizei bufSize, GLfloat *values, const char* file, int line);
#define glGetnPixelMapuivARB(map, bufSize, values) glatter_glGetnPixelMapuivARB_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapuivARB_debug(GLenum map, GLsizei bufSize, GLuint *values, const char* file, int line);
#define glGetnPixelMapusvARB(map, bufSize, values) glatter_glGetnPixelMapusvARB_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapusvARB_debug(GLenum map, GLsizei bufSize, GLushort *values, const char* file, int line);
#define glGetnPolygonStippleARB(bufSize, pattern) glatter_glGetnPolygonStippleARB_debug((bufSize), (pattern), __FILE__, __LINE__)
void glatter_glGetnPolygonStippleARB_debug(GLsizei bufSize, GLubyte *pattern, const char* file, int line);
#define glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilterARB_debug((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span), __FILE__, __LINE__)
void glatter_glGetnSeparableFilterARB_debug(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span, const char* file, int line);
#define glGetnTexImageARB(target, level, format, type, bufSize, img) glatter_glGetnTexImageARB_debug((target), (level), (format), (type), (bufSize), (img), __FILE__, __LINE__)
void glatter_glGetnTexImageARB_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img, const char* file, int line);
#define glGetnUniformdvARB(program, location, bufSize, params) glatter_glGetnUniformdvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfvARB(program, location, bufSize, params) glatter_glGetnUniformfvARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfvARB_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformivARB(program, location, bufSize, params) glatter_glGetnUniformivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuivARB(program, location, bufSize, params) glatter_glGetnUniformuivARB_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuivARB_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixelsARB_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixelsARB_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#endif // defined(GL_ARB_robustness)
#if defined(GL_ARB_sample_locations)
#define glEvaluateDepthValuesARB() glatter_glEvaluateDepthValuesARB_debug(__FILE__, __LINE__)
void glatter_glEvaluateDepthValuesARB_debug(const char* file, int line);
#define glFramebufferSampleLocationsfvARB(target, start, count, v) glatter_glFramebufferSampleLocationsfvARB_debug((target), (start), (count), (v), __FILE__, __LINE__)
void glatter_glFramebufferSampleLocationsfvARB_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvARB_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glNamedFramebufferSampleLocationsfvARB_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#endif // defined(GL_ARB_sample_locations)
#if defined(GL_ARB_sample_shading)
#define glMinSampleShadingARB(value) glatter_glMinSampleShadingARB_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShadingARB_debug(GLfloat value, const char* file, int line);
#endif // defined(GL_ARB_sample_shading)
#if defined(GL_ARB_shader_objects)
#define glAttachObjectARB(containerObj, obj) glatter_glAttachObjectARB_debug((containerObj), (obj), __FILE__, __LINE__)
void glatter_glAttachObjectARB_debug(GLhandleARB containerObj, GLhandleARB obj, const char* file, int line);
#define glCompileShaderARB(shaderObj) glatter_glCompileShaderARB_debug((shaderObj), __FILE__, __LINE__)
void glatter_glCompileShaderARB_debug(GLhandleARB shaderObj, const char* file, int line);
#define glCreateProgramObjectARB() glatter_glCreateProgramObjectARB_debug(__FILE__, __LINE__)
GLhandleARB glatter_glCreateProgramObjectARB_debug(const char* file, int line);
#define glCreateShaderObjectARB(shaderType) glatter_glCreateShaderObjectARB_debug((shaderType), __FILE__, __LINE__)
GLhandleARB glatter_glCreateShaderObjectARB_debug(GLenum shaderType, const char* file, int line);
#define glDeleteObjectARB(obj) glatter_glDeleteObjectARB_debug((obj), __FILE__, __LINE__)
void glatter_glDeleteObjectARB_debug(GLhandleARB obj, const char* file, int line);
#define glDetachObjectARB(containerObj, attachedObj) glatter_glDetachObjectARB_debug((containerObj), (attachedObj), __FILE__, __LINE__)
void glatter_glDetachObjectARB_debug(GLhandleARB containerObj, GLhandleARB attachedObj, const char* file, int line);
#define glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveUniformARB_debug((programObj), (index), (maxLength), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniformARB_debug(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name, const char* file, int line);
#define glGetAttachedObjectsARB(containerObj, maxCount, count, obj) glatter_glGetAttachedObjectsARB_debug((containerObj), (maxCount), (count), (obj), __FILE__, __LINE__)
void glatter_glGetAttachedObjectsARB_debug(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj, const char* file, int line);
#define glGetHandleARB(pname) glatter_glGetHandleARB_debug((pname), __FILE__, __LINE__)
GLhandleARB glatter_glGetHandleARB_debug(GLenum pname, const char* file, int line);
#define glGetInfoLogARB(obj, maxLength, length, infoLog) glatter_glGetInfoLogARB_debug((obj), (maxLength), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetInfoLogARB_debug(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog, const char* file, int line);
#define glGetObjectParameterfvARB(obj, pname, params) glatter_glGetObjectParameterfvARB_debug((obj), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectParameterfvARB_debug(GLhandleARB obj, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetObjectParameterivARB(obj, pname, params) glatter_glGetObjectParameterivARB_debug((obj), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectParameterivARB_debug(GLhandleARB obj, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderSourceARB(obj, maxLength, length, source) glatter_glGetShaderSourceARB_debug((obj), (maxLength), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSourceARB_debug(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source, const char* file, int line);
#define glGetUniformLocationARB(programObj, name) glatter_glGetUniformLocationARB_debug((programObj), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocationARB_debug(GLhandleARB programObj, const GLcharARB *name, const char* file, int line);
#define glGetUniformfvARB(programObj, location, params) glatter_glGetUniformfvARB_debug((programObj), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfvARB_debug(GLhandleARB programObj, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformivARB(programObj, location, params) glatter_glGetUniformivARB_debug((programObj), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformivARB_debug(GLhandleARB programObj, GLint location, GLint *params, const char* file, int line);
#define glLinkProgramARB(programObj) glatter_glLinkProgramARB_debug((programObj), __FILE__, __LINE__)
void glatter_glLinkProgramARB_debug(GLhandleARB programObj, const char* file, int line);
#define glShaderSourceARB(shaderObj, count, string, length) glatter_glShaderSourceARB_debug((shaderObj), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSourceARB_debug(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length, const char* file, int line);
#define glUniform1fARB(location, v0) glatter_glUniform1fARB_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1fARB_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fvARB(location, count, value) glatter_glUniform1fvARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fvARB_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1iARB(location, v0) glatter_glUniform1iARB_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1iARB_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1ivARB(location, count, value) glatter_glUniform1ivARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1ivARB_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2fARB(location, v0, v1) glatter_glUniform2fARB_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2fARB_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fvARB(location, count, value) glatter_glUniform2fvARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fvARB_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2iARB(location, v0, v1) glatter_glUniform2iARB_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2iARB_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2ivARB(location, count, value) glatter_glUniform2ivARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2ivARB_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3fARB(location, v0, v1, v2) glatter_glUniform3fARB_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3fARB_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fvARB(location, count, value) glatter_glUniform3fvARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fvARB_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3iARB(location, v0, v1, v2) glatter_glUniform3iARB_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3iARB_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3ivARB(location, count, value) glatter_glUniform3ivARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3ivARB_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4fARB(location, v0, v1, v2, v3) glatter_glUniform4fARB_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4fARB_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fvARB(location, count, value) glatter_glUniform4fvARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fvARB_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4iARB(location, v0, v1, v2, v3) glatter_glUniform4iARB_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4iARB_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4ivARB(location, count, value) glatter_glUniform4ivARB_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4ivARB_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fvARB(location, count, transpose, value) glatter_glUniformMatrix2fvARB_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fvARB_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fvARB(location, count, transpose, value) glatter_glUniformMatrix3fvARB_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fvARB_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fvARB(location, count, transpose, value) glatter_glUniformMatrix4fvARB_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fvARB_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgramObjectARB(programObj) glatter_glUseProgramObjectARB_debug((programObj), __FILE__, __LINE__)
void glatter_glUseProgramObjectARB_debug(GLhandleARB programObj, const char* file, int line);
#define glValidateProgramARB(programObj) glatter_glValidateProgramARB_debug((programObj), __FILE__, __LINE__)
void glatter_glValidateProgramARB_debug(GLhandleARB programObj, const char* file, int line);
#endif // defined(GL_ARB_shader_objects)
#if defined(GL_ARB_shading_language_include)
#define glCompileShaderIncludeARB(shader, count, path, length) glatter_glCompileShaderIncludeARB_debug((shader), (count), (path), (length), __FILE__, __LINE__)
void glatter_glCompileShaderIncludeARB_debug(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length, const char* file, int line);
#define glDeleteNamedStringARB(namelen, name) glatter_glDeleteNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
void glatter_glDeleteNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glGetNamedStringARB(namelen, name, bufSize, stringlen, string) glatter_glGetNamedStringARB_debug((namelen), (name), (bufSize), (stringlen), (string), __FILE__, __LINE__)
void glatter_glGetNamedStringARB_debug(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string, const char* file, int line);
#define glGetNamedStringivARB(namelen, name, pname, params) glatter_glGetNamedStringivARB_debug((namelen), (name), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedStringivARB_debug(GLint namelen, const GLchar *name, GLenum pname, GLint *params, const char* file, int line);
#define glIsNamedStringARB(namelen, name) glatter_glIsNamedStringARB_debug((namelen), (name), __FILE__, __LINE__)
GLboolean glatter_glIsNamedStringARB_debug(GLint namelen, const GLchar *name, const char* file, int line);
#define glNamedStringARB(type, namelen, name, stringlen, string) glatter_glNamedStringARB_debug((type), (namelen), (name), (stringlen), (string), __FILE__, __LINE__)
void glatter_glNamedStringARB_debug(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string, const char* file, int line);
#endif // defined(GL_ARB_shading_language_include)
#if defined(GL_ARB_sparse_buffer)
#define glBufferPageCommitmentARB(target, offset, size, commit) glatter_glBufferPageCommitmentARB_debug((target), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glBufferPageCommitmentARB_debug(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentARB(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentARB_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentARB_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit, const char* file, int line);
#define glNamedBufferPageCommitmentEXT(buffer, offset, size, commit) glatter_glNamedBufferPageCommitmentEXT_debug((buffer), (offset), (size), (commit), __FILE__, __LINE__)
void glatter_glNamedBufferPageCommitmentEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit, const char* file, int line);
#endif // defined(GL_ARB_sparse_buffer)
#if defined(GL_ARB_sparse_texture)
#define glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexPageCommitmentARB_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit), __FILE__, __LINE__)
void glatter_glTexPageCommitmentARB_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, const char* file, int line);
#endif // defined(GL_ARB_sparse_texture)
#if defined(GL_ARB_texture_buffer_object)
#define glTexBufferARB(target, internalformat, buffer) glatter_glTexBufferARB_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBufferARB_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#endif // defined(GL_ARB_texture_buffer_object)
#if defined(GL_ARB_texture_compression)
#define glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1DARB_debug((target), (level), (internalformat), (width), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage1DARB_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2DARB_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2DARB_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3DARB_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3DARB_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1DARB_debug((target), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage1DARB_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2DARB_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2DARB_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3DARB_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3DARB_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glGetCompressedTexImageARB(target, level, img) glatter_glGetCompressedTexImageARB_debug((target), (level), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTexImageARB_debug(GLenum target, GLint level, void *img, const char* file, int line);
#endif // defined(GL_ARB_texture_compression)
#if defined(GL_ARB_transpose_matrix)
#define glLoadTransposeMatrixdARB(m) glatter_glLoadTransposeMatrixdARB_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixdARB_debug(const GLdouble *m, const char* file, int line);
#define glLoadTransposeMatrixfARB(m) glatter_glLoadTransposeMatrixfARB_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixfARB_debug(const GLfloat *m, const char* file, int line);
#define glMultTransposeMatrixdARB(m) glatter_glMultTransposeMatrixdARB_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixdARB_debug(const GLdouble *m, const char* file, int line);
#define glMultTransposeMatrixfARB(m) glatter_glMultTransposeMatrixfARB_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixfARB_debug(const GLfloat *m, const char* file, int line);
#endif // defined(GL_ARB_transpose_matrix)
#if defined(GL_ARB_vertex_blend)
#define glVertexBlendARB(count) glatter_glVertexBlendARB_debug((count), __FILE__, __LINE__)
void glatter_glVertexBlendARB_debug(GLint count, const char* file, int line);
#define glWeightPointerARB(size, type, stride, pointer) glatter_glWeightPointerARB_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glWeightPointerARB_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWeightbvARB(size, weights) glatter_glWeightbvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightbvARB_debug(GLint size, const GLbyte *weights, const char* file, int line);
#define glWeightdvARB(size, weights) glatter_glWeightdvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightdvARB_debug(GLint size, const GLdouble *weights, const char* file, int line);
#define glWeightfvARB(size, weights) glatter_glWeightfvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightfvARB_debug(GLint size, const GLfloat *weights, const char* file, int line);
#define glWeightivARB(size, weights) glatter_glWeightivARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightivARB_debug(GLint size, const GLint *weights, const char* file, int line);
#define glWeightsvARB(size, weights) glatter_glWeightsvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightsvARB_debug(GLint size, const GLshort *weights, const char* file, int line);
#define glWeightubvARB(size, weights) glatter_glWeightubvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightubvARB_debug(GLint size, const GLubyte *weights, const char* file, int line);
#define glWeightuivARB(size, weights) glatter_glWeightuivARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightuivARB_debug(GLint size, const GLuint *weights, const char* file, int line);
#define glWeightusvARB(size, weights) glatter_glWeightusvARB_debug((size), (weights), __FILE__, __LINE__)
void glatter_glWeightusvARB_debug(GLint size, const GLushort *weights, const char* file, int line);
#endif // defined(GL_ARB_vertex_blend)
#if defined(GL_ARB_vertex_buffer_object)
#define glBindBufferARB(target, buffer) glatter_glBindBufferARB_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferARB_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBufferDataARB(target, size, data, usage) glatter_glBufferDataARB_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferDataARB_debug(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubDataARB(target, offset, size, data) glatter_glBufferSubDataARB_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubDataARB_debug(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data, const char* file, int line);
#define glDeleteBuffersARB(n, buffers) glatter_glDeleteBuffersARB_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffersARB_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glGenBuffersARB(n, buffers) glatter_glGenBuffersARB_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffersARB_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGetBufferParameterivARB(target, pname, params) glatter_glGetBufferParameterivARB_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameterivARB_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferPointervARB(target, pname, params) glatter_glGetBufferPointervARB_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointervARB_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetBufferSubDataARB(target, offset, size, data) glatter_glGetBufferSubDataARB_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetBufferSubDataARB_debug(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data, const char* file, int line);
#define glIsBufferARB(buffer) glatter_glIsBufferARB_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBufferARB_debug(GLuint buffer, const char* file, int line);
#define glMapBufferARB(target, access) glatter_glMapBufferARB_debug((target), (access), __FILE__, __LINE__)
void * glatter_glMapBufferARB_debug(GLenum target, GLenum access, const char* file, int line);
#define glUnmapBufferARB(target) glatter_glUnmapBufferARB_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBufferARB_debug(GLenum target, const char* file, int line);
#endif // defined(GL_ARB_vertex_buffer_object)
#if defined(GL_ARB_vertex_program)
#define glDisableVertexAttribArrayARB(index) glatter_glDisableVertexAttribArrayARB_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArrayARB_debug(GLuint index, const char* file, int line);
#define glEnableVertexAttribArrayARB(index) glatter_glEnableVertexAttribArrayARB_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArrayARB_debug(GLuint index, const char* file, int line);
#define glGetVertexAttribPointervARB(index, pname, pointer) glatter_glGetVertexAttribPointervARB_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointervARB_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribdvARB(index, pname, params) glatter_glGetVertexAttribdvARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribdvARB_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVertexAttribfvARB(index, pname, params) glatter_glGetVertexAttribfvARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfvARB_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribivARB(index, pname, params) glatter_glGetVertexAttribivARB_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribivARB_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glVertexAttrib1dARB(index, x) glatter_glVertexAttrib1dARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1dARB_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttrib1dvARB(index, v) glatter_glVertexAttrib1dvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1dvARB_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib1fARB(index, x) glatter_glVertexAttrib1fARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1fARB_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fvARB(index, v) glatter_glVertexAttrib1fvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fvARB_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib1sARB(index, x) glatter_glVertexAttrib1sARB_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1sARB_debug(GLuint index, GLshort x, const char* file, int line);
#define glVertexAttrib1svARB(index, v) glatter_glVertexAttrib1svARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1svARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib2dARB(index, x, y) glatter_glVertexAttrib2dARB_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2dARB_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttrib2dvARB(index, v) glatter_glVertexAttrib2dvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2dvARB_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib2fARB(index, x, y) glatter_glVertexAttrib2fARB_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2fARB_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fvARB(index, v) glatter_glVertexAttrib2fvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fvARB_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2sARB(index, x, y) glatter_glVertexAttrib2sARB_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2sARB_debug(GLuint index, GLshort x, GLshort y, const char* file, int line);
#define glVertexAttrib2svARB(index, v) glatter_glVertexAttrib2svARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2svARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib3dARB(index, x, y, z) glatter_glVertexAttrib3dARB_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3dARB_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttrib3dvARB(index, v) glatter_glVertexAttrib3dvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3dvARB_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib3fARB(index, x, y, z) glatter_glVertexAttrib3fARB_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3fARB_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fvARB(index, v) glatter_glVertexAttrib3fvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fvARB_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3sARB(index, x, y, z) glatter_glVertexAttrib3sARB_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3sARB_debug(GLuint index, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexAttrib3svARB(index, v) glatter_glVertexAttrib3svARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3svARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4NbvARB(index, v) glatter_glVertexAttrib4NbvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NbvARB_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4NivARB(index, v) glatter_glVertexAttrib4NivARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NivARB_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4NsvARB(index, v) glatter_glVertexAttrib4NsvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NsvARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4NubARB(index, x, y, z, w) glatter_glVertexAttrib4NubARB_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4NubARB_debug(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, const char* file, int line);
#define glVertexAttrib4NubvARB(index, v) glatter_glVertexAttrib4NubvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NubvARB_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4NuivARB(index, v) glatter_glVertexAttrib4NuivARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NuivARB_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4NusvARB(index, v) glatter_glVertexAttrib4NusvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4NusvARB_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttrib4bvARB(index, v) glatter_glVertexAttrib4bvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4bvARB_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4dARB(index, x, y, z, w) glatter_glVertexAttrib4dARB_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4dARB_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttrib4dvARB(index, v) glatter_glVertexAttrib4dvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4dvARB_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib4fARB(index, x, y, z, w) glatter_glVertexAttrib4fARB_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4fARB_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fvARB(index, v) glatter_glVertexAttrib4fvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fvARB_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4ivARB(index, v) glatter_glVertexAttrib4ivARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ivARB_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4sARB(index, x, y, z, w) glatter_glVertexAttrib4sARB_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4sARB_debug(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexAttrib4svARB(index, v) glatter_glVertexAttrib4svARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4svARB_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4ubvARB(index, v) glatter_glVertexAttrib4ubvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubvARB_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4uivARB(index, v) glatter_glVertexAttrib4uivARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4uivARB_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4usvARB(index, v) glatter_glVertexAttrib4usvARB_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4usvARB_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribPointerARB(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointerARB_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointerARB_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_ARB_vertex_program)
#if defined(GL_ARB_vertex_shader)
#define glBindAttribLocationARB(programObj, index, name) glatter_glBindAttribLocationARB_debug((programObj), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocationARB_debug(GLhandleARB programObj, GLuint index, const GLcharARB *name, const char* file, int line);
#define glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name) glatter_glGetActiveAttribARB_debug((programObj), (index), (maxLength), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttribARB_debug(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name, const char* file, int line);
#define glGetAttribLocationARB(programObj, name) glatter_glGetAttribLocationARB_debug((programObj), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocationARB_debug(GLhandleARB programObj, const GLcharARB *name, const char* file, int line);
#endif // defined(GL_ARB_vertex_shader)
#if defined(GL_ARB_window_pos)
#define glWindowPos2dARB(x, y) glatter_glWindowPos2dARB_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2dARB_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glWindowPos2dvARB(v) glatter_glWindowPos2dvARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2dvARB_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos2fARB(x, y) glatter_glWindowPos2fARB_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2fARB_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glWindowPos2fvARB(v) glatter_glWindowPos2fvARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2fvARB_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos2iARB(x, y) glatter_glWindowPos2iARB_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2iARB_debug(GLint x, GLint y, const char* file, int line);
#define glWindowPos2ivARB(v) glatter_glWindowPos2ivARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2ivARB_debug(const GLint *v, const char* file, int line);
#define glWindowPos2sARB(x, y) glatter_glWindowPos2sARB_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2sARB_debug(GLshort x, GLshort y, const char* file, int line);
#define glWindowPos2svARB(v) glatter_glWindowPos2svARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2svARB_debug(const GLshort *v, const char* file, int line);
#define glWindowPos3dARB(x, y, z) glatter_glWindowPos3dARB_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3dARB_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glWindowPos3dvARB(v) glatter_glWindowPos3dvARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3dvARB_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos3fARB(x, y, z) glatter_glWindowPos3fARB_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3fARB_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glWindowPos3fvARB(v) glatter_glWindowPos3fvARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3fvARB_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos3iARB(x, y, z) glatter_glWindowPos3iARB_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3iARB_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glWindowPos3ivARB(v) glatter_glWindowPos3ivARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3ivARB_debug(const GLint *v, const char* file, int line);
#define glWindowPos3sARB(x, y, z) glatter_glWindowPos3sARB_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3sARB_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glWindowPos3svARB(v) glatter_glWindowPos3svARB_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3svARB_debug(const GLshort *v, const char* file, int line);
#endif // defined(GL_ARB_window_pos)
#if defined(GL_ATI_draw_buffers)
#define glDrawBuffersATI(n, bufs) glatter_glDrawBuffersATI_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffersATI_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#endif // defined(GL_ATI_draw_buffers)
#if defined(GL_ATI_element_array)
#define glDrawElementArrayATI(mode, count) glatter_glDrawElementArrayATI_debug((mode), (count), __FILE__, __LINE__)
void glatter_glDrawElementArrayATI_debug(GLenum mode, GLsizei count, const char* file, int line);
#define glDrawRangeElementArrayATI(mode, start, end, count) glatter_glDrawRangeElementArrayATI_debug((mode), (start), (end), (count), __FILE__, __LINE__)
void glatter_glDrawRangeElementArrayATI_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, const char* file, int line);
#define glElementPointerATI(type, pointer) glatter_glElementPointerATI_debug((type), (pointer), __FILE__, __LINE__)
void glatter_glElementPointerATI_debug(GLenum type, const void *pointer, const char* file, int line);
#endif // defined(GL_ATI_element_array)
#if defined(GL_ATI_envmap_bumpmap)
#define glGetTexBumpParameterfvATI(pname, param) glatter_glGetTexBumpParameterfvATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glGetTexBumpParameterfvATI_debug(GLenum pname, GLfloat *param, const char* file, int line);
#define glGetTexBumpParameterivATI(pname, param) glatter_glGetTexBumpParameterivATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glGetTexBumpParameterivATI_debug(GLenum pname, GLint *param, const char* file, int line);
#define glTexBumpParameterfvATI(pname, param) glatter_glTexBumpParameterfvATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glTexBumpParameterfvATI_debug(GLenum pname, const GLfloat *param, const char* file, int line);
#define glTexBumpParameterivATI(pname, param) glatter_glTexBumpParameterivATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glTexBumpParameterivATI_debug(GLenum pname, const GLint *param, const char* file, int line);
#endif // defined(GL_ATI_envmap_bumpmap)
#if defined(GL_ATI_fragment_shader)
#define glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod) glatter_glAlphaFragmentOp1ATI_debug((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), __FILE__, __LINE__)
void glatter_glAlphaFragmentOp1ATI_debug(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, const char* file, int line);
#define glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glAlphaFragmentOp2ATI_debug((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), __FILE__, __LINE__)
void glatter_glAlphaFragmentOp2ATI_debug(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, const char* file, int line);
#define glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glAlphaFragmentOp3ATI_debug((op), (dst), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod), __FILE__, __LINE__)
void glatter_glAlphaFragmentOp3ATI_debug(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod, const char* file, int line);
#define glBeginFragmentShaderATI() glatter_glBeginFragmentShaderATI_debug(__FILE__, __LINE__)
void glatter_glBeginFragmentShaderATI_debug(const char* file, int line);
#define glBindFragmentShaderATI(id) glatter_glBindFragmentShaderATI_debug((id), __FILE__, __LINE__)
void glatter_glBindFragmentShaderATI_debug(GLuint id, const char* file, int line);
#define glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) glatter_glColorFragmentOp1ATI_debug((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), __FILE__, __LINE__)
void glatter_glColorFragmentOp1ATI_debug(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, const char* file, int line);
#define glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) glatter_glColorFragmentOp2ATI_debug((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), __FILE__, __LINE__)
void glatter_glColorFragmentOp2ATI_debug(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, const char* file, int line);
#define glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) glatter_glColorFragmentOp3ATI_debug((op), (dst), (dstMask), (dstMod), (arg1), (arg1Rep), (arg1Mod), (arg2), (arg2Rep), (arg2Mod), (arg3), (arg3Rep), (arg3Mod), __FILE__, __LINE__)
void glatter_glColorFragmentOp3ATI_debug(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod, const char* file, int line);
#define glDeleteFragmentShaderATI(id) glatter_glDeleteFragmentShaderATI_debug((id), __FILE__, __LINE__)
void glatter_glDeleteFragmentShaderATI_debug(GLuint id, const char* file, int line);
#define glEndFragmentShaderATI() glatter_glEndFragmentShaderATI_debug(__FILE__, __LINE__)
void glatter_glEndFragmentShaderATI_debug(const char* file, int line);
#define glGenFragmentShadersATI(range) glatter_glGenFragmentShadersATI_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenFragmentShadersATI_debug(GLuint range, const char* file, int line);
#define glPassTexCoordATI(dst, coord, swizzle) glatter_glPassTexCoordATI_debug((dst), (coord), (swizzle), __FILE__, __LINE__)
void glatter_glPassTexCoordATI_debug(GLuint dst, GLuint coord, GLenum swizzle, const char* file, int line);
#define glSampleMapATI(dst, interp, swizzle) glatter_glSampleMapATI_debug((dst), (interp), (swizzle), __FILE__, __LINE__)
void glatter_glSampleMapATI_debug(GLuint dst, GLuint interp, GLenum swizzle, const char* file, int line);
#define glSetFragmentShaderConstantATI(dst, value) glatter_glSetFragmentShaderConstantATI_debug((dst), (value), __FILE__, __LINE__)
void glatter_glSetFragmentShaderConstantATI_debug(GLuint dst, const GLfloat *value, const char* file, int line);
#endif // defined(GL_ATI_fragment_shader)
#if defined(GL_ATI_map_object_buffer)
#define glMapObjectBufferATI(buffer) glatter_glMapObjectBufferATI_debug((buffer), __FILE__, __LINE__)
void * glatter_glMapObjectBufferATI_debug(GLuint buffer, const char* file, int line);
#define glUnmapObjectBufferATI(buffer) glatter_glUnmapObjectBufferATI_debug((buffer), __FILE__, __LINE__)
void glatter_glUnmapObjectBufferATI_debug(GLuint buffer, const char* file, int line);
#endif // defined(GL_ATI_map_object_buffer)
#if defined(GL_ATI_pn_triangles)
#define glPNTrianglesfATI(pname, param) glatter_glPNTrianglesfATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPNTrianglesfATI_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPNTrianglesiATI(pname, param) glatter_glPNTrianglesiATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPNTrianglesiATI_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_ATI_pn_triangles)
#if defined(GL_ATI_separate_stencil)
#define glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask) glatter_glStencilFuncSeparateATI_debug((frontfunc), (backfunc), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparateATI_debug(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask, const char* file, int line);
#define glStencilOpSeparateATI(face, sfail, dpfail, dppass) glatter_glStencilOpSeparateATI_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparateATI_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#endif // defined(GL_ATI_separate_stencil)
#if defined(GL_ATI_vertex_array_object)
#define glArrayObjectATI(array, size, type, stride, buffer, offset) glatter_glArrayObjectATI_debug((array), (size), (type), (stride), (buffer), (offset), __FILE__, __LINE__)
void glatter_glArrayObjectATI_debug(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset, const char* file, int line);
#define glFreeObjectBufferATI(buffer) glatter_glFreeObjectBufferATI_debug((buffer), __FILE__, __LINE__)
void glatter_glFreeObjectBufferATI_debug(GLuint buffer, const char* file, int line);
#define glGetArrayObjectfvATI(array, pname, params) glatter_glGetArrayObjectfvATI_debug((array), (pname), (params), __FILE__, __LINE__)
void glatter_glGetArrayObjectfvATI_debug(GLenum array, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetArrayObjectivATI(array, pname, params) glatter_glGetArrayObjectivATI_debug((array), (pname), (params), __FILE__, __LINE__)
void glatter_glGetArrayObjectivATI_debug(GLenum array, GLenum pname, GLint *params, const char* file, int line);
#define glGetObjectBufferfvATI(buffer, pname, params) glatter_glGetObjectBufferfvATI_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectBufferfvATI_debug(GLuint buffer, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetObjectBufferivATI(buffer, pname, params) glatter_glGetObjectBufferivATI_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetObjectBufferivATI_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetVariantArrayObjectfvATI(id, pname, params) glatter_glGetVariantArrayObjectfvATI_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVariantArrayObjectfvATI_debug(GLuint id, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVariantArrayObjectivATI(id, pname, params) glatter_glGetVariantArrayObjectivATI_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVariantArrayObjectivATI_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glIsObjectBufferATI(buffer) glatter_glIsObjectBufferATI_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsObjectBufferATI_debug(GLuint buffer, const char* file, int line);
#define glNewObjectBufferATI(size, pointer, usage) glatter_glNewObjectBufferATI_debug((size), (pointer), (usage), __FILE__, __LINE__)
GLuint glatter_glNewObjectBufferATI_debug(GLsizei size, const void *pointer, GLenum usage, const char* file, int line);
#define glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve) glatter_glUpdateObjectBufferATI_debug((buffer), (offset), (size), (pointer), (preserve), __FILE__, __LINE__)
void glatter_glUpdateObjectBufferATI_debug(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve, const char* file, int line);
#define glVariantArrayObjectATI(id, type, stride, buffer, offset) glatter_glVariantArrayObjectATI_debug((id), (type), (stride), (buffer), (offset), __FILE__, __LINE__)
void glatter_glVariantArrayObjectATI_debug(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset, const char* file, int line);
#endif // defined(GL_ATI_vertex_array_object)
#if defined(GL_ATI_vertex_attrib_array_object)
#define glGetVertexAttribArrayObjectfvATI(index, pname, params) glatter_glGetVertexAttribArrayObjectfvATI_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribArrayObjectfvATI_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribArrayObjectivATI(index, pname, params) glatter_glGetVertexAttribArrayObjectivATI_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribArrayObjectivATI_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset) glatter_glVertexAttribArrayObjectATI_debug((index), (size), (type), (normalized), (stride), (buffer), (offset), __FILE__, __LINE__)
void glatter_glVertexAttribArrayObjectATI_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset, const char* file, int line);
#endif // defined(GL_ATI_vertex_attrib_array_object)
#if defined(GL_ATI_vertex_streams)
#define glClientActiveVertexStreamATI(stream) glatter_glClientActiveVertexStreamATI_debug((stream), __FILE__, __LINE__)
void glatter_glClientActiveVertexStreamATI_debug(GLenum stream, const char* file, int line);
#define glNormalStream3bATI(stream, nx, ny, nz) glatter_glNormalStream3bATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3bATI_debug(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz, const char* file, int line);
#define glNormalStream3bvATI(stream, coords) glatter_glNormalStream3bvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3bvATI_debug(GLenum stream, const GLbyte *coords, const char* file, int line);
#define glNormalStream3dATI(stream, nx, ny, nz) glatter_glNormalStream3dATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3dATI_debug(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz, const char* file, int line);
#define glNormalStream3dvATI(stream, coords) glatter_glNormalStream3dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glNormalStream3fATI(stream, nx, ny, nz) glatter_glNormalStream3fATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3fATI_debug(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz, const char* file, int line);
#define glNormalStream3fvATI(stream, coords) glatter_glNormalStream3fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glNormalStream3iATI(stream, nx, ny, nz) glatter_glNormalStream3iATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3iATI_debug(GLenum stream, GLint nx, GLint ny, GLint nz, const char* file, int line);
#define glNormalStream3ivATI(stream, coords) glatter_glNormalStream3ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glNormalStream3sATI(stream, nx, ny, nz) glatter_glNormalStream3sATI_debug((stream), (nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormalStream3sATI_debug(GLenum stream, GLshort nx, GLshort ny, GLshort nz, const char* file, int line);
#define glNormalStream3svATI(stream, coords) glatter_glNormalStream3svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glNormalStream3svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#define glVertexBlendEnvfATI(pname, param) glatter_glVertexBlendEnvfATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glVertexBlendEnvfATI_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glVertexBlendEnviATI(pname, param) glatter_glVertexBlendEnviATI_debug((pname), (param), __FILE__, __LINE__)
void glatter_glVertexBlendEnviATI_debug(GLenum pname, GLint param, const char* file, int line);
#define glVertexStream1dATI(stream, x) glatter_glVertexStream1dATI_debug((stream), (x), __FILE__, __LINE__)
void glatter_glVertexStream1dATI_debug(GLenum stream, GLdouble x, const char* file, int line);
#define glVertexStream1dvATI(stream, coords) glatter_glVertexStream1dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream1dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glVertexStream1fATI(stream, x) glatter_glVertexStream1fATI_debug((stream), (x), __FILE__, __LINE__)
void glatter_glVertexStream1fATI_debug(GLenum stream, GLfloat x, const char* file, int line);
#define glVertexStream1fvATI(stream, coords) glatter_glVertexStream1fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream1fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glVertexStream1iATI(stream, x) glatter_glVertexStream1iATI_debug((stream), (x), __FILE__, __LINE__)
void glatter_glVertexStream1iATI_debug(GLenum stream, GLint x, const char* file, int line);
#define glVertexStream1ivATI(stream, coords) glatter_glVertexStream1ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream1ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glVertexStream1sATI(stream, x) glatter_glVertexStream1sATI_debug((stream), (x), __FILE__, __LINE__)
void glatter_glVertexStream1sATI_debug(GLenum stream, GLshort x, const char* file, int line);
#define glVertexStream1svATI(stream, coords) glatter_glVertexStream1svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream1svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#define glVertexStream2dATI(stream, x, y) glatter_glVertexStream2dATI_debug((stream), (x), (y), __FILE__, __LINE__)
void glatter_glVertexStream2dATI_debug(GLenum stream, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexStream2dvATI(stream, coords) glatter_glVertexStream2dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream2dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glVertexStream2fATI(stream, x, y) glatter_glVertexStream2fATI_debug((stream), (x), (y), __FILE__, __LINE__)
void glatter_glVertexStream2fATI_debug(GLenum stream, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexStream2fvATI(stream, coords) glatter_glVertexStream2fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream2fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glVertexStream2iATI(stream, x, y) glatter_glVertexStream2iATI_debug((stream), (x), (y), __FILE__, __LINE__)
void glatter_glVertexStream2iATI_debug(GLenum stream, GLint x, GLint y, const char* file, int line);
#define glVertexStream2ivATI(stream, coords) glatter_glVertexStream2ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream2ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glVertexStream2sATI(stream, x, y) glatter_glVertexStream2sATI_debug((stream), (x), (y), __FILE__, __LINE__)
void glatter_glVertexStream2sATI_debug(GLenum stream, GLshort x, GLshort y, const char* file, int line);
#define glVertexStream2svATI(stream, coords) glatter_glVertexStream2svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream2svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#define glVertexStream3dATI(stream, x, y, z) glatter_glVertexStream3dATI_debug((stream), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexStream3dATI_debug(GLenum stream, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexStream3dvATI(stream, coords) glatter_glVertexStream3dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream3dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glVertexStream3fATI(stream, x, y, z) glatter_glVertexStream3fATI_debug((stream), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexStream3fATI_debug(GLenum stream, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexStream3fvATI(stream, coords) glatter_glVertexStream3fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream3fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glVertexStream3iATI(stream, x, y, z) glatter_glVertexStream3iATI_debug((stream), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexStream3iATI_debug(GLenum stream, GLint x, GLint y, GLint z, const char* file, int line);
#define glVertexStream3ivATI(stream, coords) glatter_glVertexStream3ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream3ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glVertexStream3sATI(stream, x, y, z) glatter_glVertexStream3sATI_debug((stream), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexStream3sATI_debug(GLenum stream, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexStream3svATI(stream, coords) glatter_glVertexStream3svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream3svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#define glVertexStream4dATI(stream, x, y, z, w) glatter_glVertexStream4dATI_debug((stream), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexStream4dATI_debug(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexStream4dvATI(stream, coords) glatter_glVertexStream4dvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream4dvATI_debug(GLenum stream, const GLdouble *coords, const char* file, int line);
#define glVertexStream4fATI(stream, x, y, z, w) glatter_glVertexStream4fATI_debug((stream), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexStream4fATI_debug(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexStream4fvATI(stream, coords) glatter_glVertexStream4fvATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream4fvATI_debug(GLenum stream, const GLfloat *coords, const char* file, int line);
#define glVertexStream4iATI(stream, x, y, z, w) glatter_glVertexStream4iATI_debug((stream), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexStream4iATI_debug(GLenum stream, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexStream4ivATI(stream, coords) glatter_glVertexStream4ivATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream4ivATI_debug(GLenum stream, const GLint *coords, const char* file, int line);
#define glVertexStream4sATI(stream, x, y, z, w) glatter_glVertexStream4sATI_debug((stream), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexStream4sATI_debug(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexStream4svATI(stream, coords) glatter_glVertexStream4svATI_debug((stream), (coords), __FILE__, __LINE__)
void glatter_glVertexStream4svATI_debug(GLenum stream, const GLshort *coords, const char* file, int line);
#endif // defined(GL_ATI_vertex_streams)
#if defined(GL_EXT_bindable_uniform)
#define glGetUniformBufferSizeEXT(program, location) glatter_glGetUniformBufferSizeEXT_debug((program), (location), __FILE__, __LINE__)
GLint glatter_glGetUniformBufferSizeEXT_debug(GLuint program, GLint location, const char* file, int line);
#define glGetUniformOffsetEXT(program, location) glatter_glGetUniformOffsetEXT_debug((program), (location), __FILE__, __LINE__)
GLintptr glatter_glGetUniformOffsetEXT_debug(GLuint program, GLint location, const char* file, int line);
#define glUniformBufferEXT(program, location, buffer) glatter_glUniformBufferEXT_debug((program), (location), (buffer), __FILE__, __LINE__)
void glatter_glUniformBufferEXT_debug(GLuint program, GLint location, GLuint buffer, const char* file, int line);
#endif // defined(GL_EXT_bindable_uniform)
#if defined(GL_EXT_blend_color)
#define glBlendColorEXT(red, green, blue, alpha) glatter_glBlendColorEXT_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColorEXT_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#endif // defined(GL_EXT_blend_color)
#if defined(GL_EXT_blend_equation_separate)
#define glBlendEquationSeparateEXT(modeRGB, modeAlpha) glatter_glBlendEquationSeparateEXT_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparateEXT_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#endif // defined(GL_EXT_blend_equation_separate)
#if defined(GL_EXT_blend_func_separate)
#define glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateEXT_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateEXT_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#endif // defined(GL_EXT_blend_func_separate)
#if defined(GL_EXT_blend_minmax)
#define glBlendEquationEXT(mode) glatter_glBlendEquationEXT_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquationEXT_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_blend_minmax)
#if defined(GL_EXT_color_subtable)
#define glColorSubTableEXT(target, start, count, format, type, data) glatter_glColorSubTableEXT_debug((target), (start), (count), (format), (type), (data), __FILE__, __LINE__)
void glatter_glColorSubTableEXT_debug(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glCopyColorSubTableEXT(target, start, x, y, width) glatter_glCopyColorSubTableEXT_debug((target), (start), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorSubTableEXT_debug(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width, const char* file, int line);
#endif // defined(GL_EXT_color_subtable)
#if defined(GL_EXT_compiled_vertex_array)
#define glLockArraysEXT(first, count) glatter_glLockArraysEXT_debug((first), (count), __FILE__, __LINE__)
void glatter_glLockArraysEXT_debug(GLint first, GLsizei count, const char* file, int line);
#define glUnlockArraysEXT() glatter_glUnlockArraysEXT_debug(__FILE__, __LINE__)
void glatter_glUnlockArraysEXT_debug(const char* file, int line);
#endif // defined(GL_EXT_compiled_vertex_array)
#if defined(GL_EXT_convolution)
#define glConvolutionFilter1DEXT(target, internalformat, width, format, type, image) glatter_glConvolutionFilter1DEXT_debug((target), (internalformat), (width), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter1DEXT_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image, const char* file, int line);
#define glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image) glatter_glConvolutionFilter2DEXT_debug((target), (internalformat), (width), (height), (format), (type), (image), __FILE__, __LINE__)
void glatter_glConvolutionFilter2DEXT_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image, const char* file, int line);
#define glConvolutionParameterfEXT(target, pname, params) glatter_glConvolutionParameterfEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterfEXT_debug(GLenum target, GLenum pname, GLfloat params, const char* file, int line);
#define glConvolutionParameterfvEXT(target, pname, params) glatter_glConvolutionParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterfvEXT_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glConvolutionParameteriEXT(target, pname, params) glatter_glConvolutionParameteriEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameteriEXT_debug(GLenum target, GLenum pname, GLint params, const char* file, int line);
#define glConvolutionParameterivEXT(target, pname, params) glatter_glConvolutionParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterivEXT_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width) glatter_glCopyConvolutionFilter1DEXT_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter1DEXT_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height) glatter_glCopyConvolutionFilter2DEXT_debug((target), (internalformat), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyConvolutionFilter2DEXT_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glGetConvolutionFilterEXT(target, format, type, image) glatter_glGetConvolutionFilterEXT_debug((target), (format), (type), (image), __FILE__, __LINE__)
void glatter_glGetConvolutionFilterEXT_debug(GLenum target, GLenum format, GLenum type, void *image, const char* file, int line);
#define glGetConvolutionParameterfvEXT(target, pname, params) glatter_glGetConvolutionParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetConvolutionParameterivEXT(target, pname, params) glatter_glGetConvolutionParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetSeparableFilterEXT(target, format, type, row, column, span) glatter_glGetSeparableFilterEXT_debug((target), (format), (type), (row), (column), (span), __FILE__, __LINE__)
void glatter_glGetSeparableFilterEXT_debug(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span, const char* file, int line);
#define glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column) glatter_glSeparableFilter2DEXT_debug((target), (internalformat), (width), (height), (format), (type), (row), (column), __FILE__, __LINE__)
void glatter_glSeparableFilter2DEXT_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column, const char* file, int line);
#endif // defined(GL_EXT_convolution)
#if defined(GL_EXT_coordinate_frame)
#define glBinormal3bEXT(bx, by, bz) glatter_glBinormal3bEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3bEXT_debug(GLbyte bx, GLbyte by, GLbyte bz, const char* file, int line);
#define glBinormal3bvEXT(v) glatter_glBinormal3bvEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3bvEXT_debug(const GLbyte *v, const char* file, int line);
#define glBinormal3dEXT(bx, by, bz) glatter_glBinormal3dEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3dEXT_debug(GLdouble bx, GLdouble by, GLdouble bz, const char* file, int line);
#define glBinormal3dvEXT(v) glatter_glBinormal3dvEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3dvEXT_debug(const GLdouble *v, const char* file, int line);
#define glBinormal3fEXT(bx, by, bz) glatter_glBinormal3fEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3fEXT_debug(GLfloat bx, GLfloat by, GLfloat bz, const char* file, int line);
#define glBinormal3fvEXT(v) glatter_glBinormal3fvEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3fvEXT_debug(const GLfloat *v, const char* file, int line);
#define glBinormal3iEXT(bx, by, bz) glatter_glBinormal3iEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3iEXT_debug(GLint bx, GLint by, GLint bz, const char* file, int line);
#define glBinormal3ivEXT(v) glatter_glBinormal3ivEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3ivEXT_debug(const GLint *v, const char* file, int line);
#define glBinormal3sEXT(bx, by, bz) glatter_glBinormal3sEXT_debug((bx), (by), (bz), __FILE__, __LINE__)
void glatter_glBinormal3sEXT_debug(GLshort bx, GLshort by, GLshort bz, const char* file, int line);
#define glBinormal3svEXT(v) glatter_glBinormal3svEXT_debug((v), __FILE__, __LINE__)
void glatter_glBinormal3svEXT_debug(const GLshort *v, const char* file, int line);
#define glBinormalPointerEXT(type, stride, pointer) glatter_glBinormalPointerEXT_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glBinormalPointerEXT_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glTangent3bEXT(tx, ty, tz) glatter_glTangent3bEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3bEXT_debug(GLbyte tx, GLbyte ty, GLbyte tz, const char* file, int line);
#define glTangent3bvEXT(v) glatter_glTangent3bvEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3bvEXT_debug(const GLbyte *v, const char* file, int line);
#define glTangent3dEXT(tx, ty, tz) glatter_glTangent3dEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3dEXT_debug(GLdouble tx, GLdouble ty, GLdouble tz, const char* file, int line);
#define glTangent3dvEXT(v) glatter_glTangent3dvEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3dvEXT_debug(const GLdouble *v, const char* file, int line);
#define glTangent3fEXT(tx, ty, tz) glatter_glTangent3fEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3fEXT_debug(GLfloat tx, GLfloat ty, GLfloat tz, const char* file, int line);
#define glTangent3fvEXT(v) glatter_glTangent3fvEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3fvEXT_debug(const GLfloat *v, const char* file, int line);
#define glTangent3iEXT(tx, ty, tz) glatter_glTangent3iEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3iEXT_debug(GLint tx, GLint ty, GLint tz, const char* file, int line);
#define glTangent3ivEXT(v) glatter_glTangent3ivEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3ivEXT_debug(const GLint *v, const char* file, int line);
#define glTangent3sEXT(tx, ty, tz) glatter_glTangent3sEXT_debug((tx), (ty), (tz), __FILE__, __LINE__)
void glatter_glTangent3sEXT_debug(GLshort tx, GLshort ty, GLshort tz, const char* file, int line);
#define glTangent3svEXT(v) glatter_glTangent3svEXT_debug((v), __FILE__, __LINE__)
void glatter_glTangent3svEXT_debug(const GLshort *v, const char* file, int line);
#define glTangentPointerEXT(type, stride, pointer) glatter_glTangentPointerEXT_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glTangentPointerEXT_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_EXT_coordinate_frame)
#if defined(GL_EXT_copy_texture)
#define glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border) glatter_glCopyTexImage1DEXT_debug((target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage1DEXT_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border) glatter_glCopyTexImage2DEXT_debug((target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTexImage2DEXT_debug(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width) glatter_glCopyTexSubImage1DEXT_debug((target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTexSubImage1DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTexSubImage2DEXT_debug((target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage2DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3DEXT_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_copy_texture)
#if defined(GL_EXT_cull_vertex)
#define glCullParameterdvEXT(pname, params) glatter_glCullParameterdvEXT_debug((pname), (params), __FILE__, __LINE__)
void glatter_glCullParameterdvEXT_debug(GLenum pname, GLdouble *params, const char* file, int line);
#define glCullParameterfvEXT(pname, params) glatter_glCullParameterfvEXT_debug((pname), (params), __FILE__, __LINE__)
void glatter_glCullParameterfvEXT_debug(GLenum pname, GLfloat *params, const char* file, int line);
#endif // defined(GL_EXT_cull_vertex)
#if defined(GL_EXT_debug_label)
#define glGetObjectLabelEXT(type, object, bufSize, length, label) glatter_glGetObjectLabelEXT_debug((type), (object), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabelEXT_debug(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glLabelObjectEXT(type, object, length, label) glatter_glLabelObjectEXT_debug((type), (object), (length), (label), __FILE__, __LINE__)
void glatter_glLabelObjectEXT_debug(GLenum type, GLuint object, GLsizei length, const GLchar *label, const char* file, int line);
#endif // defined(GL_EXT_debug_label)
#if defined(GL_EXT_debug_marker)
#define glInsertEventMarkerEXT(length, marker) glatter_glInsertEventMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glInsertEventMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#define glPopGroupMarkerEXT() glatter_glPopGroupMarkerEXT_debug(__FILE__, __LINE__)
void glatter_glPopGroupMarkerEXT_debug(const char* file, int line);
#define glPushGroupMarkerEXT(length, marker) glatter_glPushGroupMarkerEXT_debug((length), (marker), __FILE__, __LINE__)
void glatter_glPushGroupMarkerEXT_debug(GLsizei length, const GLchar *marker, const char* file, int line);
#endif // defined(GL_EXT_debug_marker)
#if defined(GL_EXT_depth_bounds_test)
#define glDepthBoundsEXT(zmin, zmax) glatter_glDepthBoundsEXT_debug((zmin), (zmax), __FILE__, __LINE__)
void glatter_glDepthBoundsEXT_debug(GLclampd zmin, GLclampd zmax, const char* file, int line);
#endif // defined(GL_EXT_depth_bounds_test)
#if defined(GL_EXT_direct_state_access)
#define glBindMultiTextureEXT(texunit, target, texture) glatter_glBindMultiTextureEXT_debug((texunit), (target), (texture), __FILE__, __LINE__)
void glatter_glBindMultiTextureEXT_debug(GLenum texunit, GLenum target, GLuint texture, const char* file, int line);
#define glCheckNamedFramebufferStatusEXT(framebuffer, target) glatter_glCheckNamedFramebufferStatusEXT_debug((framebuffer), (target), __FILE__, __LINE__)
GLenum glatter_glCheckNamedFramebufferStatusEXT_debug(GLuint framebuffer, GLenum target, const char* file, int line);
#define glClearNamedBufferDataEXT(buffer, internalformat, format, type, data) glatter_glClearNamedBufferDataEXT_debug((buffer), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferDataEXT_debug(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubDataEXT_debug((buffer), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferSubDataEXT_debug(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClientAttribDefaultEXT(mask) glatter_glClientAttribDefaultEXT_debug((mask), __FILE__, __LINE__)
void glatter_glClientAttribDefaultEXT_debug(GLbitfield mask, const char* file, int line);
#define glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedMultiTexImage1DEXT_debug((texunit), (target), (level), (internalformat), (width), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedMultiTexImage2DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedMultiTexImage3DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedMultiTexSubImage1DEXT_debug((texunit), (target), (level), (xoffset), (width), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexSubImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedMultiTexSubImage2DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexSubImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedMultiTexSubImage3DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedMultiTexSubImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) glatter_glCompressedTextureImage1DEXT_debug((texture), (target), (level), (internalformat), (width), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) glatter_glCompressedTextureImage2DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) glatter_glCompressedTextureImage3DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) glatter_glCompressedTextureSubImage1DEXT_debug((texture), (target), (level), (xoffset), (width), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) glatter_glCompressedTextureSubImage2DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) glatter_glCompressedTextureSubImage3DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (bits), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits, const char* file, int line);
#define glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) glatter_glCopyMultiTexImage1DEXT_debug((texunit), (target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyMultiTexImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) glatter_glCopyMultiTexImage2DEXT_debug((texunit), (target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyMultiTexImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) glatter_glCopyMultiTexSubImage1DEXT_debug((texunit), (target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyMultiTexSubImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyMultiTexSubImage2DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyMultiTexSubImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyMultiTexSubImage3DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyMultiTexSubImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) glatter_glCopyTextureImage1DEXT_debug((texture), (target), (level), (internalformat), (x), (y), (width), (border), __FILE__, __LINE__)
void glatter_glCopyTextureImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, const char* file, int line);
#define glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) glatter_glCopyTextureImage2DEXT_debug((texture), (target), (level), (internalformat), (x), (y), (width), (height), (border), __FILE__, __LINE__)
void glatter_glCopyTextureImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, const char* file, int line);
#define glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1DEXT_debug((texture), (target), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDisableClientStateIndexedEXT(array, index) glatter_glDisableClientStateIndexedEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glDisableClientStateIndexedEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glDisableClientStateiEXT(array, index) glatter_glDisableClientStateiEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glDisableClientStateiEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glDisableIndexedEXT(target, index) glatter_glDisableIndexedEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisableIndexedEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glDisableVertexArrayAttribEXT(vaobj, index) glatter_glDisableVertexArrayAttribEXT_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glDisableVertexArrayAttribEXT_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glDisableVertexArrayEXT(vaobj, array) glatter_glDisableVertexArrayEXT_debug((vaobj), (array), __FILE__, __LINE__)
void glatter_glDisableVertexArrayEXT_debug(GLuint vaobj, GLenum array, const char* file, int line);
#define glEnableClientStateIndexedEXT(array, index) glatter_glEnableClientStateIndexedEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glEnableClientStateIndexedEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glEnableClientStateiEXT(array, index) glatter_glEnableClientStateiEXT_debug((array), (index), __FILE__, __LINE__)
void glatter_glEnableClientStateiEXT_debug(GLenum array, GLuint index, const char* file, int line);
#define glEnableIndexedEXT(target, index) glatter_glEnableIndexedEXT_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnableIndexedEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnableVertexArrayAttribEXT(vaobj, index) glatter_glEnableVertexArrayAttribEXT_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glEnableVertexArrayAttribEXT_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glEnableVertexArrayEXT(vaobj, array) glatter_glEnableVertexArrayEXT_debug((vaobj), (array), __FILE__, __LINE__)
void glatter_glEnableVertexArrayEXT_debug(GLuint vaobj, GLenum array, const char* file, int line);
#define glFlushMappedNamedBufferRangeEXT(buffer, offset, length) glatter_glFlushMappedNamedBufferRangeEXT_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedNamedBufferRangeEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferDrawBufferEXT(framebuffer, mode) glatter_glFramebufferDrawBufferEXT_debug((framebuffer), (mode), __FILE__, __LINE__)
void glatter_glFramebufferDrawBufferEXT_debug(GLuint framebuffer, GLenum mode, const char* file, int line);
#define glFramebufferDrawBuffersEXT(framebuffer, n, bufs) glatter_glFramebufferDrawBuffersEXT_debug((framebuffer), (n), (bufs), __FILE__, __LINE__)
void glatter_glFramebufferDrawBuffersEXT_debug(GLuint framebuffer, GLsizei n, const GLenum *bufs, const char* file, int line);
#define glFramebufferReadBufferEXT(framebuffer, mode) glatter_glFramebufferReadBufferEXT_debug((framebuffer), (mode), __FILE__, __LINE__)
void glatter_glFramebufferReadBufferEXT_debug(GLuint framebuffer, GLenum mode, const char* file, int line);
#define glGenerateMultiTexMipmapEXT(texunit, target) glatter_glGenerateMultiTexMipmapEXT_debug((texunit), (target), __FILE__, __LINE__)
void glatter_glGenerateMultiTexMipmapEXT_debug(GLenum texunit, GLenum target, const char* file, int line);
#define glGenerateTextureMipmapEXT(texture, target) glatter_glGenerateTextureMipmapEXT_debug((texture), (target), __FILE__, __LINE__)
void glatter_glGenerateTextureMipmapEXT_debug(GLuint texture, GLenum target, const char* file, int line);
#define glGetBooleanIndexedvEXT(target, index, data) glatter_glGetBooleanIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleanIndexedvEXT_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetCompressedMultiTexImageEXT(texunit, target, lod, img) glatter_glGetCompressedMultiTexImageEXT_debug((texunit), (target), (lod), (img), __FILE__, __LINE__)
void glatter_glGetCompressedMultiTexImageEXT_debug(GLenum texunit, GLenum target, GLint lod, void *img, const char* file, int line);
#define glGetCompressedTextureImageEXT(texture, target, lod, img) glatter_glGetCompressedTextureImageEXT_debug((texture), (target), (lod), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTextureImageEXT_debug(GLuint texture, GLenum target, GLint lod, void *img, const char* file, int line);
#define glGetDoubleIndexedvEXT(target, index, data) glatter_glGetDoubleIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetDoubleIndexedvEXT_debug(GLenum target, GLuint index, GLdouble *data, const char* file, int line);
#define glGetDoublei_vEXT(pname, index, params) glatter_glGetDoublei_vEXT_debug((pname), (index), (params), __FILE__, __LINE__)
void glatter_glGetDoublei_vEXT_debug(GLenum pname, GLuint index, GLdouble *params, const char* file, int line);
#define glGetFloatIndexedvEXT(target, index, data) glatter_glGetFloatIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloatIndexedvEXT_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glGetFloati_vEXT(pname, index, params) glatter_glGetFloati_vEXT_debug((pname), (index), (params), __FILE__, __LINE__)
void glatter_glGetFloati_vEXT_debug(GLenum pname, GLuint index, GLfloat *params, const char* file, int line);
#define glGetFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetFramebufferParameterivEXT_debug((framebuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameterivEXT_debug(GLuint framebuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegerIndexedvEXT(target, index, data) glatter_glGetIntegerIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegerIndexedvEXT_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexEnvfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexEnvivEXT(texunit, target, pname, params) glatter_glGetMultiTexEnvivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexEnvivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexGendvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGendvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexGendvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenfvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexGenfvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexGenivEXT(texunit, coord, pname, params) glatter_glGetMultiTexGenivEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexGenivEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexImageEXT(texunit, target, level, format, type, pixels) glatter_glGetMultiTexImageEXT_debug((texunit), (target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetMultiTexImageEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterfvEXT_debug((texunit), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexLevelParameterfvEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) glatter_glGetMultiTexLevelParameterivEXT_debug((texunit), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexLevelParameterivEXT_debug(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterIivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterIuivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterIuivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMultiTexParameterivEXT(texunit, target, pname, params) glatter_glGetMultiTexParameterivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMultiTexParameterivEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferParameterivEXT(buffer, pname, params) glatter_glGetNamedBufferParameterivEXT_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameterivEXT_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferPointervEXT(buffer, pname, params) glatter_glGetNamedBufferPointervEXT_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferPointervEXT_debug(GLuint buffer, GLenum pname, void **params, const char* file, int line);
#define glGetNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glGetNamedBufferSubDataEXT_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetNamedBufferSubDataEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameterivEXT_debug((framebuffer), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferAttachmentParameterivEXT_debug(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedFramebufferParameterivEXT(framebuffer, pname, params) glatter_glGetNamedFramebufferParameterivEXT_debug((framebuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameterivEXT_debug(GLuint framebuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedProgramLocalParameterIivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterIivEXT_debug(GLuint program, GLenum target, GLuint index, GLint *params, const char* file, int line);
#define glGetNamedProgramLocalParameterIuivEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterIuivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterIuivEXT_debug(GLuint program, GLenum target, GLuint index, GLuint *params, const char* file, int line);
#define glGetNamedProgramLocalParameterdvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterdvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterdvEXT_debug(GLuint program, GLenum target, GLuint index, GLdouble *params, const char* file, int line);
#define glGetNamedProgramLocalParameterfvEXT(program, target, index, params) glatter_glGetNamedProgramLocalParameterfvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramLocalParameterfvEXT_debug(GLuint program, GLenum target, GLuint index, GLfloat *params, const char* file, int line);
#define glGetNamedProgramStringEXT(program, target, pname, string) glatter_glGetNamedProgramStringEXT_debug((program), (target), (pname), (string), __FILE__, __LINE__)
void glatter_glGetNamedProgramStringEXT_debug(GLuint program, GLenum target, GLenum pname, void *string, const char* file, int line);
#define glGetNamedProgramivEXT(program, target, pname, params) glatter_glGetNamedProgramivEXT_debug((program), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedProgramivEXT_debug(GLuint program, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameterivEXT_debug((renderbuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedRenderbufferParameterivEXT_debug(GLuint renderbuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetPointerIndexedvEXT(target, index, data) glatter_glGetPointerIndexedvEXT_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetPointerIndexedvEXT_debug(GLenum target, GLuint index, void **data, const char* file, int line);
#define glGetPointeri_vEXT(pname, index, params) glatter_glGetPointeri_vEXT_debug((pname), (index), (params), __FILE__, __LINE__)
void glatter_glGetPointeri_vEXT_debug(GLenum pname, GLuint index, void **params, const char* file, int line);
#define glGetTextureImageEXT(texture, target, level, format, type, pixels) glatter_glGetTextureImageEXT_debug((texture), (target), (level), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureImageEXT_debug(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels, const char* file, int line);
#define glGetTextureLevelParameterfvEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterfvEXT_debug((texture), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterfvEXT_debug(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureLevelParameterivEXT(texture, target, level, pname, params) glatter_glGetTextureLevelParameterivEXT_debug((texture), (target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterivEXT_debug(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIivEXT(texture, target, pname, params) glatter_glGetTextureParameterIivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIivEXT_debug(GLuint texture, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIuivEXT(texture, target, pname, params) glatter_glGetTextureParameterIuivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIuivEXT_debug(GLuint texture, GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTextureParameterfvEXT(texture, target, pname, params) glatter_glGetTextureParameterfvEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterfvEXT_debug(GLuint texture, GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureParameterivEXT(texture, target, pname, params) glatter_glGetTextureParameterivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterivEXT_debug(GLuint texture, GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayIntegeri_vEXT_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIntegeri_vEXT_debug(GLuint vaobj, GLuint index, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayIntegervEXT(vaobj, pname, param) glatter_glGetVertexArrayIntegervEXT_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIntegervEXT_debug(GLuint vaobj, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param) glatter_glGetVertexArrayPointeri_vEXT_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayPointeri_vEXT_debug(GLuint vaobj, GLuint index, GLenum pname, void **param, const char* file, int line);
#define glGetVertexArrayPointervEXT(vaobj, pname, param) glatter_glGetVertexArrayPointervEXT_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayPointervEXT_debug(GLuint vaobj, GLenum pname, void **param, const char* file, int line);
#define glIsEnabledIndexedEXT(target, index) glatter_glIsEnabledIndexedEXT_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledIndexedEXT_debug(GLenum target, GLuint index, const char* file, int line);
#define glMapNamedBufferEXT(buffer, access) glatter_glMapNamedBufferEXT_debug((buffer), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferEXT_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glMapNamedBufferRangeEXT(buffer, offset, length, access) glatter_glMapNamedBufferRangeEXT_debug((buffer), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferRangeEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixFrustumEXT_debug((mode), (left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glMatrixFrustumEXT_debug(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glMatrixLoadIdentityEXT(mode) glatter_glMatrixLoadIdentityEXT_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixLoadIdentityEXT_debug(GLenum mode, const char* file, int line);
#define glMatrixLoadTransposedEXT(mode, m) glatter_glMatrixLoadTransposedEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTransposedEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixLoadTransposefEXT(mode, m) glatter_glMatrixLoadTransposefEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTransposefEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixLoaddEXT(mode, m) glatter_glMatrixLoaddEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoaddEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixLoadfEXT(mode, m) glatter_glMatrixLoadfEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadfEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixMultTransposedEXT(mode, m) glatter_glMatrixMultTransposedEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTransposedEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixMultTransposefEXT(mode, m) glatter_glMatrixMultTransposefEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTransposefEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixMultdEXT(mode, m) glatter_glMatrixMultdEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultdEXT_debug(GLenum mode, const GLdouble *m, const char* file, int line);
#define glMatrixMultfEXT(mode, m) glatter_glMatrixMultfEXT_debug((mode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultfEXT_debug(GLenum mode, const GLfloat *m, const char* file, int line);
#define glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) glatter_glMatrixOrthoEXT_debug((mode), (left), (right), (bottom), (top), (zNear), (zFar), __FILE__, __LINE__)
void glatter_glMatrixOrthoEXT_debug(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define glMatrixPopEXT(mode) glatter_glMatrixPopEXT_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixPopEXT_debug(GLenum mode, const char* file, int line);
#define glMatrixPushEXT(mode) glatter_glMatrixPushEXT_debug((mode), __FILE__, __LINE__)
void glatter_glMatrixPushEXT_debug(GLenum mode, const char* file, int line);
#define glMatrixRotatedEXT(mode, angle, x, y, z) glatter_glMatrixRotatedEXT_debug((mode), (angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixRotatedEXT_debug(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glMatrixRotatefEXT(mode, angle, x, y, z) glatter_glMatrixRotatefEXT_debug((mode), (angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixRotatefEXT_debug(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glMatrixScaledEXT(mode, x, y, z) glatter_glMatrixScaledEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixScaledEXT_debug(GLenum mode, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glMatrixScalefEXT(mode, x, y, z) glatter_glMatrixScalefEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixScalefEXT_debug(GLenum mode, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glMatrixTranslatedEXT(mode, x, y, z) glatter_glMatrixTranslatedEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixTranslatedEXT_debug(GLenum mode, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glMatrixTranslatefEXT(mode, x, y, z) glatter_glMatrixTranslatefEXT_debug((mode), (x), (y), (z), __FILE__, __LINE__)
void glatter_glMatrixTranslatefEXT_debug(GLenum mode, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glMultiTexBufferEXT(texunit, target, internalformat, buffer) glatter_glMultiTexBufferEXT_debug((texunit), (target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glMultiTexBufferEXT_debug(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer) glatter_glMultiTexCoordPointerEXT_debug((texunit), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glMultiTexCoordPointerEXT_debug(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glMultiTexEnvfEXT(texunit, target, pname, param) glatter_glMultiTexEnvfEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexEnvfEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glMultiTexEnvfvEXT(texunit, target, pname, params) glatter_glMultiTexEnvfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexEnvfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMultiTexEnviEXT(texunit, target, pname, param) glatter_glMultiTexEnviEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexEnviEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glMultiTexEnvivEXT(texunit, target, pname, params) glatter_glMultiTexEnvivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexEnvivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexGendEXT(texunit, coord, pname, param) glatter_glMultiTexGendEXT_debug((texunit), (coord), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexGendEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLdouble param, const char* file, int line);
#define glMultiTexGendvEXT(texunit, coord, pname, params) glatter_glMultiTexGendvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexGendvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params, const char* file, int line);
#define glMultiTexGenfEXT(texunit, coord, pname, param) glatter_glMultiTexGenfEXT_debug((texunit), (coord), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexGenfEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLfloat param, const char* file, int line);
#define glMultiTexGenfvEXT(texunit, coord, pname, params) glatter_glMultiTexGenfvEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexGenfvEXT_debug(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMultiTexGeniEXT(texunit, coord, pname, param) glatter_glMultiTexGeniEXT_debug((texunit), (coord), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexGeniEXT_debug(GLenum texunit, GLenum coord, GLenum pname, GLint param, const char* file, int line);
#define glMultiTexGenivEXT(texunit, coord, pname, params) glatter_glMultiTexGenivEXT_debug((texunit), (coord), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexGenivEXT_debug(GLenum texunit, GLenum coord, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels) glatter_glMultiTexImage1DEXT_debug((texunit), (target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels) glatter_glMultiTexImage2DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glMultiTexImage3DEXT_debug((texunit), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexParameterIivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterIivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexParameterIuivEXT(texunit, target, pname, params) glatter_glMultiTexParameterIuivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterIuivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glMultiTexParameterfEXT(texunit, target, pname, param) glatter_glMultiTexParameterfEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexParameterfEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glMultiTexParameterfvEXT(texunit, target, pname, params) glatter_glMultiTexParameterfvEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterfvEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMultiTexParameteriEXT(texunit, target, pname, param) glatter_glMultiTexParameteriEXT_debug((texunit), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glMultiTexParameteriEXT_debug(GLenum texunit, GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glMultiTexParameterivEXT(texunit, target, pname, params) glatter_glMultiTexParameterivEXT_debug((texunit), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glMultiTexParameterivEXT_debug(GLenum texunit, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glMultiTexRenderbufferEXT(texunit, target, renderbuffer) glatter_glMultiTexRenderbufferEXT_debug((texunit), (target), (renderbuffer), __FILE__, __LINE__)
void glatter_glMultiTexRenderbufferEXT_debug(GLenum texunit, GLenum target, GLuint renderbuffer, const char* file, int line);
#define glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels) glatter_glMultiTexSubImage1DEXT_debug((texunit), (target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexSubImage1DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glMultiTexSubImage2DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexSubImage2DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glMultiTexSubImage3DEXT_debug((texunit), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glMultiTexSubImage3DEXT_debug(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glNamedBufferDataEXT(buffer, size, data, usage) glatter_glNamedBufferDataEXT_debug((buffer), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glNamedBufferDataEXT_debug(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glNamedBufferStorageEXT(buffer, size, data, flags) glatter_glNamedBufferStorageEXT_debug((buffer), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glNamedBufferStorageEXT_debug(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glNamedBufferSubDataEXT(buffer, offset, size, data) glatter_glNamedBufferSubDataEXT_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glNamedBufferSubDataEXT_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glNamedCopyBufferSubDataEXT_debug((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glNamedCopyBufferSubDataEXT_debug(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glNamedFramebufferParameteriEXT(framebuffer, pname, param) glatter_glNamedFramebufferParameteriEXT_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glNamedFramebufferParameteriEXT_debug(GLuint framebuffer, GLenum pname, GLint param, const char* file, int line);
#define glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbufferEXT_debug((framebuffer), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glNamedFramebufferRenderbufferEXT_debug(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture1DEXT_debug((framebuffer), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture1DEXT_debug(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) glatter_glNamedFramebufferTexture2DEXT_debug((framebuffer), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture2DEXT_debug(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) glatter_glNamedFramebufferTexture3DEXT_debug((framebuffer), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture3DEXT_debug(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTextureEXT_debug((framebuffer), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureEXT_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) glatter_glNamedFramebufferTextureFaceEXT_debug((framebuffer), (attachment), (texture), (level), (face), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureFaceEXT_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face, const char* file, int line);
#define glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayerEXT_debug((framebuffer), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureLayerEXT_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4dEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4dEXT_debug(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glNamedProgramLocalParameter4dvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4dvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4dvEXT_debug(GLuint program, GLenum target, GLuint index, const GLdouble *params, const char* file, int line);
#define glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameter4fEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4fEXT_debug(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glNamedProgramLocalParameter4fvEXT(program, target, index, params) glatter_glNamedProgramLocalParameter4fvEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameter4fvEXT_debug(GLuint program, GLenum target, GLuint index, const GLfloat *params, const char* file, int line);
#define glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4iEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4iEXT_debug(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glNamedProgramLocalParameterI4ivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4ivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4ivEXT_debug(GLuint program, GLenum target, GLuint index, const GLint *params, const char* file, int line);
#define glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) glatter_glNamedProgramLocalParameterI4uiEXT_debug((program), (target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4uiEXT_debug(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glNamedProgramLocalParameterI4uivEXT(program, target, index, params) glatter_glNamedProgramLocalParameterI4uivEXT_debug((program), (target), (index), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameterI4uivEXT_debug(GLuint program, GLenum target, GLuint index, const GLuint *params, const char* file, int line);
#define glNamedProgramLocalParameters4fvEXT(program, target, index, count, params) glatter_glNamedProgramLocalParameters4fvEXT_debug((program), (target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParameters4fvEXT_debug(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params, const char* file, int line);
#define glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4ivEXT_debug((program), (target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParametersI4ivEXT_debug(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params, const char* file, int line);
#define glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params) glatter_glNamedProgramLocalParametersI4uivEXT_debug((program), (target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glNamedProgramLocalParametersI4uivEXT_debug(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params, const char* file, int line);
#define glNamedProgramStringEXT(program, target, format, len, string) glatter_glNamedProgramStringEXT_debug((program), (target), (format), (len), (string), __FILE__, __LINE__)
void glatter_glNamedProgramStringEXT_debug(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string, const char* file, int line);
#define glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorageEXT_debug((renderbuffer), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageEXT_debug(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleCoverageEXT_debug((renderbuffer), (coverageSamples), (colorSamples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisampleCoverageEXT_debug(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisampleEXT_debug((renderbuffer), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisampleEXT_debug(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glProgramUniform1dEXT(program, location, x) glatter_glProgramUniform1dEXT_debug((program), (location), (x), __FILE__, __LINE__)
void glatter_glProgramUniform1dEXT_debug(GLuint program, GLint location, GLdouble x, const char* file, int line);
#define glProgramUniform1dvEXT(program, location, count, value) glatter_glProgramUniform1dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform1fEXT(program, location, v0) glatter_glProgramUniform1fEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1fEXT_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fvEXT(program, location, count, value) glatter_glProgramUniform1fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1iEXT(program, location, v0) glatter_glProgramUniform1iEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1iEXT_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1ivEXT(program, location, count, value) glatter_glProgramUniform1ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1uiEXT(program, location, v0) glatter_glProgramUniform1uiEXT_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1uiEXT_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uivEXT(program, location, count, value) glatter_glProgramUniform1uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2dEXT(program, location, x, y) glatter_glProgramUniform2dEXT_debug((program), (location), (x), (y), __FILE__, __LINE__)
void glatter_glProgramUniform2dEXT_debug(GLuint program, GLint location, GLdouble x, GLdouble y, const char* file, int line);
#define glProgramUniform2dvEXT(program, location, count, value) glatter_glProgramUniform2dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform2fEXT(program, location, v0, v1) glatter_glProgramUniform2fEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fvEXT(program, location, count, value) glatter_glProgramUniform2fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2iEXT(program, location, v0, v1) glatter_glProgramUniform2iEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2ivEXT(program, location, count, value) glatter_glProgramUniform2ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2uiEXT(program, location, v0, v1) glatter_glProgramUniform2uiEXT_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uivEXT(program, location, count, value) glatter_glProgramUniform2uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3dEXT(program, location, x, y, z) glatter_glProgramUniform3dEXT_debug((program), (location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glProgramUniform3dEXT_debug(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glProgramUniform3dvEXT(program, location, count, value) glatter_glProgramUniform3dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform3fEXT(program, location, v0, v1, v2) glatter_glProgramUniform3fEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fvEXT(program, location, count, value) glatter_glProgramUniform3fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3iEXT(program, location, v0, v1, v2) glatter_glProgramUniform3iEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3ivEXT(program, location, count, value) glatter_glProgramUniform3ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3uiEXT(program, location, v0, v1, v2) glatter_glProgramUniform3uiEXT_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uivEXT(program, location, count, value) glatter_glProgramUniform3uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4dEXT(program, location, x, y, z, w) glatter_glProgramUniform4dEXT_debug((program), (location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramUniform4dEXT_debug(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramUniform4dvEXT(program, location, count, value) glatter_glProgramUniform4dvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4dvEXT_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform4fEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4fEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4fEXT_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fvEXT(program, location, count, value) glatter_glProgramUniform4fvEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fvEXT_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4iEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4iEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4iEXT_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4ivEXT(program, location, count, value) glatter_glProgramUniform4ivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4ivEXT_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) glatter_glProgramUniform4uiEXT_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4uiEXT_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uivEXT(program, location, count, value) glatter_glProgramUniform4uivEXT_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uivEXT_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3dvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fvEXT_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fvEXT_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glPushClientAttribDefaultEXT(mask) glatter_glPushClientAttribDefaultEXT_debug((mask), __FILE__, __LINE__)
void glatter_glPushClientAttribDefaultEXT_debug(GLbitfield mask, const char* file, int line);
#define glTextureBufferEXT(texture, target, internalformat, buffer) glatter_glTextureBufferEXT_debug((texture), (target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTextureBufferEXT_debug(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) glatter_glTextureBufferRangeEXT_debug((texture), (target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTextureBufferRangeEXT_debug(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels) glatter_glTextureImage1DEXT_debug((texture), (target), (level), (internalformat), (width), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels) glatter_glTextureImage2DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTextureImage3DEXT_debug((texture), (target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit) glatter_glTexturePageCommitmentEXT_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (commit), __FILE__, __LINE__)
void glatter_glTexturePageCommitmentEXT_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit, const char* file, int line);
#define glTextureParameterIivEXT(texture, target, pname, params) glatter_glTextureParameterIivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIivEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureParameterIuivEXT(texture, target, pname, params) glatter_glTextureParameterIuivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIuivEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTextureParameterfEXT(texture, target, pname, param) glatter_glTextureParameterfEXT_debug((texture), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterfEXT_debug(GLuint texture, GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glTextureParameterfvEXT(texture, target, pname, params) glatter_glTextureParameterfvEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterfvEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glTextureParameteriEXT(texture, target, pname, param) glatter_glTextureParameteriEXT_debug((texture), (target), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteriEXT_debug(GLuint texture, GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glTextureParameterivEXT(texture, target, pname, params) glatter_glTextureParameterivEXT_debug((texture), (target), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterivEXT_debug(GLuint texture, GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureRenderbufferEXT(texture, target, renderbuffer) glatter_glTextureRenderbufferEXT_debug((texture), (target), (renderbuffer), __FILE__, __LINE__)
void glatter_glTextureRenderbufferEXT_debug(GLuint texture, GLenum target, GLuint renderbuffer, const char* file, int line);
#define glTextureStorage1DEXT(texture, target, levels, internalformat, width) glatter_glTextureStorage1DEXT_debug((texture), (target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) glatter_glTextureStorage2DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisampleEXT_debug((texture), (target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage2DMultisampleEXT_debug(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) glatter_glTextureStorage3DEXT_debug((texture), (target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3DEXT_debug(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisampleEXT_debug((texture), (target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage3DMultisampleEXT_debug(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1DEXT_debug((texture), (target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage1DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage2DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3DEXT_debug((texture), (target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage3DEXT_debug(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glUnmapNamedBufferEXT(buffer) glatter_glUnmapNamedBufferEXT_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glUnmapNamedBufferEXT_debug(GLuint buffer, const char* file, int line);
#define glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayBindVertexBufferEXT_debug((vaobj), (bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glVertexArrayBindVertexBufferEXT_debug(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayColorOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayColorOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) glatter_glVertexArrayEdgeFlagOffsetEXT_debug((vaobj), (buffer), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayEdgeFlagOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayFogCoordOffsetEXT_debug((vaobj), (buffer), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayFogCoordOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayIndexOffsetEXT_debug((vaobj), (buffer), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayIndexOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset) glatter_glVertexArrayMultiTexCoordOffsetEXT_debug((vaobj), (buffer), (texunit), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayMultiTexCoordOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset) glatter_glVertexArrayNormalOffsetEXT_debug((vaobj), (buffer), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayNormalOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArraySecondaryColorOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArraySecondaryColorOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayTexCoordOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayTexCoordOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) glatter_glVertexArrayVertexAttribBindingEXT_debug((vaobj), (attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribBindingEXT_debug(GLuint vaobj, GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor) glatter_glVertexArrayVertexAttribDivisorEXT_debug((vaobj), (index), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribDivisorEXT_debug(GLuint vaobj, GLuint index, GLuint divisor, const char* file, int line);
#define glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayVertexAttribFormatEXT_debug((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribFormatEXT_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribIFormatEXT_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribIFormatEXT_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribIOffsetEXT_debug((vaobj), (buffer), (index), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribIOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayVertexAttribLFormatEXT_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribLFormatEXT_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset) glatter_glVertexArrayVertexAttribLOffsetEXT_debug((vaobj), (buffer), (index), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribLOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset) glatter_glVertexArrayVertexAttribOffsetEXT_debug((vaobj), (buffer), (index), (size), (type), (normalized), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexAttribOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset, const char* file, int line);
#define glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) glatter_glVertexArrayVertexBindingDivisorEXT_debug((vaobj), (bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBindingDivisorEXT_debug(GLuint vaobj, GLuint bindingindex, GLuint divisor, const char* file, int line);
#define glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset) glatter_glVertexArrayVertexOffsetEXT_debug((vaobj), (buffer), (size), (type), (stride), (offset), __FILE__, __LINE__)
void glatter_glVertexArrayVertexOffsetEXT_debug(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset, const char* file, int line);
#endif // defined(GL_EXT_direct_state_access)
#if defined(GL_EXT_draw_buffers2)
#define glColorMaskIndexedEXT(index, r, g, b, a) glatter_glColorMaskIndexedEXT_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaskIndexedEXT_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#endif // defined(GL_EXT_draw_buffers2)
#if defined(GL_EXT_draw_instanced)
#define glDrawArraysInstancedEXT(mode, start, count, primcount) glatter_glDrawArraysInstancedEXT_debug((mode), (start), (count), (primcount), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedEXT_debug(GLenum mode, GLint start, GLsizei count, GLsizei primcount, const char* file, int line);
#define glDrawElementsInstancedEXT(mode, count, type, indices, primcount) glatter_glDrawElementsInstancedEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedEXT_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_draw_instanced)
#if defined(GL_EXT_draw_range_elements)
#define glDrawRangeElementsEXT(mode, start, end, count, type, indices) glatter_glDrawRangeElementsEXT_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElementsEXT_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#endif // defined(GL_EXT_draw_range_elements)
#if defined(GL_EXT_fog_coord)
#define glFogCoordPointerEXT(type, stride, pointer) glatter_glFogCoordPointerEXT_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glFogCoordPointerEXT_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glFogCoorddEXT(coord) glatter_glFogCoorddEXT_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoorddEXT_debug(GLdouble coord, const char* file, int line);
#define glFogCoorddvEXT(coord) glatter_glFogCoorddvEXT_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoorddvEXT_debug(const GLdouble *coord, const char* file, int line);
#define glFogCoordfEXT(coord) glatter_glFogCoordfEXT_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordfEXT_debug(GLfloat coord, const char* file, int line);
#define glFogCoordfvEXT(coord) glatter_glFogCoordfvEXT_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordfvEXT_debug(const GLfloat *coord, const char* file, int line);
#endif // defined(GL_EXT_fog_coord)
#if defined(GL_EXT_framebuffer_blit)
#define glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebufferEXT_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebufferEXT_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#endif // defined(GL_EXT_framebuffer_blit)
#if defined(GL_EXT_framebuffer_multisample)
#define glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleEXT_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleEXT_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_framebuffer_multisample)
#if defined(GL_EXT_framebuffer_object)
#define glBindFramebufferEXT(target, framebuffer) glatter_glBindFramebufferEXT_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebufferEXT_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbufferEXT(target, renderbuffer) glatter_glBindRenderbufferEXT_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbufferEXT_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glCheckFramebufferStatusEXT(target) glatter_glCheckFramebufferStatusEXT_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatusEXT_debug(GLenum target, const char* file, int line);
#define glDeleteFramebuffersEXT(n, framebuffers) glatter_glDeleteFramebuffersEXT_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffersEXT_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteRenderbuffersEXT(n, renderbuffers) glatter_glDeleteRenderbuffersEXT_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffersEXT_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbufferEXT_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbufferEXT_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture1DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1DEXT_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture1DEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture2DEXT(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2DEXT_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2DEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3DEXT_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glFramebufferTexture3DEXT_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glGenFramebuffersEXT(n, framebuffers) glatter_glGenFramebuffersEXT_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffersEXT_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffersEXT(n, renderbuffers) glatter_glGenRenderbuffersEXT_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffersEXT_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenerateMipmapEXT(target) glatter_glGenerateMipmapEXT_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmapEXT_debug(GLenum target, const char* file, int line);
#define glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameterivEXT_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameterivEXT_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetRenderbufferParameterivEXT(target, pname, params) glatter_glGetRenderbufferParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsFramebufferEXT(framebuffer) glatter_glIsFramebufferEXT_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebufferEXT_debug(GLuint framebuffer, const char* file, int line);
#define glIsRenderbufferEXT(renderbuffer) glatter_glIsRenderbufferEXT_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbufferEXT_debug(GLuint renderbuffer, const char* file, int line);
#define glRenderbufferStorageEXT(target, internalformat, width, height) glatter_glRenderbufferStorageEXT_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageEXT_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_EXT_framebuffer_object)
#if defined(GL_EXT_geometry_shader4)
#define glProgramParameteriEXT(program, pname, value) glatter_glProgramParameteriEXT_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteriEXT_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_EXT_geometry_shader4)
#if defined(GL_EXT_gpu_program_parameters)
#define glProgramEnvParameters4fvEXT(target, index, count, params) glatter_glProgramEnvParameters4fvEXT_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameters4fvEXT_debug(GLenum target, GLuint index, GLsizei count, const GLfloat *params, const char* file, int line);
#define glProgramLocalParameters4fvEXT(target, index, count, params) glatter_glProgramLocalParameters4fvEXT_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameters4fvEXT_debug(GLenum target, GLuint index, GLsizei count, const GLfloat *params, const char* file, int line);
#endif // defined(GL_EXT_gpu_program_parameters)
#if defined(GL_EXT_gpu_shader4)
#define glBindFragDataLocationEXT(program, color, name) glatter_glBindFragDataLocationEXT_debug((program), (color), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationEXT_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#define glGetFragDataLocationEXT(program, name) glatter_glGetFragDataLocationEXT_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocationEXT_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformuivEXT(program, location, params) glatter_glGetUniformuivEXT_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuivEXT_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glUniform1uiEXT(location, v0) glatter_glUniform1uiEXT_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1uiEXT_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uivEXT(location, count, value) glatter_glUniform1uivEXT_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uivEXT_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2uiEXT(location, v0, v1) glatter_glUniform2uiEXT_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2uiEXT_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uivEXT(location, count, value) glatter_glUniform2uivEXT_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uivEXT_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3uiEXT(location, v0, v1, v2) glatter_glUniform3uiEXT_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3uiEXT_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uivEXT(location, count, value) glatter_glUniform3uivEXT_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uivEXT_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4uiEXT(location, v0, v1, v2, v3) glatter_glUniform4uiEXT_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4uiEXT_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uivEXT(location, count, value) glatter_glUniform4uivEXT_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uivEXT_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#endif // defined(GL_EXT_gpu_shader4)
#if defined(GL_EXT_histogram)
#define glGetHistogramEXT(target, reset, format, type, values) glatter_glGetHistogramEXT_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetHistogramEXT_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values, const char* file, int line);
#define glGetHistogramParameterfvEXT(target, pname, params) glatter_glGetHistogramParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetHistogramParameterivEXT(target, pname, params) glatter_glGetHistogramParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetMinmaxEXT(target, reset, format, type, values) glatter_glGetMinmaxEXT_debug((target), (reset), (format), (type), (values), __FILE__, __LINE__)
void glatter_glGetMinmaxEXT_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values, const char* file, int line);
#define glGetMinmaxParameterfvEXT(target, pname, params) glatter_glGetMinmaxParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMinmaxParameterivEXT(target, pname, params) glatter_glGetMinmaxParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMinmaxParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glHistogramEXT(target, width, internalformat, sink) glatter_glHistogramEXT_debug((target), (width), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glHistogramEXT_debug(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glMinmaxEXT(target, internalformat, sink) glatter_glMinmaxEXT_debug((target), (internalformat), (sink), __FILE__, __LINE__)
void glatter_glMinmaxEXT_debug(GLenum target, GLenum internalformat, GLboolean sink, const char* file, int line);
#define glResetHistogramEXT(target) glatter_glResetHistogramEXT_debug((target), __FILE__, __LINE__)
void glatter_glResetHistogramEXT_debug(GLenum target, const char* file, int line);
#define glResetMinmaxEXT(target) glatter_glResetMinmaxEXT_debug((target), __FILE__, __LINE__)
void glatter_glResetMinmaxEXT_debug(GLenum target, const char* file, int line);
#endif // defined(GL_EXT_histogram)
#if defined(GL_EXT_index_func)
#define glIndexFuncEXT(func, ref) glatter_glIndexFuncEXT_debug((func), (ref), __FILE__, __LINE__)
void glatter_glIndexFuncEXT_debug(GLenum func, GLclampf ref, const char* file, int line);
#endif // defined(GL_EXT_index_func)
#if defined(GL_EXT_index_material)
#define glIndexMaterialEXT(face, mode) glatter_glIndexMaterialEXT_debug((face), (mode), __FILE__, __LINE__)
void glatter_glIndexMaterialEXT_debug(GLenum face, GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_index_material)
#if defined(GL_EXT_light_texture)
#define glApplyTextureEXT(mode) glatter_glApplyTextureEXT_debug((mode), __FILE__, __LINE__)
void glatter_glApplyTextureEXT_debug(GLenum mode, const char* file, int line);
#define glTextureLightEXT(pname) glatter_glTextureLightEXT_debug((pname), __FILE__, __LINE__)
void glatter_glTextureLightEXT_debug(GLenum pname, const char* file, int line);
#define glTextureMaterialEXT(face, mode) glatter_glTextureMaterialEXT_debug((face), (mode), __FILE__, __LINE__)
void glatter_glTextureMaterialEXT_debug(GLenum face, GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_light_texture)
#if defined(GL_EXT_multi_draw_arrays)
#define glMultiDrawArraysEXT(mode, first, count, primcount) glatter_glMultiDrawArraysEXT_debug((mode), (first), (count), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysEXT_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount, const char* file, int line);
#define glMultiDrawElementsEXT(mode, count, type, indices, primcount) glatter_glMultiDrawElementsEXT_debug((mode), (count), (type), (indices), (primcount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsEXT_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, const char* file, int line);
#endif // defined(GL_EXT_multi_draw_arrays)
#if defined(GL_EXT_multisample)
#define glSampleMaskEXT(value, invert) glatter_glSampleMaskEXT_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleMaskEXT_debug(GLclampf value, GLboolean invert, const char* file, int line);
#define glSamplePatternEXT(pattern) glatter_glSamplePatternEXT_debug((pattern), __FILE__, __LINE__)
void glatter_glSamplePatternEXT_debug(GLenum pattern, const char* file, int line);
#endif // defined(GL_EXT_multisample)
#if defined(GL_EXT_paletted_texture)
#define glColorTableEXT(target, internalFormat, width, format, type, table) glatter_glColorTableEXT_debug((target), (internalFormat), (width), (format), (type), (table), __FILE__, __LINE__)
void glatter_glColorTableEXT_debug(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table, const char* file, int line);
#define glGetColorTableEXT(target, format, type, data) glatter_glGetColorTableEXT_debug((target), (format), (type), (data), __FILE__, __LINE__)
void glatter_glGetColorTableEXT_debug(GLenum target, GLenum format, GLenum type, void *data, const char* file, int line);
#define glGetColorTableParameterfvEXT(target, pname, params) glatter_glGetColorTableParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetColorTableParameterivEXT(target, pname, params) glatter_glGetColorTableParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#endif // defined(GL_EXT_paletted_texture)
#if defined(GL_EXT_pixel_transform)
#define glGetPixelTransformParameterfvEXT(target, pname, params) glatter_glGetPixelTransformParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetPixelTransformParameterfvEXT_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetPixelTransformParameterivEXT(target, pname, params) glatter_glGetPixelTransformParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetPixelTransformParameterivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glPixelTransformParameterfEXT(target, pname, param) glatter_glPixelTransformParameterfEXT_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransformParameterfEXT_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glPixelTransformParameterfvEXT(target, pname, params) glatter_glPixelTransformParameterfvEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glPixelTransformParameterfvEXT_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glPixelTransformParameteriEXT(target, pname, param) glatter_glPixelTransformParameteriEXT_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransformParameteriEXT_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glPixelTransformParameterivEXT(target, pname, params) glatter_glPixelTransformParameterivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glPixelTransformParameterivEXT_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_EXT_pixel_transform)
#if defined(GL_EXT_point_parameters)
#define glPointParameterfEXT(pname, param) glatter_glPointParameterfEXT_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterfEXT_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfvEXT(pname, params) glatter_glPointParameterfvEXT_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfvEXT_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#endif // defined(GL_EXT_point_parameters)
#if defined(GL_EXT_polygon_offset)
#define glPolygonOffsetEXT(factor, bias) glatter_glPolygonOffsetEXT_debug((factor), (bias), __FILE__, __LINE__)
void glatter_glPolygonOffsetEXT_debug(GLfloat factor, GLfloat bias, const char* file, int line);
#endif // defined(GL_EXT_polygon_offset)
#if defined(GL_EXT_polygon_offset_clamp)
#define glPolygonOffsetClampEXT(factor, units, clamp) glatter_glPolygonOffsetClampEXT_debug((factor), (units), (clamp), __FILE__, __LINE__)
void glatter_glPolygonOffsetClampEXT_debug(GLfloat factor, GLfloat units, GLfloat clamp, const char* file, int line);
#endif // defined(GL_EXT_polygon_offset_clamp)
#if defined(GL_EXT_provoking_vertex)
#define glProvokingVertexEXT(mode) glatter_glProvokingVertexEXT_debug((mode), __FILE__, __LINE__)
void glatter_glProvokingVertexEXT_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_provoking_vertex)
#if defined(GL_EXT_raster_multisample)
#define glRasterSamplesEXT(samples, fixedsamplelocations) glatter_glRasterSamplesEXT_debug((samples), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glRasterSamplesEXT_debug(GLuint samples, GLboolean fixedsamplelocations, const char* file, int line);
#endif // defined(GL_EXT_raster_multisample)
#if defined(GL_EXT_secondary_color)
#define glSecondaryColor3bEXT(red, green, blue) glatter_glSecondaryColor3bEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3bEXT_debug(GLbyte red, GLbyte green, GLbyte blue, const char* file, int line);
#define glSecondaryColor3bvEXT(v) glatter_glSecondaryColor3bvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3bvEXT_debug(const GLbyte *v, const char* file, int line);
#define glSecondaryColor3dEXT(red, green, blue) glatter_glSecondaryColor3dEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3dEXT_debug(GLdouble red, GLdouble green, GLdouble blue, const char* file, int line);
#define glSecondaryColor3dvEXT(v) glatter_glSecondaryColor3dvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3dvEXT_debug(const GLdouble *v, const char* file, int line);
#define glSecondaryColor3fEXT(red, green, blue) glatter_glSecondaryColor3fEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3fEXT_debug(GLfloat red, GLfloat green, GLfloat blue, const char* file, int line);
#define glSecondaryColor3fvEXT(v) glatter_glSecondaryColor3fvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3fvEXT_debug(const GLfloat *v, const char* file, int line);
#define glSecondaryColor3iEXT(red, green, blue) glatter_glSecondaryColor3iEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3iEXT_debug(GLint red, GLint green, GLint blue, const char* file, int line);
#define glSecondaryColor3ivEXT(v) glatter_glSecondaryColor3ivEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3ivEXT_debug(const GLint *v, const char* file, int line);
#define glSecondaryColor3sEXT(red, green, blue) glatter_glSecondaryColor3sEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3sEXT_debug(GLshort red, GLshort green, GLshort blue, const char* file, int line);
#define glSecondaryColor3svEXT(v) glatter_glSecondaryColor3svEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3svEXT_debug(const GLshort *v, const char* file, int line);
#define glSecondaryColor3ubEXT(red, green, blue) glatter_glSecondaryColor3ubEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3ubEXT_debug(GLubyte red, GLubyte green, GLubyte blue, const char* file, int line);
#define glSecondaryColor3ubvEXT(v) glatter_glSecondaryColor3ubvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3ubvEXT_debug(const GLubyte *v, const char* file, int line);
#define glSecondaryColor3uiEXT(red, green, blue) glatter_glSecondaryColor3uiEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3uiEXT_debug(GLuint red, GLuint green, GLuint blue, const char* file, int line);
#define glSecondaryColor3uivEXT(v) glatter_glSecondaryColor3uivEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3uivEXT_debug(const GLuint *v, const char* file, int line);
#define glSecondaryColor3usEXT(red, green, blue) glatter_glSecondaryColor3usEXT_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3usEXT_debug(GLushort red, GLushort green, GLushort blue, const char* file, int line);
#define glSecondaryColor3usvEXT(v) glatter_glSecondaryColor3usvEXT_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3usvEXT_debug(const GLushort *v, const char* file, int line);
#define glSecondaryColorPointerEXT(size, type, stride, pointer) glatter_glSecondaryColorPointerEXT_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glSecondaryColorPointerEXT_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_EXT_secondary_color)
#if defined(GL_EXT_separate_shader_objects)
#define glActiveProgramEXT(program) glatter_glActiveProgramEXT_debug((program), __FILE__, __LINE__)
void glatter_glActiveProgramEXT_debug(GLuint program, const char* file, int line);
#define glCreateShaderProgramEXT(type, string) glatter_glCreateShaderProgramEXT_debug((type), (string), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramEXT_debug(GLenum type, const GLchar *string, const char* file, int line);
#define glUseShaderProgramEXT(type, program) glatter_glUseShaderProgramEXT_debug((type), (program), __FILE__, __LINE__)
void glatter_glUseShaderProgramEXT_debug(GLenum type, GLuint program, const char* file, int line);
#endif // defined(GL_EXT_separate_shader_objects)
#if defined(GL_EXT_shader_image_load_store)
#define glBindImageTextureEXT(index, texture, level, layered, layer, access, format) glatter_glBindImageTextureEXT_debug((index), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTextureEXT_debug(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format, const char* file, int line);
#define glMemoryBarrierEXT(barriers) glatter_glMemoryBarrierEXT_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierEXT_debug(GLbitfield barriers, const char* file, int line);
#endif // defined(GL_EXT_shader_image_load_store)
#if defined(GL_EXT_stencil_clear_tag)
#define glStencilClearTagEXT(stencilTagBits, stencilClearTag) glatter_glStencilClearTagEXT_debug((stencilTagBits), (stencilClearTag), __FILE__, __LINE__)
void glatter_glStencilClearTagEXT_debug(GLsizei stencilTagBits, GLuint stencilClearTag, const char* file, int line);
#endif // defined(GL_EXT_stencil_clear_tag)
#if defined(GL_EXT_stencil_two_side)
#define glActiveStencilFaceEXT(face) glatter_glActiveStencilFaceEXT_debug((face), __FILE__, __LINE__)
void glatter_glActiveStencilFaceEXT_debug(GLenum face, const char* file, int line);
#endif // defined(GL_EXT_stencil_two_side)
#if defined(GL_EXT_subtexture)
#define glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels) glatter_glTexSubImage1DEXT_debug((target), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage1DEXT_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTexSubImage2DEXT_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage2DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_EXT_subtexture)
#if defined(GL_EXT_texture3D)
#define glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3DEXT_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3DEXT_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3DEXT_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3DEXT_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_EXT_texture3D)
#if defined(GL_EXT_texture_array)
#define glFramebufferTextureLayerEXT(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayerEXT_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayerEXT_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#endif // defined(GL_EXT_texture_array)
#if defined(GL_EXT_texture_buffer_object)
#define glTexBufferEXT(target, internalformat, buffer) glatter_glTexBufferEXT_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBufferEXT_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#endif // defined(GL_EXT_texture_buffer_object)
#if defined(GL_EXT_texture_integer)
#define glClearColorIiEXT(red, green, blue, alpha) glatter_glClearColorIiEXT_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColorIiEXT_debug(GLint red, GLint green, GLint blue, GLint alpha, const char* file, int line);
#define glClearColorIuiEXT(red, green, blue, alpha) glatter_glClearColorIuiEXT_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColorIuiEXT_debug(GLuint red, GLuint green, GLuint blue, GLuint alpha, const char* file, int line);
#define glGetTexParameterIivEXT(target, pname, params) glatter_glGetTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIivEXT_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuivEXT(target, pname, params) glatter_glGetTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuivEXT_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glTexParameterIivEXT(target, pname, params) glatter_glTexParameterIivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIivEXT_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuivEXT(target, pname, params) glatter_glTexParameterIuivEXT_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuivEXT_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#endif // defined(GL_EXT_texture_integer)
#if defined(GL_EXT_texture_object)
#define glAreTexturesResidentEXT(n, textures, residences) glatter_glAreTexturesResidentEXT_debug((n), (textures), (residences), __FILE__, __LINE__)
GLboolean glatter_glAreTexturesResidentEXT_debug(GLsizei n, const GLuint *textures, GLboolean *residences, const char* file, int line);
#define glBindTextureEXT(target, texture) glatter_glBindTextureEXT_debug((target), (texture), __FILE__, __LINE__)
void glatter_glBindTextureEXT_debug(GLenum target, GLuint texture, const char* file, int line);
#define glDeleteTexturesEXT(n, textures) glatter_glDeleteTexturesEXT_debug((n), (textures), __FILE__, __LINE__)
void glatter_glDeleteTexturesEXT_debug(GLsizei n, const GLuint *textures, const char* file, int line);
#define glGenTexturesEXT(n, textures) glatter_glGenTexturesEXT_debug((n), (textures), __FILE__, __LINE__)
void glatter_glGenTexturesEXT_debug(GLsizei n, GLuint *textures, const char* file, int line);
#define glIsTextureEXT(texture) glatter_glIsTextureEXT_debug((texture), __FILE__, __LINE__)
GLboolean glatter_glIsTextureEXT_debug(GLuint texture, const char* file, int line);
#define glPrioritizeTexturesEXT(n, textures, priorities) glatter_glPrioritizeTexturesEXT_debug((n), (textures), (priorities), __FILE__, __LINE__)
void glatter_glPrioritizeTexturesEXT_debug(GLsizei n, const GLuint *textures, const GLclampf *priorities, const char* file, int line);
#endif // defined(GL_EXT_texture_object)
#if defined(GL_EXT_texture_perturb_normal)
#define glTextureNormalEXT(mode) glatter_glTextureNormalEXT_debug((mode), __FILE__, __LINE__)
void glatter_glTextureNormalEXT_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_EXT_texture_perturb_normal)
#if defined(GL_EXT_timer_query)
#define glGetQueryObjecti64vEXT(id, pname, params) glatter_glGetQueryObjecti64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjecti64vEXT_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetQueryObjectui64vEXT(id, pname, params) glatter_glGetQueryObjectui64vEXT_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectui64vEXT_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#endif // defined(GL_EXT_timer_query)
#if defined(GL_EXT_transform_feedback)
#define glBeginTransformFeedbackEXT(primitiveMode) glatter_glBeginTransformFeedbackEXT_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedbackEXT_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBaseEXT(target, index, buffer) glatter_glBindBufferBaseEXT_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBaseEXT_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferOffsetEXT(target, index, buffer, offset) glatter_glBindBufferOffsetEXT_debug((target), (index), (buffer), (offset), __FILE__, __LINE__)
void glatter_glBindBufferOffsetEXT_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, const char* file, int line);
#define glBindBufferRangeEXT(target, index, buffer, offset, size) glatter_glBindBufferRangeEXT_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRangeEXT_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glEndTransformFeedbackEXT() glatter_glEndTransformFeedbackEXT_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedbackEXT_debug(const char* file, int line);
#define glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVaryingEXT_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVaryingEXT_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryingsEXT_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryingsEXT_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#endif // defined(GL_EXT_transform_feedback)
#if defined(GL_EXT_vertex_array)
#define glArrayElementEXT(i) glatter_glArrayElementEXT_debug((i), __FILE__, __LINE__)
void glatter_glArrayElementEXT_debug(GLint i, const char* file, int line);
#define glColorPointerEXT(size, type, stride, count, pointer) glatter_glColorPointerEXT_debug((size), (type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glColorPointerEXT_debug(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#define glDrawArraysEXT(mode, first, count) glatter_glDrawArraysEXT_debug((mode), (first), (count), __FILE__, __LINE__)
void glatter_glDrawArraysEXT_debug(GLenum mode, GLint first, GLsizei count, const char* file, int line);
#define glEdgeFlagPointerEXT(stride, count, pointer) glatter_glEdgeFlagPointerEXT_debug((stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glEdgeFlagPointerEXT_debug(GLsizei stride, GLsizei count, const GLboolean *pointer, const char* file, int line);
#define glGetPointervEXT(pname, params) glatter_glGetPointervEXT_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPointervEXT_debug(GLenum pname, void **params, const char* file, int line);
#define glIndexPointerEXT(type, stride, count, pointer) glatter_glIndexPointerEXT_debug((type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glIndexPointerEXT_debug(GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#define glNormalPointerEXT(type, stride, count, pointer) glatter_glNormalPointerEXT_debug((type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glNormalPointerEXT_debug(GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#define glTexCoordPointerEXT(size, type, stride, count, pointer) glatter_glTexCoordPointerEXT_debug((size), (type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glTexCoordPointerEXT_debug(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#define glVertexPointerEXT(size, type, stride, count, pointer) glatter_glVertexPointerEXT_debug((size), (type), (stride), (count), (pointer), __FILE__, __LINE__)
void glatter_glVertexPointerEXT_debug(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer, const char* file, int line);
#endif // defined(GL_EXT_vertex_array)
#if defined(GL_EXT_vertex_attrib_64bit)
#define glGetVertexAttribLdvEXT(index, pname, params) glatter_glGetVertexAttribLdvEXT_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLdvEXT_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glVertexAttribL1dEXT(index, x) glatter_glVertexAttribL1dEXT_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1dEXT_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttribL1dvEXT(index, v) glatter_glVertexAttribL1dvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1dvEXT_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL2dEXT(index, x, y) glatter_glVertexAttribL2dEXT_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2dEXT_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttribL2dvEXT(index, v) glatter_glVertexAttribL2dvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2dvEXT_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL3dEXT(index, x, y, z) glatter_glVertexAttribL3dEXT_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3dEXT_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttribL3dvEXT(index, v) glatter_glVertexAttribL3dvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3dvEXT_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL4dEXT(index, x, y, z, w) glatter_glVertexAttribL4dEXT_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4dEXT_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttribL4dvEXT(index, v) glatter_glVertexAttribL4dvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4dvEXT_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribLPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribLPointerEXT_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribLPointerEXT_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_EXT_vertex_attrib_64bit)
#if defined(GL_EXT_vertex_shader)
#define glBeginVertexShaderEXT() glatter_glBeginVertexShaderEXT_debug(__FILE__, __LINE__)
void glatter_glBeginVertexShaderEXT_debug(const char* file, int line);
#define glBindLightParameterEXT(light, value) glatter_glBindLightParameterEXT_debug((light), (value), __FILE__, __LINE__)
GLuint glatter_glBindLightParameterEXT_debug(GLenum light, GLenum value, const char* file, int line);
#define glBindMaterialParameterEXT(face, value) glatter_glBindMaterialParameterEXT_debug((face), (value), __FILE__, __LINE__)
GLuint glatter_glBindMaterialParameterEXT_debug(GLenum face, GLenum value, const char* file, int line);
#define glBindParameterEXT(value) glatter_glBindParameterEXT_debug((value), __FILE__, __LINE__)
GLuint glatter_glBindParameterEXT_debug(GLenum value, const char* file, int line);
#define glBindTexGenParameterEXT(unit, coord, value) glatter_glBindTexGenParameterEXT_debug((unit), (coord), (value), __FILE__, __LINE__)
GLuint glatter_glBindTexGenParameterEXT_debug(GLenum unit, GLenum coord, GLenum value, const char* file, int line);
#define glBindTextureUnitParameterEXT(unit, value) glatter_glBindTextureUnitParameterEXT_debug((unit), (value), __FILE__, __LINE__)
GLuint glatter_glBindTextureUnitParameterEXT_debug(GLenum unit, GLenum value, const char* file, int line);
#define glBindVertexShaderEXT(id) glatter_glBindVertexShaderEXT_debug((id), __FILE__, __LINE__)
void glatter_glBindVertexShaderEXT_debug(GLuint id, const char* file, int line);
#define glDeleteVertexShaderEXT(id) glatter_glDeleteVertexShaderEXT_debug((id), __FILE__, __LINE__)
void glatter_glDeleteVertexShaderEXT_debug(GLuint id, const char* file, int line);
#define glDisableVariantClientStateEXT(id) glatter_glDisableVariantClientStateEXT_debug((id), __FILE__, __LINE__)
void glatter_glDisableVariantClientStateEXT_debug(GLuint id, const char* file, int line);
#define glEnableVariantClientStateEXT(id) glatter_glEnableVariantClientStateEXT_debug((id), __FILE__, __LINE__)
void glatter_glEnableVariantClientStateEXT_debug(GLuint id, const char* file, int line);
#define glEndVertexShaderEXT() glatter_glEndVertexShaderEXT_debug(__FILE__, __LINE__)
void glatter_glEndVertexShaderEXT_debug(const char* file, int line);
#define glExtractComponentEXT(res, src, num) glatter_glExtractComponentEXT_debug((res), (src), (num), __FILE__, __LINE__)
void glatter_glExtractComponentEXT_debug(GLuint res, GLuint src, GLuint num, const char* file, int line);
#define glGenSymbolsEXT(datatype, storagetype, range, components) glatter_glGenSymbolsEXT_debug((datatype), (storagetype), (range), (components), __FILE__, __LINE__)
GLuint glatter_glGenSymbolsEXT_debug(GLenum datatype, GLenum storagetype, GLenum range, GLuint components, const char* file, int line);
#define glGenVertexShadersEXT(range) glatter_glGenVertexShadersEXT_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenVertexShadersEXT_debug(GLuint range, const char* file, int line);
#define glGetInvariantBooleanvEXT(id, value, data) glatter_glGetInvariantBooleanvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetInvariantBooleanvEXT_debug(GLuint id, GLenum value, GLboolean *data, const char* file, int line);
#define glGetInvariantFloatvEXT(id, value, data) glatter_glGetInvariantFloatvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetInvariantFloatvEXT_debug(GLuint id, GLenum value, GLfloat *data, const char* file, int line);
#define glGetInvariantIntegervEXT(id, value, data) glatter_glGetInvariantIntegervEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetInvariantIntegervEXT_debug(GLuint id, GLenum value, GLint *data, const char* file, int line);
#define glGetLocalConstantBooleanvEXT(id, value, data) glatter_glGetLocalConstantBooleanvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetLocalConstantBooleanvEXT_debug(GLuint id, GLenum value, GLboolean *data, const char* file, int line);
#define glGetLocalConstantFloatvEXT(id, value, data) glatter_glGetLocalConstantFloatvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetLocalConstantFloatvEXT_debug(GLuint id, GLenum value, GLfloat *data, const char* file, int line);
#define glGetLocalConstantIntegervEXT(id, value, data) glatter_glGetLocalConstantIntegervEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetLocalConstantIntegervEXT_debug(GLuint id, GLenum value, GLint *data, const char* file, int line);
#define glGetVariantBooleanvEXT(id, value, data) glatter_glGetVariantBooleanvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetVariantBooleanvEXT_debug(GLuint id, GLenum value, GLboolean *data, const char* file, int line);
#define glGetVariantFloatvEXT(id, value, data) glatter_glGetVariantFloatvEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetVariantFloatvEXT_debug(GLuint id, GLenum value, GLfloat *data, const char* file, int line);
#define glGetVariantIntegervEXT(id, value, data) glatter_glGetVariantIntegervEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetVariantIntegervEXT_debug(GLuint id, GLenum value, GLint *data, const char* file, int line);
#define glGetVariantPointervEXT(id, value, data) glatter_glGetVariantPointervEXT_debug((id), (value), (data), __FILE__, __LINE__)
void glatter_glGetVariantPointervEXT_debug(GLuint id, GLenum value, void **data, const char* file, int line);
#define glInsertComponentEXT(res, src, num) glatter_glInsertComponentEXT_debug((res), (src), (num), __FILE__, __LINE__)
void glatter_glInsertComponentEXT_debug(GLuint res, GLuint src, GLuint num, const char* file, int line);
#define glIsVariantEnabledEXT(id, cap) glatter_glIsVariantEnabledEXT_debug((id), (cap), __FILE__, __LINE__)
GLboolean glatter_glIsVariantEnabledEXT_debug(GLuint id, GLenum cap, const char* file, int line);
#define glSetInvariantEXT(id, type, addr) glatter_glSetInvariantEXT_debug((id), (type), (addr), __FILE__, __LINE__)
void glatter_glSetInvariantEXT_debug(GLuint id, GLenum type, const void *addr, const char* file, int line);
#define glSetLocalConstantEXT(id, type, addr) glatter_glSetLocalConstantEXT_debug((id), (type), (addr), __FILE__, __LINE__)
void glatter_glSetLocalConstantEXT_debug(GLuint id, GLenum type, const void *addr, const char* file, int line);
#define glShaderOp1EXT(op, res, arg1) glatter_glShaderOp1EXT_debug((op), (res), (arg1), __FILE__, __LINE__)
void glatter_glShaderOp1EXT_debug(GLenum op, GLuint res, GLuint arg1, const char* file, int line);
#define glShaderOp2EXT(op, res, arg1, arg2) glatter_glShaderOp2EXT_debug((op), (res), (arg1), (arg2), __FILE__, __LINE__)
void glatter_glShaderOp2EXT_debug(GLenum op, GLuint res, GLuint arg1, GLuint arg2, const char* file, int line);
#define glShaderOp3EXT(op, res, arg1, arg2, arg3) glatter_glShaderOp3EXT_debug((op), (res), (arg1), (arg2), (arg3), __FILE__, __LINE__)
void glatter_glShaderOp3EXT_debug(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3, const char* file, int line);
#define glSwizzleEXT(res, in, outX, outY, outZ, outW) glatter_glSwizzleEXT_debug((res), (in), (outX), (outY), (outZ), (outW), __FILE__, __LINE__)
void glatter_glSwizzleEXT_debug(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW, const char* file, int line);
#define glVariantPointerEXT(id, type, stride, addr) glatter_glVariantPointerEXT_debug((id), (type), (stride), (addr), __FILE__, __LINE__)
void glatter_glVariantPointerEXT_debug(GLuint id, GLenum type, GLuint stride, const void *addr, const char* file, int line);
#define glVariantbvEXT(id, addr) glatter_glVariantbvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantbvEXT_debug(GLuint id, const GLbyte *addr, const char* file, int line);
#define glVariantdvEXT(id, addr) glatter_glVariantdvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantdvEXT_debug(GLuint id, const GLdouble *addr, const char* file, int line);
#define glVariantfvEXT(id, addr) glatter_glVariantfvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantfvEXT_debug(GLuint id, const GLfloat *addr, const char* file, int line);
#define glVariantivEXT(id, addr) glatter_glVariantivEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantivEXT_debug(GLuint id, const GLint *addr, const char* file, int line);
#define glVariantsvEXT(id, addr) glatter_glVariantsvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantsvEXT_debug(GLuint id, const GLshort *addr, const char* file, int line);
#define glVariantubvEXT(id, addr) glatter_glVariantubvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantubvEXT_debug(GLuint id, const GLubyte *addr, const char* file, int line);
#define glVariantuivEXT(id, addr) glatter_glVariantuivEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantuivEXT_debug(GLuint id, const GLuint *addr, const char* file, int line);
#define glVariantusvEXT(id, addr) glatter_glVariantusvEXT_debug((id), (addr), __FILE__, __LINE__)
void glatter_glVariantusvEXT_debug(GLuint id, const GLushort *addr, const char* file, int line);
#define glWriteMaskEXT(res, in, outX, outY, outZ, outW) glatter_glWriteMaskEXT_debug((res), (in), (outX), (outY), (outZ), (outW), __FILE__, __LINE__)
void glatter_glWriteMaskEXT_debug(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW, const char* file, int line);
#endif // defined(GL_EXT_vertex_shader)
#if defined(GL_EXT_vertex_weighting)
#define glVertexWeightPointerEXT(size, type, stride, pointer) glatter_glVertexWeightPointerEXT_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexWeightPointerEXT_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glVertexWeightfEXT(weight) glatter_glVertexWeightfEXT_debug((weight), __FILE__, __LINE__)
void glatter_glVertexWeightfEXT_debug(GLfloat weight, const char* file, int line);
#define glVertexWeightfvEXT(weight) glatter_glVertexWeightfvEXT_debug((weight), __FILE__, __LINE__)
void glatter_glVertexWeightfvEXT_debug(const GLfloat *weight, const char* file, int line);
#endif // defined(GL_EXT_vertex_weighting)
#if defined(GL_EXT_window_rectangles)
#define glWindowRectanglesEXT(mode, count, box) glatter_glWindowRectanglesEXT_debug((mode), (count), (box), __FILE__, __LINE__)
void glatter_glWindowRectanglesEXT_debug(GLenum mode, GLsizei count, const GLint *box, const char* file, int line);
#endif // defined(GL_EXT_window_rectangles)
#if defined(GL_EXT_x11_sync_object)
#define glImportSyncEXT(external_sync_type, external_sync, flags) glatter_glImportSyncEXT_debug((external_sync_type), (external_sync), (flags), __FILE__, __LINE__)
GLsync glatter_glImportSyncEXT_debug(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags, const char* file, int line);
#endif // defined(GL_EXT_x11_sync_object)
#if defined(GL_GREMEDY_frame_terminator)
#define glFrameTerminatorGREMEDY() glatter_glFrameTerminatorGREMEDY_debug(__FILE__, __LINE__)
void glatter_glFrameTerminatorGREMEDY_debug(const char* file, int line);
#endif // defined(GL_GREMEDY_frame_terminator)
#if defined(GL_GREMEDY_string_marker)
#define glStringMarkerGREMEDY(len, string) glatter_glStringMarkerGREMEDY_debug((len), (string), __FILE__, __LINE__)
void glatter_glStringMarkerGREMEDY_debug(GLsizei len, const void *string, const char* file, int line);
#endif // defined(GL_GREMEDY_string_marker)
#if defined(GL_HP_image_transform)
#define glGetImageTransformParameterfvHP(target, pname, params) glatter_glGetImageTransformParameterfvHP_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetImageTransformParameterfvHP_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetImageTransformParameterivHP(target, pname, params) glatter_glGetImageTransformParameterivHP_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetImageTransformParameterivHP_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glImageTransformParameterfHP(target, pname, param) glatter_glImageTransformParameterfHP_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glImageTransformParameterfHP_debug(GLenum target, GLenum pname, GLfloat param, const char* file, int line);
#define glImageTransformParameterfvHP(target, pname, params) glatter_glImageTransformParameterfvHP_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glImageTransformParameterfvHP_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glImageTransformParameteriHP(target, pname, param) glatter_glImageTransformParameteriHP_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glImageTransformParameteriHP_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glImageTransformParameterivHP(target, pname, params) glatter_glImageTransformParameterivHP_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glImageTransformParameterivHP_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_HP_image_transform)
#if defined(GL_IBM_multimode_draw_arrays)
#define glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride) glatter_glMultiModeDrawArraysIBM_debug((mode), (first), (count), (primcount), (modestride), __FILE__, __LINE__)
void glatter_glMultiModeDrawArraysIBM_debug(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride, const char* file, int line);
#define glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride) glatter_glMultiModeDrawElementsIBM_debug((mode), (count), (type), (indices), (primcount), (modestride), __FILE__, __LINE__)
void glatter_glMultiModeDrawElementsIBM_debug(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride, const char* file, int line);
#endif // defined(GL_IBM_multimode_draw_arrays)
#if defined(GL_IBM_static_data)
#define glFlushStaticDataIBM(target) glatter_glFlushStaticDataIBM_debug((target), __FILE__, __LINE__)
void glatter_glFlushStaticDataIBM_debug(GLenum target, const char* file, int line);
#endif // defined(GL_IBM_static_data)
#if defined(GL_IBM_vertex_array_lists)
#define glColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glColorPointerListIBM_debug((size), (type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glColorPointerListIBM_debug(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glEdgeFlagPointerListIBM(stride, pointer, ptrstride) glatter_glEdgeFlagPointerListIBM_debug((stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glEdgeFlagPointerListIBM_debug(GLint stride, const GLboolean **pointer, GLint ptrstride, const char* file, int line);
#define glFogCoordPointerListIBM(type, stride, pointer, ptrstride) glatter_glFogCoordPointerListIBM_debug((type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glFogCoordPointerListIBM_debug(GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glIndexPointerListIBM(type, stride, pointer, ptrstride) glatter_glIndexPointerListIBM_debug((type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glIndexPointerListIBM_debug(GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glNormalPointerListIBM(type, stride, pointer, ptrstride) glatter_glNormalPointerListIBM_debug((type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glNormalPointerListIBM_debug(GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glSecondaryColorPointerListIBM_debug((size), (type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glSecondaryColorPointerListIBM_debug(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glTexCoordPointerListIBM_debug((size), (type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glTexCoordPointerListIBM_debug(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#define glVertexPointerListIBM(size, type, stride, pointer, ptrstride) glatter_glVertexPointerListIBM_debug((size), (type), (stride), (pointer), (ptrstride), __FILE__, __LINE__)
void glatter_glVertexPointerListIBM_debug(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride, const char* file, int line);
#endif // defined(GL_IBM_vertex_array_lists)
#if defined(GL_INGR_blend_func_separate)
#define glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparateINGR_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparateINGR_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#endif // defined(GL_INGR_blend_func_separate)
#if defined(GL_INTEL_framebuffer_CMAA)
#define glApplyFramebufferAttachmentCMAAINTEL() glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(__FILE__, __LINE__)
void glatter_glApplyFramebufferAttachmentCMAAINTEL_debug(const char* file, int line);
#endif // defined(GL_INTEL_framebuffer_CMAA)
#if defined(GL_INTEL_map_texture)
#define glMapTexture2DINTEL(texture, level, access, stride, layout) glatter_glMapTexture2DINTEL_debug((texture), (level), (access), (stride), (layout), __FILE__, __LINE__)
void * glatter_glMapTexture2DINTEL_debug(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout, const char* file, int line);
#define glSyncTextureINTEL(texture) glatter_glSyncTextureINTEL_debug((texture), __FILE__, __LINE__)
void glatter_glSyncTextureINTEL_debug(GLuint texture, const char* file, int line);
#define glUnmapTexture2DINTEL(texture, level) glatter_glUnmapTexture2DINTEL_debug((texture), (level), __FILE__, __LINE__)
void glatter_glUnmapTexture2DINTEL_debug(GLuint texture, GLint level, const char* file, int line);
#endif // defined(GL_INTEL_map_texture)
#if defined(GL_INTEL_parallel_arrays)
#define glColorPointervINTEL(size, type, pointer) glatter_glColorPointervINTEL_debug((size), (type), (pointer), __FILE__, __LINE__)
void glatter_glColorPointervINTEL_debug(GLint size, GLenum type, const void **pointer, const char* file, int line);
#define glNormalPointervINTEL(type, pointer) glatter_glNormalPointervINTEL_debug((type), (pointer), __FILE__, __LINE__)
void glatter_glNormalPointervINTEL_debug(GLenum type, const void **pointer, const char* file, int line);
#define glTexCoordPointervINTEL(size, type, pointer) glatter_glTexCoordPointervINTEL_debug((size), (type), (pointer), __FILE__, __LINE__)
void glatter_glTexCoordPointervINTEL_debug(GLint size, GLenum type, const void **pointer, const char* file, int line);
#define glVertexPointervINTEL(size, type, pointer) glatter_glVertexPointervINTEL_debug((size), (type), (pointer), __FILE__, __LINE__)
void glatter_glVertexPointervINTEL_debug(GLint size, GLenum type, const void **pointer, const char* file, int line);
#endif // defined(GL_INTEL_parallel_arrays)
#if defined(GL_INTEL_performance_query)
#define glBeginPerfQueryINTEL(queryHandle) glatter_glBeginPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glBeginPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glCreatePerfQueryINTEL(queryId, queryHandle) glatter_glCreatePerfQueryINTEL_debug((queryId), (queryHandle), __FILE__, __LINE__)
void glatter_glCreatePerfQueryINTEL_debug(GLuint queryId, GLuint *queryHandle, const char* file, int line);
#define glDeletePerfQueryINTEL(queryHandle) glatter_glDeletePerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glDeletePerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glEndPerfQueryINTEL(queryHandle) glatter_glEndPerfQueryINTEL_debug((queryHandle), __FILE__, __LINE__)
void glatter_glEndPerfQueryINTEL_debug(GLuint queryHandle, const char* file, int line);
#define glGetFirstPerfQueryIdINTEL(queryId) glatter_glGetFirstPerfQueryIdINTEL_debug((queryId), __FILE__, __LINE__)
void glatter_glGetFirstPerfQueryIdINTEL_debug(GLuint *queryId, const char* file, int line);
#define glGetNextPerfQueryIdINTEL(queryId, nextQueryId) glatter_glGetNextPerfQueryIdINTEL_debug((queryId), (nextQueryId), __FILE__, __LINE__)
void glatter_glGetNextPerfQueryIdINTEL_debug(GLuint queryId, GLuint *nextQueryId, const char* file, int line);
#define glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue) glatter_glGetPerfCounterInfoINTEL_debug((queryId), (counterId), (counterNameLength), (counterName), (counterDescLength), (counterDesc), (counterOffset), (counterDataSize), (counterTypeEnum), (counterDataTypeEnum), (rawCounterMaxValue), __FILE__, __LINE__)
void glatter_glGetPerfCounterInfoINTEL_debug(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue, const char* file, int line);
#define glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten) glatter_glGetPerfQueryDataINTEL_debug((queryHandle), (flags), (dataSize), (data), (bytesWritten), __FILE__, __LINE__)
void glatter_glGetPerfQueryDataINTEL_debug(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten, const char* file, int line);
#define glGetPerfQueryIdByNameINTEL(queryName, queryId) glatter_glGetPerfQueryIdByNameINTEL_debug((queryName), (queryId), __FILE__, __LINE__)
void glatter_glGetPerfQueryIdByNameINTEL_debug(GLchar *queryName, GLuint *queryId, const char* file, int line);
#define glGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask) glatter_glGetPerfQueryInfoINTEL_debug((queryId), (queryNameLength), (queryName), (dataSize), (noCounters), (noInstances), (capsMask), __FILE__, __LINE__)
void glatter_glGetPerfQueryInfoINTEL_debug(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask, const char* file, int line);
#endif // defined(GL_INTEL_performance_query)
#if defined(GL_KHR_blend_equation_advanced)
#define glBlendBarrierKHR() glatter_glBlendBarrierKHR_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierKHR_debug(const char* file, int line);
#endif // defined(GL_KHR_blend_equation_advanced)
#if defined(GL_MESA_resize_buffers)
#define glResizeBuffersMESA() glatter_glResizeBuffersMESA_debug(__FILE__, __LINE__)
void glatter_glResizeBuffersMESA_debug(const char* file, int line);
#endif // defined(GL_MESA_resize_buffers)
#if defined(GL_MESA_window_pos)
#define glWindowPos2dMESA(x, y) glatter_glWindowPos2dMESA_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2dMESA_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glWindowPos2dvMESA(v) glatter_glWindowPos2dvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2dvMESA_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos2fMESA(x, y) glatter_glWindowPos2fMESA_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2fMESA_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glWindowPos2fvMESA(v) glatter_glWindowPos2fvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2fvMESA_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos2iMESA(x, y) glatter_glWindowPos2iMESA_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2iMESA_debug(GLint x, GLint y, const char* file, int line);
#define glWindowPos2ivMESA(v) glatter_glWindowPos2ivMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2ivMESA_debug(const GLint *v, const char* file, int line);
#define glWindowPos2sMESA(x, y) glatter_glWindowPos2sMESA_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2sMESA_debug(GLshort x, GLshort y, const char* file, int line);
#define glWindowPos2svMESA(v) glatter_glWindowPos2svMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2svMESA_debug(const GLshort *v, const char* file, int line);
#define glWindowPos3dMESA(x, y, z) glatter_glWindowPos3dMESA_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3dMESA_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glWindowPos3dvMESA(v) glatter_glWindowPos3dvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3dvMESA_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos3fMESA(x, y, z) glatter_glWindowPos3fMESA_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3fMESA_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glWindowPos3fvMESA(v) glatter_glWindowPos3fvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3fvMESA_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos3iMESA(x, y, z) glatter_glWindowPos3iMESA_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3iMESA_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glWindowPos3ivMESA(v) glatter_glWindowPos3ivMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3ivMESA_debug(const GLint *v, const char* file, int line);
#define glWindowPos3sMESA(x, y, z) glatter_glWindowPos3sMESA_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3sMESA_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glWindowPos3svMESA(v) glatter_glWindowPos3svMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3svMESA_debug(const GLshort *v, const char* file, int line);
#define glWindowPos4dMESA(x, y, z, w) glatter_glWindowPos4dMESA_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glWindowPos4dMESA_debug(GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glWindowPos4dvMESA(v) glatter_glWindowPos4dvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos4dvMESA_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos4fMESA(x, y, z, w) glatter_glWindowPos4fMESA_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glWindowPos4fMESA_debug(GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glWindowPos4fvMESA(v) glatter_glWindowPos4fvMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos4fvMESA_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos4iMESA(x, y, z, w) glatter_glWindowPos4iMESA_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glWindowPos4iMESA_debug(GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glWindowPos4ivMESA(v) glatter_glWindowPos4ivMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos4ivMESA_debug(const GLint *v, const char* file, int line);
#define glWindowPos4sMESA(x, y, z, w) glatter_glWindowPos4sMESA_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glWindowPos4sMESA_debug(GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glWindowPos4svMESA(v) glatter_glWindowPos4svMESA_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos4svMESA_debug(const GLshort *v, const char* file, int line);
#endif // defined(GL_MESA_window_pos)
#if defined(GL_NVX_conditional_render)
#define glBeginConditionalRenderNVX(id) glatter_glBeginConditionalRenderNVX_debug((id), __FILE__, __LINE__)
void glatter_glBeginConditionalRenderNVX_debug(GLuint id, const char* file, int line);
#define glEndConditionalRenderNVX() glatter_glEndConditionalRenderNVX_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRenderNVX_debug(const char* file, int line);
#endif // defined(GL_NVX_conditional_render)
#if defined(GL_NV_bindless_multi_draw_indirect)
#define glMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessNV_debug((mode), (indirect), (drawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectBindlessNV_debug(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#define glMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessNV_debug((mode), (type), (indirect), (drawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectBindlessNV_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#endif // defined(GL_NV_bindless_multi_draw_indirect)
#if defined(GL_NV_bindless_multi_draw_indirect_count)
#define glMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawArraysIndirectBindlessCountNV_debug((mode), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirectBindlessCountNV_debug(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#define glMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount) glatter_glMultiDrawElementsIndirectBindlessCountNV_debug((mode), (type), (indirect), (drawCount), (maxDrawCount), (stride), (vertexBufferCount), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirectBindlessCountNV_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount, const char* file, int line);
#endif // defined(GL_NV_bindless_multi_draw_indirect_count)
#if defined(GL_NV_bindless_texture)
#define glGetImageHandleNV(texture, level, layered, layer, format) glatter_glGetImageHandleNV_debug((texture), (level), (layered), (layer), (format), __FILE__, __LINE__)
GLuint64 glatter_glGetImageHandleNV_debug(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format, const char* file, int line);
#define glGetTextureHandleNV(texture) glatter_glGetTextureHandleNV_debug((texture), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureHandleNV_debug(GLuint texture, const char* file, int line);
#define glGetTextureSamplerHandleNV(texture, sampler) glatter_glGetTextureSamplerHandleNV_debug((texture), (sampler), __FILE__, __LINE__)
GLuint64 glatter_glGetTextureSamplerHandleNV_debug(GLuint texture, GLuint sampler, const char* file, int line);
#define glIsImageHandleResidentNV(handle) glatter_glIsImageHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsImageHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glIsTextureHandleResidentNV(handle) glatter_glIsTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
GLboolean glatter_glIsTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleNonResidentNV(handle) glatter_glMakeImageHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeImageHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeImageHandleResidentNV(handle, access) glatter_glMakeImageHandleResidentNV_debug((handle), (access), __FILE__, __LINE__)
void glatter_glMakeImageHandleResidentNV_debug(GLuint64 handle, GLenum access, const char* file, int line);
#define glMakeTextureHandleNonResidentNV(handle) glatter_glMakeTextureHandleNonResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleNonResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glMakeTextureHandleResidentNV(handle) glatter_glMakeTextureHandleResidentNV_debug((handle), __FILE__, __LINE__)
void glatter_glMakeTextureHandleResidentNV_debug(GLuint64 handle, const char* file, int line);
#define glProgramUniformHandleui64NV(program, location, value) glatter_glProgramUniformHandleui64NV_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64NV_debug(GLuint program, GLint location, GLuint64 value, const char* file, int line);
#define glProgramUniformHandleui64vNV(program, location, count, values) glatter_glProgramUniformHandleui64vNV_debug((program), (location), (count), (values), __FILE__, __LINE__)
void glatter_glProgramUniformHandleui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64 *values, const char* file, int line);
#define glUniformHandleui64NV(location, value) glatter_glUniformHandleui64NV_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64NV_debug(GLint location, GLuint64 value, const char* file, int line);
#define glUniformHandleui64vNV(location, count, value) glatter_glUniformHandleui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformHandleui64vNV_debug(GLint location, GLsizei count, const GLuint64 *value, const char* file, int line);
#endif // defined(GL_NV_bindless_texture)
#if defined(GL_NV_blend_equation_advanced)
#define glBlendBarrierNV() glatter_glBlendBarrierNV_debug(__FILE__, __LINE__)
void glatter_glBlendBarrierNV_debug(const char* file, int line);
#define glBlendParameteriNV(pname, value) glatter_glBlendParameteriNV_debug((pname), (value), __FILE__, __LINE__)
void glatter_glBlendParameteriNV_debug(GLenum pname, GLint value, const char* file, int line);
#endif // defined(GL_NV_blend_equation_advanced)
#if defined(GL_NV_clip_space_w_scaling)
#define glViewportPositionWScaleNV(index, xcoeff, ycoeff) glatter_glViewportPositionWScaleNV_debug((index), (xcoeff), (ycoeff), __FILE__, __LINE__)
void glatter_glViewportPositionWScaleNV_debug(GLuint index, GLfloat xcoeff, GLfloat ycoeff, const char* file, int line);
#endif // defined(GL_NV_clip_space_w_scaling)
#if defined(GL_NV_command_list)
#define glCallCommandListNV(list) glatter_glCallCommandListNV_debug((list), __FILE__, __LINE__)
void glatter_glCallCommandListNV_debug(GLuint list, const char* file, int line);
#define glCommandListSegmentsNV(list, segments) glatter_glCommandListSegmentsNV_debug((list), (segments), __FILE__, __LINE__)
void glatter_glCommandListSegmentsNV_debug(GLuint list, GLuint segments, const char* file, int line);
#define glCompileCommandListNV(list) glatter_glCompileCommandListNV_debug((list), __FILE__, __LINE__)
void glatter_glCompileCommandListNV_debug(GLuint list, const char* file, int line);
#define glCreateCommandListsNV(n, lists) glatter_glCreateCommandListsNV_debug((n), (lists), __FILE__, __LINE__)
void glatter_glCreateCommandListsNV_debug(GLsizei n, GLuint *lists, const char* file, int line);
#define glCreateStatesNV(n, states) glatter_glCreateStatesNV_debug((n), (states), __FILE__, __LINE__)
void glatter_glCreateStatesNV_debug(GLsizei n, GLuint *states, const char* file, int line);
#define glDeleteCommandListsNV(n, lists) glatter_glDeleteCommandListsNV_debug((n), (lists), __FILE__, __LINE__)
void glatter_glDeleteCommandListsNV_debug(GLsizei n, const GLuint *lists, const char* file, int line);
#define glDeleteStatesNV(n, states) glatter_glDeleteStatesNV_debug((n), (states), __FILE__, __LINE__)
void glatter_glDeleteStatesNV_debug(GLsizei n, const GLuint *states, const char* file, int line);
#define glDrawCommandsAddressNV(primitiveMode, indirects, sizes, count) glatter_glDrawCommandsAddressNV_debug((primitiveMode), (indirects), (sizes), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsAddressNV_debug(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count, const char* file, int line);
#define glDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count) glatter_glDrawCommandsNV_debug((primitiveMode), (buffer), (indirects), (sizes), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsNV_debug(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count, const char* file, int line);
#define glDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesAddressNV_debug((indirects), (sizes), (states), (fbos), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsStatesAddressNV_debug(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count, const char* file, int line);
#define glDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count) glatter_glDrawCommandsStatesNV_debug((buffer), (indirects), (sizes), (states), (fbos), (count), __FILE__, __LINE__)
void glatter_glDrawCommandsStatesNV_debug(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count, const char* file, int line);
#define glGetCommandHeaderNV(tokenID, size) glatter_glGetCommandHeaderNV_debug((tokenID), (size), __FILE__, __LINE__)
GLuint glatter_glGetCommandHeaderNV_debug(GLenum tokenID, GLuint size, const char* file, int line);
#define glGetStageIndexNV(shadertype) glatter_glGetStageIndexNV_debug((shadertype), __FILE__, __LINE__)
GLushort glatter_glGetStageIndexNV_debug(GLenum shadertype, const char* file, int line);
#define glIsCommandListNV(list) glatter_glIsCommandListNV_debug((list), __FILE__, __LINE__)
GLboolean glatter_glIsCommandListNV_debug(GLuint list, const char* file, int line);
#define glIsStateNV(state) glatter_glIsStateNV_debug((state), __FILE__, __LINE__)
GLboolean glatter_glIsStateNV_debug(GLuint state, const char* file, int line);
#define glListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count) glatter_glListDrawCommandsStatesClientNV_debug((list), (segment), (indirects), (sizes), (states), (fbos), (count), __FILE__, __LINE__)
void glatter_glListDrawCommandsStatesClientNV_debug(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count, const char* file, int line);
#define glStateCaptureNV(state, mode) glatter_glStateCaptureNV_debug((state), (mode), __FILE__, __LINE__)
void glatter_glStateCaptureNV_debug(GLuint state, GLenum mode, const char* file, int line);
#endif // defined(GL_NV_command_list)
#if defined(GL_NV_conditional_render)
#define glBeginConditionalRenderNV(id, mode) glatter_glBeginConditionalRenderNV_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRenderNV_debug(GLuint id, GLenum mode, const char* file, int line);
#define glEndConditionalRenderNV() glatter_glEndConditionalRenderNV_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRenderNV_debug(const char* file, int line);
#endif // defined(GL_NV_conditional_render)
#if defined(GL_NV_conservative_raster)
#define glSubpixelPrecisionBiasNV(xbits, ybits) glatter_glSubpixelPrecisionBiasNV_debug((xbits), (ybits), __FILE__, __LINE__)
void glatter_glSubpixelPrecisionBiasNV_debug(GLuint xbits, GLuint ybits, const char* file, int line);
#endif // defined(GL_NV_conservative_raster)
#if defined(GL_NV_conservative_raster_dilate)
#define glConservativeRasterParameterfNV(pname, value) glatter_glConservativeRasterParameterfNV_debug((pname), (value), __FILE__, __LINE__)
void glatter_glConservativeRasterParameterfNV_debug(GLenum pname, GLfloat value, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_dilate)
#if defined(GL_NV_conservative_raster_pre_snap_triangles)
#define glConservativeRasterParameteriNV(pname, param) glatter_glConservativeRasterParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glConservativeRasterParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_NV_conservative_raster_pre_snap_triangles)
#if defined(GL_NV_copy_image)
#define glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glCopyImageSubDataNV_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glCopyImageSubDataNV_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_NV_copy_image)
#if defined(GL_NV_depth_buffer_float)
#define glClearDepthdNV(depth) glatter_glClearDepthdNV_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthdNV_debug(GLdouble depth, const char* file, int line);
#define glDepthBoundsdNV(zmin, zmax) glatter_glDepthBoundsdNV_debug((zmin), (zmax), __FILE__, __LINE__)
void glatter_glDepthBoundsdNV_debug(GLdouble zmin, GLdouble zmax, const char* file, int line);
#define glDepthRangedNV(zNear, zFar) glatter_glDepthRangedNV_debug((zNear), (zFar), __FILE__, __LINE__)
void glatter_glDepthRangedNV_debug(GLdouble zNear, GLdouble zFar, const char* file, int line);
#endif // defined(GL_NV_depth_buffer_float)
#if defined(GL_NV_draw_texture)
#define glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) glatter_glDrawTextureNV_debug((texture), (sampler), (x0), (y0), (x1), (y1), (z), (s0), (t0), (s1), (t1), __FILE__, __LINE__)
void glatter_glDrawTextureNV_debug(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1, const char* file, int line);
#endif // defined(GL_NV_draw_texture)
#if defined(GL_NV_evaluators)
#define glEvalMapsNV(target, mode) glatter_glEvalMapsNV_debug((target), (mode), __FILE__, __LINE__)
void glatter_glEvalMapsNV_debug(GLenum target, GLenum mode, const char* file, int line);
#define glGetMapAttribParameterfvNV(target, index, pname, params) glatter_glGetMapAttribParameterfvNV_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMapAttribParameterfvNV_debug(GLenum target, GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMapAttribParameterivNV(target, index, pname, params) glatter_glGetMapAttribParameterivNV_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMapAttribParameterivNV_debug(GLenum target, GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points) glatter_glGetMapControlPointsNV_debug((target), (index), (type), (ustride), (vstride), (packed), (points), __FILE__, __LINE__)
void glatter_glGetMapControlPointsNV_debug(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points, const char* file, int line);
#define glGetMapParameterfvNV(target, pname, params) glatter_glGetMapParameterfvNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMapParameterfvNV_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetMapParameterivNV(target, pname, params) glatter_glGetMapParameterivNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetMapParameterivNV_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points) glatter_glMapControlPointsNV_debug((target), (index), (type), (ustride), (vstride), (uorder), (vorder), (packed), (points), __FILE__, __LINE__)
void glatter_glMapControlPointsNV_debug(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points, const char* file, int line);
#define glMapParameterfvNV(target, pname, params) glatter_glMapParameterfvNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glMapParameterfvNV_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glMapParameterivNV(target, pname, params) glatter_glMapParameterivNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glMapParameterivNV_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_NV_evaluators)
#if defined(GL_NV_explicit_multisample)
#define glGetMultisamplefvNV(pname, index, val) glatter_glGetMultisamplefvNV_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefvNV_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glSampleMaskIndexedNV(index, mask) glatter_glSampleMaskIndexedNV_debug((index), (mask), __FILE__, __LINE__)
void glatter_glSampleMaskIndexedNV_debug(GLuint index, GLbitfield mask, const char* file, int line);
#define glTexRenderbufferNV(target, renderbuffer) glatter_glTexRenderbufferNV_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glTexRenderbufferNV_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#endif // defined(GL_NV_explicit_multisample)
#if defined(GL_NV_fence)
#define glDeleteFencesNV(n, fences) glatter_glDeleteFencesNV_debug((n), (fences), __FILE__, __LINE__)
void glatter_glDeleteFencesNV_debug(GLsizei n, const GLuint *fences, const char* file, int line);
#define glFinishFenceNV(fence) glatter_glFinishFenceNV_debug((fence), __FILE__, __LINE__)
void glatter_glFinishFenceNV_debug(GLuint fence, const char* file, int line);
#define glGenFencesNV(n, fences) glatter_glGenFencesNV_debug((n), (fences), __FILE__, __LINE__)
void glatter_glGenFencesNV_debug(GLsizei n, GLuint *fences, const char* file, int line);
#define glGetFenceivNV(fence, pname, params) glatter_glGetFenceivNV_debug((fence), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFenceivNV_debug(GLuint fence, GLenum pname, GLint *params, const char* file, int line);
#define glIsFenceNV(fence) glatter_glIsFenceNV_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glIsFenceNV_debug(GLuint fence, const char* file, int line);
#define glSetFenceNV(fence, condition) glatter_glSetFenceNV_debug((fence), (condition), __FILE__, __LINE__)
void glatter_glSetFenceNV_debug(GLuint fence, GLenum condition, const char* file, int line);
#define glTestFenceNV(fence) glatter_glTestFenceNV_debug((fence), __FILE__, __LINE__)
GLboolean glatter_glTestFenceNV_debug(GLuint fence, const char* file, int line);
#endif // defined(GL_NV_fence)
#if defined(GL_NV_fragment_coverage_to_color)
#define glFragmentCoverageColorNV(color) glatter_glFragmentCoverageColorNV_debug((color), __FILE__, __LINE__)
void glatter_glFragmentCoverageColorNV_debug(GLuint color, const char* file, int line);
#endif // defined(GL_NV_fragment_coverage_to_color)
#if defined(GL_NV_fragment_program)
#define glGetProgramNamedParameterdvNV(id, len, name, params) glatter_glGetProgramNamedParameterdvNV_debug((id), (len), (name), (params), __FILE__, __LINE__)
void glatter_glGetProgramNamedParameterdvNV_debug(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params, const char* file, int line);
#define glGetProgramNamedParameterfvNV(id, len, name, params) glatter_glGetProgramNamedParameterfvNV_debug((id), (len), (name), (params), __FILE__, __LINE__)
void glatter_glGetProgramNamedParameterfvNV_debug(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params, const char* file, int line);
#define glProgramNamedParameter4dNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4dNV_debug((id), (len), (name), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramNamedParameter4dNV_debug(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramNamedParameter4dvNV(id, len, name, v) glatter_glProgramNamedParameter4dvNV_debug((id), (len), (name), (v), __FILE__, __LINE__)
void glatter_glProgramNamedParameter4dvNV_debug(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v, const char* file, int line);
#define glProgramNamedParameter4fNV(id, len, name, x, y, z, w) glatter_glProgramNamedParameter4fNV_debug((id), (len), (name), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramNamedParameter4fNV_debug(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glProgramNamedParameter4fvNV(id, len, name, v) glatter_glProgramNamedParameter4fvNV_debug((id), (len), (name), (v), __FILE__, __LINE__)
void glatter_glProgramNamedParameter4fvNV_debug(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_fragment_program)
#if defined(GL_NV_framebuffer_mixed_samples)
#define glCoverageModulationNV(components) glatter_glCoverageModulationNV_debug((components), __FILE__, __LINE__)
void glatter_glCoverageModulationNV_debug(GLenum components, const char* file, int line);
#define glCoverageModulationTableNV(n, v) glatter_glCoverageModulationTableNV_debug((n), (v), __FILE__, __LINE__)
void glatter_glCoverageModulationTableNV_debug(GLsizei n, const GLfloat *v, const char* file, int line);
#define glGetCoverageModulationTableNV(bufsize, v) glatter_glGetCoverageModulationTableNV_debug((bufsize), (v), __FILE__, __LINE__)
void glatter_glGetCoverageModulationTableNV_debug(GLsizei bufsize, GLfloat *v, const char* file, int line);
#endif // defined(GL_NV_framebuffer_mixed_samples)
#if defined(GL_NV_framebuffer_multisample_coverage)
#define glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) glatter_glRenderbufferStorageMultisampleCoverageNV_debug((target), (coverageSamples), (colorSamples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisampleCoverageNV_debug(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#endif // defined(GL_NV_framebuffer_multisample_coverage)
#if defined(GL_NV_geometry_program4)
#define glFramebufferTextureEXT(target, attachment, texture, level) glatter_glFramebufferTextureEXT_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTextureEXT_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTextureFaceEXT(target, attachment, texture, level, face) glatter_glFramebufferTextureFaceEXT_debug((target), (attachment), (texture), (level), (face), __FILE__, __LINE__)
void glatter_glFramebufferTextureFaceEXT_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face, const char* file, int line);
#define glProgramVertexLimitNV(target, limit) glatter_glProgramVertexLimitNV_debug((target), (limit), __FILE__, __LINE__)
void glatter_glProgramVertexLimitNV_debug(GLenum target, GLint limit, const char* file, int line);
#endif // defined(GL_NV_geometry_program4)
#if defined(GL_NV_gpu_program4)
#define glGetProgramEnvParameterIivNV(target, index, params) glatter_glGetProgramEnvParameterIivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramEnvParameterIivNV_debug(GLenum target, GLuint index, GLint *params, const char* file, int line);
#define glGetProgramEnvParameterIuivNV(target, index, params) glatter_glGetProgramEnvParameterIuivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramEnvParameterIuivNV_debug(GLenum target, GLuint index, GLuint *params, const char* file, int line);
#define glGetProgramLocalParameterIivNV(target, index, params) glatter_glGetProgramLocalParameterIivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramLocalParameterIivNV_debug(GLenum target, GLuint index, GLint *params, const char* file, int line);
#define glGetProgramLocalParameterIuivNV(target, index, params) glatter_glGetProgramLocalParameterIuivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glGetProgramLocalParameterIuivNV_debug(GLenum target, GLuint index, GLuint *params, const char* file, int line);
#define glProgramEnvParameterI4iNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4iNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramEnvParameterI4iNV_debug(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glProgramEnvParameterI4ivNV(target, index, params) glatter_glProgramEnvParameterI4ivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameterI4ivNV_debug(GLenum target, GLuint index, const GLint *params, const char* file, int line);
#define glProgramEnvParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramEnvParameterI4uiNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramEnvParameterI4uiNV_debug(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glProgramEnvParameterI4uivNV(target, index, params) glatter_glProgramEnvParameterI4uivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParameterI4uivNV_debug(GLenum target, GLuint index, const GLuint *params, const char* file, int line);
#define glProgramEnvParametersI4ivNV(target, index, count, params) glatter_glProgramEnvParametersI4ivNV_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParametersI4ivNV_debug(GLenum target, GLuint index, GLsizei count, const GLint *params, const char* file, int line);
#define glProgramEnvParametersI4uivNV(target, index, count, params) glatter_glProgramEnvParametersI4uivNV_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramEnvParametersI4uivNV_debug(GLenum target, GLuint index, GLsizei count, const GLuint *params, const char* file, int line);
#define glProgramLocalParameterI4iNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4iNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramLocalParameterI4iNV_debug(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glProgramLocalParameterI4ivNV(target, index, params) glatter_glProgramLocalParameterI4ivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameterI4ivNV_debug(GLenum target, GLuint index, const GLint *params, const char* file, int line);
#define glProgramLocalParameterI4uiNV(target, index, x, y, z, w) glatter_glProgramLocalParameterI4uiNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramLocalParameterI4uiNV_debug(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glProgramLocalParameterI4uivNV(target, index, params) glatter_glProgramLocalParameterI4uivNV_debug((target), (index), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParameterI4uivNV_debug(GLenum target, GLuint index, const GLuint *params, const char* file, int line);
#define glProgramLocalParametersI4ivNV(target, index, count, params) glatter_glProgramLocalParametersI4ivNV_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParametersI4ivNV_debug(GLenum target, GLuint index, GLsizei count, const GLint *params, const char* file, int line);
#define glProgramLocalParametersI4uivNV(target, index, count, params) glatter_glProgramLocalParametersI4uivNV_debug((target), (index), (count), (params), __FILE__, __LINE__)
void glatter_glProgramLocalParametersI4uivNV_debug(GLenum target, GLuint index, GLsizei count, const GLuint *params, const char* file, int line);
#endif // defined(GL_NV_gpu_program4)
#if defined(GL_NV_gpu_program5)
#define glGetProgramSubroutineParameteruivNV(target, index, param) glatter_glGetProgramSubroutineParameteruivNV_debug((target), (index), (param), __FILE__, __LINE__)
void glatter_glGetProgramSubroutineParameteruivNV_debug(GLenum target, GLuint index, GLuint *param, const char* file, int line);
#define glProgramSubroutineParametersuivNV(target, count, params) glatter_glProgramSubroutineParametersuivNV_debug((target), (count), (params), __FILE__, __LINE__)
void glatter_glProgramSubroutineParametersuivNV_debug(GLenum target, GLsizei count, const GLuint *params, const char* file, int line);
#endif // defined(GL_NV_gpu_program5)
#if defined(GL_NV_half_float)
#define glColor3hNV(red, green, blue) glatter_glColor3hNV_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3hNV_debug(GLhalfNV red, GLhalfNV green, GLhalfNV blue, const char* file, int line);
#define glColor3hvNV(v) glatter_glColor3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glColor3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glColor4hNV(red, green, blue, alpha) glatter_glColor4hNV_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4hNV_debug(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha, const char* file, int line);
#define glColor4hvNV(v) glatter_glColor4hvNV_debug((v), __FILE__, __LINE__)
void glatter_glColor4hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glFogCoordhNV(fog) glatter_glFogCoordhNV_debug((fog), __FILE__, __LINE__)
void glatter_glFogCoordhNV_debug(GLhalfNV fog, const char* file, int line);
#define glFogCoordhvNV(fog) glatter_glFogCoordhvNV_debug((fog), __FILE__, __LINE__)
void glatter_glFogCoordhvNV_debug(const GLhalfNV *fog, const char* file, int line);
#define glMultiTexCoord1hNV(target, s) glatter_glMultiTexCoord1hNV_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1hNV_debug(GLenum target, GLhalfNV s, const char* file, int line);
#define glMultiTexCoord1hvNV(target, v) glatter_glMultiTexCoord1hvNV_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1hvNV_debug(GLenum target, const GLhalfNV *v, const char* file, int line);
#define glMultiTexCoord2hNV(target, s, t) glatter_glMultiTexCoord2hNV_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2hNV_debug(GLenum target, GLhalfNV s, GLhalfNV t, const char* file, int line);
#define glMultiTexCoord2hvNV(target, v) glatter_glMultiTexCoord2hvNV_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2hvNV_debug(GLenum target, const GLhalfNV *v, const char* file, int line);
#define glMultiTexCoord3hNV(target, s, t, r) glatter_glMultiTexCoord3hNV_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3hNV_debug(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, const char* file, int line);
#define glMultiTexCoord3hvNV(target, v) glatter_glMultiTexCoord3hvNV_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3hvNV_debug(GLenum target, const GLhalfNV *v, const char* file, int line);
#define glMultiTexCoord4hNV(target, s, t, r, q) glatter_glMultiTexCoord4hNV_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4hNV_debug(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q, const char* file, int line);
#define glMultiTexCoord4hvNV(target, v) glatter_glMultiTexCoord4hvNV_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4hvNV_debug(GLenum target, const GLhalfNV *v, const char* file, int line);
#define glNormal3hNV(nx, ny, nz) glatter_glNormal3hNV_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3hNV_debug(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz, const char* file, int line);
#define glNormal3hvNV(v) glatter_glNormal3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glNormal3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glSecondaryColor3hNV(red, green, blue) glatter_glSecondaryColor3hNV_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3hNV_debug(GLhalfNV red, GLhalfNV green, GLhalfNV blue, const char* file, int line);
#define glSecondaryColor3hvNV(v) glatter_glSecondaryColor3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glTexCoord1hNV(s) glatter_glTexCoord1hNV_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1hNV_debug(GLhalfNV s, const char* file, int line);
#define glTexCoord1hvNV(v) glatter_glTexCoord1hvNV_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord1hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glTexCoord2hNV(s, t) glatter_glTexCoord2hNV_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2hNV_debug(GLhalfNV s, GLhalfNV t, const char* file, int line);
#define glTexCoord2hvNV(v) glatter_glTexCoord2hvNV_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord2hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glTexCoord3hNV(s, t, r) glatter_glTexCoord3hNV_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3hNV_debug(GLhalfNV s, GLhalfNV t, GLhalfNV r, const char* file, int line);
#define glTexCoord3hvNV(v) glatter_glTexCoord3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glTexCoord4hNV(s, t, r, q) glatter_glTexCoord4hNV_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4hNV_debug(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q, const char* file, int line);
#define glTexCoord4hvNV(v) glatter_glTexCoord4hvNV_debug((v), __FILE__, __LINE__)
void glatter_glTexCoord4hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glVertex2hNV(x, y) glatter_glVertex2hNV_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2hNV_debug(GLhalfNV x, GLhalfNV y, const char* file, int line);
#define glVertex2hvNV(v) glatter_glVertex2hvNV_debug((v), __FILE__, __LINE__)
void glatter_glVertex2hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glVertex3hNV(x, y, z) glatter_glVertex3hNV_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3hNV_debug(GLhalfNV x, GLhalfNV y, GLhalfNV z, const char* file, int line);
#define glVertex3hvNV(v) glatter_glVertex3hvNV_debug((v), __FILE__, __LINE__)
void glatter_glVertex3hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glVertex4hNV(x, y, z, w) glatter_glVertex4hNV_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4hNV_debug(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w, const char* file, int line);
#define glVertex4hvNV(v) glatter_glVertex4hvNV_debug((v), __FILE__, __LINE__)
void glatter_glVertex4hvNV_debug(const GLhalfNV *v, const char* file, int line);
#define glVertexAttrib1hNV(index, x) glatter_glVertexAttrib1hNV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1hNV_debug(GLuint index, GLhalfNV x, const char* file, int line);
#define glVertexAttrib1hvNV(index, v) glatter_glVertexAttrib1hvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1hvNV_debug(GLuint index, const GLhalfNV *v, const char* file, int line);
#define glVertexAttrib2hNV(index, x, y) glatter_glVertexAttrib2hNV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2hNV_debug(GLuint index, GLhalfNV x, GLhalfNV y, const char* file, int line);
#define glVertexAttrib2hvNV(index, v) glatter_glVertexAttrib2hvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2hvNV_debug(GLuint index, const GLhalfNV *v, const char* file, int line);
#define glVertexAttrib3hNV(index, x, y, z) glatter_glVertexAttrib3hNV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3hNV_debug(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, const char* file, int line);
#define glVertexAttrib3hvNV(index, v) glatter_glVertexAttrib3hvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3hvNV_debug(GLuint index, const GLhalfNV *v, const char* file, int line);
#define glVertexAttrib4hNV(index, x, y, z, w) glatter_glVertexAttrib4hNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4hNV_debug(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w, const char* file, int line);
#define glVertexAttrib4hvNV(index, v) glatter_glVertexAttrib4hvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4hvNV_debug(GLuint index, const GLhalfNV *v, const char* file, int line);
#define glVertexAttribs1hvNV(index, n, v) glatter_glVertexAttribs1hvNV_debug((index), (n), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs1hvNV_debug(GLuint index, GLsizei n, const GLhalfNV *v, const char* file, int line);
#define glVertexAttribs2hvNV(index, n, v) glatter_glVertexAttribs2hvNV_debug((index), (n), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs2hvNV_debug(GLuint index, GLsizei n, const GLhalfNV *v, const char* file, int line);
#define glVertexAttribs3hvNV(index, n, v) glatter_glVertexAttribs3hvNV_debug((index), (n), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs3hvNV_debug(GLuint index, GLsizei n, const GLhalfNV *v, const char* file, int line);
#define glVertexAttribs4hvNV(index, n, v) glatter_glVertexAttribs4hvNV_debug((index), (n), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4hvNV_debug(GLuint index, GLsizei n, const GLhalfNV *v, const char* file, int line);
#define glVertexWeighthNV(weight) glatter_glVertexWeighthNV_debug((weight), __FILE__, __LINE__)
void glatter_glVertexWeighthNV_debug(GLhalfNV weight, const char* file, int line);
#define glVertexWeighthvNV(weight) glatter_glVertexWeighthvNV_debug((weight), __FILE__, __LINE__)
void glatter_glVertexWeighthvNV_debug(const GLhalfNV *weight, const char* file, int line);
#endif // defined(GL_NV_half_float)
#if defined(GL_NV_internalformat_sample_query)
#define glGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params) glatter_glGetInternalformatSampleivNV_debug((target), (internalformat), (samples), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformatSampleivNV_debug(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#endif // defined(GL_NV_internalformat_sample_query)
#if defined(GL_NV_occlusion_query)
#define glBeginOcclusionQueryNV(id) glatter_glBeginOcclusionQueryNV_debug((id), __FILE__, __LINE__)
void glatter_glBeginOcclusionQueryNV_debug(GLuint id, const char* file, int line);
#define glDeleteOcclusionQueriesNV(n, ids) glatter_glDeleteOcclusionQueriesNV_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteOcclusionQueriesNV_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndOcclusionQueryNV() glatter_glEndOcclusionQueryNV_debug(__FILE__, __LINE__)
void glatter_glEndOcclusionQueryNV_debug(const char* file, int line);
#define glGenOcclusionQueriesNV(n, ids) glatter_glGenOcclusionQueriesNV_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenOcclusionQueriesNV_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetOcclusionQueryivNV(id, pname, params) glatter_glGetOcclusionQueryivNV_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetOcclusionQueryivNV_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetOcclusionQueryuivNV(id, pname, params) glatter_glGetOcclusionQueryuivNV_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetOcclusionQueryuivNV_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glIsOcclusionQueryNV(id) glatter_glIsOcclusionQueryNV_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsOcclusionQueryNV_debug(GLuint id, const char* file, int line);
#endif // defined(GL_NV_occlusion_query)
#if defined(GL_NV_parameter_buffer_object)
#define glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIivNV_debug((target), (bindingIndex), (wordIndex), (count), (params), __FILE__, __LINE__)
void glatter_glProgramBufferParametersIivNV_debug(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params, const char* file, int line);
#define glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersIuivNV_debug((target), (bindingIndex), (wordIndex), (count), (params), __FILE__, __LINE__)
void glatter_glProgramBufferParametersIuivNV_debug(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params, const char* file, int line);
#define glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params) glatter_glProgramBufferParametersfvNV_debug((target), (bindingIndex), (wordIndex), (count), (params), __FILE__, __LINE__)
void glatter_glProgramBufferParametersfvNV_debug(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params, const char* file, int line);
#endif // defined(GL_NV_parameter_buffer_object)
#if defined(GL_NV_path_rendering)
#define glCopyPathNV(resultPath, srcPath) glatter_glCopyPathNV_debug((resultPath), (srcPath), __FILE__, __LINE__)
void glatter_glCopyPathNV_debug(GLuint resultPath, GLuint srcPath, const char* file, int line);
#define glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverFillPathNV(path, coverMode) glatter_glCoverFillPathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverFillPathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) glatter_glCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glCoverStrokePathNV(path, coverMode) glatter_glCoverStrokePathNV_debug((path), (coverMode), __FILE__, __LINE__)
void glatter_glCoverStrokePathNV_debug(GLuint path, GLenum coverMode, const char* file, int line);
#define glDeletePathsNV(path, range) glatter_glDeletePathsNV_debug((path), (range), __FILE__, __LINE__)
void glatter_glDeletePathsNV_debug(GLuint path, GLsizei range, const char* file, int line);
#define glGenPathsNV(range) glatter_glGenPathsNV_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenPathsNV_debug(GLsizei range, const char* file, int line);
#define glGetPathColorGenfvNV(color, pname, value) glatter_glGetPathColorGenfvNV_debug((color), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathColorGenfvNV_debug(GLenum color, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathColorGenivNV(color, pname, value) glatter_glGetPathColorGenivNV_debug((color), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathColorGenivNV_debug(GLenum color, GLenum pname, GLint *value, const char* file, int line);
#define glGetPathCommandsNV(path, commands) glatter_glGetPathCommandsNV_debug((path), (commands), __FILE__, __LINE__)
void glatter_glGetPathCommandsNV_debug(GLuint path, GLubyte *commands, const char* file, int line);
#define glGetPathCoordsNV(path, coords) glatter_glGetPathCoordsNV_debug((path), (coords), __FILE__, __LINE__)
void glatter_glGetPathCoordsNV_debug(GLuint path, GLfloat *coords, const char* file, int line);
#define glGetPathDashArrayNV(path, dashArray) glatter_glGetPathDashArrayNV_debug((path), (dashArray), __FILE__, __LINE__)
void glatter_glGetPathDashArrayNV_debug(GLuint path, GLfloat *dashArray, const char* file, int line);
#define glGetPathLengthNV(path, startSegment, numSegments) glatter_glGetPathLengthNV_debug((path), (startSegment), (numSegments), __FILE__, __LINE__)
GLfloat glatter_glGetPathLengthNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, const char* file, int line);
#define glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) glatter_glGetPathMetricRangeNV_debug((metricQueryMask), (firstPathName), (numPaths), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricRangeNV_debug(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) glatter_glGetPathMetricsNV_debug((metricQueryMask), (numPaths), (pathNameType), (paths), (pathBase), (stride), (metrics), __FILE__, __LINE__)
void glatter_glGetPathMetricsNV_debug(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics, const char* file, int line);
#define glGetPathParameterfvNV(path, pname, value) glatter_glGetPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterfvNV_debug(GLuint path, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathParameterivNV(path, pname, value) glatter_glGetPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathParameterivNV_debug(GLuint path, GLenum pname, GLint *value, const char* file, int line);
#define glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) glatter_glGetPathSpacingNV_debug((pathListMode), (numPaths), (pathNameType), (paths), (pathBase), (advanceScale), (kerningScale), (transformType), (returnedSpacing), __FILE__, __LINE__)
void glatter_glGetPathSpacingNV_debug(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing, const char* file, int line);
#define glGetPathTexGenfvNV(texCoordSet, pname, value) glatter_glGetPathTexGenfvNV_debug((texCoordSet), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathTexGenfvNV_debug(GLenum texCoordSet, GLenum pname, GLfloat *value, const char* file, int line);
#define glGetPathTexGenivNV(texCoordSet, pname, value) glatter_glGetPathTexGenivNV_debug((texCoordSet), (pname), (value), __FILE__, __LINE__)
void glatter_glGetPathTexGenivNV_debug(GLenum texCoordSet, GLenum pname, GLint *value, const char* file, int line);
#define glGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourcefvNV_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourcefvNV_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params, const char* file, int line);
#define glInterpolatePathsNV(resultPath, pathA, pathB, weight) glatter_glInterpolatePathsNV_debug((resultPath), (pathA), (pathB), (weight), __FILE__, __LINE__)
void glatter_glInterpolatePathsNV_debug(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight, const char* file, int line);
#define glIsPathNV(path) glatter_glIsPathNV_debug((path), __FILE__, __LINE__)
GLboolean glatter_glIsPathNV_debug(GLuint path, const char* file, int line);
#define glIsPointInFillPathNV(path, mask, x, y) glatter_glIsPointInFillPathNV_debug((path), (mask), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInFillPathNV_debug(GLuint path, GLuint mask, GLfloat x, GLfloat y, const char* file, int line);
#define glIsPointInStrokePathNV(path, x, y) glatter_glIsPointInStrokePathNV_debug((path), (x), (y), __FILE__, __LINE__)
GLboolean glatter_glIsPointInStrokePathNV_debug(GLuint path, GLfloat x, GLfloat y, const char* file, int line);
#define glMatrixLoad3x2fNV(matrixMode, m) glatter_glMatrixLoad3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoad3x3fNV(matrixMode, m) glatter_glMatrixLoad3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoad3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixLoadTranspose3x3fNV(matrixMode, m) glatter_glMatrixLoadTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixLoadTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x2fNV(matrixMode, m) glatter_glMatrixMult3x2fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x2fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMult3x3fNV(matrixMode, m) glatter_glMatrixMult3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMult3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glMatrixMultTranspose3x3fNV(matrixMode, m) glatter_glMatrixMultTranspose3x3fNV_debug((matrixMode), (m), __FILE__, __LINE__)
void glatter_glMatrixMultTranspose3x3fNV_debug(GLenum matrixMode, const GLfloat *m, const char* file, int line);
#define glPathColorGenNV(color, genMode, colorFormat, coeffs) glatter_glPathColorGenNV_debug((color), (genMode), (colorFormat), (coeffs), __FILE__, __LINE__)
void glatter_glPathColorGenNV_debug(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs, const char* file, int line);
#define glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) glatter_glPathCommandsNV_debug((path), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCommandsNV_debug(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoordsNV(path, numCoords, coordType, coords) glatter_glPathCoordsNV_debug((path), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathCoordsNV_debug(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathCoverDepthFuncNV(func) glatter_glPathCoverDepthFuncNV_debug((func), __FILE__, __LINE__)
void glatter_glPathCoverDepthFuncNV_debug(GLenum func, const char* file, int line);
#define glPathDashArrayNV(path, dashCount, dashArray) glatter_glPathDashArrayNV_debug((path), (dashCount), (dashArray), __FILE__, __LINE__)
void glatter_glPathDashArrayNV_debug(GLuint path, GLsizei dashCount, const GLfloat *dashArray, const char* file, int line);
#define glPathFogGenNV(genMode) glatter_glPathFogGenNV_debug((genMode), __FILE__, __LINE__)
void glatter_glPathFogGenNV_debug(GLenum genMode, const char* file, int line);
#define glPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) glatter_glPathGlyphIndexRangeNV_debug((fontTarget), (fontName), (fontStyle), (pathParameterTemplate), (emScale), (baseAndCount), __FILE__, __LINE__)
GLenum glatter_glPathGlyphIndexRangeNV_debug(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2], const char* file, int line);
#define glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphRangeNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (firstGlyph), (numGlyphs), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphRangeNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) glatter_glPathGlyphsNV_debug((firstPathName), (fontTarget), (fontName), (fontStyle), (numGlyphs), (type), (charcodes), (handleMissingGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
void glatter_glPathGlyphsNV_debug(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) glatter_glPathMemoryGlyphIndexArrayNV_debug((firstPathName), (fontTarget), (fontSize), (fontData), (faceIndex), (firstGlyphIndex), (numGlyphs), (pathParameterTemplate), (emScale), __FILE__, __LINE__)
GLenum glatter_glPathMemoryGlyphIndexArrayNV_debug(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale, const char* file, int line);
#define glPathParameterfNV(path, pname, value) glatter_glPathParameterfNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfNV_debug(GLuint path, GLenum pname, GLfloat value, const char* file, int line);
#define glPathParameterfvNV(path, pname, value) glatter_glPathParameterfvNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterfvNV_debug(GLuint path, GLenum pname, const GLfloat *value, const char* file, int line);
#define glPathParameteriNV(path, pname, value) glatter_glPathParameteriNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameteriNV_debug(GLuint path, GLenum pname, GLint value, const char* file, int line);
#define glPathParameterivNV(path, pname, value) glatter_glPathParameterivNV_debug((path), (pname), (value), __FILE__, __LINE__)
void glatter_glPathParameterivNV_debug(GLuint path, GLenum pname, const GLint *value, const char* file, int line);
#define glPathStencilDepthOffsetNV(factor, units) glatter_glPathStencilDepthOffsetNV_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPathStencilDepthOffsetNV_debug(GLfloat factor, GLfloat units, const char* file, int line);
#define glPathStencilFuncNV(func, ref, mask) glatter_glPathStencilFuncNV_debug((func), (ref), (mask), __FILE__, __LINE__)
void glatter_glPathStencilFuncNV_debug(GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glPathStringNV(path, format, length, pathString) glatter_glPathStringNV_debug((path), (format), (length), (pathString), __FILE__, __LINE__)
void glatter_glPathStringNV_debug(GLuint path, GLenum format, GLsizei length, const void *pathString, const char* file, int line);
#define glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) glatter_glPathSubCommandsNV_debug((path), (commandStart), (commandsToDelete), (numCommands), (commands), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCommandsNV_debug(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) glatter_glPathSubCoordsNV_debug((path), (coordStart), (numCoords), (coordType), (coords), __FILE__, __LINE__)
void glatter_glPathSubCoordsNV_debug(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords, const char* file, int line);
#define glPathTexGenNV(texCoordSet, genMode, components, coeffs) glatter_glPathTexGenNV_debug((texCoordSet), (genMode), (components), (coeffs), __FILE__, __LINE__)
void glatter_glPathTexGenNV_debug(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs, const char* file, int line);
#define glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) glatter_glPointAlongPathNV_debug((path), (startSegment), (numSegments), (distance), (x), (y), (tangentX), (tangentY), __FILE__, __LINE__)
GLboolean glatter_glPointAlongPathNV_debug(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY, const char* file, int line);
#define glProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs) glatter_glProgramPathFragmentInputGenNV_debug((program), (location), (genMode), (components), (coeffs), __FILE__, __LINE__)
void glatter_glProgramPathFragmentInputGenNV_debug(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs, const char* file, int line);
#define glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) glatter_glStencilFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilFillPathNV(path, fillMode, mask) glatter_glStencilFillPathNV_debug((path), (fillMode), (mask), __FILE__, __LINE__)
void glatter_glStencilFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, const char* file, int line);
#define glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) glatter_glStencilStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilStrokePathNV(path, reference, mask) glatter_glStencilStrokePathNV_debug((path), (reference), (mask), __FILE__, __LINE__)
void glatter_glStencilStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, const char* file, int line);
#define glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverFillPathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (fillMode), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode) glatter_glStencilThenCoverFillPathNV_debug((path), (fillMode), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverFillPathNV_debug(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode, const char* file, int line);
#define glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues) glatter_glStencilThenCoverStrokePathInstancedNV_debug((numPaths), (pathNameType), (paths), (pathBase), (reference), (mask), (coverMode), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathInstancedNV_debug(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glStencilThenCoverStrokePathNV(path, reference, mask, coverMode) glatter_glStencilThenCoverStrokePathNV_debug((path), (reference), (mask), (coverMode), __FILE__, __LINE__)
void glatter_glStencilThenCoverStrokePathNV_debug(GLuint path, GLint reference, GLuint mask, GLenum coverMode, const char* file, int line);
#define glTransformPathNV(resultPath, srcPath, transformType, transformValues) glatter_glTransformPathNV_debug((resultPath), (srcPath), (transformType), (transformValues), __FILE__, __LINE__)
void glatter_glTransformPathNV_debug(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues, const char* file, int line);
#define glWeightPathsNV(resultPath, numPaths, paths, weights) glatter_glWeightPathsNV_debug((resultPath), (numPaths), (paths), (weights), __FILE__, __LINE__)
void glatter_glWeightPathsNV_debug(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights, const char* file, int line);
#endif // defined(GL_NV_path_rendering)
#if defined(GL_NV_pixel_data_range)
#define glFlushPixelDataRangeNV(target) glatter_glFlushPixelDataRangeNV_debug((target), __FILE__, __LINE__)
void glatter_glFlushPixelDataRangeNV_debug(GLenum target, const char* file, int line);
#define glPixelDataRangeNV(target, length, pointer) glatter_glPixelDataRangeNV_debug((target), (length), (pointer), __FILE__, __LINE__)
void glatter_glPixelDataRangeNV_debug(GLenum target, GLsizei length, const void *pointer, const char* file, int line);
#endif // defined(GL_NV_pixel_data_range)
#if defined(GL_NV_point_sprite)
#define glPointParameteriNV(pname, param) glatter_glPointParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointParameterivNV(pname, params) glatter_glPointParameterivNV_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterivNV_debug(GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_NV_point_sprite)
#if defined(GL_NV_present_video)
#define glGetVideoi64vNV(video_slot, pname, params) glatter_glGetVideoi64vNV_debug((video_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoi64vNV_debug(GLuint video_slot, GLenum pname, GLint64EXT *params, const char* file, int line);
#define glGetVideoivNV(video_slot, pname, params) glatter_glGetVideoivNV_debug((video_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoivNV_debug(GLuint video_slot, GLenum pname, GLint *params, const char* file, int line);
#define glGetVideoui64vNV(video_slot, pname, params) glatter_glGetVideoui64vNV_debug((video_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoui64vNV_debug(GLuint video_slot, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glGetVideouivNV(video_slot, pname, params) glatter_glGetVideouivNV_debug((video_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideouivNV_debug(GLuint video_slot, GLenum pname, GLuint *params, const char* file, int line);
#define glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3) glatter_glPresentFrameDualFillNV_debug((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (target1), (fill1), (target2), (fill2), (target3), (fill3), __FILE__, __LINE__)
void glatter_glPresentFrameDualFillNV_debug(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3, const char* file, int line);
#define glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1) glatter_glPresentFrameKeyedNV_debug((video_slot), (minPresentTime), (beginPresentTimeId), (presentDurationId), (type), (target0), (fill0), (key0), (target1), (fill1), (key1), __FILE__, __LINE__)
void glatter_glPresentFrameKeyedNV_debug(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1, const char* file, int line);
#endif // defined(GL_NV_present_video)
#if defined(GL_NV_primitive_restart)
#define glPrimitiveRestartIndexNV(index) glatter_glPrimitiveRestartIndexNV_debug((index), __FILE__, __LINE__)
void glatter_glPrimitiveRestartIndexNV_debug(GLuint index, const char* file, int line);
#define glPrimitiveRestartNV() glatter_glPrimitiveRestartNV_debug(__FILE__, __LINE__)
void glatter_glPrimitiveRestartNV_debug(const char* file, int line);
#endif // defined(GL_NV_primitive_restart)
#if defined(GL_NV_register_combiners)
#define glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage) glatter_glCombinerInputNV_debug((stage), (portion), (variable), (input), (mapping), (componentUsage), __FILE__, __LINE__)
void glatter_glCombinerInputNV_debug(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage, const char* file, int line);
#define glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) glatter_glCombinerOutputNV_debug((stage), (portion), (abOutput), (cdOutput), (sumOutput), (scale), (bias), (abDotProduct), (cdDotProduct), (muxSum), __FILE__, __LINE__)
void glatter_glCombinerOutputNV_debug(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum, const char* file, int line);
#define glCombinerParameterfNV(pname, param) glatter_glCombinerParameterfNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glCombinerParameterfNV_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glCombinerParameterfvNV(pname, params) glatter_glCombinerParameterfvNV_debug((pname), (params), __FILE__, __LINE__)
void glatter_glCombinerParameterfvNV_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glCombinerParameteriNV(pname, param) glatter_glCombinerParameteriNV_debug((pname), (param), __FILE__, __LINE__)
void glatter_glCombinerParameteriNV_debug(GLenum pname, GLint param, const char* file, int line);
#define glCombinerParameterivNV(pname, params) glatter_glCombinerParameterivNV_debug((pname), (params), __FILE__, __LINE__)
void glatter_glCombinerParameterivNV_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glFinalCombinerInputNV(variable, input, mapping, componentUsage) glatter_glFinalCombinerInputNV_debug((variable), (input), (mapping), (componentUsage), __FILE__, __LINE__)
void glatter_glFinalCombinerInputNV_debug(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage, const char* file, int line);
#define glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterfvNV_debug((stage), (portion), (variable), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerInputParameterfvNV_debug(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetCombinerInputParameterivNV(stage, portion, variable, pname, params) glatter_glGetCombinerInputParameterivNV_debug((stage), (portion), (variable), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerInputParameterivNV_debug(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params, const char* file, int line);
#define glGetCombinerOutputParameterfvNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterfvNV_debug((stage), (portion), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerOutputParameterfvNV_debug(GLenum stage, GLenum portion, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetCombinerOutputParameterivNV(stage, portion, pname, params) glatter_glGetCombinerOutputParameterivNV_debug((stage), (portion), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerOutputParameterivNV_debug(GLenum stage, GLenum portion, GLenum pname, GLint *params, const char* file, int line);
#define glGetFinalCombinerInputParameterfvNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterfvNV_debug((variable), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFinalCombinerInputParameterfvNV_debug(GLenum variable, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetFinalCombinerInputParameterivNV(variable, pname, params) glatter_glGetFinalCombinerInputParameterivNV_debug((variable), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFinalCombinerInputParameterivNV_debug(GLenum variable, GLenum pname, GLint *params, const char* file, int line);
#endif // defined(GL_NV_register_combiners)
#if defined(GL_NV_register_combiners2)
#define glCombinerStageParameterfvNV(stage, pname, params) glatter_glCombinerStageParameterfvNV_debug((stage), (pname), (params), __FILE__, __LINE__)
void glatter_glCombinerStageParameterfvNV_debug(GLenum stage, GLenum pname, const GLfloat *params, const char* file, int line);
#define glGetCombinerStageParameterfvNV(stage, pname, params) glatter_glGetCombinerStageParameterfvNV_debug((stage), (pname), (params), __FILE__, __LINE__)
void glatter_glGetCombinerStageParameterfvNV_debug(GLenum stage, GLenum pname, GLfloat *params, const char* file, int line);
#endif // defined(GL_NV_register_combiners2)
#if defined(GL_NV_sample_locations)
#define glFramebufferSampleLocationsfvNV(target, start, count, v) glatter_glFramebufferSampleLocationsfvNV_debug((target), (start), (count), (v), __FILE__, __LINE__)
void glatter_glFramebufferSampleLocationsfvNV_debug(GLenum target, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v) glatter_glNamedFramebufferSampleLocationsfvNV_debug((framebuffer), (start), (count), (v), __FILE__, __LINE__)
void glatter_glNamedFramebufferSampleLocationsfvNV_debug(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v, const char* file, int line);
#define glResolveDepthValuesNV() glatter_glResolveDepthValuesNV_debug(__FILE__, __LINE__)
void glatter_glResolveDepthValuesNV_debug(const char* file, int line);
#endif // defined(GL_NV_sample_locations)
#if defined(GL_NV_shader_buffer_load)
#define glGetBufferParameterui64vNV(target, pname, params) glatter_glGetBufferParameterui64vNV_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameterui64vNV_debug(GLenum target, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glGetIntegerui64vNV(value, result) glatter_glGetIntegerui64vNV_debug((value), (result), __FILE__, __LINE__)
void glatter_glGetIntegerui64vNV_debug(GLenum value, GLuint64EXT *result, const char* file, int line);
#define glGetNamedBufferParameterui64vNV(buffer, pname, params) glatter_glGetNamedBufferParameterui64vNV_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameterui64vNV_debug(GLuint buffer, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glIsBufferResidentNV(target) glatter_glIsBufferResidentNV_debug((target), __FILE__, __LINE__)
GLboolean glatter_glIsBufferResidentNV_debug(GLenum target, const char* file, int line);
#define glIsNamedBufferResidentNV(buffer) glatter_glIsNamedBufferResidentNV_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsNamedBufferResidentNV_debug(GLuint buffer, const char* file, int line);
#define glMakeBufferNonResidentNV(target) glatter_glMakeBufferNonResidentNV_debug((target), __FILE__, __LINE__)
void glatter_glMakeBufferNonResidentNV_debug(GLenum target, const char* file, int line);
#define glMakeBufferResidentNV(target, access) glatter_glMakeBufferResidentNV_debug((target), (access), __FILE__, __LINE__)
void glatter_glMakeBufferResidentNV_debug(GLenum target, GLenum access, const char* file, int line);
#define glMakeNamedBufferNonResidentNV(buffer) glatter_glMakeNamedBufferNonResidentNV_debug((buffer), __FILE__, __LINE__)
void glatter_glMakeNamedBufferNonResidentNV_debug(GLuint buffer, const char* file, int line);
#define glMakeNamedBufferResidentNV(buffer, access) glatter_glMakeNamedBufferResidentNV_debug((buffer), (access), __FILE__, __LINE__)
void glatter_glMakeNamedBufferResidentNV_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glProgramUniformui64NV(program, location, value) glatter_glProgramUniformui64NV_debug((program), (location), (value), __FILE__, __LINE__)
void glatter_glProgramUniformui64NV_debug(GLuint program, GLint location, GLuint64EXT value, const char* file, int line);
#define glProgramUniformui64vNV(program, location, count, value) glatter_glProgramUniformui64vNV_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniformui64vNV_debug(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#define glUniformui64NV(location, value) glatter_glUniformui64NV_debug((location), (value), __FILE__, __LINE__)
void glatter_glUniformui64NV_debug(GLint location, GLuint64EXT value, const char* file, int line);
#define glUniformui64vNV(location, count, value) glatter_glUniformui64vNV_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniformui64vNV_debug(GLint location, GLsizei count, const GLuint64EXT *value, const char* file, int line);
#endif // defined(GL_NV_shader_buffer_load)
#if defined(GL_NV_texture_barrier)
#define glTextureBarrierNV() glatter_glTextureBarrierNV_debug(__FILE__, __LINE__)
void glatter_glTextureBarrierNV_debug(const char* file, int line);
#endif // defined(GL_NV_texture_barrier)
#if defined(GL_NV_texture_multisample)
#define glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTexImage2DMultisampleCoverageNV_debug((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTexImage2DMultisampleCoverageNV_debug(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, const char* file, int line);
#define glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTexImage3DMultisampleCoverageNV_debug((target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTexImage3DMultisampleCoverageNV_debug(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, const char* file, int line);
#define glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleCoverageNV_debug((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTextureImage2DMultisampleCoverageNV_debug(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, const char* file, int line);
#define glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations) glatter_glTextureImage2DMultisampleNV_debug((texture), (target), (samples), (internalFormat), (width), (height), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTextureImage2DMultisampleNV_debug(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, const char* file, int line);
#define glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleCoverageNV_debug((texture), (target), (coverageSamples), (colorSamples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTextureImage3DMultisampleCoverageNV_debug(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, const char* file, int line);
#define glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) glatter_glTextureImage3DMultisampleNV_debug((texture), (target), (samples), (internalFormat), (width), (height), (depth), (fixedSampleLocations), __FILE__, __LINE__)
void glatter_glTextureImage3DMultisampleNV_debug(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, const char* file, int line);
#endif // defined(GL_NV_texture_multisample)
#if defined(GL_NV_transform_feedback)
#define glActiveVaryingNV(program, name) glatter_glActiveVaryingNV_debug((program), (name), __FILE__, __LINE__)
void glatter_glActiveVaryingNV_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glBeginTransformFeedbackNV(primitiveMode) glatter_glBeginTransformFeedbackNV_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedbackNV_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBaseNV(target, index, buffer) glatter_glBindBufferBaseNV_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBaseNV_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferOffsetNV(target, index, buffer, offset) glatter_glBindBufferOffsetNV_debug((target), (index), (buffer), (offset), __FILE__, __LINE__)
void glatter_glBindBufferOffsetNV_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, const char* file, int line);
#define glBindBufferRangeNV(target, index, buffer, offset, size) glatter_glBindBufferRangeNV_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRangeNV_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glEndTransformFeedbackNV() glatter_glEndTransformFeedbackNV_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedbackNV_debug(const char* file, int line);
#define glGetActiveVaryingNV(program, index, bufSize, length, size, type, name) glatter_glGetActiveVaryingNV_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveVaryingNV_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetTransformFeedbackVaryingNV(program, index, location) glatter_glGetTransformFeedbackVaryingNV_debug((program), (index), (location), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVaryingNV_debug(GLuint program, GLuint index, GLint *location, const char* file, int line);
#define glGetVaryingLocationNV(program, name) glatter_glGetVaryingLocationNV_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetVaryingLocationNV_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glTransformFeedbackAttribsNV(count, attribs, bufferMode) glatter_glTransformFeedbackAttribsNV_debug((count), (attribs), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackAttribsNV_debug(GLsizei count, const GLint *attribs, GLenum bufferMode, const char* file, int line);
#define glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode) glatter_glTransformFeedbackStreamAttribsNV_debug((count), (attribs), (nbuffers), (bufstreams), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackStreamAttribsNV_debug(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode, const char* file, int line);
#define glTransformFeedbackVaryingsNV(program, count, locations, bufferMode) glatter_glTransformFeedbackVaryingsNV_debug((program), (count), (locations), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryingsNV_debug(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode, const char* file, int line);
#endif // defined(GL_NV_transform_feedback)
#if defined(GL_NV_transform_feedback2)
#define glBindTransformFeedbackNV(target, id) glatter_glBindTransformFeedbackNV_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedbackNV_debug(GLenum target, GLuint id, const char* file, int line);
#define glDeleteTransformFeedbacksNV(n, ids) glatter_glDeleteTransformFeedbacksNV_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacksNV_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDrawTransformFeedbackNV(mode, id) glatter_glDrawTransformFeedbackNV_debug((mode), (id), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackNV_debug(GLenum mode, GLuint id, const char* file, int line);
#define glGenTransformFeedbacksNV(n, ids) glatter_glGenTransformFeedbacksNV_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacksNV_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glIsTransformFeedbackNV(id) glatter_glIsTransformFeedbackNV_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedbackNV_debug(GLuint id, const char* file, int line);
#define glPauseTransformFeedbackNV() glatter_glPauseTransformFeedbackNV_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedbackNV_debug(const char* file, int line);
#define glResumeTransformFeedbackNV() glatter_glResumeTransformFeedbackNV_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedbackNV_debug(const char* file, int line);
#endif // defined(GL_NV_transform_feedback2)
#if defined(GL_NV_vdpau_interop)
#define glVDPAUFiniNV() glatter_glVDPAUFiniNV_debug(__FILE__, __LINE__)
void glatter_glVDPAUFiniNV_debug(const char* file, int line);
#define glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values) glatter_glVDPAUGetSurfaceivNV_debug((surface), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glVDPAUGetSurfaceivNV_debug(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glVDPAUInitNV(vdpDevice, getProcAddress) glatter_glVDPAUInitNV_debug((vdpDevice), (getProcAddress), __FILE__, __LINE__)
void glatter_glVDPAUInitNV_debug(const void *vdpDevice, const void *getProcAddress, const char* file, int line);
#define glVDPAUIsSurfaceNV(surface) glatter_glVDPAUIsSurfaceNV_debug((surface), __FILE__, __LINE__)
GLboolean glatter_glVDPAUIsSurfaceNV_debug(GLvdpauSurfaceNV surface, const char* file, int line);
#define glVDPAUMapSurfacesNV(numSurfaces, surfaces) glatter_glVDPAUMapSurfacesNV_debug((numSurfaces), (surfaces), __FILE__, __LINE__)
void glatter_glVDPAUMapSurfacesNV_debug(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces, const char* file, int line);
#define glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterOutputSurfaceNV_debug((vdpSurface), (target), (numTextureNames), (textureNames), __FILE__, __LINE__)
GLvdpauSurfaceNV glatter_glVDPAURegisterOutputSurfaceNV_debug(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, const char* file, int line);
#define glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames) glatter_glVDPAURegisterVideoSurfaceNV_debug((vdpSurface), (target), (numTextureNames), (textureNames), __FILE__, __LINE__)
GLvdpauSurfaceNV glatter_glVDPAURegisterVideoSurfaceNV_debug(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames, const char* file, int line);
#define glVDPAUSurfaceAccessNV(surface, access) glatter_glVDPAUSurfaceAccessNV_debug((surface), (access), __FILE__, __LINE__)
void glatter_glVDPAUSurfaceAccessNV_debug(GLvdpauSurfaceNV surface, GLenum access, const char* file, int line);
#define glVDPAUUnmapSurfacesNV(numSurface, surfaces) glatter_glVDPAUUnmapSurfacesNV_debug((numSurface), (surfaces), __FILE__, __LINE__)
void glatter_glVDPAUUnmapSurfacesNV_debug(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces, const char* file, int line);
#define glVDPAUUnregisterSurfaceNV(surface) glatter_glVDPAUUnregisterSurfaceNV_debug((surface), __FILE__, __LINE__)
void glatter_glVDPAUUnregisterSurfaceNV_debug(GLvdpauSurfaceNV surface, const char* file, int line);
#endif // defined(GL_NV_vdpau_interop)
#if defined(GL_NV_vertex_array_range)
#define glFlushVertexArrayRangeNV() glatter_glFlushVertexArrayRangeNV_debug(__FILE__, __LINE__)
void glatter_glFlushVertexArrayRangeNV_debug(const char* file, int line);
#define glVertexArrayRangeNV(length, pointer) glatter_glVertexArrayRangeNV_debug((length), (pointer), __FILE__, __LINE__)
void glatter_glVertexArrayRangeNV_debug(GLsizei length, const void *pointer, const char* file, int line);
#endif // defined(GL_NV_vertex_array_range)
#if defined(GL_NV_vertex_attrib_integer_64bit)
#define glGetVertexAttribLi64vNV(index, pname, params) glatter_glGetVertexAttribLi64vNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLi64vNV_debug(GLuint index, GLenum pname, GLint64EXT *params, const char* file, int line);
#define glGetVertexAttribLui64vNV(index, pname, params) glatter_glGetVertexAttribLui64vNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLui64vNV_debug(GLuint index, GLenum pname, GLuint64EXT *params, const char* file, int line);
#define glVertexAttribL1i64NV(index, x) glatter_glVertexAttribL1i64NV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1i64NV_debug(GLuint index, GLint64EXT x, const char* file, int line);
#define glVertexAttribL1i64vNV(index, v) glatter_glVertexAttribL1i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL1ui64NV(index, x) glatter_glVertexAttribL1ui64NV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64NV_debug(GLuint index, GLuint64EXT x, const char* file, int line);
#define glVertexAttribL1ui64vNV(index, v) glatter_glVertexAttribL1ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribL2i64NV(index, x, y) glatter_glVertexAttribL2i64NV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2i64NV_debug(GLuint index, GLint64EXT x, GLint64EXT y, const char* file, int line);
#define glVertexAttribL2i64vNV(index, v) glatter_glVertexAttribL2i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL2ui64NV(index, x, y) glatter_glVertexAttribL2ui64NV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2ui64NV_debug(GLuint index, GLuint64EXT x, GLuint64EXT y, const char* file, int line);
#define glVertexAttribL2ui64vNV(index, v) glatter_glVertexAttribL2ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribL3i64NV(index, x, y, z) glatter_glVertexAttribL3i64NV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3i64NV_debug(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, const char* file, int line);
#define glVertexAttribL3i64vNV(index, v) glatter_glVertexAttribL3i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL3ui64NV(index, x, y, z) glatter_glVertexAttribL3ui64NV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3ui64NV_debug(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, const char* file, int line);
#define glVertexAttribL3ui64vNV(index, v) glatter_glVertexAttribL3ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribL4i64NV(index, x, y, z, w) glatter_glVertexAttribL4i64NV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4i64NV_debug(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w, const char* file, int line);
#define glVertexAttribL4i64vNV(index, v) glatter_glVertexAttribL4i64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4i64vNV_debug(GLuint index, const GLint64EXT *v, const char* file, int line);
#define glVertexAttribL4ui64NV(index, x, y, z, w) glatter_glVertexAttribL4ui64NV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4ui64NV_debug(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w, const char* file, int line);
#define glVertexAttribL4ui64vNV(index, v) glatter_glVertexAttribL4ui64vNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4ui64vNV_debug(GLuint index, const GLuint64EXT *v, const char* file, int line);
#define glVertexAttribLFormatNV(index, size, type, stride) glatter_glVertexAttribLFormatNV_debug((index), (size), (type), (stride), __FILE__, __LINE__)
void glatter_glVertexAttribLFormatNV_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const char* file, int line);
#endif // defined(GL_NV_vertex_attrib_integer_64bit)
#if defined(GL_NV_vertex_buffer_unified_memory)
#define glBufferAddressRangeNV(pname, index, address, length) glatter_glBufferAddressRangeNV_debug((pname), (index), (address), (length), __FILE__, __LINE__)
void glatter_glBufferAddressRangeNV_debug(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length, const char* file, int line);
#define glColorFormatNV(size, type, stride) glatter_glColorFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glColorFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glEdgeFlagFormatNV(stride) glatter_glEdgeFlagFormatNV_debug((stride), __FILE__, __LINE__)
void glatter_glEdgeFlagFormatNV_debug(GLsizei stride, const char* file, int line);
#define glFogCoordFormatNV(type, stride) glatter_glFogCoordFormatNV_debug((type), (stride), __FILE__, __LINE__)
void glatter_glFogCoordFormatNV_debug(GLenum type, GLsizei stride, const char* file, int line);
#define glGetIntegerui64i_vNV(value, index, result) glatter_glGetIntegerui64i_vNV_debug((value), (index), (result), __FILE__, __LINE__)
void glatter_glGetIntegerui64i_vNV_debug(GLenum value, GLuint index, GLuint64EXT *result, const char* file, int line);
#define glIndexFormatNV(type, stride) glatter_glIndexFormatNV_debug((type), (stride), __FILE__, __LINE__)
void glatter_glIndexFormatNV_debug(GLenum type, GLsizei stride, const char* file, int line);
#define glNormalFormatNV(type, stride) glatter_glNormalFormatNV_debug((type), (stride), __FILE__, __LINE__)
void glatter_glNormalFormatNV_debug(GLenum type, GLsizei stride, const char* file, int line);
#define glSecondaryColorFormatNV(size, type, stride) glatter_glSecondaryColorFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glSecondaryColorFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glTexCoordFormatNV(size, type, stride) glatter_glTexCoordFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glTexCoordFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glVertexAttribFormatNV(index, size, type, normalized, stride) glatter_glVertexAttribFormatNV_debug((index), (size), (type), (normalized), (stride), __FILE__, __LINE__)
void glatter_glVertexAttribFormatNV_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const char* file, int line);
#define glVertexAttribIFormatNV(index, size, type, stride) glatter_glVertexAttribIFormatNV_debug((index), (size), (type), (stride), __FILE__, __LINE__)
void glatter_glVertexAttribIFormatNV_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const char* file, int line);
#define glVertexFormatNV(size, type, stride) glatter_glVertexFormatNV_debug((size), (type), (stride), __FILE__, __LINE__)
void glatter_glVertexFormatNV_debug(GLint size, GLenum type, GLsizei stride, const char* file, int line);
#endif // defined(GL_NV_vertex_buffer_unified_memory)
#if defined(GL_NV_vertex_program)
#define glAreProgramsResidentNV(n, programs, residences) glatter_glAreProgramsResidentNV_debug((n), (programs), (residences), __FILE__, __LINE__)
GLboolean glatter_glAreProgramsResidentNV_debug(GLsizei n, const GLuint *programs, GLboolean *residences, const char* file, int line);
#define glBindProgramNV(target, id) glatter_glBindProgramNV_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindProgramNV_debug(GLenum target, GLuint id, const char* file, int line);
#define glDeleteProgramsNV(n, programs) glatter_glDeleteProgramsNV_debug((n), (programs), __FILE__, __LINE__)
void glatter_glDeleteProgramsNV_debug(GLsizei n, const GLuint *programs, const char* file, int line);
#define glExecuteProgramNV(target, id, params) glatter_glExecuteProgramNV_debug((target), (id), (params), __FILE__, __LINE__)
void glatter_glExecuteProgramNV_debug(GLenum target, GLuint id, const GLfloat *params, const char* file, int line);
#define glGenProgramsNV(n, programs) glatter_glGenProgramsNV_debug((n), (programs), __FILE__, __LINE__)
void glatter_glGenProgramsNV_debug(GLsizei n, GLuint *programs, const char* file, int line);
#define glGetProgramParameterdvNV(target, index, pname, params) glatter_glGetProgramParameterdvNV_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramParameterdvNV_debug(GLenum target, GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetProgramParameterfvNV(target, index, pname, params) glatter_glGetProgramParameterfvNV_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramParameterfvNV_debug(GLenum target, GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetProgramStringNV(id, pname, program) glatter_glGetProgramStringNV_debug((id), (pname), (program), __FILE__, __LINE__)
void glatter_glGetProgramStringNV_debug(GLuint id, GLenum pname, GLubyte *program, const char* file, int line);
#define glGetProgramivNV(id, pname, params) glatter_glGetProgramivNV_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramivNV_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetTrackMatrixivNV(target, address, pname, params) glatter_glGetTrackMatrixivNV_debug((target), (address), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTrackMatrixivNV_debug(GLenum target, GLuint address, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribPointervNV(index, pname, pointer) glatter_glGetVertexAttribPointervNV_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointervNV_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribdvNV(index, pname, params) glatter_glGetVertexAttribdvNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribdvNV_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVertexAttribfvNV(index, pname, params) glatter_glGetVertexAttribfvNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfvNV_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribivNV(index, pname, params) glatter_glGetVertexAttribivNV_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribivNV_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgramNV(id) glatter_glIsProgramNV_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsProgramNV_debug(GLuint id, const char* file, int line);
#define glLoadProgramNV(target, id, len, program) glatter_glLoadProgramNV_debug((target), (id), (len), (program), __FILE__, __LINE__)
void glatter_glLoadProgramNV_debug(GLenum target, GLuint id, GLsizei len, const GLubyte *program, const char* file, int line);
#define glProgramParameter4dNV(target, index, x, y, z, w) glatter_glProgramParameter4dNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramParameter4dNV_debug(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glProgramParameter4dvNV(target, index, v) glatter_glProgramParameter4dvNV_debug((target), (index), (v), __FILE__, __LINE__)
void glatter_glProgramParameter4dvNV_debug(GLenum target, GLuint index, const GLdouble *v, const char* file, int line);
#define glProgramParameter4fNV(target, index, x, y, z, w) glatter_glProgramParameter4fNV_debug((target), (index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glProgramParameter4fNV_debug(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glProgramParameter4fvNV(target, index, v) glatter_glProgramParameter4fvNV_debug((target), (index), (v), __FILE__, __LINE__)
void glatter_glProgramParameter4fvNV_debug(GLenum target, GLuint index, const GLfloat *v, const char* file, int line);
#define glProgramParameters4dvNV(target, index, count, v) glatter_glProgramParameters4dvNV_debug((target), (index), (count), (v), __FILE__, __LINE__)
void glatter_glProgramParameters4dvNV_debug(GLenum target, GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glProgramParameters4fvNV(target, index, count, v) glatter_glProgramParameters4fvNV_debug((target), (index), (count), (v), __FILE__, __LINE__)
void glatter_glProgramParameters4fvNV_debug(GLenum target, GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glRequestResidentProgramsNV(n, programs) glatter_glRequestResidentProgramsNV_debug((n), (programs), __FILE__, __LINE__)
void glatter_glRequestResidentProgramsNV_debug(GLsizei n, const GLuint *programs, const char* file, int line);
#define glTrackMatrixNV(target, address, matrix, transform) glatter_glTrackMatrixNV_debug((target), (address), (matrix), (transform), __FILE__, __LINE__)
void glatter_glTrackMatrixNV_debug(GLenum target, GLuint address, GLenum matrix, GLenum transform, const char* file, int line);
#define glVertexAttrib1dNV(index, x) glatter_glVertexAttrib1dNV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1dNV_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttrib1dvNV(index, v) glatter_glVertexAttrib1dvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1dvNV_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib1fNV(index, x) glatter_glVertexAttrib1fNV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1fNV_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fvNV(index, v) glatter_glVertexAttrib1fvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib1sNV(index, x) glatter_glVertexAttrib1sNV_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1sNV_debug(GLuint index, GLshort x, const char* file, int line);
#define glVertexAttrib1svNV(index, v) glatter_glVertexAttrib1svNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1svNV_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib2dNV(index, x, y) glatter_glVertexAttrib2dNV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2dNV_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttrib2dvNV(index, v) glatter_glVertexAttrib2dvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2dvNV_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib2fNV(index, x, y) glatter_glVertexAttrib2fNV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2fNV_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fvNV(index, v) glatter_glVertexAttrib2fvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2sNV(index, x, y) glatter_glVertexAttrib2sNV_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2sNV_debug(GLuint index, GLshort x, GLshort y, const char* file, int line);
#define glVertexAttrib2svNV(index, v) glatter_glVertexAttrib2svNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2svNV_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib3dNV(index, x, y, z) glatter_glVertexAttrib3dNV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3dNV_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttrib3dvNV(index, v) glatter_glVertexAttrib3dvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3dvNV_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib3fNV(index, x, y, z) glatter_glVertexAttrib3fNV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3fNV_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fvNV(index, v) glatter_glVertexAttrib3fvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3sNV(index, x, y, z) glatter_glVertexAttrib3sNV_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3sNV_debug(GLuint index, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexAttrib3svNV(index, v) glatter_glVertexAttrib3svNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3svNV_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4dNV(index, x, y, z, w) glatter_glVertexAttrib4dNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4dNV_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttrib4dvNV(index, v) glatter_glVertexAttrib4dvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4dvNV_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib4fNV(index, x, y, z, w) glatter_glVertexAttrib4fNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4fNV_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fvNV(index, v) glatter_glVertexAttrib4fvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fvNV_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4sNV(index, x, y, z, w) glatter_glVertexAttrib4sNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4sNV_debug(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexAttrib4svNV(index, v) glatter_glVertexAttrib4svNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4svNV_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4ubNV(index, x, y, z, w) glatter_glVertexAttrib4ubNV_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubNV_debug(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, const char* file, int line);
#define glVertexAttrib4ubvNV(index, v) glatter_glVertexAttrib4ubvNV_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubvNV_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttribPointerNV(index, fsize, type, stride, pointer) glatter_glVertexAttribPointerNV_debug((index), (fsize), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointerNV_debug(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glVertexAttribs1dvNV(index, count, v) glatter_glVertexAttribs1dvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs1dvNV_debug(GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glVertexAttribs1fvNV(index, count, v) glatter_glVertexAttribs1fvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs1fvNV_debug(GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glVertexAttribs1svNV(index, count, v) glatter_glVertexAttribs1svNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs1svNV_debug(GLuint index, GLsizei count, const GLshort *v, const char* file, int line);
#define glVertexAttribs2dvNV(index, count, v) glatter_glVertexAttribs2dvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs2dvNV_debug(GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glVertexAttribs2fvNV(index, count, v) glatter_glVertexAttribs2fvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs2fvNV_debug(GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glVertexAttribs2svNV(index, count, v) glatter_glVertexAttribs2svNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs2svNV_debug(GLuint index, GLsizei count, const GLshort *v, const char* file, int line);
#define glVertexAttribs3dvNV(index, count, v) glatter_glVertexAttribs3dvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs3dvNV_debug(GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glVertexAttribs3fvNV(index, count, v) glatter_glVertexAttribs3fvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs3fvNV_debug(GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glVertexAttribs3svNV(index, count, v) glatter_glVertexAttribs3svNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs3svNV_debug(GLuint index, GLsizei count, const GLshort *v, const char* file, int line);
#define glVertexAttribs4dvNV(index, count, v) glatter_glVertexAttribs4dvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4dvNV_debug(GLuint index, GLsizei count, const GLdouble *v, const char* file, int line);
#define glVertexAttribs4fvNV(index, count, v) glatter_glVertexAttribs4fvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4fvNV_debug(GLuint index, GLsizei count, const GLfloat *v, const char* file, int line);
#define glVertexAttribs4svNV(index, count, v) glatter_glVertexAttribs4svNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4svNV_debug(GLuint index, GLsizei count, const GLshort *v, const char* file, int line);
#define glVertexAttribs4ubvNV(index, count, v) glatter_glVertexAttribs4ubvNV_debug((index), (count), (v), __FILE__, __LINE__)
void glatter_glVertexAttribs4ubvNV_debug(GLuint index, GLsizei count, const GLubyte *v, const char* file, int line);
#endif // defined(GL_NV_vertex_program)
#if defined(GL_NV_vertex_program4)
#define glGetVertexAttribIivEXT(index, pname, params) glatter_glGetVertexAttribIivEXT_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIivEXT_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuivEXT(index, pname, params) glatter_glGetVertexAttribIuivEXT_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuivEXT_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glVertexAttribI1iEXT(index, x) glatter_glVertexAttribI1iEXT_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1iEXT_debug(GLuint index, GLint x, const char* file, int line);
#define glVertexAttribI1ivEXT(index, v) glatter_glVertexAttribI1ivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1ivEXT_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI1uiEXT(index, x) glatter_glVertexAttribI1uiEXT_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1uiEXT_debug(GLuint index, GLuint x, const char* file, int line);
#define glVertexAttribI1uivEXT(index, v) glatter_glVertexAttribI1uivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1uivEXT_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI2iEXT(index, x, y) glatter_glVertexAttribI2iEXT_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2iEXT_debug(GLuint index, GLint x, GLint y, const char* file, int line);
#define glVertexAttribI2ivEXT(index, v) glatter_glVertexAttribI2ivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2ivEXT_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI2uiEXT(index, x, y) glatter_glVertexAttribI2uiEXT_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2uiEXT_debug(GLuint index, GLuint x, GLuint y, const char* file, int line);
#define glVertexAttribI2uivEXT(index, v) glatter_glVertexAttribI2uivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2uivEXT_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI3iEXT(index, x, y, z) glatter_glVertexAttribI3iEXT_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3iEXT_debug(GLuint index, GLint x, GLint y, GLint z, const char* file, int line);
#define glVertexAttribI3ivEXT(index, v) glatter_glVertexAttribI3ivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3ivEXT_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI3uiEXT(index, x, y, z) glatter_glVertexAttribI3uiEXT_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3uiEXT_debug(GLuint index, GLuint x, GLuint y, GLuint z, const char* file, int line);
#define glVertexAttribI3uivEXT(index, v) glatter_glVertexAttribI3uivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3uivEXT_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4bvEXT(index, v) glatter_glVertexAttribI4bvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4bvEXT_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttribI4iEXT(index, x, y, z, w) glatter_glVertexAttribI4iEXT_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4iEXT_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4ivEXT(index, v) glatter_glVertexAttribI4ivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4ivEXT_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4svEXT(index, v) glatter_glVertexAttribI4svEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4svEXT_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttribI4ubvEXT(index, v) glatter_glVertexAttribI4ubvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4ubvEXT_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttribI4uiEXT(index, x, y, z, w) glatter_glVertexAttribI4uiEXT_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiEXT_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uivEXT(index, v) glatter_glVertexAttribI4uivEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uivEXT_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4usvEXT(index, v) glatter_glVertexAttribI4usvEXT_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4usvEXT_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribIPointerEXT(index, size, type, stride, pointer) glatter_glVertexAttribIPointerEXT_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointerEXT_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_NV_vertex_program4)
#if defined(GL_NV_video_capture)
#define glBeginVideoCaptureNV(video_capture_slot) glatter_glBeginVideoCaptureNV_debug((video_capture_slot), __FILE__, __LINE__)
void glatter_glBeginVideoCaptureNV_debug(GLuint video_capture_slot, const char* file, int line);
#define glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset) glatter_glBindVideoCaptureStreamBufferNV_debug((video_capture_slot), (stream), (frame_region), (offset), __FILE__, __LINE__)
void glatter_glBindVideoCaptureStreamBufferNV_debug(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset, const char* file, int line);
#define glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture) glatter_glBindVideoCaptureStreamTextureNV_debug((video_capture_slot), (stream), (frame_region), (target), (texture), __FILE__, __LINE__)
void glatter_glBindVideoCaptureStreamTextureNV_debug(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture, const char* file, int line);
#define glEndVideoCaptureNV(video_capture_slot) glatter_glEndVideoCaptureNV_debug((video_capture_slot), __FILE__, __LINE__)
void glatter_glEndVideoCaptureNV_debug(GLuint video_capture_slot, const char* file, int line);
#define glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamdvNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoCaptureStreamdvNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamfvNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoCaptureStreamfvNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params) glatter_glGetVideoCaptureStreamivNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoCaptureStreamivNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params, const char* file, int line);
#define glGetVideoCaptureivNV(video_capture_slot, pname, params) glatter_glGetVideoCaptureivNV_debug((video_capture_slot), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVideoCaptureivNV_debug(GLuint video_capture_slot, GLenum pname, GLint *params, const char* file, int line);
#define glVideoCaptureNV(video_capture_slot, sequence_num, capture_time) glatter_glVideoCaptureNV_debug((video_capture_slot), (sequence_num), (capture_time), __FILE__, __LINE__)
GLenum glatter_glVideoCaptureNV_debug(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time, const char* file, int line);
#define glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterdvNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glVideoCaptureStreamParameterdvNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params, const char* file, int line);
#define glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterfvNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glVideoCaptureStreamParameterfvNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params, const char* file, int line);
#define glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params) glatter_glVideoCaptureStreamParameterivNV_debug((video_capture_slot), (stream), (pname), (params), __FILE__, __LINE__)
void glatter_glVideoCaptureStreamParameterivNV_debug(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_NV_video_capture)
#if defined(GL_NV_viewport_swizzle)
#define glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew) glatter_glViewportSwizzleNV_debug((index), (swizzlex), (swizzley), (swizzlez), (swizzlew), __FILE__, __LINE__)
void glatter_glViewportSwizzleNV_debug(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew, const char* file, int line);
#endif // defined(GL_NV_viewport_swizzle)
#if defined(GL_OES_byte_coordinates)
#define glMultiTexCoord1bOES(texture, s) glatter_glMultiTexCoord1bOES_debug((texture), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1bOES_debug(GLenum texture, GLbyte s, const char* file, int line);
#define glMultiTexCoord1bvOES(texture, coords) glatter_glMultiTexCoord1bvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord1bvOES_debug(GLenum texture, const GLbyte *coords, const char* file, int line);
#define glMultiTexCoord2bOES(texture, s, t) glatter_glMultiTexCoord2bOES_debug((texture), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2bOES_debug(GLenum texture, GLbyte s, GLbyte t, const char* file, int line);
#define glMultiTexCoord2bvOES(texture, coords) glatter_glMultiTexCoord2bvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord2bvOES_debug(GLenum texture, const GLbyte *coords, const char* file, int line);
#define glMultiTexCoord3bOES(texture, s, t, r) glatter_glMultiTexCoord3bOES_debug((texture), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3bOES_debug(GLenum texture, GLbyte s, GLbyte t, GLbyte r, const char* file, int line);
#define glMultiTexCoord3bvOES(texture, coords) glatter_glMultiTexCoord3bvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord3bvOES_debug(GLenum texture, const GLbyte *coords, const char* file, int line);
#define glMultiTexCoord4bOES(texture, s, t, r, q) glatter_glMultiTexCoord4bOES_debug((texture), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4bOES_debug(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q, const char* file, int line);
#define glMultiTexCoord4bvOES(texture, coords) glatter_glMultiTexCoord4bvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord4bvOES_debug(GLenum texture, const GLbyte *coords, const char* file, int line);
#define glTexCoord1bOES(s) glatter_glTexCoord1bOES_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1bOES_debug(GLbyte s, const char* file, int line);
#define glTexCoord1bvOES(coords) glatter_glTexCoord1bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord1bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glTexCoord2bOES(s, t) glatter_glTexCoord2bOES_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2bOES_debug(GLbyte s, GLbyte t, const char* file, int line);
#define glTexCoord2bvOES(coords) glatter_glTexCoord2bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord2bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glTexCoord3bOES(s, t, r) glatter_glTexCoord3bOES_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3bOES_debug(GLbyte s, GLbyte t, GLbyte r, const char* file, int line);
#define glTexCoord3bvOES(coords) glatter_glTexCoord3bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord3bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glTexCoord4bOES(s, t, r, q) glatter_glTexCoord4bOES_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4bOES_debug(GLbyte s, GLbyte t, GLbyte r, GLbyte q, const char* file, int line);
#define glTexCoord4bvOES(coords) glatter_glTexCoord4bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord4bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glVertex2bOES(x, y) glatter_glVertex2bOES_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex2bOES_debug(GLbyte x, GLbyte y, const char* file, int line);
#define glVertex2bvOES(coords) glatter_glVertex2bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex2bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glVertex3bOES(x, y, z) glatter_glVertex3bOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex3bOES_debug(GLbyte x, GLbyte y, GLbyte z, const char* file, int line);
#define glVertex3bvOES(coords) glatter_glVertex3bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex3bvOES_debug(const GLbyte *coords, const char* file, int line);
#define glVertex4bOES(x, y, z, w) glatter_glVertex4bOES_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertex4bOES_debug(GLbyte x, GLbyte y, GLbyte z, GLbyte w, const char* file, int line);
#define glVertex4bvOES(coords) glatter_glVertex4bvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex4bvOES_debug(const GLbyte *coords, const char* file, int line);
#endif // defined(GL_OES_byte_coordinates)
#if defined(GL_OES_fixed_point)
#define glAccumxOES(op, value) glatter_glAccumxOES_debug((op), (value), __FILE__, __LINE__)
void glatter_glAccumxOES_debug(GLenum op, GLfixed value, const char* file, int line);
#define glAlphaFuncxOES(func, ref) glatter_glAlphaFuncxOES_debug((func), (ref), __FILE__, __LINE__)
void glatter_glAlphaFuncxOES_debug(GLenum func, GLfixed ref, const char* file, int line);
#define glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap) glatter_glBitmapxOES_debug((width), (height), (xorig), (yorig), (xmove), (ymove), (bitmap), __FILE__, __LINE__)
void glatter_glBitmapxOES_debug(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap, const char* file, int line);
#define glBlendColorxOES(red, green, blue, alpha) glatter_glBlendColorxOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColorxOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glClearAccumxOES(red, green, blue, alpha) glatter_glClearAccumxOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearAccumxOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glClearColorxOES(red, green, blue, alpha) glatter_glClearColorxOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glClearColorxOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glClearDepthxOES(depth) glatter_glClearDepthxOES_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthxOES_debug(GLfixed depth, const char* file, int line);
#define glClipPlanexOES(plane, equation) glatter_glClipPlanexOES_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlanexOES_debug(GLenum plane, const GLfixed *equation, const char* file, int line);
#define glColor3xOES(red, green, blue) glatter_glColor3xOES_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glColor3xOES_debug(GLfixed red, GLfixed green, GLfixed blue, const char* file, int line);
#define glColor3xvOES(components) glatter_glColor3xvOES_debug((components), __FILE__, __LINE__)
void glatter_glColor3xvOES_debug(const GLfixed *components, const char* file, int line);
#define glColor4xOES(red, green, blue, alpha) glatter_glColor4xOES_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glColor4xOES_debug(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha, const char* file, int line);
#define glColor4xvOES(components) glatter_glColor4xvOES_debug((components), __FILE__, __LINE__)
void glatter_glColor4xvOES_debug(const GLfixed *components, const char* file, int line);
#define glConvolutionParameterxOES(target, pname, param) glatter_glConvolutionParameterxOES_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glConvolutionParameterxOES_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glConvolutionParameterxvOES(target, pname, params) glatter_glConvolutionParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glConvolutionParameterxvOES_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glDepthRangexOES(n, f) glatter_glDepthRangexOES_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangexOES_debug(GLfixed n, GLfixed f, const char* file, int line);
#define glEvalCoord1xOES(u) glatter_glEvalCoord1xOES_debug((u), __FILE__, __LINE__)
void glatter_glEvalCoord1xOES_debug(GLfixed u, const char* file, int line);
#define glEvalCoord1xvOES(coords) glatter_glEvalCoord1xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glEvalCoord1xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glEvalCoord2xOES(u, v) glatter_glEvalCoord2xOES_debug((u), (v), __FILE__, __LINE__)
void glatter_glEvalCoord2xOES_debug(GLfixed u, GLfixed v, const char* file, int line);
#define glEvalCoord2xvOES(coords) glatter_glEvalCoord2xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glEvalCoord2xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glFeedbackBufferxOES(n, type, buffer) glatter_glFeedbackBufferxOES_debug((n), (type), (buffer), __FILE__, __LINE__)
void glatter_glFeedbackBufferxOES_debug(GLsizei n, GLenum type, const GLfixed *buffer, const char* file, int line);
#define glFogxOES(pname, param) glatter_glFogxOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogxOES_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glFogxvOES(pname, param) glatter_glFogxvOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFogxvOES_debug(GLenum pname, const GLfixed *param, const char* file, int line);
#define glFrustumxOES(l, r, b, t, n, f) glatter_glFrustumxOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
void glatter_glFrustumxOES_debug(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, const char* file, int line);
#define glGetClipPlanexOES(plane, equation) glatter_glGetClipPlanexOES_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glGetClipPlanexOES_debug(GLenum plane, GLfixed *equation, const char* file, int line);
#define glGetConvolutionParameterxvOES(target, pname, params) glatter_glGetConvolutionParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetConvolutionParameterxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetFixedvOES(pname, params) glatter_glGetFixedvOES_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetFixedvOES_debug(GLenum pname, GLfixed *params, const char* file, int line);
#define glGetHistogramParameterxvOES(target, pname, params) glatter_glGetHistogramParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetHistogramParameterxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetLightxOES(light, pname, params) glatter_glGetLightxOES_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetLightxOES_debug(GLenum light, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetMapxvOES(target, query, v) glatter_glGetMapxvOES_debug((target), (query), (v), __FILE__, __LINE__)
void glatter_glGetMapxvOES_debug(GLenum target, GLenum query, GLfixed *v, const char* file, int line);
#define glGetMaterialxOES(face, pname, param) glatter_glGetMaterialxOES_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glGetMaterialxOES_debug(GLenum face, GLenum pname, GLfixed param, const char* file, int line);
#define glGetPixelMapxv(map, size, values) glatter_glGetPixelMapxv_debug((map), (size), (values), __FILE__, __LINE__)
void glatter_glGetPixelMapxv_debug(GLenum map, GLint size, GLfixed *values, const char* file, int line);
#define glGetTexEnvxvOES(target, pname, params) glatter_glGetTexEnvxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexEnvxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetTexGenxvOES(coord, pname, params) glatter_glGetTexGenxvOES_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexGenxvOES_debug(GLenum coord, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetTexLevelParameterxvOES(target, level, pname, params) glatter_glGetTexLevelParameterxvOES_debug((target), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexLevelParameterxvOES_debug(GLenum target, GLint level, GLenum pname, GLfixed *params, const char* file, int line);
#define glGetTexParameterxvOES(target, pname, params) glatter_glGetTexParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterxvOES_debug(GLenum target, GLenum pname, GLfixed *params, const char* file, int line);
#define glIndexxOES(component) glatter_glIndexxOES_debug((component), __FILE__, __LINE__)
void glatter_glIndexxOES_debug(GLfixed component, const char* file, int line);
#define glIndexxvOES(component) glatter_glIndexxvOES_debug((component), __FILE__, __LINE__)
void glatter_glIndexxvOES_debug(const GLfixed *component, const char* file, int line);
#define glLightModelxOES(pname, param) glatter_glLightModelxOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelxOES_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glLightModelxvOES(pname, param) glatter_glLightModelxvOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightModelxvOES_debug(GLenum pname, const GLfixed *param, const char* file, int line);
#define glLightxOES(light, pname, param) glatter_glLightxOES_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glLightxOES_debug(GLenum light, GLenum pname, GLfixed param, const char* file, int line);
#define glLightxvOES(light, pname, params) glatter_glLightxvOES_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glLightxvOES_debug(GLenum light, GLenum pname, const GLfixed *params, const char* file, int line);
#define glLineWidthxOES(width) glatter_glLineWidthxOES_debug((width), __FILE__, __LINE__)
void glatter_glLineWidthxOES_debug(GLfixed width, const char* file, int line);
#define glLoadMatrixxOES(m) glatter_glLoadMatrixxOES_debug((m), __FILE__, __LINE__)
void glatter_glLoadMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#define glLoadTransposeMatrixxOES(m) glatter_glLoadTransposeMatrixxOES_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#define glMap1xOES(target, u1, u2, stride, order, points) glatter_glMap1xOES_debug((target), (u1), (u2), (stride), (order), (points), __FILE__, __LINE__)
void glatter_glMap1xOES_debug(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points, const char* file, int line);
#define glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) glatter_glMap2xOES_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (points), __FILE__, __LINE__)
void glatter_glMap2xOES_debug(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points, const char* file, int line);
#define glMapGrid1xOES(n, u1, u2) glatter_glMapGrid1xOES_debug((n), (u1), (u2), __FILE__, __LINE__)
void glatter_glMapGrid1xOES_debug(GLint n, GLfixed u1, GLfixed u2, const char* file, int line);
#define glMapGrid2xOES(n, u1, u2, v1, v2) glatter_glMapGrid2xOES_debug((n), (u1), (u2), (v1), (v2), __FILE__, __LINE__)
void glatter_glMapGrid2xOES_debug(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2, const char* file, int line);
#define glMaterialxOES(face, pname, param) glatter_glMaterialxOES_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialxOES_debug(GLenum face, GLenum pname, GLfixed param, const char* file, int line);
#define glMaterialxvOES(face, pname, param) glatter_glMaterialxvOES_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glMaterialxvOES_debug(GLenum face, GLenum pname, const GLfixed *param, const char* file, int line);
#define glMultMatrixxOES(m) glatter_glMultMatrixxOES_debug((m), __FILE__, __LINE__)
void glatter_glMultMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#define glMultTransposeMatrixxOES(m) glatter_glMultTransposeMatrixxOES_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixxOES_debug(const GLfixed *m, const char* file, int line);
#define glMultiTexCoord1xOES(texture, s) glatter_glMultiTexCoord1xOES_debug((texture), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1xOES_debug(GLenum texture, GLfixed s, const char* file, int line);
#define glMultiTexCoord1xvOES(texture, coords) glatter_glMultiTexCoord1xvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord1xvOES_debug(GLenum texture, const GLfixed *coords, const char* file, int line);
#define glMultiTexCoord2xOES(texture, s, t) glatter_glMultiTexCoord2xOES_debug((texture), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2xOES_debug(GLenum texture, GLfixed s, GLfixed t, const char* file, int line);
#define glMultiTexCoord2xvOES(texture, coords) glatter_glMultiTexCoord2xvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord2xvOES_debug(GLenum texture, const GLfixed *coords, const char* file, int line);
#define glMultiTexCoord3xOES(texture, s, t, r) glatter_glMultiTexCoord3xOES_debug((texture), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3xOES_debug(GLenum texture, GLfixed s, GLfixed t, GLfixed r, const char* file, int line);
#define glMultiTexCoord3xvOES(texture, coords) glatter_glMultiTexCoord3xvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord3xvOES_debug(GLenum texture, const GLfixed *coords, const char* file, int line);
#define glMultiTexCoord4xOES(texture, s, t, r, q) glatter_glMultiTexCoord4xOES_debug((texture), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4xOES_debug(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q, const char* file, int line);
#define glMultiTexCoord4xvOES(texture, coords) glatter_glMultiTexCoord4xvOES_debug((texture), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoord4xvOES_debug(GLenum texture, const GLfixed *coords, const char* file, int line);
#define glNormal3xOES(nx, ny, nz) glatter_glNormal3xOES_debug((nx), (ny), (nz), __FILE__, __LINE__)
void glatter_glNormal3xOES_debug(GLfixed nx, GLfixed ny, GLfixed nz, const char* file, int line);
#define glNormal3xvOES(coords) glatter_glNormal3xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glNormal3xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glOrthoxOES(l, r, b, t, n, f) glatter_glOrthoxOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
void glatter_glOrthoxOES_debug(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f, const char* file, int line);
#define glPassThroughxOES(token) glatter_glPassThroughxOES_debug((token), __FILE__, __LINE__)
void glatter_glPassThroughxOES_debug(GLfixed token, const char* file, int line);
#define glPixelMapx(map, size, values) glatter_glPixelMapx_debug((map), (size), (values), __FILE__, __LINE__)
void glatter_glPixelMapx_debug(GLenum map, GLint size, const GLfixed *values, const char* file, int line);
#define glPixelStorex(pname, param) glatter_glPixelStorex_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelStorex_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glPixelTransferxOES(pname, param) glatter_glPixelTransferxOES_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTransferxOES_debug(GLenum pname, GLfixed param, const char* file, int line);
#define glPixelZoomxOES(xfactor, yfactor) glatter_glPixelZoomxOES_debug((xfactor), (yfactor), __FILE__, __LINE__)
void glatter_glPixelZoomxOES_debug(GLfixed xfactor, GLfixed yfactor, const char* file, int line);
#define glPointParameterxvOES(pname, params) glatter_glPointParameterxvOES_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterxvOES_debug(GLenum pname, const GLfixed *params, const char* file, int line);
#define glPointSizexOES(size) glatter_glPointSizexOES_debug((size), __FILE__, __LINE__)
void glatter_glPointSizexOES_debug(GLfixed size, const char* file, int line);
#define glPolygonOffsetxOES(factor, units) glatter_glPolygonOffsetxOES_debug((factor), (units), __FILE__, __LINE__)
void glatter_glPolygonOffsetxOES_debug(GLfixed factor, GLfixed units, const char* file, int line);
#define glPrioritizeTexturesxOES(n, textures, priorities) glatter_glPrioritizeTexturesxOES_debug((n), (textures), (priorities), __FILE__, __LINE__)
void glatter_glPrioritizeTexturesxOES_debug(GLsizei n, const GLuint *textures, const GLfixed *priorities, const char* file, int line);
#define glRasterPos2xOES(x, y) glatter_glRasterPos2xOES_debug((x), (y), __FILE__, __LINE__)
void glatter_glRasterPos2xOES_debug(GLfixed x, GLfixed y, const char* file, int line);
#define glRasterPos2xvOES(coords) glatter_glRasterPos2xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glRasterPos2xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glRasterPos3xOES(x, y, z) glatter_glRasterPos3xOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glRasterPos3xOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glRasterPos3xvOES(coords) glatter_glRasterPos3xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glRasterPos3xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glRasterPos4xOES(x, y, z, w) glatter_glRasterPos4xOES_debug((x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glRasterPos4xOES_debug(GLfixed x, GLfixed y, GLfixed z, GLfixed w, const char* file, int line);
#define glRasterPos4xvOES(coords) glatter_glRasterPos4xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glRasterPos4xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glRectxOES(x1, y1, x2, y2) glatter_glRectxOES_debug((x1), (y1), (x2), (y2), __FILE__, __LINE__)
void glatter_glRectxOES_debug(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2, const char* file, int line);
#define glRectxvOES(v1, v2) glatter_glRectxvOES_debug((v1), (v2), __FILE__, __LINE__)
void glatter_glRectxvOES_debug(const GLfixed *v1, const GLfixed *v2, const char* file, int line);
#define glRotatexOES(angle, x, y, z) glatter_glRotatexOES_debug((angle), (x), (y), (z), __FILE__, __LINE__)
void glatter_glRotatexOES_debug(GLfixed angle, GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glScalexOES(x, y, z) glatter_glScalexOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glScalexOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glTexCoord1xOES(s) glatter_glTexCoord1xOES_debug((s), __FILE__, __LINE__)
void glatter_glTexCoord1xOES_debug(GLfixed s, const char* file, int line);
#define glTexCoord1xvOES(coords) glatter_glTexCoord1xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord1xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glTexCoord2xOES(s, t) glatter_glTexCoord2xOES_debug((s), (t), __FILE__, __LINE__)
void glatter_glTexCoord2xOES_debug(GLfixed s, GLfixed t, const char* file, int line);
#define glTexCoord2xvOES(coords) glatter_glTexCoord2xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord2xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glTexCoord3xOES(s, t, r) glatter_glTexCoord3xOES_debug((s), (t), (r), __FILE__, __LINE__)
void glatter_glTexCoord3xOES_debug(GLfixed s, GLfixed t, GLfixed r, const char* file, int line);
#define glTexCoord3xvOES(coords) glatter_glTexCoord3xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord3xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glTexCoord4xOES(s, t, r, q) glatter_glTexCoord4xOES_debug((s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glTexCoord4xOES_debug(GLfixed s, GLfixed t, GLfixed r, GLfixed q, const char* file, int line);
#define glTexCoord4xvOES(coords) glatter_glTexCoord4xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glTexCoord4xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glTexEnvxOES(target, pname, param) glatter_glTexEnvxOES_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexEnvxOES_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glTexEnvxvOES(target, pname, params) glatter_glTexEnvxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexEnvxvOES_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTexGenxOES(coord, pname, param) glatter_glTexGenxOES_debug((coord), (pname), (param), __FILE__, __LINE__)
void glatter_glTexGenxOES_debug(GLenum coord, GLenum pname, GLfixed param, const char* file, int line);
#define glTexGenxvOES(coord, pname, params) glatter_glTexGenxvOES_debug((coord), (pname), (params), __FILE__, __LINE__)
void glatter_glTexGenxvOES_debug(GLenum coord, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTexParameterxOES(target, pname, param) glatter_glTexParameterxOES_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glTexParameterxOES_debug(GLenum target, GLenum pname, GLfixed param, const char* file, int line);
#define glTexParameterxvOES(target, pname, params) glatter_glTexParameterxvOES_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterxvOES_debug(GLenum target, GLenum pname, const GLfixed *params, const char* file, int line);
#define glTranslatexOES(x, y, z) glatter_glTranslatexOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glTranslatexOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glVertex2xOES(x) glatter_glVertex2xOES_debug((x), __FILE__, __LINE__)
void glatter_glVertex2xOES_debug(GLfixed x, const char* file, int line);
#define glVertex2xvOES(coords) glatter_glVertex2xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex2xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glVertex3xOES(x, y) glatter_glVertex3xOES_debug((x), (y), __FILE__, __LINE__)
void glatter_glVertex3xOES_debug(GLfixed x, GLfixed y, const char* file, int line);
#define glVertex3xvOES(coords) glatter_glVertex3xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex3xvOES_debug(const GLfixed *coords, const char* file, int line);
#define glVertex4xOES(x, y, z) glatter_glVertex4xOES_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glVertex4xOES_debug(GLfixed x, GLfixed y, GLfixed z, const char* file, int line);
#define glVertex4xvOES(coords) glatter_glVertex4xvOES_debug((coords), __FILE__, __LINE__)
void glatter_glVertex4xvOES_debug(const GLfixed *coords, const char* file, int line);
#endif // defined(GL_OES_fixed_point)
#if defined(GL_OES_query_matrix)
#define glQueryMatrixxOES(mantissa, exponent) glatter_glQueryMatrixxOES_debug((mantissa), (exponent), __FILE__, __LINE__)
GLbitfield glatter_glQueryMatrixxOES_debug(GLfixed *mantissa, GLint *exponent, const char* file, int line);
#endif // defined(GL_OES_query_matrix)
#if defined(GL_OES_single_precision)
#define glClearDepthfOES(depth) glatter_glClearDepthfOES_debug((depth), __FILE__, __LINE__)
void glatter_glClearDepthfOES_debug(GLclampf depth, const char* file, int line);
#define glClipPlanefOES(plane, equation) glatter_glClipPlanefOES_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glClipPlanefOES_debug(GLenum plane, const GLfloat *equation, const char* file, int line);
#define glDepthRangefOES(n, f) glatter_glDepthRangefOES_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangefOES_debug(GLclampf n, GLclampf f, const char* file, int line);
#define glFrustumfOES(l, r, b, t, n, f) glatter_glFrustumfOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
void glatter_glFrustumfOES_debug(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, const char* file, int line);
#define glGetClipPlanefOES(plane, equation) glatter_glGetClipPlanefOES_debug((plane), (equation), __FILE__, __LINE__)
void glatter_glGetClipPlanefOES_debug(GLenum plane, GLfloat *equation, const char* file, int line);
#define glOrthofOES(l, r, b, t, n, f) glatter_glOrthofOES_debug((l), (r), (b), (t), (n), (f), __FILE__, __LINE__)
void glatter_glOrthofOES_debug(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f, const char* file, int line);
#endif // defined(GL_OES_single_precision)
#if defined(GL_OVR_multiview)
#define glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews) glatter_glFramebufferTextureMultiviewOVR_debug((target), (attachment), (texture), (level), (baseViewIndex), (numViews), __FILE__, __LINE__)
void glatter_glFramebufferTextureMultiviewOVR_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews, const char* file, int line);
#endif // defined(GL_OVR_multiview)
#if defined(GL_PGI_misc_hints)
#define glHintPGI(target, mode) glatter_glHintPGI_debug((target), (mode), __FILE__, __LINE__)
void glatter_glHintPGI_debug(GLenum target, GLint mode, const char* file, int line);
#endif // defined(GL_PGI_misc_hints)
#if defined(GL_SGIS_detail_texture)
#define glDetailTexFuncSGIS(target, n, points) glatter_glDetailTexFuncSGIS_debug((target), (n), (points), __FILE__, __LINE__)
void glatter_glDetailTexFuncSGIS_debug(GLenum target, GLsizei n, const GLfloat *points, const char* file, int line);
#define glGetDetailTexFuncSGIS(target, points) glatter_glGetDetailTexFuncSGIS_debug((target), (points), __FILE__, __LINE__)
void glatter_glGetDetailTexFuncSGIS_debug(GLenum target, GLfloat *points, const char* file, int line);
#endif // defined(GL_SGIS_detail_texture)
#if defined(GL_SGIS_fog_function)
#define glFogFuncSGIS(n, points) glatter_glFogFuncSGIS_debug((n), (points), __FILE__, __LINE__)
void glatter_glFogFuncSGIS_debug(GLsizei n, const GLfloat *points, const char* file, int line);
#define glGetFogFuncSGIS(points) glatter_glGetFogFuncSGIS_debug((points), __FILE__, __LINE__)
void glatter_glGetFogFuncSGIS_debug(GLfloat *points, const char* file, int line);
#endif // defined(GL_SGIS_fog_function)
#if defined(GL_SGIS_multisample)
#define glSampleMaskSGIS(value, invert) glatter_glSampleMaskSGIS_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleMaskSGIS_debug(GLclampf value, GLboolean invert, const char* file, int line);
#define glSamplePatternSGIS(pattern) glatter_glSamplePatternSGIS_debug((pattern), __FILE__, __LINE__)
void glatter_glSamplePatternSGIS_debug(GLenum pattern, const char* file, int line);
#endif // defined(GL_SGIS_multisample)
#if defined(GL_SGIS_pixel_texture)
#define glGetPixelTexGenParameterfvSGIS(pname, params) glatter_glGetPixelTexGenParameterfvSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPixelTexGenParameterfvSGIS_debug(GLenum pname, GLfloat *params, const char* file, int line);
#define glGetPixelTexGenParameterivSGIS(pname, params) glatter_glGetPixelTexGenParameterivSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glGetPixelTexGenParameterivSGIS_debug(GLenum pname, GLint *params, const char* file, int line);
#define glPixelTexGenParameterfSGIS(pname, param) glatter_glPixelTexGenParameterfSGIS_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTexGenParameterfSGIS_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPixelTexGenParameterfvSGIS(pname, params) glatter_glPixelTexGenParameterfvSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPixelTexGenParameterfvSGIS_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glPixelTexGenParameteriSGIS(pname, param) glatter_glPixelTexGenParameteriSGIS_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPixelTexGenParameteriSGIS_debug(GLenum pname, GLint param, const char* file, int line);
#define glPixelTexGenParameterivSGIS(pname, params) glatter_glPixelTexGenParameterivSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPixelTexGenParameterivSGIS_debug(GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_SGIS_pixel_texture)
#if defined(GL_SGIS_point_parameters)
#define glPointParameterfSGIS(pname, param) glatter_glPointParameterfSGIS_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterfSGIS_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfvSGIS(pname, params) glatter_glPointParameterfvSGIS_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfvSGIS_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#endif // defined(GL_SGIS_point_parameters)
#if defined(GL_SGIS_sharpen_texture)
#define glGetSharpenTexFuncSGIS(target, points) glatter_glGetSharpenTexFuncSGIS_debug((target), (points), __FILE__, __LINE__)
void glatter_glGetSharpenTexFuncSGIS_debug(GLenum target, GLfloat *points, const char* file, int line);
#define glSharpenTexFuncSGIS(target, n, points) glatter_glSharpenTexFuncSGIS_debug((target), (n), (points), __FILE__, __LINE__)
void glatter_glSharpenTexFuncSGIS_debug(GLenum target, GLsizei n, const GLfloat *points, const char* file, int line);
#endif // defined(GL_SGIS_sharpen_texture)
#if defined(GL_SGIS_texture4D)
#define glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) glatter_glTexImage4DSGIS_debug((target), (level), (internalformat), (width), (height), (depth), (size4d), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage4DSGIS_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) glatter_glTexSubImage4DSGIS_debug((target), (level), (xoffset), (yoffset), (zoffset), (woffset), (width), (height), (depth), (size4d), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage4DSGIS_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_SGIS_texture4D)
#if defined(GL_SGIS_texture_color_mask)
#define glTextureColorMaskSGIS(red, green, blue, alpha) glatter_glTextureColorMaskSGIS_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glTextureColorMaskSGIS_debug(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, const char* file, int line);
#endif // defined(GL_SGIS_texture_color_mask)
#if defined(GL_SGIS_texture_filter4)
#define glGetTexFilterFuncSGIS(target, filter, weights) glatter_glGetTexFilterFuncSGIS_debug((target), (filter), (weights), __FILE__, __LINE__)
void glatter_glGetTexFilterFuncSGIS_debug(GLenum target, GLenum filter, GLfloat *weights, const char* file, int line);
#define glTexFilterFuncSGIS(target, filter, n, weights) glatter_glTexFilterFuncSGIS_debug((target), (filter), (n), (weights), __FILE__, __LINE__)
void glatter_glTexFilterFuncSGIS_debug(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights, const char* file, int line);
#endif // defined(GL_SGIS_texture_filter4)
#if defined(GL_SGIX_async)
#define glAsyncMarkerSGIX(marker) glatter_glAsyncMarkerSGIX_debug((marker), __FILE__, __LINE__)
void glatter_glAsyncMarkerSGIX_debug(GLuint marker, const char* file, int line);
#define glDeleteAsyncMarkersSGIX(marker, range) glatter_glDeleteAsyncMarkersSGIX_debug((marker), (range), __FILE__, __LINE__)
void glatter_glDeleteAsyncMarkersSGIX_debug(GLuint marker, GLsizei range, const char* file, int line);
#define glFinishAsyncSGIX(markerp) glatter_glFinishAsyncSGIX_debug((markerp), __FILE__, __LINE__)
GLint glatter_glFinishAsyncSGIX_debug(GLuint *markerp, const char* file, int line);
#define glGenAsyncMarkersSGIX(range) glatter_glGenAsyncMarkersSGIX_debug((range), __FILE__, __LINE__)
GLuint glatter_glGenAsyncMarkersSGIX_debug(GLsizei range, const char* file, int line);
#define glIsAsyncMarkerSGIX(marker) glatter_glIsAsyncMarkerSGIX_debug((marker), __FILE__, __LINE__)
GLboolean glatter_glIsAsyncMarkerSGIX_debug(GLuint marker, const char* file, int line);
#define glPollAsyncSGIX(markerp) glatter_glPollAsyncSGIX_debug((markerp), __FILE__, __LINE__)
GLint glatter_glPollAsyncSGIX_debug(GLuint *markerp, const char* file, int line);
#endif // defined(GL_SGIX_async)
#if defined(GL_SGIX_flush_raster)
#define glFlushRasterSGIX() glatter_glFlushRasterSGIX_debug(__FILE__, __LINE__)
void glatter_glFlushRasterSGIX_debug(const char* file, int line);
#endif // defined(GL_SGIX_flush_raster)
#if defined(GL_SGIX_fragment_lighting)
#define glFragmentColorMaterialSGIX(face, mode) glatter_glFragmentColorMaterialSGIX_debug((face), (mode), __FILE__, __LINE__)
void glatter_glFragmentColorMaterialSGIX_debug(GLenum face, GLenum mode, const char* file, int line);
#define glFragmentLightModelfSGIX(pname, param) glatter_glFragmentLightModelfSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFragmentLightModelfSGIX_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glFragmentLightModelfvSGIX(pname, params) glatter_glFragmentLightModelfvSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFragmentLightModelfvSGIX_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glFragmentLightModeliSGIX(pname, param) glatter_glFragmentLightModeliSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glFragmentLightModeliSGIX_debug(GLenum pname, GLint param, const char* file, int line);
#define glFragmentLightModelivSGIX(pname, params) glatter_glFragmentLightModelivSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glFragmentLightModelivSGIX_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glFragmentLightfSGIX(light, pname, param) glatter_glFragmentLightfSGIX_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glFragmentLightfSGIX_debug(GLenum light, GLenum pname, GLfloat param, const char* file, int line);
#define glFragmentLightfvSGIX(light, pname, params) glatter_glFragmentLightfvSGIX_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glFragmentLightfvSGIX_debug(GLenum light, GLenum pname, const GLfloat *params, const char* file, int line);
#define glFragmentLightiSGIX(light, pname, param) glatter_glFragmentLightiSGIX_debug((light), (pname), (param), __FILE__, __LINE__)
void glatter_glFragmentLightiSGIX_debug(GLenum light, GLenum pname, GLint param, const char* file, int line);
#define glFragmentLightivSGIX(light, pname, params) glatter_glFragmentLightivSGIX_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glFragmentLightivSGIX_debug(GLenum light, GLenum pname, const GLint *params, const char* file, int line);
#define glFragmentMaterialfSGIX(face, pname, param) glatter_glFragmentMaterialfSGIX_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glFragmentMaterialfSGIX_debug(GLenum face, GLenum pname, GLfloat param, const char* file, int line);
#define glFragmentMaterialfvSGIX(face, pname, params) glatter_glFragmentMaterialfvSGIX_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glFragmentMaterialfvSGIX_debug(GLenum face, GLenum pname, const GLfloat *params, const char* file, int line);
#define glFragmentMaterialiSGIX(face, pname, param) glatter_glFragmentMaterialiSGIX_debug((face), (pname), (param), __FILE__, __LINE__)
void glatter_glFragmentMaterialiSGIX_debug(GLenum face, GLenum pname, GLint param, const char* file, int line);
#define glFragmentMaterialivSGIX(face, pname, params) glatter_glFragmentMaterialivSGIX_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glFragmentMaterialivSGIX_debug(GLenum face, GLenum pname, const GLint *params, const char* file, int line);
#define glGetFragmentLightfvSGIX(light, pname, params) glatter_glGetFragmentLightfvSGIX_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFragmentLightfvSGIX_debug(GLenum light, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetFragmentLightivSGIX(light, pname, params) glatter_glGetFragmentLightivSGIX_debug((light), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFragmentLightivSGIX_debug(GLenum light, GLenum pname, GLint *params, const char* file, int line);
#define glGetFragmentMaterialfvSGIX(face, pname, params) glatter_glGetFragmentMaterialfvSGIX_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFragmentMaterialfvSGIX_debug(GLenum face, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetFragmentMaterialivSGIX(face, pname, params) glatter_glGetFragmentMaterialivSGIX_debug((face), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFragmentMaterialivSGIX_debug(GLenum face, GLenum pname, GLint *params, const char* file, int line);
#define glLightEnviSGIX(pname, param) glatter_glLightEnviSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glLightEnviSGIX_debug(GLenum pname, GLint param, const char* file, int line);
#endif // defined(GL_SGIX_fragment_lighting)
#if defined(GL_SGIX_framezoom)
#define glFrameZoomSGIX(factor) glatter_glFrameZoomSGIX_debug((factor), __FILE__, __LINE__)
void glatter_glFrameZoomSGIX_debug(GLint factor, const char* file, int line);
#endif // defined(GL_SGIX_framezoom)
#if defined(GL_SGIX_igloo_interface)
#define glIglooInterfaceSGIX(pname, params) glatter_glIglooInterfaceSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glIglooInterfaceSGIX_debug(GLenum pname, const void *params, const char* file, int line);
#endif // defined(GL_SGIX_igloo_interface)
#if defined(GL_SGIX_instruments)
#define glGetInstrumentsSGIX() glatter_glGetInstrumentsSGIX_debug(__FILE__, __LINE__)
GLint glatter_glGetInstrumentsSGIX_debug(const char* file, int line);
#define glInstrumentsBufferSGIX(size, buffer) glatter_glInstrumentsBufferSGIX_debug((size), (buffer), __FILE__, __LINE__)
void glatter_glInstrumentsBufferSGIX_debug(GLsizei size, GLint *buffer, const char* file, int line);
#define glPollInstrumentsSGIX(marker_p) glatter_glPollInstrumentsSGIX_debug((marker_p), __FILE__, __LINE__)
GLint glatter_glPollInstrumentsSGIX_debug(GLint *marker_p, const char* file, int line);
#define glReadInstrumentsSGIX(marker) glatter_glReadInstrumentsSGIX_debug((marker), __FILE__, __LINE__)
void glatter_glReadInstrumentsSGIX_debug(GLint marker, const char* file, int line);
#define glStartInstrumentsSGIX() glatter_glStartInstrumentsSGIX_debug(__FILE__, __LINE__)
void glatter_glStartInstrumentsSGIX_debug(const char* file, int line);
#define glStopInstrumentsSGIX(marker) glatter_glStopInstrumentsSGIX_debug((marker), __FILE__, __LINE__)
void glatter_glStopInstrumentsSGIX_debug(GLint marker, const char* file, int line);
#endif // defined(GL_SGIX_instruments)
#if defined(GL_SGIX_list_priority)
#define glGetListParameterfvSGIX(list, pname, params) glatter_glGetListParameterfvSGIX_debug((list), (pname), (params), __FILE__, __LINE__)
void glatter_glGetListParameterfvSGIX_debug(GLuint list, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetListParameterivSGIX(list, pname, params) glatter_glGetListParameterivSGIX_debug((list), (pname), (params), __FILE__, __LINE__)
void glatter_glGetListParameterivSGIX_debug(GLuint list, GLenum pname, GLint *params, const char* file, int line);
#define glListParameterfSGIX(list, pname, param) glatter_glListParameterfSGIX_debug((list), (pname), (param), __FILE__, __LINE__)
void glatter_glListParameterfSGIX_debug(GLuint list, GLenum pname, GLfloat param, const char* file, int line);
#define glListParameterfvSGIX(list, pname, params) glatter_glListParameterfvSGIX_debug((list), (pname), (params), __FILE__, __LINE__)
void glatter_glListParameterfvSGIX_debug(GLuint list, GLenum pname, const GLfloat *params, const char* file, int line);
#define glListParameteriSGIX(list, pname, param) glatter_glListParameteriSGIX_debug((list), (pname), (param), __FILE__, __LINE__)
void glatter_glListParameteriSGIX_debug(GLuint list, GLenum pname, GLint param, const char* file, int line);
#define glListParameterivSGIX(list, pname, params) glatter_glListParameterivSGIX_debug((list), (pname), (params), __FILE__, __LINE__)
void glatter_glListParameterivSGIX_debug(GLuint list, GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_SGIX_list_priority)
#if defined(GL_SGIX_pixel_texture)
#define glPixelTexGenSGIX(mode) glatter_glPixelTexGenSGIX_debug((mode), __FILE__, __LINE__)
void glatter_glPixelTexGenSGIX_debug(GLenum mode, const char* file, int line);
#endif // defined(GL_SGIX_pixel_texture)
#if defined(GL_SGIX_polynomial_ffd)
#define glDeformSGIX(mask) glatter_glDeformSGIX_debug((mask), __FILE__, __LINE__)
void glatter_glDeformSGIX_debug(GLbitfield mask, const char* file, int line);
#define glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3dSGIX_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points), __FILE__, __LINE__)
void glatter_glDeformationMap3dSGIX_debug(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points, const char* file, int line);
#define glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) glatter_glDeformationMap3fSGIX_debug((target), (u1), (u2), (ustride), (uorder), (v1), (v2), (vstride), (vorder), (w1), (w2), (wstride), (worder), (points), __FILE__, __LINE__)
void glatter_glDeformationMap3fSGIX_debug(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points, const char* file, int line);
#define glLoadIdentityDeformationMapSGIX(mask) glatter_glLoadIdentityDeformationMapSGIX_debug((mask), __FILE__, __LINE__)
void glatter_glLoadIdentityDeformationMapSGIX_debug(GLbitfield mask, const char* file, int line);
#endif // defined(GL_SGIX_polynomial_ffd)
#if defined(GL_SGIX_reference_plane)
#define glReferencePlaneSGIX(equation) glatter_glReferencePlaneSGIX_debug((equation), __FILE__, __LINE__)
void glatter_glReferencePlaneSGIX_debug(const GLdouble *equation, const char* file, int line);
#endif // defined(GL_SGIX_reference_plane)
#if defined(GL_SGIX_sprite)
#define glSpriteParameterfSGIX(pname, param) glatter_glSpriteParameterfSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glSpriteParameterfSGIX_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glSpriteParameterfvSGIX(pname, params) glatter_glSpriteParameterfvSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glSpriteParameterfvSGIX_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glSpriteParameteriSGIX(pname, param) glatter_glSpriteParameteriSGIX_debug((pname), (param), __FILE__, __LINE__)
void glatter_glSpriteParameteriSGIX_debug(GLenum pname, GLint param, const char* file, int line);
#define glSpriteParameterivSGIX(pname, params) glatter_glSpriteParameterivSGIX_debug((pname), (params), __FILE__, __LINE__)
void glatter_glSpriteParameterivSGIX_debug(GLenum pname, const GLint *params, const char* file, int line);
#endif // defined(GL_SGIX_sprite)
#if defined(GL_SGIX_tag_sample_buffer)
#define glTagSampleBufferSGIX() glatter_glTagSampleBufferSGIX_debug(__FILE__, __LINE__)
void glatter_glTagSampleBufferSGIX_debug(const char* file, int line);
#endif // defined(GL_SGIX_tag_sample_buffer)
#if defined(GL_SGI_color_table)
#define glColorTableParameterfvSGI(target, pname, params) glatter_glColorTableParameterfvSGI_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameterfvSGI_debug(GLenum target, GLenum pname, const GLfloat *params, const char* file, int line);
#define glColorTableParameterivSGI(target, pname, params) glatter_glColorTableParameterivSGI_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glColorTableParameterivSGI_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glColorTableSGI(target, internalformat, width, format, type, table) glatter_glColorTableSGI_debug((target), (internalformat), (width), (format), (type), (table), __FILE__, __LINE__)
void glatter_glColorTableSGI_debug(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table, const char* file, int line);
#define glCopyColorTableSGI(target, internalformat, x, y, width) glatter_glCopyColorTableSGI_debug((target), (internalformat), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyColorTableSGI_debug(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glGetColorTableParameterfvSGI(target, pname, params) glatter_glGetColorTableParameterfvSGI_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterfvSGI_debug(GLenum target, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetColorTableParameterivSGI(target, pname, params) glatter_glGetColorTableParameterivSGI_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetColorTableParameterivSGI_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetColorTableSGI(target, format, type, table) glatter_glGetColorTableSGI_debug((target), (format), (type), (table), __FILE__, __LINE__)
void glatter_glGetColorTableSGI_debug(GLenum target, GLenum format, GLenum type, void *table, const char* file, int line);
#endif // defined(GL_SGI_color_table)
#if defined(GL_SUNX_constant_data)
#define glFinishTextureSUNX() glatter_glFinishTextureSUNX_debug(__FILE__, __LINE__)
void glatter_glFinishTextureSUNX_debug(const char* file, int line);
#endif // defined(GL_SUNX_constant_data)
#if defined(GL_SUN_global_alpha)
#define glGlobalAlphaFactorbSUN(factor) glatter_glGlobalAlphaFactorbSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorbSUN_debug(GLbyte factor, const char* file, int line);
#define glGlobalAlphaFactordSUN(factor) glatter_glGlobalAlphaFactordSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactordSUN_debug(GLdouble factor, const char* file, int line);
#define glGlobalAlphaFactorfSUN(factor) glatter_glGlobalAlphaFactorfSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorfSUN_debug(GLfloat factor, const char* file, int line);
#define glGlobalAlphaFactoriSUN(factor) glatter_glGlobalAlphaFactoriSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactoriSUN_debug(GLint factor, const char* file, int line);
#define glGlobalAlphaFactorsSUN(factor) glatter_glGlobalAlphaFactorsSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorsSUN_debug(GLshort factor, const char* file, int line);
#define glGlobalAlphaFactorubSUN(factor) glatter_glGlobalAlphaFactorubSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorubSUN_debug(GLubyte factor, const char* file, int line);
#define glGlobalAlphaFactoruiSUN(factor) glatter_glGlobalAlphaFactoruiSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactoruiSUN_debug(GLuint factor, const char* file, int line);
#define glGlobalAlphaFactorusSUN(factor) glatter_glGlobalAlphaFactorusSUN_debug((factor), __FILE__, __LINE__)
void glatter_glGlobalAlphaFactorusSUN_debug(GLushort factor, const char* file, int line);
#endif // defined(GL_SUN_global_alpha)
#if defined(GL_SUN_mesh_array)
#define glDrawMeshArraysSUN(mode, first, count, width) glatter_glDrawMeshArraysSUN_debug((mode), (first), (count), (width), __FILE__, __LINE__)
void glatter_glDrawMeshArraysSUN_debug(GLenum mode, GLint first, GLsizei count, GLsizei width, const char* file, int line);
#endif // defined(GL_SUN_mesh_array)
#if defined(GL_SUN_triangle_list)
#define glReplacementCodePointerSUN(type, stride, pointer) glatter_glReplacementCodePointerSUN_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glReplacementCodePointerSUN_debug(GLenum type, GLsizei stride, const void **pointer, const char* file, int line);
#define glReplacementCodeubSUN(code) glatter_glReplacementCodeubSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeubSUN_debug(GLubyte code, const char* file, int line);
#define glReplacementCodeubvSUN(code) glatter_glReplacementCodeubvSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeubvSUN_debug(const GLubyte *code, const char* file, int line);
#define glReplacementCodeuiSUN(code) glatter_glReplacementCodeuiSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeuiSUN_debug(GLuint code, const char* file, int line);
#define glReplacementCodeuivSUN(code) glatter_glReplacementCodeuivSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeuivSUN_debug(const GLuint *code, const char* file, int line);
#define glReplacementCodeusSUN(code) glatter_glReplacementCodeusSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeusSUN_debug(GLushort code, const char* file, int line);
#define glReplacementCodeusvSUN(code) glatter_glReplacementCodeusvSUN_debug((code), __FILE__, __LINE__)
void glatter_glReplacementCodeusvSUN_debug(const GLushort *code, const char* file, int line);
#endif // defined(GL_SUN_triangle_list)
#if defined(GL_SUN_vertex)
#define glColor3fVertex3fSUN(r, g, b, x, y, z) glatter_glColor3fVertex3fSUN_debug((r), (g), (b), (x), (y), (z), __FILE__, __LINE__)
void glatter_glColor3fVertex3fSUN_debug(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glColor3fVertex3fvSUN(c, v) glatter_glColor3fVertex3fvSUN_debug((c), (v), __FILE__, __LINE__)
void glatter_glColor3fVertex3fvSUN_debug(const GLfloat *c, const GLfloat *v, const char* file, int line);
#define glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z) glatter_glColor4fNormal3fVertex3fSUN_debug((r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glColor4fNormal3fVertex3fSUN_debug(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glColor4fNormal3fVertex3fvSUN(c, n, v) glatter_glColor4fNormal3fVertex3fvSUN_debug((c), (n), (v), __FILE__, __LINE__)
void glatter_glColor4fNormal3fVertex3fvSUN_debug(const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glColor4ubVertex2fSUN(r, g, b, a, x, y) glatter_glColor4ubVertex2fSUN_debug((r), (g), (b), (a), (x), (y), __FILE__, __LINE__)
void glatter_glColor4ubVertex2fSUN_debug(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, const char* file, int line);
#define glColor4ubVertex2fvSUN(c, v) glatter_glColor4ubVertex2fvSUN_debug((c), (v), __FILE__, __LINE__)
void glatter_glColor4ubVertex2fvSUN_debug(const GLubyte *c, const GLfloat *v, const char* file, int line);
#define glColor4ubVertex3fSUN(r, g, b, a, x, y, z) glatter_glColor4ubVertex3fSUN_debug((r), (g), (b), (a), (x), (y), (z), __FILE__, __LINE__)
void glatter_glColor4ubVertex3fSUN_debug(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glColor4ubVertex3fvSUN(c, v) glatter_glColor4ubVertex3fvSUN_debug((c), (v), __FILE__, __LINE__)
void glatter_glColor4ubVertex3fvSUN_debug(const GLubyte *c, const GLfloat *v, const char* file, int line);
#define glNormal3fVertex3fSUN(nx, ny, nz, x, y, z) glatter_glNormal3fVertex3fSUN_debug((nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glNormal3fVertex3fSUN_debug(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glNormal3fVertex3fvSUN(n, v) glatter_glNormal3fVertex3fvSUN_debug((n), (v), __FILE__, __LINE__)
void glatter_glNormal3fVertex3fvSUN_debug(const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z) glatter_glReplacementCodeuiColor3fVertex3fSUN_debug((rc), (r), (g), (b), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor3fVertex3fSUN_debug(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor3fVertex3fvSUN_debug((rc), (c), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *c, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiColor4fNormal3fVertex3fSUN_debug((rc), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor4fNormal3fVertex3fSUN_debug(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v) glatter_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_debug((rc), (c), (n), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z) glatter_glReplacementCodeuiColor4ubVertex3fSUN_debug((rc), (r), (g), (b), (a), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor4ubVertex3fSUN_debug(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v) glatter_glReplacementCodeuiColor4ubVertex3fvSUN_debug((rc), (c), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiColor4ubVertex3fvSUN_debug(const GLuint *rc, const GLubyte *c, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiNormal3fVertex3fSUN_debug((rc), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiNormal3fVertex3fSUN_debug(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v) glatter_glReplacementCodeuiNormal3fVertex3fvSUN_debug((rc), (n), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiNormal3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_debug((rc), (s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_debug(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v) glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_debug((rc), (tc), (c), (n), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_debug((rc), (s), (t), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_debug(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v) glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_debug((rc), (tc), (n), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z) glatter_glReplacementCodeuiTexCoord2fVertex3fSUN_debug((rc), (s), (t), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fVertex3fSUN_debug(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v) glatter_glReplacementCodeuiTexCoord2fVertex3fvSUN_debug((rc), (tc), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiTexCoord2fVertex3fvSUN_debug(const GLuint *rc, const GLfloat *tc, const GLfloat *v, const char* file, int line);
#define glReplacementCodeuiVertex3fSUN(rc, x, y, z) glatter_glReplacementCodeuiVertex3fSUN_debug((rc), (x), (y), (z), __FILE__, __LINE__)
void glatter_glReplacementCodeuiVertex3fSUN_debug(GLuint rc, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glReplacementCodeuiVertex3fvSUN(rc, v) glatter_glReplacementCodeuiVertex3fvSUN_debug((rc), (v), __FILE__, __LINE__)
void glatter_glReplacementCodeuiVertex3fvSUN_debug(const GLuint *rc, const GLfloat *v, const char* file, int line);
#define glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z) glatter_glTexCoord2fColor3fVertex3fSUN_debug((s), (t), (r), (g), (b), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fColor3fVertex3fSUN_debug(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fColor3fVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor3fVertex3fvSUN_debug((tc), (c), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fColor3fVertex3fvSUN_debug(const GLfloat *tc, const GLfloat *c, const GLfloat *v, const char* file, int line);
#define glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z) glatter_glTexCoord2fColor4fNormal3fVertex3fSUN_debug((s), (t), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fColor4fNormal3fVertex3fSUN_debug(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v) glatter_glTexCoord2fColor4fNormal3fVertex3fvSUN_debug((tc), (c), (n), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fColor4fNormal3fVertex3fvSUN_debug(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z) glatter_glTexCoord2fColor4ubVertex3fSUN_debug((s), (t), (r), (g), (b), (a), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fColor4ubVertex3fSUN_debug(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fColor4ubVertex3fvSUN(tc, c, v) glatter_glTexCoord2fColor4ubVertex3fvSUN_debug((tc), (c), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fColor4ubVertex3fvSUN_debug(const GLfloat *tc, const GLubyte *c, const GLfloat *v, const char* file, int line);
#define glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z) glatter_glTexCoord2fNormal3fVertex3fSUN_debug((s), (t), (nx), (ny), (nz), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fNormal3fVertex3fSUN_debug(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fNormal3fVertex3fvSUN(tc, n, v) glatter_glTexCoord2fNormal3fVertex3fvSUN_debug((tc), (n), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fNormal3fVertex3fvSUN_debug(const GLfloat *tc, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glTexCoord2fVertex3fSUN(s, t, x, y, z) glatter_glTexCoord2fVertex3fSUN_debug((s), (t), (x), (y), (z), __FILE__, __LINE__)
void glatter_glTexCoord2fVertex3fSUN_debug(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glTexCoord2fVertex3fvSUN(tc, v) glatter_glTexCoord2fVertex3fvSUN_debug((tc), (v), __FILE__, __LINE__)
void glatter_glTexCoord2fVertex3fvSUN_debug(const GLfloat *tc, const GLfloat *v, const char* file, int line);
#define glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) glatter_glTexCoord4fColor4fNormal3fVertex4fSUN_debug((s), (t), (p), (q), (r), (g), (b), (a), (nx), (ny), (nz), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glTexCoord4fColor4fNormal3fVertex4fSUN_debug(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v) glatter_glTexCoord4fColor4fNormal3fVertex4fvSUN_debug((tc), (c), (n), (v), __FILE__, __LINE__)
void glatter_glTexCoord4fColor4fNormal3fVertex4fvSUN_debug(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v, const char* file, int line);
#define glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w) glatter_glTexCoord4fVertex4fSUN_debug((s), (t), (p), (q), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glTexCoord4fVertex4fSUN_debug(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glTexCoord4fVertex4fvSUN(tc, v) glatter_glTexCoord4fVertex4fvSUN_debug((tc), (v), __FILE__, __LINE__)
void glatter_glTexCoord4fVertex4fvSUN_debug(const GLfloat *tc, const GLfloat *v, const char* file, int line);
#endif // defined(GL_SUN_vertex)
#if defined(GL_VERSION_1_2)
#define glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glDrawRangeElements(mode, start, end, count, type, indices) glatter_glDrawRangeElements_debug((mode), (start), (end), (count), (type), (indices), __FILE__, __LINE__)
void glatter_glDrawRangeElements_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, const char* file, int line);
#define glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) glatter_glTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexImage3D_debug(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#endif // defined(GL_VERSION_1_2)
#if defined(GL_VERSION_1_3)
#define glActiveTexture(texture) glatter_glActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glActiveTexture_debug(GLenum texture, const char* file, int line);
#define glClientActiveTexture(texture) glatter_glClientActiveTexture_debug((texture), __FILE__, __LINE__)
void glatter_glClientActiveTexture_debug(GLenum texture, const char* file, int line);
#define glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) glatter_glCompressedTexImage1D_debug((target), (level), (internalformat), (width), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage1D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) glatter_glCompressedTexImage2D_debug((target), (level), (internalformat), (width), (height), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage2D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) glatter_glCompressedTexImage3D_debug((target), (level), (internalformat), (width), (height), (depth), (border), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexImage3D_debug(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) glatter_glCompressedTexSubImage1D_debug((target), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage1D_debug(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTexSubImage2D_debug((target), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage2D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTexSubImage3D_debug((target), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTexSubImage3D_debug(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glGetCompressedTexImage(target, level, img) glatter_glGetCompressedTexImage_debug((target), (level), (img), __FILE__, __LINE__)
void glatter_glGetCompressedTexImage_debug(GLenum target, GLint level, void *img, const char* file, int line);
#define glLoadTransposeMatrixd(m) glatter_glLoadTransposeMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glLoadTransposeMatrixf(m) glatter_glLoadTransposeMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glLoadTransposeMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glMultTransposeMatrixd(m) glatter_glMultTransposeMatrixd_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixd_debug(const GLdouble *m, const char* file, int line);
#define glMultTransposeMatrixf(m) glatter_glMultTransposeMatrixf_debug((m), __FILE__, __LINE__)
void glatter_glMultTransposeMatrixf_debug(const GLfloat *m, const char* file, int line);
#define glMultiTexCoord1d(target, s) glatter_glMultiTexCoord1d_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1d_debug(GLenum target, GLdouble s, const char* file, int line);
#define glMultiTexCoord1dv(target, v) glatter_glMultiTexCoord1dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord1f(target, s) glatter_glMultiTexCoord1f_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1f_debug(GLenum target, GLfloat s, const char* file, int line);
#define glMultiTexCoord1fv(target, v) glatter_glMultiTexCoord1fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord1i(target, s) glatter_glMultiTexCoord1i_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1i_debug(GLenum target, GLint s, const char* file, int line);
#define glMultiTexCoord1iv(target, v) glatter_glMultiTexCoord1iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord1s(target, s) glatter_glMultiTexCoord1s_debug((target), (s), __FILE__, __LINE__)
void glatter_glMultiTexCoord1s_debug(GLenum target, GLshort s, const char* file, int line);
#define glMultiTexCoord1sv(target, v) glatter_glMultiTexCoord1sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord1sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord2d(target, s, t) glatter_glMultiTexCoord2d_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2d_debug(GLenum target, GLdouble s, GLdouble t, const char* file, int line);
#define glMultiTexCoord2dv(target, v) glatter_glMultiTexCoord2dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord2f(target, s, t) glatter_glMultiTexCoord2f_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2f_debug(GLenum target, GLfloat s, GLfloat t, const char* file, int line);
#define glMultiTexCoord2fv(target, v) glatter_glMultiTexCoord2fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord2i(target, s, t) glatter_glMultiTexCoord2i_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2i_debug(GLenum target, GLint s, GLint t, const char* file, int line);
#define glMultiTexCoord2iv(target, v) glatter_glMultiTexCoord2iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord2s(target, s, t) glatter_glMultiTexCoord2s_debug((target), (s), (t), __FILE__, __LINE__)
void glatter_glMultiTexCoord2s_debug(GLenum target, GLshort s, GLshort t, const char* file, int line);
#define glMultiTexCoord2sv(target, v) glatter_glMultiTexCoord2sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord2sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord3d(target, s, t, r) glatter_glMultiTexCoord3d_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3d_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, const char* file, int line);
#define glMultiTexCoord3dv(target, v) glatter_glMultiTexCoord3dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord3f(target, s, t, r) glatter_glMultiTexCoord3f_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, const char* file, int line);
#define glMultiTexCoord3fv(target, v) glatter_glMultiTexCoord3fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord3i(target, s, t, r) glatter_glMultiTexCoord3i_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3i_debug(GLenum target, GLint s, GLint t, GLint r, const char* file, int line);
#define glMultiTexCoord3iv(target, v) glatter_glMultiTexCoord3iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord3s(target, s, t, r) glatter_glMultiTexCoord3s_debug((target), (s), (t), (r), __FILE__, __LINE__)
void glatter_glMultiTexCoord3s_debug(GLenum target, GLshort s, GLshort t, GLshort r, const char* file, int line);
#define glMultiTexCoord3sv(target, v) glatter_glMultiTexCoord3sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord3sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glMultiTexCoord4d(target, s, t, r, q) glatter_glMultiTexCoord4d_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4d_debug(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q, const char* file, int line);
#define glMultiTexCoord4dv(target, v) glatter_glMultiTexCoord4dv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4dv_debug(GLenum target, const GLdouble *v, const char* file, int line);
#define glMultiTexCoord4f(target, s, t, r, q) glatter_glMultiTexCoord4f_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4f_debug(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q, const char* file, int line);
#define glMultiTexCoord4fv(target, v) glatter_glMultiTexCoord4fv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4fv_debug(GLenum target, const GLfloat *v, const char* file, int line);
#define glMultiTexCoord4i(target, s, t, r, q) glatter_glMultiTexCoord4i_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4i_debug(GLenum target, GLint s, GLint t, GLint r, GLint q, const char* file, int line);
#define glMultiTexCoord4iv(target, v) glatter_glMultiTexCoord4iv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4iv_debug(GLenum target, const GLint *v, const char* file, int line);
#define glMultiTexCoord4s(target, s, t, r, q) glatter_glMultiTexCoord4s_debug((target), (s), (t), (r), (q), __FILE__, __LINE__)
void glatter_glMultiTexCoord4s_debug(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q, const char* file, int line);
#define glMultiTexCoord4sv(target, v) glatter_glMultiTexCoord4sv_debug((target), (v), __FILE__, __LINE__)
void glatter_glMultiTexCoord4sv_debug(GLenum target, const GLshort *v, const char* file, int line);
#define glSampleCoverage(value, invert) glatter_glSampleCoverage_debug((value), (invert), __FILE__, __LINE__)
void glatter_glSampleCoverage_debug(GLfloat value, GLboolean invert, const char* file, int line);
#endif // defined(GL_VERSION_1_3)
#if defined(GL_VERSION_1_4)
#define glBlendColor(red, green, blue, alpha) glatter_glBlendColor_debug((red), (green), (blue), (alpha), __FILE__, __LINE__)
void glatter_glBlendColor_debug(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, const char* file, int line);
#define glBlendEquation(mode) glatter_glBlendEquation_debug((mode), __FILE__, __LINE__)
void glatter_glBlendEquation_debug(GLenum mode, const char* file, int line);
#define glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) glatter_glBlendFuncSeparate_debug((sfactorRGB), (dfactorRGB), (sfactorAlpha), (dfactorAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparate_debug(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, const char* file, int line);
#define glFogCoordPointer(type, stride, pointer) glatter_glFogCoordPointer_debug((type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glFogCoordPointer_debug(GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glFogCoordd(coord) glatter_glFogCoordd_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordd_debug(GLdouble coord, const char* file, int line);
#define glFogCoorddv(coord) glatter_glFogCoorddv_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoorddv_debug(const GLdouble *coord, const char* file, int line);
#define glFogCoordf(coord) glatter_glFogCoordf_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordf_debug(GLfloat coord, const char* file, int line);
#define glFogCoordfv(coord) glatter_glFogCoordfv_debug((coord), __FILE__, __LINE__)
void glatter_glFogCoordfv_debug(const GLfloat *coord, const char* file, int line);
#define glMultiDrawArrays(mode, first, count, drawcount) glatter_glMultiDrawArrays_debug((mode), (first), (count), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawArrays_debug(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount, const char* file, int line);
#define glMultiDrawElements(mode, count, type, indices, drawcount) glatter_glMultiDrawElements_debug((mode), (count), (type), (indices), (drawcount), __FILE__, __LINE__)
void glatter_glMultiDrawElements_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const char* file, int line);
#define glPointParameterf(pname, param) glatter_glPointParameterf_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameterf_debug(GLenum pname, GLfloat param, const char* file, int line);
#define glPointParameterfv(pname, params) glatter_glPointParameterfv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameterfv_debug(GLenum pname, const GLfloat *params, const char* file, int line);
#define glPointParameteri(pname, param) glatter_glPointParameteri_debug((pname), (param), __FILE__, __LINE__)
void glatter_glPointParameteri_debug(GLenum pname, GLint param, const char* file, int line);
#define glPointParameteriv(pname, params) glatter_glPointParameteriv_debug((pname), (params), __FILE__, __LINE__)
void glatter_glPointParameteriv_debug(GLenum pname, const GLint *params, const char* file, int line);
#define glSecondaryColor3b(red, green, blue) glatter_glSecondaryColor3b_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3b_debug(GLbyte red, GLbyte green, GLbyte blue, const char* file, int line);
#define glSecondaryColor3bv(v) glatter_glSecondaryColor3bv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3bv_debug(const GLbyte *v, const char* file, int line);
#define glSecondaryColor3d(red, green, blue) glatter_glSecondaryColor3d_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3d_debug(GLdouble red, GLdouble green, GLdouble blue, const char* file, int line);
#define glSecondaryColor3dv(v) glatter_glSecondaryColor3dv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3dv_debug(const GLdouble *v, const char* file, int line);
#define glSecondaryColor3f(red, green, blue) glatter_glSecondaryColor3f_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3f_debug(GLfloat red, GLfloat green, GLfloat blue, const char* file, int line);
#define glSecondaryColor3fv(v) glatter_glSecondaryColor3fv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3fv_debug(const GLfloat *v, const char* file, int line);
#define glSecondaryColor3i(red, green, blue) glatter_glSecondaryColor3i_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3i_debug(GLint red, GLint green, GLint blue, const char* file, int line);
#define glSecondaryColor3iv(v) glatter_glSecondaryColor3iv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3iv_debug(const GLint *v, const char* file, int line);
#define glSecondaryColor3s(red, green, blue) glatter_glSecondaryColor3s_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3s_debug(GLshort red, GLshort green, GLshort blue, const char* file, int line);
#define glSecondaryColor3sv(v) glatter_glSecondaryColor3sv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3sv_debug(const GLshort *v, const char* file, int line);
#define glSecondaryColor3ub(red, green, blue) glatter_glSecondaryColor3ub_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3ub_debug(GLubyte red, GLubyte green, GLubyte blue, const char* file, int line);
#define glSecondaryColor3ubv(v) glatter_glSecondaryColor3ubv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3ubv_debug(const GLubyte *v, const char* file, int line);
#define glSecondaryColor3ui(red, green, blue) glatter_glSecondaryColor3ui_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3ui_debug(GLuint red, GLuint green, GLuint blue, const char* file, int line);
#define glSecondaryColor3uiv(v) glatter_glSecondaryColor3uiv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3uiv_debug(const GLuint *v, const char* file, int line);
#define glSecondaryColor3us(red, green, blue) glatter_glSecondaryColor3us_debug((red), (green), (blue), __FILE__, __LINE__)
void glatter_glSecondaryColor3us_debug(GLushort red, GLushort green, GLushort blue, const char* file, int line);
#define glSecondaryColor3usv(v) glatter_glSecondaryColor3usv_debug((v), __FILE__, __LINE__)
void glatter_glSecondaryColor3usv_debug(const GLushort *v, const char* file, int line);
#define glSecondaryColorPointer(size, type, stride, pointer) glatter_glSecondaryColorPointer_debug((size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glSecondaryColorPointer_debug(GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glWindowPos2d(x, y) glatter_glWindowPos2d_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2d_debug(GLdouble x, GLdouble y, const char* file, int line);
#define glWindowPos2dv(v) glatter_glWindowPos2dv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2dv_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos2f(x, y) glatter_glWindowPos2f_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2f_debug(GLfloat x, GLfloat y, const char* file, int line);
#define glWindowPos2fv(v) glatter_glWindowPos2fv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2fv_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos2i(x, y) glatter_glWindowPos2i_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2i_debug(GLint x, GLint y, const char* file, int line);
#define glWindowPos2iv(v) glatter_glWindowPos2iv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2iv_debug(const GLint *v, const char* file, int line);
#define glWindowPos2s(x, y) glatter_glWindowPos2s_debug((x), (y), __FILE__, __LINE__)
void glatter_glWindowPos2s_debug(GLshort x, GLshort y, const char* file, int line);
#define glWindowPos2sv(v) glatter_glWindowPos2sv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos2sv_debug(const GLshort *v, const char* file, int line);
#define glWindowPos3d(x, y, z) glatter_glWindowPos3d_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3d_debug(GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glWindowPos3dv(v) glatter_glWindowPos3dv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3dv_debug(const GLdouble *v, const char* file, int line);
#define glWindowPos3f(x, y, z) glatter_glWindowPos3f_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3f_debug(GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glWindowPos3fv(v) glatter_glWindowPos3fv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3fv_debug(const GLfloat *v, const char* file, int line);
#define glWindowPos3i(x, y, z) glatter_glWindowPos3i_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3i_debug(GLint x, GLint y, GLint z, const char* file, int line);
#define glWindowPos3iv(v) glatter_glWindowPos3iv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3iv_debug(const GLint *v, const char* file, int line);
#define glWindowPos3s(x, y, z) glatter_glWindowPos3s_debug((x), (y), (z), __FILE__, __LINE__)
void glatter_glWindowPos3s_debug(GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glWindowPos3sv(v) glatter_glWindowPos3sv_debug((v), __FILE__, __LINE__)
void glatter_glWindowPos3sv_debug(const GLshort *v, const char* file, int line);
#endif // defined(GL_VERSION_1_4)
#if defined(GL_VERSION_1_5)
#define glBeginQuery(target, id) glatter_glBeginQuery_debug((target), (id), __FILE__, __LINE__)
void glatter_glBeginQuery_debug(GLenum target, GLuint id, const char* file, int line);
#define glBindBuffer(target, buffer) glatter_glBindBuffer_debug((target), (buffer), __FILE__, __LINE__)
void glatter_glBindBuffer_debug(GLenum target, GLuint buffer, const char* file, int line);
#define glBufferData(target, size, data, usage) glatter_glBufferData_debug((target), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glBufferData_debug(GLenum target, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glBufferSubData(target, offset, size, data) glatter_glBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glDeleteBuffers(n, buffers) glatter_glDeleteBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glDeleteBuffers_debug(GLsizei n, const GLuint *buffers, const char* file, int line);
#define glDeleteQueries(n, ids) glatter_glDeleteQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteQueries_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glEndQuery(target) glatter_glEndQuery_debug((target), __FILE__, __LINE__)
void glatter_glEndQuery_debug(GLenum target, const char* file, int line);
#define glGenBuffers(n, buffers) glatter_glGenBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glGenBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glGenQueries(n, ids) glatter_glGenQueries_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenQueries_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetBufferParameteriv(target, pname, params) glatter_glGetBufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetBufferPointerv(target, pname, params) glatter_glGetBufferPointerv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferPointerv_debug(GLenum target, GLenum pname, void **params, const char* file, int line);
#define glGetBufferSubData(target, offset, size, data) glatter_glGetBufferSubData_debug((target), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetBufferSubData_debug(GLenum target, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetQueryObjectiv(id, pname, params) glatter_glGetQueryObjectiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectiv_debug(GLuint id, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryObjectuiv(id, pname, params) glatter_glGetQueryObjectuiv_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectuiv_debug(GLuint id, GLenum pname, GLuint *params, const char* file, int line);
#define glGetQueryiv(target, pname, params) glatter_glGetQueryiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glIsBuffer(buffer) glatter_glIsBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glIsBuffer_debug(GLuint buffer, const char* file, int line);
#define glIsQuery(id) glatter_glIsQuery_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsQuery_debug(GLuint id, const char* file, int line);
#define glMapBuffer(target, access) glatter_glMapBuffer_debug((target), (access), __FILE__, __LINE__)
void * glatter_glMapBuffer_debug(GLenum target, GLenum access, const char* file, int line);
#define glUnmapBuffer(target) glatter_glUnmapBuffer_debug((target), __FILE__, __LINE__)
GLboolean glatter_glUnmapBuffer_debug(GLenum target, const char* file, int line);
#endif // defined(GL_VERSION_1_5)
#if defined(GL_VERSION_2_0)
#define glAttachShader(program, shader) glatter_glAttachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glAttachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glBindAttribLocation(program, index, name) glatter_glBindAttribLocation_debug((program), (index), (name), __FILE__, __LINE__)
void glatter_glBindAttribLocation_debug(GLuint program, GLuint index, const GLchar *name, const char* file, int line);
#define glBlendEquationSeparate(modeRGB, modeAlpha) glatter_glBlendEquationSeparate_debug((modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparate_debug(GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glCompileShader(shader) glatter_glCompileShader_debug((shader), __FILE__, __LINE__)
void glatter_glCompileShader_debug(GLuint shader, const char* file, int line);
#define glCreateProgram() glatter_glCreateProgram_debug(__FILE__, __LINE__)
GLuint glatter_glCreateProgram_debug(const char* file, int line);
#define glCreateShader(type) glatter_glCreateShader_debug((type), __FILE__, __LINE__)
GLuint glatter_glCreateShader_debug(GLenum type, const char* file, int line);
#define glDeleteProgram(program) glatter_glDeleteProgram_debug((program), __FILE__, __LINE__)
void glatter_glDeleteProgram_debug(GLuint program, const char* file, int line);
#define glDeleteShader(shader) glatter_glDeleteShader_debug((shader), __FILE__, __LINE__)
void glatter_glDeleteShader_debug(GLuint shader, const char* file, int line);
#define glDetachShader(program, shader) glatter_glDetachShader_debug((program), (shader), __FILE__, __LINE__)
void glatter_glDetachShader_debug(GLuint program, GLuint shader, const char* file, int line);
#define glDisableVertexAttribArray(index) glatter_glDisableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glDisableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glDrawBuffers(n, bufs) glatter_glDrawBuffers_debug((n), (bufs), __FILE__, __LINE__)
void glatter_glDrawBuffers_debug(GLsizei n, const GLenum *bufs, const char* file, int line);
#define glEnableVertexAttribArray(index) glatter_glEnableVertexAttribArray_debug((index), __FILE__, __LINE__)
void glatter_glEnableVertexAttribArray_debug(GLuint index, const char* file, int line);
#define glGetActiveAttrib(program, index, bufSize, length, size, type, name) glatter_glGetActiveAttrib_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveAttrib_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetActiveUniform(program, index, bufSize, length, size, type, name) glatter_glGetActiveUniform_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetActiveUniform_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetAttachedShaders(program, maxCount, count, shaders) glatter_glGetAttachedShaders_debug((program), (maxCount), (count), (shaders), __FILE__, __LINE__)
void glatter_glGetAttachedShaders_debug(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders, const char* file, int line);
#define glGetAttribLocation(program, name) glatter_glGetAttribLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetAttribLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetProgramInfoLog(program, bufSize, length, infoLog) glatter_glGetProgramInfoLog_debug((program), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramInfoLog_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramiv(program, pname, params) glatter_glGetProgramiv_debug((program), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramiv_debug(GLuint program, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderInfoLog(shader, bufSize, length, infoLog) glatter_glGetShaderInfoLog_debug((shader), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetShaderInfoLog_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetShaderSource(shader, bufSize, length, source) glatter_glGetShaderSource_debug((shader), (bufSize), (length), (source), __FILE__, __LINE__)
void glatter_glGetShaderSource_debug(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source, const char* file, int line);
#define glGetShaderiv(shader, pname, params) glatter_glGetShaderiv_debug((shader), (pname), (params), __FILE__, __LINE__)
void glatter_glGetShaderiv_debug(GLuint shader, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformLocation(program, name) glatter_glGetUniformLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetUniformLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetUniformfv(program, location, params) glatter_glGetUniformfv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformfv_debug(GLuint program, GLint location, GLfloat *params, const char* file, int line);
#define glGetUniformiv(program, location, params) glatter_glGetUniformiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformiv_debug(GLuint program, GLint location, GLint *params, const char* file, int line);
#define glGetVertexAttribPointerv(index, pname, pointer) glatter_glGetVertexAttribPointerv_debug((index), (pname), (pointer), __FILE__, __LINE__)
void glatter_glGetVertexAttribPointerv_debug(GLuint index, GLenum pname, void **pointer, const char* file, int line);
#define glGetVertexAttribdv(index, pname, params) glatter_glGetVertexAttribdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glGetVertexAttribfv(index, pname, params) glatter_glGetVertexAttribfv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribfv_debug(GLuint index, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetVertexAttribiv(index, pname, params) glatter_glGetVertexAttribiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glIsProgram(program) glatter_glIsProgram_debug((program), __FILE__, __LINE__)
GLboolean glatter_glIsProgram_debug(GLuint program, const char* file, int line);
#define glIsShader(shader) glatter_glIsShader_debug((shader), __FILE__, __LINE__)
GLboolean glatter_glIsShader_debug(GLuint shader, const char* file, int line);
#define glLinkProgram(program) glatter_glLinkProgram_debug((program), __FILE__, __LINE__)
void glatter_glLinkProgram_debug(GLuint program, const char* file, int line);
#define glShaderSource(shader, count, string, length) glatter_glShaderSource_debug((shader), (count), (string), (length), __FILE__, __LINE__)
void glatter_glShaderSource_debug(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length, const char* file, int line);
#define glStencilFuncSeparate(face, func, ref, mask) glatter_glStencilFuncSeparate_debug((face), (func), (ref), (mask), __FILE__, __LINE__)
void glatter_glStencilFuncSeparate_debug(GLenum face, GLenum func, GLint ref, GLuint mask, const char* file, int line);
#define glStencilMaskSeparate(face, mask) glatter_glStencilMaskSeparate_debug((face), (mask), __FILE__, __LINE__)
void glatter_glStencilMaskSeparate_debug(GLenum face, GLuint mask, const char* file, int line);
#define glStencilOpSeparate(face, sfail, dpfail, dppass) glatter_glStencilOpSeparate_debug((face), (sfail), (dpfail), (dppass), __FILE__, __LINE__)
void glatter_glStencilOpSeparate_debug(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, const char* file, int line);
#define glUniform1f(location, v0) glatter_glUniform1f_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1f_debug(GLint location, GLfloat v0, const char* file, int line);
#define glUniform1fv(location, count, value) glatter_glUniform1fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform1i(location, v0) glatter_glUniform1i_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1i_debug(GLint location, GLint v0, const char* file, int line);
#define glUniform1iv(location, count, value) glatter_glUniform1iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform2f(location, v0, v1) glatter_glUniform2f_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2f_debug(GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glUniform2fv(location, count, value) glatter_glUniform2fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform2i(location, v0, v1) glatter_glUniform2i_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2i_debug(GLint location, GLint v0, GLint v1, const char* file, int line);
#define glUniform2iv(location, count, value) glatter_glUniform2iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform3f(location, v0, v1, v2) glatter_glUniform3f_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glUniform3fv(location, count, value) glatter_glUniform3fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform3i(location, v0, v1, v2) glatter_glUniform3i_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3i_debug(GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glUniform3iv(location, count, value) glatter_glUniform3iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniform4f(location, v0, v1, v2, v3) glatter_glUniform4f_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4f_debug(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glUniform4fv(location, count, value) glatter_glUniform4fv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4fv_debug(GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glUniform4i(location, v0, v1, v2, v3) glatter_glUniform4i_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4i_debug(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glUniform4iv(location, count, value) glatter_glUniform4iv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4iv_debug(GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glUniformMatrix2fv(location, count, transpose, value) glatter_glUniformMatrix2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3fv(location, count, transpose, value) glatter_glUniformMatrix3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4fv(location, count, transpose, value) glatter_glUniformMatrix4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUseProgram(program) glatter_glUseProgram_debug((program), __FILE__, __LINE__)
void glatter_glUseProgram_debug(GLuint program, const char* file, int line);
#define glValidateProgram(program) glatter_glValidateProgram_debug((program), __FILE__, __LINE__)
void glatter_glValidateProgram_debug(GLuint program, const char* file, int line);
#define glVertexAttrib1d(index, x) glatter_glVertexAttrib1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttrib1dv(index, v) glatter_glVertexAttrib1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib1f(index, x) glatter_glVertexAttrib1f_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1f_debug(GLuint index, GLfloat x, const char* file, int line);
#define glVertexAttrib1fv(index, v) glatter_glVertexAttrib1fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib1s(index, x) glatter_glVertexAttrib1s_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttrib1s_debug(GLuint index, GLshort x, const char* file, int line);
#define glVertexAttrib1sv(index, v) glatter_glVertexAttrib1sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib1sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib2d(index, x, y) glatter_glVertexAttrib2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttrib2dv(index, v) glatter_glVertexAttrib2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib2f(index, x, y) glatter_glVertexAttrib2f_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2f_debug(GLuint index, GLfloat x, GLfloat y, const char* file, int line);
#define glVertexAttrib2fv(index, v) glatter_glVertexAttrib2fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib2s(index, x, y) glatter_glVertexAttrib2s_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttrib2s_debug(GLuint index, GLshort x, GLshort y, const char* file, int line);
#define glVertexAttrib2sv(index, v) glatter_glVertexAttrib2sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib2sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib3d(index, x, y, z) glatter_glVertexAttrib3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttrib3dv(index, v) glatter_glVertexAttrib3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib3f(index, x, y, z) glatter_glVertexAttrib3f_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, const char* file, int line);
#define glVertexAttrib3fv(index, v) glatter_glVertexAttrib3fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib3s(index, x, y, z) glatter_glVertexAttrib3s_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttrib3s_debug(GLuint index, GLshort x, GLshort y, GLshort z, const char* file, int line);
#define glVertexAttrib3sv(index, v) glatter_glVertexAttrib3sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib3sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nbv(index, v) glatter_glVertexAttrib4Nbv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nbv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4Niv(index, v) glatter_glVertexAttrib4Niv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Niv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4Nsv(index, v) glatter_glVertexAttrib4Nsv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nsv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4Nub(index, x, y, z, w) glatter_glVertexAttrib4Nub_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nub_debug(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, const char* file, int line);
#define glVertexAttrib4Nubv(index, v) glatter_glVertexAttrib4Nubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4Nuiv(index, v) glatter_glVertexAttrib4Nuiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nuiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4Nusv(index, v) glatter_glVertexAttrib4Nusv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4Nusv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttrib4bv(index, v) glatter_glVertexAttrib4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttrib4d(index, x, y, z, w) glatter_glVertexAttrib4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttrib4dv(index, v) glatter_glVertexAttrib4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttrib4f(index, x, y, z, w) glatter_glVertexAttrib4f_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4f_debug(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, const char* file, int line);
#define glVertexAttrib4fv(index, v) glatter_glVertexAttrib4fv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4fv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#define glVertexAttrib4iv(index, v) glatter_glVertexAttrib4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttrib4s(index, x, y, z, w) glatter_glVertexAttrib4s_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttrib4s_debug(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, const char* file, int line);
#define glVertexAttrib4sv(index, v) glatter_glVertexAttrib4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttrib4ubv(index, v) glatter_glVertexAttrib4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttrib4uiv(index, v) glatter_glVertexAttrib4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttrib4usv(index, v) glatter_glVertexAttrib4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttrib4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribPointer(index, size, type, normalized, stride, pointer) glatter_glVertexAttribPointer_debug((index), (size), (type), (normalized), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribPointer_debug(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_2_0)
#if defined(GL_VERSION_2_1)
#define glUniformMatrix2x3fv(location, count, transpose, value) glatter_glUniformMatrix2x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix2x4fv(location, count, transpose, value) glatter_glUniformMatrix2x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x2fv(location, count, transpose, value) glatter_glUniformMatrix3x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix3x4fv(location, count, transpose, value) glatter_glUniformMatrix3x4fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x2fv(location, count, transpose, value) glatter_glUniformMatrix4x2fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glUniformMatrix4x3fv(location, count, transpose, value) glatter_glUniformMatrix4x3fv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3fv_debug(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#endif // defined(GL_VERSION_2_1)
#if defined(GL_VERSION_3_0)
#define glBeginConditionalRender(id, mode) glatter_glBeginConditionalRender_debug((id), (mode), __FILE__, __LINE__)
void glatter_glBeginConditionalRender_debug(GLuint id, GLenum mode, const char* file, int line);
#define glBeginTransformFeedback(primitiveMode) glatter_glBeginTransformFeedback_debug((primitiveMode), __FILE__, __LINE__)
void glatter_glBeginTransformFeedback_debug(GLenum primitiveMode, const char* file, int line);
#define glBindBufferBase(target, index, buffer) glatter_glBindBufferBase_debug((target), (index), (buffer), __FILE__, __LINE__)
void glatter_glBindBufferBase_debug(GLenum target, GLuint index, GLuint buffer, const char* file, int line);
#define glBindBufferRange(target, index, buffer, offset, size) glatter_glBindBufferRange_debug((target), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glBindBufferRange_debug(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glBindFragDataLocation(program, color, name) glatter_glBindFragDataLocation_debug((program), (color), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocation_debug(GLuint program, GLuint color, const GLchar *name, const char* file, int line);
#define glBindFramebuffer(target, framebuffer) glatter_glBindFramebuffer_debug((target), (framebuffer), __FILE__, __LINE__)
void glatter_glBindFramebuffer_debug(GLenum target, GLuint framebuffer, const char* file, int line);
#define glBindRenderbuffer(target, renderbuffer) glatter_glBindRenderbuffer_debug((target), (renderbuffer), __FILE__, __LINE__)
void glatter_glBindRenderbuffer_debug(GLenum target, GLuint renderbuffer, const char* file, int line);
#define glBindVertexArray(array) glatter_glBindVertexArray_debug((array), __FILE__, __LINE__)
void glatter_glBindVertexArray_debug(GLuint array, const char* file, int line);
#define glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitFramebuffer_debug((srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitFramebuffer_debug(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckFramebufferStatus(target) glatter_glCheckFramebufferStatus_debug((target), __FILE__, __LINE__)
GLenum glatter_glCheckFramebufferStatus_debug(GLenum target, const char* file, int line);
#define glClampColor(target, clamp) glatter_glClampColor_debug((target), (clamp), __FILE__, __LINE__)
void glatter_glClampColor_debug(GLenum target, GLenum clamp, const char* file, int line);
#define glClearBufferfi(buffer, drawbuffer, depth, stencil) glatter_glClearBufferfi_debug((buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearBufferfi_debug(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearBufferfv(buffer, drawbuffer, value) glatter_glClearBufferfv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferfv_debug(GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearBufferiv(buffer, drawbuffer, value) glatter_glClearBufferiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferiv_debug(GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearBufferuiv(buffer, drawbuffer, value) glatter_glClearBufferuiv_debug((buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearBufferuiv_debug(GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glColorMaski(index, r, g, b, a) glatter_glColorMaski_debug((index), (r), (g), (b), (a), __FILE__, __LINE__)
void glatter_glColorMaski_debug(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, const char* file, int line);
#define glDeleteFramebuffers(n, framebuffers) glatter_glDeleteFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glDeleteFramebuffers_debug(GLsizei n, const GLuint *framebuffers, const char* file, int line);
#define glDeleteRenderbuffers(n, renderbuffers) glatter_glDeleteRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glDeleteRenderbuffers_debug(GLsizei n, const GLuint *renderbuffers, const char* file, int line);
#define glDeleteVertexArrays(n, arrays) glatter_glDeleteVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glDeleteVertexArrays_debug(GLsizei n, const GLuint *arrays, const char* file, int line);
#define glDisablei(target, index) glatter_glDisablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glDisablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEnablei(target, index) glatter_glEnablei_debug((target), (index), __FILE__, __LINE__)
void glatter_glEnablei_debug(GLenum target, GLuint index, const char* file, int line);
#define glEndConditionalRender() glatter_glEndConditionalRender_debug(__FILE__, __LINE__)
void glatter_glEndConditionalRender_debug(const char* file, int line);
#define glEndTransformFeedback() glatter_glEndTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glEndTransformFeedback_debug(const char* file, int line);
#define glFlushMappedBufferRange(target, offset, length) glatter_glFlushMappedBufferRange_debug((target), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) glatter_glFramebufferRenderbuffer_debug((target), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glFramebufferRenderbuffer_debug(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glFramebufferTexture1D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture1D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture1D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture2D(target, attachment, textarget, texture, level) glatter_glFramebufferTexture2D_debug((target), (attachment), (textarget), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture2D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, const char* file, int line);
#define glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) glatter_glFramebufferTexture3D_debug((target), (attachment), (textarget), (texture), (level), (zoffset), __FILE__, __LINE__)
void glatter_glFramebufferTexture3D_debug(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, const char* file, int line);
#define glFramebufferTextureLayer(target, attachment, texture, level, layer) glatter_glFramebufferTextureLayer_debug((target), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glFramebufferTextureLayer_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glGenFramebuffers(n, framebuffers) glatter_glGenFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glGenFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glGenRenderbuffers(n, renderbuffers) glatter_glGenRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glGenRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glGenVertexArrays(n, arrays) glatter_glGenVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glGenVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glGenerateMipmap(target) glatter_glGenerateMipmap_debug((target), __FILE__, __LINE__)
void glatter_glGenerateMipmap_debug(GLenum target, const char* file, int line);
#define glGetBooleani_v(target, index, data) glatter_glGetBooleani_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetBooleani_v_debug(GLenum target, GLuint index, GLboolean *data, const char* file, int line);
#define glGetFragDataLocation(program, name) glatter_glGetFragDataLocation_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataLocation_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) glatter_glGetFramebufferAttachmentParameteriv_debug((target), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferAttachmentParameteriv_debug(GLenum target, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetIntegeri_v(target, index, data) glatter_glGetIntegeri_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetIntegeri_v_debug(GLenum target, GLuint index, GLint *data, const char* file, int line);
#define glGetRenderbufferParameteriv(target, pname, params) glatter_glGetRenderbufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetRenderbufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetStringi(name, index) glatter_glGetStringi_debug((name), (index), __FILE__, __LINE__)
const GLubyte * glatter_glGetStringi_debug(GLenum name, GLuint index, const char* file, int line);
#define glGetTexParameterIiv(target, pname, params) glatter_glGetTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIiv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetTexParameterIuiv(target, pname, params) glatter_glGetTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTexParameterIuiv_debug(GLenum target, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) glatter_glGetTransformFeedbackVarying_debug((program), (index), (bufSize), (length), (size), (type), (name), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackVarying_debug(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name, const char* file, int line);
#define glGetUniformuiv(program, location, params) glatter_glGetUniformuiv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformuiv_debug(GLuint program, GLint location, GLuint *params, const char* file, int line);
#define glGetVertexAttribIiv(index, pname, params) glatter_glGetVertexAttribIiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIiv_debug(GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetVertexAttribIuiv(index, pname, params) glatter_glGetVertexAttribIuiv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribIuiv_debug(GLuint index, GLenum pname, GLuint *params, const char* file, int line);
#define glIsEnabledi(target, index) glatter_glIsEnabledi_debug((target), (index), __FILE__, __LINE__)
GLboolean glatter_glIsEnabledi_debug(GLenum target, GLuint index, const char* file, int line);
#define glIsFramebuffer(framebuffer) glatter_glIsFramebuffer_debug((framebuffer), __FILE__, __LINE__)
GLboolean glatter_glIsFramebuffer_debug(GLuint framebuffer, const char* file, int line);
#define glIsRenderbuffer(renderbuffer) glatter_glIsRenderbuffer_debug((renderbuffer), __FILE__, __LINE__)
GLboolean glatter_glIsRenderbuffer_debug(GLuint renderbuffer, const char* file, int line);
#define glIsVertexArray(array) glatter_glIsVertexArray_debug((array), __FILE__, __LINE__)
GLboolean glatter_glIsVertexArray_debug(GLuint array, const char* file, int line);
#define glMapBufferRange(target, offset, length, access) glatter_glMapBufferRange_debug((target), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapBufferRange_debug(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glRenderbufferStorage(target, internalformat, width, height) glatter_glRenderbufferStorage_debug((target), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorage_debug(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glRenderbufferStorageMultisample(target, samples, internalformat, width, height) glatter_glRenderbufferStorageMultisample_debug((target), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glRenderbufferStorageMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexParameterIiv(target, pname, params) glatter_glTexParameterIiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIiv_debug(GLenum target, GLenum pname, const GLint *params, const char* file, int line);
#define glTexParameterIuiv(target, pname, params) glatter_glTexParameterIuiv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glTexParameterIuiv_debug(GLenum target, GLenum pname, const GLuint *params, const char* file, int line);
#define glTransformFeedbackVaryings(program, count, varyings, bufferMode) glatter_glTransformFeedbackVaryings_debug((program), (count), (varyings), (bufferMode), __FILE__, __LINE__)
void glatter_glTransformFeedbackVaryings_debug(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode, const char* file, int line);
#define glUniform1ui(location, v0) glatter_glUniform1ui_debug((location), (v0), __FILE__, __LINE__)
void glatter_glUniform1ui_debug(GLint location, GLuint v0, const char* file, int line);
#define glUniform1uiv(location, count, value) glatter_glUniform1uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform2ui(location, v0, v1) glatter_glUniform2ui_debug((location), (v0), (v1), __FILE__, __LINE__)
void glatter_glUniform2ui_debug(GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glUniform2uiv(location, count, value) glatter_glUniform2uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform3ui(location, v0, v1, v2) glatter_glUniform3ui_debug((location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glUniform3ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glUniform3uiv(location, count, value) glatter_glUniform3uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glUniform4ui(location, v0, v1, v2, v3) glatter_glUniform4ui_debug((location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glUniform4ui_debug(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glUniform4uiv(location, count, value) glatter_glUniform4uiv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4uiv_debug(GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glVertexAttribI1i(index, x) glatter_glVertexAttribI1i_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1i_debug(GLuint index, GLint x, const char* file, int line);
#define glVertexAttribI1iv(index, v) glatter_glVertexAttribI1iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI1ui(index, x) glatter_glVertexAttribI1ui_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribI1ui_debug(GLuint index, GLuint x, const char* file, int line);
#define glVertexAttribI1uiv(index, v) glatter_glVertexAttribI1uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI1uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI2i(index, x, y) glatter_glVertexAttribI2i_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2i_debug(GLuint index, GLint x, GLint y, const char* file, int line);
#define glVertexAttribI2iv(index, v) glatter_glVertexAttribI2iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI2ui(index, x, y) glatter_glVertexAttribI2ui_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribI2ui_debug(GLuint index, GLuint x, GLuint y, const char* file, int line);
#define glVertexAttribI2uiv(index, v) glatter_glVertexAttribI2uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI2uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI3i(index, x, y, z) glatter_glVertexAttribI3i_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3i_debug(GLuint index, GLint x, GLint y, GLint z, const char* file, int line);
#define glVertexAttribI3iv(index, v) glatter_glVertexAttribI3iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI3ui(index, x, y, z) glatter_glVertexAttribI3ui_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribI3ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, const char* file, int line);
#define glVertexAttribI3uiv(index, v) glatter_glVertexAttribI3uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI3uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4bv(index, v) glatter_glVertexAttribI4bv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4bv_debug(GLuint index, const GLbyte *v, const char* file, int line);
#define glVertexAttribI4i(index, x, y, z, w) glatter_glVertexAttribI4i_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4i_debug(GLuint index, GLint x, GLint y, GLint z, GLint w, const char* file, int line);
#define glVertexAttribI4iv(index, v) glatter_glVertexAttribI4iv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4iv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glVertexAttribI4sv(index, v) glatter_glVertexAttribI4sv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4sv_debug(GLuint index, const GLshort *v, const char* file, int line);
#define glVertexAttribI4ubv(index, v) glatter_glVertexAttribI4ubv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4ubv_debug(GLuint index, const GLubyte *v, const char* file, int line);
#define glVertexAttribI4ui(index, x, y, z, w) glatter_glVertexAttribI4ui_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribI4ui_debug(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, const char* file, int line);
#define glVertexAttribI4uiv(index, v) glatter_glVertexAttribI4uiv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4uiv_debug(GLuint index, const GLuint *v, const char* file, int line);
#define glVertexAttribI4usv(index, v) glatter_glVertexAttribI4usv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribI4usv_debug(GLuint index, const GLushort *v, const char* file, int line);
#define glVertexAttribIPointer(index, size, type, stride, pointer) glatter_glVertexAttribIPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribIPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#endif // defined(GL_VERSION_3_0)
#if defined(GL_VERSION_3_1)
#define glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) glatter_glCopyBufferSubData_debug((readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyBufferSubData_debug(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glDrawArraysInstanced(mode, first, count, instancecount) glatter_glDrawArraysInstanced_debug((mode), (first), (count), (instancecount), __FILE__, __LINE__)
void glatter_glDrawArraysInstanced_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, const char* file, int line);
#define glDrawElementsInstanced(mode, count, type, indices, instancecount) glatter_glDrawElementsInstanced_debug((mode), (count), (type), (indices), (instancecount), __FILE__, __LINE__)
void glatter_glDrawElementsInstanced_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, const char* file, int line);
#define glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) glatter_glGetActiveUniformBlockName_debug((program), (uniformBlockIndex), (bufSize), (length), (uniformBlockName), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockName_debug(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName, const char* file, int line);
#define glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) glatter_glGetActiveUniformBlockiv_debug((program), (uniformBlockIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformBlockiv_debug(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) glatter_glGetActiveUniformName_debug((program), (uniformIndex), (bufSize), (length), (uniformName), __FILE__, __LINE__)
void glatter_glGetActiveUniformName_debug(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName, const char* file, int line);
#define glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) glatter_glGetActiveUniformsiv_debug((program), (uniformCount), (uniformIndices), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveUniformsiv_debug(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params, const char* file, int line);
#define glGetUniformBlockIndex(program, uniformBlockName) glatter_glGetUniformBlockIndex_debug((program), (uniformBlockName), __FILE__, __LINE__)
GLuint glatter_glGetUniformBlockIndex_debug(GLuint program, const GLchar *uniformBlockName, const char* file, int line);
#define glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) glatter_glGetUniformIndices_debug((program), (uniformCount), (uniformNames), (uniformIndices), __FILE__, __LINE__)
void glatter_glGetUniformIndices_debug(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices, const char* file, int line);
#define glPrimitiveRestartIndex(index) glatter_glPrimitiveRestartIndex_debug((index), __FILE__, __LINE__)
void glatter_glPrimitiveRestartIndex_debug(GLuint index, const char* file, int line);
#define glTexBuffer(target, internalformat, buffer) glatter_glTexBuffer_debug((target), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTexBuffer_debug(GLenum target, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) glatter_glUniformBlockBinding_debug((program), (uniformBlockIndex), (uniformBlockBinding), __FILE__, __LINE__)
void glatter_glUniformBlockBinding_debug(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, const char* file, int line);
#endif // defined(GL_VERSION_3_1)
#if defined(GL_VERSION_3_2)
#define glClientWaitSync(sync, flags, timeout) glatter_glClientWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
GLenum glatter_glClientWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#define glDeleteSync(sync) glatter_glDeleteSync_debug((sync), __FILE__, __LINE__)
void glatter_glDeleteSync_debug(GLsync sync, const char* file, int line);
#define glDrawElementsBaseVertex(mode, count, type, indices, basevertex) glatter_glDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) glatter_glDrawElementsInstancedBaseVertex_debug((mode), (count), (type), (indices), (instancecount), (basevertex), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertex_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, const char* file, int line);
#define glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) glatter_glDrawRangeElementsBaseVertex_debug((mode), (start), (end), (count), (type), (indices), (basevertex), __FILE__, __LINE__)
void glatter_glDrawRangeElementsBaseVertex_debug(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex, const char* file, int line);
#define glFenceSync(condition, flags) glatter_glFenceSync_debug((condition), (flags), __FILE__, __LINE__)
GLsync glatter_glFenceSync_debug(GLenum condition, GLbitfield flags, const char* file, int line);
#define glFramebufferTexture(target, attachment, texture, level) glatter_glFramebufferTexture_debug((target), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glFramebufferTexture_debug(GLenum target, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glGetBufferParameteri64v(target, pname, params) glatter_glGetBufferParameteri64v_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetBufferParameteri64v_debug(GLenum target, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetInteger64i_v(target, index, data) glatter_glGetInteger64i_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetInteger64i_v_debug(GLenum target, GLuint index, GLint64 *data, const char* file, int line);
#define glGetInteger64v(pname, data) glatter_glGetInteger64v_debug((pname), (data), __FILE__, __LINE__)
void glatter_glGetInteger64v_debug(GLenum pname, GLint64 *data, const char* file, int line);
#define glGetMultisamplefv(pname, index, val) glatter_glGetMultisamplefv_debug((pname), (index), (val), __FILE__, __LINE__)
void glatter_glGetMultisamplefv_debug(GLenum pname, GLuint index, GLfloat *val, const char* file, int line);
#define glGetSynciv(sync, pname, bufSize, length, values) glatter_glGetSynciv_debug((sync), (pname), (bufSize), (length), (values), __FILE__, __LINE__)
void glatter_glGetSynciv_debug(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values, const char* file, int line);
#define glIsSync(sync) glatter_glIsSync_debug((sync), __FILE__, __LINE__)
GLboolean glatter_glIsSync_debug(GLsync sync, const char* file, int line);
#define glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) glatter_glMultiDrawElementsBaseVertex_debug((mode), (count), (type), (indices), (drawcount), (basevertex), __FILE__, __LINE__)
void glatter_glMultiDrawElementsBaseVertex_debug(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex, const char* file, int line);
#define glProvokingVertex(mode) glatter_glProvokingVertex_debug((mode), __FILE__, __LINE__)
void glatter_glProvokingVertex_debug(GLenum mode, const char* file, int line);
#define glSampleMaski(maskNumber, mask) glatter_glSampleMaski_debug((maskNumber), (mask), __FILE__, __LINE__)
void glatter_glSampleMaski_debug(GLuint maskNumber, GLbitfield mask, const char* file, int line);
#define glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexImage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexImage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexImage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glWaitSync(sync, flags, timeout) glatter_glWaitSync_debug((sync), (flags), (timeout), __FILE__, __LINE__)
void glatter_glWaitSync_debug(GLsync sync, GLbitfield flags, GLuint64 timeout, const char* file, int line);
#endif // defined(GL_VERSION_3_2)
#if defined(GL_VERSION_3_3)
#define glBindFragDataLocationIndexed(program, colorNumber, index, name) glatter_glBindFragDataLocationIndexed_debug((program), (colorNumber), (index), (name), __FILE__, __LINE__)
void glatter_glBindFragDataLocationIndexed_debug(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name, const char* file, int line);
#define glBindSampler(unit, sampler) glatter_glBindSampler_debug((unit), (sampler), __FILE__, __LINE__)
void glatter_glBindSampler_debug(GLuint unit, GLuint sampler, const char* file, int line);
#define glColorP3ui(type, color) glatter_glColorP3ui_debug((type), (color), __FILE__, __LINE__)
void glatter_glColorP3ui_debug(GLenum type, GLuint color, const char* file, int line);
#define glColorP3uiv(type, color) glatter_glColorP3uiv_debug((type), (color), __FILE__, __LINE__)
void glatter_glColorP3uiv_debug(GLenum type, const GLuint *color, const char* file, int line);
#define glColorP4ui(type, color) glatter_glColorP4ui_debug((type), (color), __FILE__, __LINE__)
void glatter_glColorP4ui_debug(GLenum type, GLuint color, const char* file, int line);
#define glColorP4uiv(type, color) glatter_glColorP4uiv_debug((type), (color), __FILE__, __LINE__)
void glatter_glColorP4uiv_debug(GLenum type, const GLuint *color, const char* file, int line);
#define glDeleteSamplers(count, samplers) glatter_glDeleteSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glDeleteSamplers_debug(GLsizei count, const GLuint *samplers, const char* file, int line);
#define glGenSamplers(count, samplers) glatter_glGenSamplers_debug((count), (samplers), __FILE__, __LINE__)
void glatter_glGenSamplers_debug(GLsizei count, GLuint *samplers, const char* file, int line);
#define glGetFragDataIndex(program, name) glatter_glGetFragDataIndex_debug((program), (name), __FILE__, __LINE__)
GLint glatter_glGetFragDataIndex_debug(GLuint program, const GLchar *name, const char* file, int line);
#define glGetQueryObjecti64v(id, pname, params) glatter_glGetQueryObjecti64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjecti64v_debug(GLuint id, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetQueryObjectui64v(id, pname, params) glatter_glGetQueryObjectui64v_debug((id), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryObjectui64v_debug(GLuint id, GLenum pname, GLuint64 *params, const char* file, int line);
#define glGetSamplerParameterIiv(sampler, pname, params) glatter_glGetSamplerParameterIiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIiv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glGetSamplerParameterIuiv(sampler, pname, params) glatter_glGetSamplerParameterIuiv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, GLuint *params, const char* file, int line);
#define glGetSamplerParameterfv(sampler, pname, params) glatter_glGetSamplerParameterfv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameterfv_debug(GLuint sampler, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetSamplerParameteriv(sampler, pname, params) glatter_glGetSamplerParameteriv_debug((sampler), (pname), (params), __FILE__, __LINE__)
void glatter_glGetSamplerParameteriv_debug(GLuint sampler, GLenum pname, GLint *params, const char* file, int line);
#define glIsSampler(sampler) glatter_glIsSampler_debug((sampler), __FILE__, __LINE__)
GLboolean glatter_glIsSampler_debug(GLuint sampler, const char* file, int line);
#define glMultiTexCoordP1ui(texture, type, coords) glatter_glMultiTexCoordP1ui_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP1ui_debug(GLenum texture, GLenum type, GLuint coords, const char* file, int line);
#define glMultiTexCoordP1uiv(texture, type, coords) glatter_glMultiTexCoordP1uiv_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP1uiv_debug(GLenum texture, GLenum type, const GLuint *coords, const char* file, int line);
#define glMultiTexCoordP2ui(texture, type, coords) glatter_glMultiTexCoordP2ui_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP2ui_debug(GLenum texture, GLenum type, GLuint coords, const char* file, int line);
#define glMultiTexCoordP2uiv(texture, type, coords) glatter_glMultiTexCoordP2uiv_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP2uiv_debug(GLenum texture, GLenum type, const GLuint *coords, const char* file, int line);
#define glMultiTexCoordP3ui(texture, type, coords) glatter_glMultiTexCoordP3ui_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP3ui_debug(GLenum texture, GLenum type, GLuint coords, const char* file, int line);
#define glMultiTexCoordP3uiv(texture, type, coords) glatter_glMultiTexCoordP3uiv_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP3uiv_debug(GLenum texture, GLenum type, const GLuint *coords, const char* file, int line);
#define glMultiTexCoordP4ui(texture, type, coords) glatter_glMultiTexCoordP4ui_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP4ui_debug(GLenum texture, GLenum type, GLuint coords, const char* file, int line);
#define glMultiTexCoordP4uiv(texture, type, coords) glatter_glMultiTexCoordP4uiv_debug((texture), (type), (coords), __FILE__, __LINE__)
void glatter_glMultiTexCoordP4uiv_debug(GLenum texture, GLenum type, const GLuint *coords, const char* file, int line);
#define glNormalP3ui(type, coords) glatter_glNormalP3ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glNormalP3ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glNormalP3uiv(type, coords) glatter_glNormalP3uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glNormalP3uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glQueryCounter(id, target) glatter_glQueryCounter_debug((id), (target), __FILE__, __LINE__)
void glatter_glQueryCounter_debug(GLuint id, GLenum target, const char* file, int line);
#define glSamplerParameterIiv(sampler, pname, param) glatter_glSamplerParameterIiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIiv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSamplerParameterIuiv(sampler, pname, param) glatter_glSamplerParameterIuiv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterIuiv_debug(GLuint sampler, GLenum pname, const GLuint *param, const char* file, int line);
#define glSamplerParameterf(sampler, pname, param) glatter_glSamplerParameterf_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterf_debug(GLuint sampler, GLenum pname, GLfloat param, const char* file, int line);
#define glSamplerParameterfv(sampler, pname, param) glatter_glSamplerParameterfv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameterfv_debug(GLuint sampler, GLenum pname, const GLfloat *param, const char* file, int line);
#define glSamplerParameteri(sampler, pname, param) glatter_glSamplerParameteri_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteri_debug(GLuint sampler, GLenum pname, GLint param, const char* file, int line);
#define glSamplerParameteriv(sampler, pname, param) glatter_glSamplerParameteriv_debug((sampler), (pname), (param), __FILE__, __LINE__)
void glatter_glSamplerParameteriv_debug(GLuint sampler, GLenum pname, const GLint *param, const char* file, int line);
#define glSecondaryColorP3ui(type, color) glatter_glSecondaryColorP3ui_debug((type), (color), __FILE__, __LINE__)
void glatter_glSecondaryColorP3ui_debug(GLenum type, GLuint color, const char* file, int line);
#define glSecondaryColorP3uiv(type, color) glatter_glSecondaryColorP3uiv_debug((type), (color), __FILE__, __LINE__)
void glatter_glSecondaryColorP3uiv_debug(GLenum type, const GLuint *color, const char* file, int line);
#define glTexCoordP1ui(type, coords) glatter_glTexCoordP1ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP1ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glTexCoordP1uiv(type, coords) glatter_glTexCoordP1uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP1uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glTexCoordP2ui(type, coords) glatter_glTexCoordP2ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP2ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glTexCoordP2uiv(type, coords) glatter_glTexCoordP2uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP2uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glTexCoordP3ui(type, coords) glatter_glTexCoordP3ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP3ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glTexCoordP3uiv(type, coords) glatter_glTexCoordP3uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP3uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glTexCoordP4ui(type, coords) glatter_glTexCoordP4ui_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP4ui_debug(GLenum type, GLuint coords, const char* file, int line);
#define glTexCoordP4uiv(type, coords) glatter_glTexCoordP4uiv_debug((type), (coords), __FILE__, __LINE__)
void glatter_glTexCoordP4uiv_debug(GLenum type, const GLuint *coords, const char* file, int line);
#define glVertexAttribDivisor(index, divisor) glatter_glVertexAttribDivisor_debug((index), (divisor), __FILE__, __LINE__)
void glatter_glVertexAttribDivisor_debug(GLuint index, GLuint divisor, const char* file, int line);
#define glVertexAttribP1ui(index, type, normalized, value) glatter_glVertexAttribP1ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP1uiv(index, type, normalized, value) glatter_glVertexAttribP1uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP1uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP2ui(index, type, normalized, value) glatter_glVertexAttribP2ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP2uiv(index, type, normalized, value) glatter_glVertexAttribP2uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP2uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP3ui(index, type, normalized, value) glatter_glVertexAttribP3ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP3uiv(index, type, normalized, value) glatter_glVertexAttribP3uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP3uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexAttribP4ui(index, type, normalized, value) glatter_glVertexAttribP4ui_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4ui_debug(GLuint index, GLenum type, GLboolean normalized, GLuint value, const char* file, int line);
#define glVertexAttribP4uiv(index, type, normalized, value) glatter_glVertexAttribP4uiv_debug((index), (type), (normalized), (value), __FILE__, __LINE__)
void glatter_glVertexAttribP4uiv_debug(GLuint index, GLenum type, GLboolean normalized, const GLuint *value, const char* file, int line);
#define glVertexP2ui(type, value) glatter_glVertexP2ui_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP2ui_debug(GLenum type, GLuint value, const char* file, int line);
#define glVertexP2uiv(type, value) glatter_glVertexP2uiv_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP2uiv_debug(GLenum type, const GLuint *value, const char* file, int line);
#define glVertexP3ui(type, value) glatter_glVertexP3ui_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP3ui_debug(GLenum type, GLuint value, const char* file, int line);
#define glVertexP3uiv(type, value) glatter_glVertexP3uiv_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP3uiv_debug(GLenum type, const GLuint *value, const char* file, int line);
#define glVertexP4ui(type, value) glatter_glVertexP4ui_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP4ui_debug(GLenum type, GLuint value, const char* file, int line);
#define glVertexP4uiv(type, value) glatter_glVertexP4uiv_debug((type), (value), __FILE__, __LINE__)
void glatter_glVertexP4uiv_debug(GLenum type, const GLuint *value, const char* file, int line);
#endif // defined(GL_VERSION_3_3)
#if defined(GL_VERSION_4_0)
#define glBeginQueryIndexed(target, index, id) glatter_glBeginQueryIndexed_debug((target), (index), (id), __FILE__, __LINE__)
void glatter_glBeginQueryIndexed_debug(GLenum target, GLuint index, GLuint id, const char* file, int line);
#define glBindTransformFeedback(target, id) glatter_glBindTransformFeedback_debug((target), (id), __FILE__, __LINE__)
void glatter_glBindTransformFeedback_debug(GLenum target, GLuint id, const char* file, int line);
#define glBlendEquationSeparatei(buf, modeRGB, modeAlpha) glatter_glBlendEquationSeparatei_debug((buf), (modeRGB), (modeAlpha), __FILE__, __LINE__)
void glatter_glBlendEquationSeparatei_debug(GLuint buf, GLenum modeRGB, GLenum modeAlpha, const char* file, int line);
#define glBlendEquationi(buf, mode) glatter_glBlendEquationi_debug((buf), (mode), __FILE__, __LINE__)
void glatter_glBlendEquationi_debug(GLuint buf, GLenum mode, const char* file, int line);
#define glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) glatter_glBlendFuncSeparatei_debug((buf), (srcRGB), (dstRGB), (srcAlpha), (dstAlpha), __FILE__, __LINE__)
void glatter_glBlendFuncSeparatei_debug(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, const char* file, int line);
#define glBlendFunci(buf, src, dst) glatter_glBlendFunci_debug((buf), (src), (dst), __FILE__, __LINE__)
void glatter_glBlendFunci_debug(GLuint buf, GLenum src, GLenum dst, const char* file, int line);
#define glDeleteTransformFeedbacks(n, ids) glatter_glDeleteTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glDeleteTransformFeedbacks_debug(GLsizei n, const GLuint *ids, const char* file, int line);
#define glDrawArraysIndirect(mode, indirect) glatter_glDrawArraysIndirect_debug((mode), (indirect), __FILE__, __LINE__)
void glatter_glDrawArraysIndirect_debug(GLenum mode, const void *indirect, const char* file, int line);
#define glDrawElementsIndirect(mode, type, indirect) glatter_glDrawElementsIndirect_debug((mode), (type), (indirect), __FILE__, __LINE__)
void glatter_glDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, const char* file, int line);
#define glDrawTransformFeedback(mode, id) glatter_glDrawTransformFeedback_debug((mode), (id), __FILE__, __LINE__)
void glatter_glDrawTransformFeedback_debug(GLenum mode, GLuint id, const char* file, int line);
#define glDrawTransformFeedbackStream(mode, id, stream) glatter_glDrawTransformFeedbackStream_debug((mode), (id), (stream), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStream_debug(GLenum mode, GLuint id, GLuint stream, const char* file, int line);
#define glEndQueryIndexed(target, index) glatter_glEndQueryIndexed_debug((target), (index), __FILE__, __LINE__)
void glatter_glEndQueryIndexed_debug(GLenum target, GLuint index, const char* file, int line);
#define glGenTransformFeedbacks(n, ids) glatter_glGenTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glGenTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) glatter_glGetActiveSubroutineUniformName_debug((program), (shadertype), (index), (bufsize), (length), (name), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformName_debug(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) glatter_glGetActiveSubroutineUniformiv_debug((program), (shadertype), (index), (pname), (values), __FILE__, __LINE__)
void glatter_glGetActiveSubroutineUniformiv_debug(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values, const char* file, int line);
#define glGetProgramStageiv(program, shadertype, pname, values) glatter_glGetProgramStageiv_debug((program), (shadertype), (pname), (values), __FILE__, __LINE__)
void glatter_glGetProgramStageiv_debug(GLuint program, GLenum shadertype, GLenum pname, GLint *values, const char* file, int line);
#define glGetQueryIndexediv(target, index, pname, params) glatter_glGetQueryIndexediv_debug((target), (index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetQueryIndexediv_debug(GLenum target, GLuint index, GLenum pname, GLint *params, const char* file, int line);
#define glGetSubroutineIndex(program, shadertype, name) glatter_glGetSubroutineIndex_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLuint glatter_glGetSubroutineIndex_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetSubroutineUniformLocation(program, shadertype, name) glatter_glGetSubroutineUniformLocation_debug((program), (shadertype), (name), __FILE__, __LINE__)
GLint glatter_glGetSubroutineUniformLocation_debug(GLuint program, GLenum shadertype, const GLchar *name, const char* file, int line);
#define glGetUniformSubroutineuiv(shadertype, location, params) glatter_glGetUniformSubroutineuiv_debug((shadertype), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformSubroutineuiv_debug(GLenum shadertype, GLint location, GLuint *params, const char* file, int line);
#define glGetUniformdv(program, location, params) glatter_glGetUniformdv_debug((program), (location), (params), __FILE__, __LINE__)
void glatter_glGetUniformdv_debug(GLuint program, GLint location, GLdouble *params, const char* file, int line);
#define glIsTransformFeedback(id) glatter_glIsTransformFeedback_debug((id), __FILE__, __LINE__)
GLboolean glatter_glIsTransformFeedback_debug(GLuint id, const char* file, int line);
#define glMinSampleShading(value) glatter_glMinSampleShading_debug((value), __FILE__, __LINE__)
void glatter_glMinSampleShading_debug(GLfloat value, const char* file, int line);
#define glPatchParameterfv(pname, values) glatter_glPatchParameterfv_debug((pname), (values), __FILE__, __LINE__)
void glatter_glPatchParameterfv_debug(GLenum pname, const GLfloat *values, const char* file, int line);
#define glPatchParameteri(pname, value) glatter_glPatchParameteri_debug((pname), (value), __FILE__, __LINE__)
void glatter_glPatchParameteri_debug(GLenum pname, GLint value, const char* file, int line);
#define glPauseTransformFeedback() glatter_glPauseTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glPauseTransformFeedback_debug(const char* file, int line);
#define glResumeTransformFeedback() glatter_glResumeTransformFeedback_debug(__FILE__, __LINE__)
void glatter_glResumeTransformFeedback_debug(const char* file, int line);
#define glUniform1d(location, x) glatter_glUniform1d_debug((location), (x), __FILE__, __LINE__)
void glatter_glUniform1d_debug(GLint location, GLdouble x, const char* file, int line);
#define glUniform1dv(location, count, value) glatter_glUniform1dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform1dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform2d(location, x, y) glatter_glUniform2d_debug((location), (x), (y), __FILE__, __LINE__)
void glatter_glUniform2d_debug(GLint location, GLdouble x, GLdouble y, const char* file, int line);
#define glUniform2dv(location, count, value) glatter_glUniform2dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform2dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform3d(location, x, y, z) glatter_glUniform3d_debug((location), (x), (y), (z), __FILE__, __LINE__)
void glatter_glUniform3d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glUniform3dv(location, count, value) glatter_glUniform3dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform3dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniform4d(location, x, y, z, w) glatter_glUniform4d_debug((location), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glUniform4d_debug(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glUniform4dv(location, count, value) glatter_glUniform4dv_debug((location), (count), (value), __FILE__, __LINE__)
void glatter_glUniform4dv_debug(GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2dv(location, count, transpose, value) glatter_glUniformMatrix2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x3dv(location, count, transpose, value) glatter_glUniformMatrix2x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix2x4dv(location, count, transpose, value) glatter_glUniformMatrix2x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix2x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3dv(location, count, transpose, value) glatter_glUniformMatrix3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x2dv(location, count, transpose, value) glatter_glUniformMatrix3x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix3x4dv(location, count, transpose, value) glatter_glUniformMatrix3x4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix3x4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4dv(location, count, transpose, value) glatter_glUniformMatrix4dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x2dv(location, count, transpose, value) glatter_glUniformMatrix4x2dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x2dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformMatrix4x3dv(location, count, transpose, value) glatter_glUniformMatrix4x3dv_debug((location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glUniformMatrix4x3dv_debug(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glUniformSubroutinesuiv(shadertype, count, indices) glatter_glUniformSubroutinesuiv_debug((shadertype), (count), (indices), __FILE__, __LINE__)
void glatter_glUniformSubroutinesuiv_debug(GLenum shadertype, GLsizei count, const GLuint *indices, const char* file, int line);
#endif // defined(GL_VERSION_4_0)
#if defined(GL_VERSION_4_1)
#define glActiveShaderProgram(pipeline, program) glatter_glActiveShaderProgram_debug((pipeline), (program), __FILE__, __LINE__)
void glatter_glActiveShaderProgram_debug(GLuint pipeline, GLuint program, const char* file, int line);
#define glBindProgramPipeline(pipeline) glatter_glBindProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glBindProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glClearDepthf(d) glatter_glClearDepthf_debug((d), __FILE__, __LINE__)
void glatter_glClearDepthf_debug(GLfloat d, const char* file, int line);
#define glCreateShaderProgramv(type, count, strings) glatter_glCreateShaderProgramv_debug((type), (count), (strings), __FILE__, __LINE__)
GLuint glatter_glCreateShaderProgramv_debug(GLenum type, GLsizei count, const GLchar *const*strings, const char* file, int line);
#define glDeleteProgramPipelines(n, pipelines) glatter_glDeleteProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glDeleteProgramPipelines_debug(GLsizei n, const GLuint *pipelines, const char* file, int line);
#define glDepthRangeArrayv(first, count, v) glatter_glDepthRangeArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glDepthRangeArrayv_debug(GLuint first, GLsizei count, const GLdouble *v, const char* file, int line);
#define glDepthRangeIndexed(index, n, f) glatter_glDepthRangeIndexed_debug((index), (n), (f), __FILE__, __LINE__)
void glatter_glDepthRangeIndexed_debug(GLuint index, GLdouble n, GLdouble f, const char* file, int line);
#define glDepthRangef(n, f) glatter_glDepthRangef_debug((n), (f), __FILE__, __LINE__)
void glatter_glDepthRangef_debug(GLfloat n, GLfloat f, const char* file, int line);
#define glGenProgramPipelines(n, pipelines) glatter_glGenProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glGenProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glGetDoublei_v(target, index, data) glatter_glGetDoublei_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetDoublei_v_debug(GLenum target, GLuint index, GLdouble *data, const char* file, int line);
#define glGetFloati_v(target, index, data) glatter_glGetFloati_v_debug((target), (index), (data), __FILE__, __LINE__)
void glatter_glGetFloati_v_debug(GLenum target, GLuint index, GLfloat *data, const char* file, int line);
#define glGetProgramBinary(program, bufSize, length, binaryFormat, binary) glatter_glGetProgramBinary_debug((program), (bufSize), (length), (binaryFormat), (binary), __FILE__, __LINE__)
void glatter_glGetProgramBinary_debug(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary, const char* file, int line);
#define glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) glatter_glGetProgramPipelineInfoLog_debug((pipeline), (bufSize), (length), (infoLog), __FILE__, __LINE__)
void glatter_glGetProgramPipelineInfoLog_debug(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog, const char* file, int line);
#define glGetProgramPipelineiv(pipeline, pname, params) glatter_glGetProgramPipelineiv_debug((pipeline), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramPipelineiv_debug(GLuint pipeline, GLenum pname, GLint *params, const char* file, int line);
#define glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) glatter_glGetShaderPrecisionFormat_debug((shadertype), (precisiontype), (range), (precision), __FILE__, __LINE__)
void glatter_glGetShaderPrecisionFormat_debug(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision, const char* file, int line);
#define glGetVertexAttribLdv(index, pname, params) glatter_glGetVertexAttribLdv_debug((index), (pname), (params), __FILE__, __LINE__)
void glatter_glGetVertexAttribLdv_debug(GLuint index, GLenum pname, GLdouble *params, const char* file, int line);
#define glIsProgramPipeline(pipeline) glatter_glIsProgramPipeline_debug((pipeline), __FILE__, __LINE__)
GLboolean glatter_glIsProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glProgramBinary(program, binaryFormat, binary, length) glatter_glProgramBinary_debug((program), (binaryFormat), (binary), (length), __FILE__, __LINE__)
void glatter_glProgramBinary_debug(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length, const char* file, int line);
#define glProgramParameteri(program, pname, value) glatter_glProgramParameteri_debug((program), (pname), (value), __FILE__, __LINE__)
void glatter_glProgramParameteri_debug(GLuint program, GLenum pname, GLint value, const char* file, int line);
#define glProgramUniform1d(program, location, v0) glatter_glProgramUniform1d_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1d_debug(GLuint program, GLint location, GLdouble v0, const char* file, int line);
#define glProgramUniform1dv(program, location, count, value) glatter_glProgramUniform1dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform1f(program, location, v0) glatter_glProgramUniform1f_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1f_debug(GLuint program, GLint location, GLfloat v0, const char* file, int line);
#define glProgramUniform1fv(program, location, count, value) glatter_glProgramUniform1fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform1i(program, location, v0) glatter_glProgramUniform1i_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1i_debug(GLuint program, GLint location, GLint v0, const char* file, int line);
#define glProgramUniform1iv(program, location, count, value) glatter_glProgramUniform1iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform1ui(program, location, v0) glatter_glProgramUniform1ui_debug((program), (location), (v0), __FILE__, __LINE__)
void glatter_glProgramUniform1ui_debug(GLuint program, GLint location, GLuint v0, const char* file, int line);
#define glProgramUniform1uiv(program, location, count, value) glatter_glProgramUniform1uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform1uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform2d(program, location, v0, v1) glatter_glProgramUniform2d_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, const char* file, int line);
#define glProgramUniform2dv(program, location, count, value) glatter_glProgramUniform2dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform2f(program, location, v0, v1) glatter_glProgramUniform2f_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, const char* file, int line);
#define glProgramUniform2fv(program, location, count, value) glatter_glProgramUniform2fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform2i(program, location, v0, v1) glatter_glProgramUniform2i_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2i_debug(GLuint program, GLint location, GLint v0, GLint v1, const char* file, int line);
#define glProgramUniform2iv(program, location, count, value) glatter_glProgramUniform2iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform2ui(program, location, v0, v1) glatter_glProgramUniform2ui_debug((program), (location), (v0), (v1), __FILE__, __LINE__)
void glatter_glProgramUniform2ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, const char* file, int line);
#define glProgramUniform2uiv(program, location, count, value) glatter_glProgramUniform2uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform2uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform3d(program, location, v0, v1, v2) glatter_glProgramUniform3d_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, const char* file, int line);
#define glProgramUniform3dv(program, location, count, value) glatter_glProgramUniform3dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform3f(program, location, v0, v1, v2) glatter_glProgramUniform3f_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, const char* file, int line);
#define glProgramUniform3fv(program, location, count, value) glatter_glProgramUniform3fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform3i(program, location, v0, v1, v2) glatter_glProgramUniform3i_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, const char* file, int line);
#define glProgramUniform3iv(program, location, count, value) glatter_glProgramUniform3iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform3ui(program, location, v0, v1, v2) glatter_glProgramUniform3ui_debug((program), (location), (v0), (v1), (v2), __FILE__, __LINE__)
void glatter_glProgramUniform3ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, const char* file, int line);
#define glProgramUniform3uiv(program, location, count, value) glatter_glProgramUniform3uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform3uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniform4d(program, location, v0, v1, v2, v3) glatter_glProgramUniform4d_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4d_debug(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3, const char* file, int line);
#define glProgramUniform4dv(program, location, count, value) glatter_glProgramUniform4dv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4dv_debug(GLuint program, GLint location, GLsizei count, const GLdouble *value, const char* file, int line);
#define glProgramUniform4f(program, location, v0, v1, v2, v3) glatter_glProgramUniform4f_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4f_debug(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, const char* file, int line);
#define glProgramUniform4fv(program, location, count, value) glatter_glProgramUniform4fv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4fv_debug(GLuint program, GLint location, GLsizei count, const GLfloat *value, const char* file, int line);
#define glProgramUniform4i(program, location, v0, v1, v2, v3) glatter_glProgramUniform4i_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4i_debug(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, const char* file, int line);
#define glProgramUniform4iv(program, location, count, value) glatter_glProgramUniform4iv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4iv_debug(GLuint program, GLint location, GLsizei count, const GLint *value, const char* file, int line);
#define glProgramUniform4ui(program, location, v0, v1, v2, v3) glatter_glProgramUniform4ui_debug((program), (location), (v0), (v1), (v2), (v3), __FILE__, __LINE__)
void glatter_glProgramUniform4ui_debug(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, const char* file, int line);
#define glProgramUniform4uiv(program, location, count, value) glatter_glProgramUniform4uiv_debug((program), (location), (count), (value), __FILE__, __LINE__)
void glatter_glProgramUniform4uiv_debug(GLuint program, GLint location, GLsizei count, const GLuint *value, const char* file, int line);
#define glProgramUniformMatrix2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix2x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix2x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix2x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix2x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix3x4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix3x4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix3x4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix3x4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x2dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x2fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x2fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x2fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glProgramUniformMatrix4x3dv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3dv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3dv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value, const char* file, int line);
#define glProgramUniformMatrix4x3fv(program, location, count, transpose, value) glatter_glProgramUniformMatrix4x3fv_debug((program), (location), (count), (transpose), (value), __FILE__, __LINE__)
void glatter_glProgramUniformMatrix4x3fv_debug(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value, const char* file, int line);
#define glReleaseShaderCompiler() glatter_glReleaseShaderCompiler_debug(__FILE__, __LINE__)
void glatter_glReleaseShaderCompiler_debug(const char* file, int line);
#define glScissorArrayv(first, count, v) glatter_glScissorArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glScissorArrayv_debug(GLuint first, GLsizei count, const GLint *v, const char* file, int line);
#define glScissorIndexed(index, left, bottom, width, height) glatter_glScissorIndexed_debug((index), (left), (bottom), (width), (height), __FILE__, __LINE__)
void glatter_glScissorIndexed_debug(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, const char* file, int line);
#define glScissorIndexedv(index, v) glatter_glScissorIndexedv_debug((index), (v), __FILE__, __LINE__)
void glatter_glScissorIndexedv_debug(GLuint index, const GLint *v, const char* file, int line);
#define glShaderBinary(count, shaders, binaryformat, binary, length) glatter_glShaderBinary_debug((count), (shaders), (binaryformat), (binary), (length), __FILE__, __LINE__)
void glatter_glShaderBinary_debug(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length, const char* file, int line);
#define glUseProgramStages(pipeline, stages, program) glatter_glUseProgramStages_debug((pipeline), (stages), (program), __FILE__, __LINE__)
void glatter_glUseProgramStages_debug(GLuint pipeline, GLbitfield stages, GLuint program, const char* file, int line);
#define glValidateProgramPipeline(pipeline) glatter_glValidateProgramPipeline_debug((pipeline), __FILE__, __LINE__)
void glatter_glValidateProgramPipeline_debug(GLuint pipeline, const char* file, int line);
#define glVertexAttribL1d(index, x) glatter_glVertexAttribL1d_debug((index), (x), __FILE__, __LINE__)
void glatter_glVertexAttribL1d_debug(GLuint index, GLdouble x, const char* file, int line);
#define glVertexAttribL1dv(index, v) glatter_glVertexAttribL1dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL1dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL2d(index, x, y) glatter_glVertexAttribL2d_debug((index), (x), (y), __FILE__, __LINE__)
void glatter_glVertexAttribL2d_debug(GLuint index, GLdouble x, GLdouble y, const char* file, int line);
#define glVertexAttribL2dv(index, v) glatter_glVertexAttribL2dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL2dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL3d(index, x, y, z) glatter_glVertexAttribL3d_debug((index), (x), (y), (z), __FILE__, __LINE__)
void glatter_glVertexAttribL3d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define glVertexAttribL3dv(index, v) glatter_glVertexAttribL3dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL3dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribL4d(index, x, y, z, w) glatter_glVertexAttribL4d_debug((index), (x), (y), (z), (w), __FILE__, __LINE__)
void glatter_glVertexAttribL4d_debug(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, const char* file, int line);
#define glVertexAttribL4dv(index, v) glatter_glVertexAttribL4dv_debug((index), (v), __FILE__, __LINE__)
void glatter_glVertexAttribL4dv_debug(GLuint index, const GLdouble *v, const char* file, int line);
#define glVertexAttribLPointer(index, size, type, stride, pointer) glatter_glVertexAttribLPointer_debug((index), (size), (type), (stride), (pointer), __FILE__, __LINE__)
void glatter_glVertexAttribLPointer_debug(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer, const char* file, int line);
#define glViewportArrayv(first, count, v) glatter_glViewportArrayv_debug((first), (count), (v), __FILE__, __LINE__)
void glatter_glViewportArrayv_debug(GLuint first, GLsizei count, const GLfloat *v, const char* file, int line);
#define glViewportIndexedf(index, x, y, w, h) glatter_glViewportIndexedf_debug((index), (x), (y), (w), (h), __FILE__, __LINE__)
void glatter_glViewportIndexedf_debug(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, const char* file, int line);
#define glViewportIndexedfv(index, v) glatter_glViewportIndexedfv_debug((index), (v), __FILE__, __LINE__)
void glatter_glViewportIndexedfv_debug(GLuint index, const GLfloat *v, const char* file, int line);
#endif // defined(GL_VERSION_4_1)
#if defined(GL_VERSION_4_2)
#define glBindImageTexture(unit, texture, level, layered, layer, access, format) glatter_glBindImageTexture_debug((unit), (texture), (level), (layered), (layer), (access), (format), __FILE__, __LINE__)
void glatter_glBindImageTexture_debug(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, const char* file, int line);
#define glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) glatter_glDrawArraysInstancedBaseInstance_debug((mode), (first), (count), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawArraysInstancedBaseInstance_debug(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) glatter_glDrawElementsInstancedBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance, const char* file, int line);
#define glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug((mode), (count), (type), (indices), (instancecount), (basevertex), (baseinstance), __FILE__, __LINE__)
void glatter_glDrawElementsInstancedBaseVertexBaseInstance_debug(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, const char* file, int line);
#define glDrawTransformFeedbackInstanced(mode, id, instancecount) glatter_glDrawTransformFeedbackInstanced_debug((mode), (id), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackInstanced_debug(GLenum mode, GLuint id, GLsizei instancecount, const char* file, int line);
#define glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) glatter_glDrawTransformFeedbackStreamInstanced_debug((mode), (id), (stream), (instancecount), __FILE__, __LINE__)
void glatter_glDrawTransformFeedbackStreamInstanced_debug(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount, const char* file, int line);
#define glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) glatter_glGetActiveAtomicCounterBufferiv_debug((program), (bufferIndex), (pname), (params), __FILE__, __LINE__)
void glatter_glGetActiveAtomicCounterBufferiv_debug(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformativ(target, internalformat, pname, bufSize, params) glatter_glGetInternalformativ_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformativ_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params, const char* file, int line);
#define glMemoryBarrier(barriers) glatter_glMemoryBarrier_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrier_debug(GLbitfield barriers, const char* file, int line);
#define glTexStorage1D(target, levels, internalformat, width) glatter_glTexStorage1D_debug((target), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTexStorage1D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTexStorage2D(target, levels, internalformat, width, height) glatter_glTexStorage2D_debug((target), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTexStorage2D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTexStorage3D(target, levels, internalformat, width, height, depth) glatter_glTexStorage3D_debug((target), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTexStorage3D_debug(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GL_VERSION_4_2)
#if defined(GL_VERSION_4_3)
#define glBindVertexBuffer(bindingindex, buffer, offset, stride) glatter_glBindVertexBuffer_debug((bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glBindVertexBuffer_debug(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glClearBufferData(target, internalformat, format, type, data) glatter_glClearBufferData_debug((target), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferData_debug(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearBufferSubData(target, internalformat, offset, size, format, type, data) glatter_glClearBufferSubData_debug((target), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearBufferSubData_debug(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) glatter_glCopyImageSubData_debug((srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (srcWidth), (srcHeight), (srcDepth), __FILE__, __LINE__)
void glatter_glCopyImageSubData_debug(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, const char* file, int line);
#define glDebugMessageCallback(callback, userParam) glatter_glDebugMessageCallback_debug((callback), (userParam), __FILE__, __LINE__)
void glatter_glDebugMessageCallback_debug(GLDEBUGPROC callback, const void *userParam, const char* file, int line);
#define glDebugMessageControl(source, type, severity, count, ids, enabled) glatter_glDebugMessageControl_debug((source), (type), (severity), (count), (ids), (enabled), __FILE__, __LINE__)
void glatter_glDebugMessageControl_debug(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled, const char* file, int line);
#define glDebugMessageInsert(source, type, id, severity, length, buf) glatter_glDebugMessageInsert_debug((source), (type), (id), (severity), (length), (buf), __FILE__, __LINE__)
void glatter_glDebugMessageInsert_debug(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf, const char* file, int line);
#define glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) glatter_glDispatchCompute_debug((num_groups_x), (num_groups_y), (num_groups_z), __FILE__, __LINE__)
void glatter_glDispatchCompute_debug(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, const char* file, int line);
#define glDispatchComputeIndirect(indirect) glatter_glDispatchComputeIndirect_debug((indirect), __FILE__, __LINE__)
void glatter_glDispatchComputeIndirect_debug(GLintptr indirect, const char* file, int line);
#define glFramebufferParameteri(target, pname, param) glatter_glFramebufferParameteri_debug((target), (pname), (param), __FILE__, __LINE__)
void glatter_glFramebufferParameteri_debug(GLenum target, GLenum pname, GLint param, const char* file, int line);
#define glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) glatter_glGetDebugMessageLog_debug((count), (bufSize), (sources), (types), (ids), (severities), (lengths), (messageLog), __FILE__, __LINE__)
GLuint glatter_glGetDebugMessageLog_debug(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog, const char* file, int line);
#define glGetFramebufferParameteriv(target, pname, params) glatter_glGetFramebufferParameteriv_debug((target), (pname), (params), __FILE__, __LINE__)
void glatter_glGetFramebufferParameteriv_debug(GLenum target, GLenum pname, GLint *params, const char* file, int line);
#define glGetInternalformati64v(target, internalformat, pname, bufSize, params) glatter_glGetInternalformati64v_debug((target), (internalformat), (pname), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetInternalformati64v_debug(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params, const char* file, int line);
#define glGetObjectLabel(identifier, name, bufSize, length, label) glatter_glGetObjectLabel_debug((identifier), (name), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectLabel_debug(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetObjectPtrLabel(ptr, bufSize, length, label) glatter_glGetObjectPtrLabel_debug((ptr), (bufSize), (length), (label), __FILE__, __LINE__)
void glatter_glGetObjectPtrLabel_debug(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label, const char* file, int line);
#define glGetProgramInterfaceiv(program, programInterface, pname, params) glatter_glGetProgramInterfaceiv_debug((program), (programInterface), (pname), (params), __FILE__, __LINE__)
void glatter_glGetProgramInterfaceiv_debug(GLuint program, GLenum programInterface, GLenum pname, GLint *params, const char* file, int line);
#define glGetProgramResourceIndex(program, programInterface, name) glatter_glGetProgramResourceIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLuint glatter_glGetProgramResourceIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocation(program, programInterface, name) glatter_glGetProgramResourceLocation_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocation_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceLocationIndex(program, programInterface, name) glatter_glGetProgramResourceLocationIndex_debug((program), (programInterface), (name), __FILE__, __LINE__)
GLint glatter_glGetProgramResourceLocationIndex_debug(GLuint program, GLenum programInterface, const GLchar *name, const char* file, int line);
#define glGetProgramResourceName(program, programInterface, index, bufSize, length, name) glatter_glGetProgramResourceName_debug((program), (programInterface), (index), (bufSize), (length), (name), __FILE__, __LINE__)
void glatter_glGetProgramResourceName_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name, const char* file, int line);
#define glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) glatter_glGetProgramResourceiv_debug((program), (programInterface), (index), (propCount), (props), (bufSize), (length), (params), __FILE__, __LINE__)
void glatter_glGetProgramResourceiv_debug(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params, const char* file, int line);
#define glInvalidateBufferData(buffer) glatter_glInvalidateBufferData_debug((buffer), __FILE__, __LINE__)
void glatter_glInvalidateBufferData_debug(GLuint buffer, const char* file, int line);
#define glInvalidateBufferSubData(buffer, offset, length) glatter_glInvalidateBufferSubData_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glInvalidateBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glInvalidateFramebuffer(target, numAttachments, attachments) glatter_glInvalidateFramebuffer_debug((target), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) glatter_glInvalidateSubFramebuffer_debug((target), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateSubFramebuffer_debug(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glInvalidateTexImage(texture, level) glatter_glInvalidateTexImage_debug((texture), (level), __FILE__, __LINE__)
void glatter_glInvalidateTexImage_debug(GLuint texture, GLint level, const char* file, int line);
#define glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) glatter_glInvalidateTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glInvalidateTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) glatter_glMultiDrawArraysIndirect_debug((mode), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawArraysIndirect_debug(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) glatter_glMultiDrawElementsIndirect_debug((mode), (type), (indirect), (drawcount), (stride), __FILE__, __LINE__)
void glatter_glMultiDrawElementsIndirect_debug(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride, const char* file, int line);
#define glObjectLabel(identifier, name, length, label) glatter_glObjectLabel_debug((identifier), (name), (length), (label), __FILE__, __LINE__)
void glatter_glObjectLabel_debug(GLenum identifier, GLuint name, GLsizei length, const GLchar *label, const char* file, int line);
#define glObjectPtrLabel(ptr, length, label) glatter_glObjectPtrLabel_debug((ptr), (length), (label), __FILE__, __LINE__)
void glatter_glObjectPtrLabel_debug(const void *ptr, GLsizei length, const GLchar *label, const char* file, int line);
#define glPopDebugGroup() glatter_glPopDebugGroup_debug(__FILE__, __LINE__)
void glatter_glPopDebugGroup_debug(const char* file, int line);
#define glPushDebugGroup(source, id, length, message) glatter_glPushDebugGroup_debug((source), (id), (length), (message), __FILE__, __LINE__)
void glatter_glPushDebugGroup_debug(GLenum source, GLuint id, GLsizei length, const GLchar *message, const char* file, int line);
#define glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) glatter_glShaderStorageBlockBinding_debug((program), (storageBlockIndex), (storageBlockBinding), __FILE__, __LINE__)
void glatter_glShaderStorageBlockBinding_debug(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding, const char* file, int line);
#define glTexBufferRange(target, internalformat, buffer, offset, size) glatter_glTexBufferRange_debug((target), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTexBufferRange_debug(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) glatter_glTexStorage2DMultisample_debug((target), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage2DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTexStorage3DMultisample_debug((target), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTexStorage3DMultisample_debug(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) glatter_glTextureView_debug((texture), (target), (origtexture), (internalformat), (minlevel), (numlevels), (minlayer), (numlayers), __FILE__, __LINE__)
void glatter_glTextureView_debug(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, const char* file, int line);
#define glVertexAttribBinding(attribindex, bindingindex) glatter_glVertexAttribBinding_debug((attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexAttribBinding_debug(GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) glatter_glVertexAttribFormat_debug((attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribFormat_debug(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribIFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribIFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribIFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexAttribLFormat(attribindex, size, type, relativeoffset) glatter_glVertexAttribLFormat_debug((attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexAttribLFormat_debug(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexBindingDivisor(bindingindex, divisor) glatter_glVertexBindingDivisor_debug((bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexBindingDivisor_debug(GLuint bindingindex, GLuint divisor, const char* file, int line);
#endif // defined(GL_VERSION_4_3)
#if defined(GL_VERSION_4_4)
#define glBindBuffersBase(target, first, count, buffers) glatter_glBindBuffersBase_debug((target), (first), (count), (buffers), __FILE__, __LINE__)
void glatter_glBindBuffersBase_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const char* file, int line);
#define glBindBuffersRange(target, first, count, buffers, offsets, sizes) glatter_glBindBuffersRange_debug((target), (first), (count), (buffers), (offsets), (sizes), __FILE__, __LINE__)
void glatter_glBindBuffersRange_debug(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes, const char* file, int line);
#define glBindImageTextures(first, count, textures) glatter_glBindImageTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindImageTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindSamplers(first, count, samplers) glatter_glBindSamplers_debug((first), (count), (samplers), __FILE__, __LINE__)
void glatter_glBindSamplers_debug(GLuint first, GLsizei count, const GLuint *samplers, const char* file, int line);
#define glBindTextures(first, count, textures) glatter_glBindTextures_debug((first), (count), (textures), __FILE__, __LINE__)
void glatter_glBindTextures_debug(GLuint first, GLsizei count, const GLuint *textures, const char* file, int line);
#define glBindVertexBuffers(first, count, buffers, offsets, strides) glatter_glBindVertexBuffers_debug((first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glBindVertexBuffers_debug(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#define glBufferStorage(target, size, data, flags) glatter_glBufferStorage_debug((target), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glBufferStorage_debug(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glClearTexImage(texture, level, format, type, data) glatter_glClearTexImage_debug((texture), (level), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) glatter_glClearTexSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearTexSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // defined(GL_VERSION_4_4)
#if defined(GL_VERSION_4_5)
#define glBindTextureUnit(unit, texture) glatter_glBindTextureUnit_debug((unit), (texture), __FILE__, __LINE__)
void glatter_glBindTextureUnit_debug(GLuint unit, GLuint texture, const char* file, int line);
#define glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glBlitNamedFramebuffer_debug((readFramebuffer), (drawFramebuffer), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glBlitNamedFramebuffer_debug(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glCheckNamedFramebufferStatus(framebuffer, target) glatter_glCheckNamedFramebufferStatus_debug((framebuffer), (target), __FILE__, __LINE__)
GLenum glatter_glCheckNamedFramebufferStatus_debug(GLuint framebuffer, GLenum target, const char* file, int line);
#define glClearNamedBufferData(buffer, internalformat, format, type, data) glatter_glClearNamedBufferData_debug((buffer), (internalformat), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferData_debug(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) glatter_glClearNamedBufferSubData_debug((buffer), (internalformat), (offset), (size), (format), (type), (data), __FILE__, __LINE__)
void glatter_glClearNamedBufferSubData_debug(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data, const char* file, int line);
#define glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) glatter_glClearNamedFramebufferfi_debug((framebuffer), (buffer), (drawbuffer), (depth), (stencil), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfi_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, const char* file, int line);
#define glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferfv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferfv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value, const char* file, int line);
#define glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value, const char* file, int line);
#define glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) glatter_glClearNamedFramebufferuiv_debug((framebuffer), (buffer), (drawbuffer), (value), __FILE__, __LINE__)
void glatter_glClearNamedFramebufferuiv_debug(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value, const char* file, int line);
#define glClipControl(origin, depth) glatter_glClipControl_debug((origin), (depth), __FILE__, __LINE__)
void glatter_glClipControl_debug(GLenum origin, GLenum depth, const char* file, int line);
#define glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) glatter_glCompressedTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) glatter_glCompressedTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) glatter_glCompressedTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (imageSize), (data), __FILE__, __LINE__)
void glatter_glCompressedTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data, const char* file, int line);
#define glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glCopyNamedBufferSubData_debug((readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glCopyNamedBufferSubData_debug(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glCopyTextureSubImage1D(texture, level, xoffset, x, y, width) glatter_glCopyTextureSubImage1D_debug((texture), (level), (xoffset), (x), (y), (width), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, const char* file, int line);
#define glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) glatter_glCopyTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) glatter_glCopyTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glCopyTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glCreateBuffers(n, buffers) glatter_glCreateBuffers_debug((n), (buffers), __FILE__, __LINE__)
void glatter_glCreateBuffers_debug(GLsizei n, GLuint *buffers, const char* file, int line);
#define glCreateFramebuffers(n, framebuffers) glatter_glCreateFramebuffers_debug((n), (framebuffers), __FILE__, __LINE__)
void glatter_glCreateFramebuffers_debug(GLsizei n, GLuint *framebuffers, const char* file, int line);
#define glCreateProgramPipelines(n, pipelines) glatter_glCreateProgramPipelines_debug((n), (pipelines), __FILE__, __LINE__)
void glatter_glCreateProgramPipelines_debug(GLsizei n, GLuint *pipelines, const char* file, int line);
#define glCreateQueries(target, n, ids) glatter_glCreateQueries_debug((target), (n), (ids), __FILE__, __LINE__)
void glatter_glCreateQueries_debug(GLenum target, GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateRenderbuffers(n, renderbuffers) glatter_glCreateRenderbuffers_debug((n), (renderbuffers), __FILE__, __LINE__)
void glatter_glCreateRenderbuffers_debug(GLsizei n, GLuint *renderbuffers, const char* file, int line);
#define glCreateSamplers(n, samplers) glatter_glCreateSamplers_debug((n), (samplers), __FILE__, __LINE__)
void glatter_glCreateSamplers_debug(GLsizei n, GLuint *samplers, const char* file, int line);
#define glCreateTextures(target, n, textures) glatter_glCreateTextures_debug((target), (n), (textures), __FILE__, __LINE__)
void glatter_glCreateTextures_debug(GLenum target, GLsizei n, GLuint *textures, const char* file, int line);
#define glCreateTransformFeedbacks(n, ids) glatter_glCreateTransformFeedbacks_debug((n), (ids), __FILE__, __LINE__)
void glatter_glCreateTransformFeedbacks_debug(GLsizei n, GLuint *ids, const char* file, int line);
#define glCreateVertexArrays(n, arrays) glatter_glCreateVertexArrays_debug((n), (arrays), __FILE__, __LINE__)
void glatter_glCreateVertexArrays_debug(GLsizei n, GLuint *arrays, const char* file, int line);
#define glDisableVertexArrayAttrib(vaobj, index) glatter_glDisableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glDisableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glEnableVertexArrayAttrib(vaobj, index) glatter_glEnableVertexArrayAttrib_debug((vaobj), (index), __FILE__, __LINE__)
void glatter_glEnableVertexArrayAttrib_debug(GLuint vaobj, GLuint index, const char* file, int line);
#define glFlushMappedNamedBufferRange(buffer, offset, length) glatter_glFlushMappedNamedBufferRange_debug((buffer), (offset), (length), __FILE__, __LINE__)
void glatter_glFlushMappedNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, const char* file, int line);
#define glGenerateTextureMipmap(texture) glatter_glGenerateTextureMipmap_debug((texture), __FILE__, __LINE__)
void glatter_glGenerateTextureMipmap_debug(GLuint texture, const char* file, int line);
#define glGetCompressedTextureImage(texture, level, bufSize, pixels) glatter_glGetCompressedTextureImage_debug((texture), (level), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureImage_debug(GLuint texture, GLint level, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) glatter_glGetCompressedTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetCompressedTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetGraphicsResetStatus() glatter_glGetGraphicsResetStatus_debug(__FILE__, __LINE__)
GLenum glatter_glGetGraphicsResetStatus_debug(const char* file, int line);
#define glGetNamedBufferParameteri64v(buffer, pname, params) glatter_glGetNamedBufferParameteri64v_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteri64v_debug(GLuint buffer, GLenum pname, GLint64 *params, const char* file, int line);
#define glGetNamedBufferParameteriv(buffer, pname, params) glatter_glGetNamedBufferParameteriv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferParameteriv_debug(GLuint buffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedBufferPointerv(buffer, pname, params) glatter_glGetNamedBufferPointerv_debug((buffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedBufferPointerv_debug(GLuint buffer, GLenum pname, void **params, const char* file, int line);
#define glGetNamedBufferSubData(buffer, offset, size, data) glatter_glGetNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glGetNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data, const char* file, int line);
#define glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) glatter_glGetNamedFramebufferAttachmentParameteriv_debug((framebuffer), (attachment), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferAttachmentParameteriv_debug(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params, const char* file, int line);
#define glGetNamedFramebufferParameteriv(framebuffer, pname, param) glatter_glGetNamedFramebufferParameteriv_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glGetNamedFramebufferParameteriv_debug(GLuint framebuffer, GLenum pname, GLint *param, const char* file, int line);
#define glGetNamedRenderbufferParameteriv(renderbuffer, pname, params) glatter_glGetNamedRenderbufferParameteriv_debug((renderbuffer), (pname), (params), __FILE__, __LINE__)
void glatter_glGetNamedRenderbufferParameteriv_debug(GLuint renderbuffer, GLenum pname, GLint *params, const char* file, int line);
#define glGetQueryBufferObjecti64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjecti64v_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjecti64v_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectiv_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectiv_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectui64v(id, buffer, pname, offset) glatter_glGetQueryBufferObjectui64v_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectui64v_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetQueryBufferObjectuiv(id, buffer, pname, offset) glatter_glGetQueryBufferObjectuiv_debug((id), (buffer), (pname), (offset), __FILE__, __LINE__)
void glatter_glGetQueryBufferObjectuiv_debug(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, const char* file, int line);
#define glGetTextureImage(texture, level, format, type, bufSize, pixels) glatter_glGetTextureImage_debug((texture), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureImage_debug(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTextureLevelParameterfv(texture, level, pname, params) glatter_glGetTextureLevelParameterfv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameterfv_debug(GLuint texture, GLint level, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureLevelParameteriv(texture, level, pname, params) glatter_glGetTextureLevelParameteriv_debug((texture), (level), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureLevelParameteriv_debug(GLuint texture, GLint level, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIiv(texture, pname, params) glatter_glGetTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIiv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureParameterIuiv(texture, pname, params) glatter_glGetTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterIuiv_debug(GLuint texture, GLenum pname, GLuint *params, const char* file, int line);
#define glGetTextureParameterfv(texture, pname, params) glatter_glGetTextureParameterfv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameterfv_debug(GLuint texture, GLenum pname, GLfloat *params, const char* file, int line);
#define glGetTextureParameteriv(texture, pname, params) glatter_glGetTextureParameteriv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glGetTextureParameteriv_debug(GLuint texture, GLenum pname, GLint *params, const char* file, int line);
#define glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) glatter_glGetTextureSubImage_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetTextureSubImage_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetTransformFeedbacki64_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki64_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki64_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint64 *param, const char* file, int line);
#define glGetTransformFeedbacki_v(xfb, pname, index, param) glatter_glGetTransformFeedbacki_v_debug((xfb), (pname), (index), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbacki_v_debug(GLuint xfb, GLenum pname, GLuint index, GLint *param, const char* file, int line);
#define glGetTransformFeedbackiv(xfb, pname, param) glatter_glGetTransformFeedbackiv_debug((xfb), (pname), (param), __FILE__, __LINE__)
void glatter_glGetTransformFeedbackiv_debug(GLuint xfb, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayIndexed64iv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexed64iv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexed64iv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param, const char* file, int line);
#define glGetVertexArrayIndexediv(vaobj, index, pname, param) glatter_glGetVertexArrayIndexediv_debug((vaobj), (index), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayIndexediv_debug(GLuint vaobj, GLuint index, GLenum pname, GLint *param, const char* file, int line);
#define glGetVertexArrayiv(vaobj, pname, param) glatter_glGetVertexArrayiv_debug((vaobj), (pname), (param), __FILE__, __LINE__)
void glatter_glGetVertexArrayiv_debug(GLuint vaobj, GLenum pname, GLint *param, const char* file, int line);
#define glGetnColorTable(target, format, type, bufSize, table) glatter_glGetnColorTable_debug((target), (format), (type), (bufSize), (table), __FILE__, __LINE__)
void glatter_glGetnColorTable_debug(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table, const char* file, int line);
#define glGetnCompressedTexImage(target, lod, bufSize, pixels) glatter_glGetnCompressedTexImage_debug((target), (lod), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnCompressedTexImage_debug(GLenum target, GLint lod, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnConvolutionFilter(target, format, type, bufSize, image) glatter_glGetnConvolutionFilter_debug((target), (format), (type), (bufSize), (image), __FILE__, __LINE__)
void glatter_glGetnConvolutionFilter_debug(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image, const char* file, int line);
#define glGetnHistogram(target, reset, format, type, bufSize, values) glatter_glGetnHistogram_debug((target), (reset), (format), (type), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnHistogram_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values, const char* file, int line);
#define glGetnMapdv(target, query, bufSize, v) glatter_glGetnMapdv_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapdv_debug(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v, const char* file, int line);
#define glGetnMapfv(target, query, bufSize, v) glatter_glGetnMapfv_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapfv_debug(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v, const char* file, int line);
#define glGetnMapiv(target, query, bufSize, v) glatter_glGetnMapiv_debug((target), (query), (bufSize), (v), __FILE__, __LINE__)
void glatter_glGetnMapiv_debug(GLenum target, GLenum query, GLsizei bufSize, GLint *v, const char* file, int line);
#define glGetnMinmax(target, reset, format, type, bufSize, values) glatter_glGetnMinmax_debug((target), (reset), (format), (type), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnMinmax_debug(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values, const char* file, int line);
#define glGetnPixelMapfv(map, bufSize, values) glatter_glGetnPixelMapfv_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapfv_debug(GLenum map, GLsizei bufSize, GLfloat *values, const char* file, int line);
#define glGetnPixelMapuiv(map, bufSize, values) glatter_glGetnPixelMapuiv_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapuiv_debug(GLenum map, GLsizei bufSize, GLuint *values, const char* file, int line);
#define glGetnPixelMapusv(map, bufSize, values) glatter_glGetnPixelMapusv_debug((map), (bufSize), (values), __FILE__, __LINE__)
void glatter_glGetnPixelMapusv_debug(GLenum map, GLsizei bufSize, GLushort *values, const char* file, int line);
#define glGetnPolygonStipple(bufSize, pattern) glatter_glGetnPolygonStipple_debug((bufSize), (pattern), __FILE__, __LINE__)
void glatter_glGetnPolygonStipple_debug(GLsizei bufSize, GLubyte *pattern, const char* file, int line);
#define glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span) glatter_glGetnSeparableFilter_debug((target), (format), (type), (rowBufSize), (row), (columnBufSize), (column), (span), __FILE__, __LINE__)
void glatter_glGetnSeparableFilter_debug(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span, const char* file, int line);
#define glGetnTexImage(target, level, format, type, bufSize, pixels) glatter_glGetnTexImage_debug((target), (level), (format), (type), (bufSize), (pixels), __FILE__, __LINE__)
void glatter_glGetnTexImage_debug(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels, const char* file, int line);
#define glGetnUniformdv(program, location, bufSize, params) glatter_glGetnUniformdv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformdv_debug(GLuint program, GLint location, GLsizei bufSize, GLdouble *params, const char* file, int line);
#define glGetnUniformfv(program, location, bufSize, params) glatter_glGetnUniformfv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformfv_debug(GLuint program, GLint location, GLsizei bufSize, GLfloat *params, const char* file, int line);
#define glGetnUniformiv(program, location, bufSize, params) glatter_glGetnUniformiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformiv_debug(GLuint program, GLint location, GLsizei bufSize, GLint *params, const char* file, int line);
#define glGetnUniformuiv(program, location, bufSize, params) glatter_glGetnUniformuiv_debug((program), (location), (bufSize), (params), __FILE__, __LINE__)
void glatter_glGetnUniformuiv_debug(GLuint program, GLint location, GLsizei bufSize, GLuint *params, const char* file, int line);
#define glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) glatter_glInvalidateNamedFramebufferData_debug((framebuffer), (numAttachments), (attachments), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, const char* file, int line);
#define glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) glatter_glInvalidateNamedFramebufferSubData_debug((framebuffer), (numAttachments), (attachments), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glInvalidateNamedFramebufferSubData_debug(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height, const char* file, int line);
#define glMapNamedBuffer(buffer, access) glatter_glMapNamedBuffer_debug((buffer), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBuffer_debug(GLuint buffer, GLenum access, const char* file, int line);
#define glMapNamedBufferRange(buffer, offset, length, access) glatter_glMapNamedBufferRange_debug((buffer), (offset), (length), (access), __FILE__, __LINE__)
void * glatter_glMapNamedBufferRange_debug(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, const char* file, int line);
#define glMemoryBarrierByRegion(barriers) glatter_glMemoryBarrierByRegion_debug((barriers), __FILE__, __LINE__)
void glatter_glMemoryBarrierByRegion_debug(GLbitfield barriers, const char* file, int line);
#define glNamedBufferData(buffer, size, data, usage) glatter_glNamedBufferData_debug((buffer), (size), (data), (usage), __FILE__, __LINE__)
void glatter_glNamedBufferData_debug(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage, const char* file, int line);
#define glNamedBufferStorage(buffer, size, data, flags) glatter_glNamedBufferStorage_debug((buffer), (size), (data), (flags), __FILE__, __LINE__)
void glatter_glNamedBufferStorage_debug(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags, const char* file, int line);
#define glNamedBufferSubData(buffer, offset, size, data) glatter_glNamedBufferSubData_debug((buffer), (offset), (size), (data), __FILE__, __LINE__)
void glatter_glNamedBufferSubData_debug(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data, const char* file, int line);
#define glNamedFramebufferDrawBuffer(framebuffer, buf) glatter_glNamedFramebufferDrawBuffer_debug((framebuffer), (buf), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffer_debug(GLuint framebuffer, GLenum buf, const char* file, int line);
#define glNamedFramebufferDrawBuffers(framebuffer, n, bufs) glatter_glNamedFramebufferDrawBuffers_debug((framebuffer), (n), (bufs), __FILE__, __LINE__)
void glatter_glNamedFramebufferDrawBuffers_debug(GLuint framebuffer, GLsizei n, const GLenum *bufs, const char* file, int line);
#define glNamedFramebufferParameteri(framebuffer, pname, param) glatter_glNamedFramebufferParameteri_debug((framebuffer), (pname), (param), __FILE__, __LINE__)
void glatter_glNamedFramebufferParameteri_debug(GLuint framebuffer, GLenum pname, GLint param, const char* file, int line);
#define glNamedFramebufferReadBuffer(framebuffer, src) glatter_glNamedFramebufferReadBuffer_debug((framebuffer), (src), __FILE__, __LINE__)
void glatter_glNamedFramebufferReadBuffer_debug(GLuint framebuffer, GLenum src, const char* file, int line);
#define glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) glatter_glNamedFramebufferRenderbuffer_debug((framebuffer), (attachment), (renderbuffertarget), (renderbuffer), __FILE__, __LINE__)
void glatter_glNamedFramebufferRenderbuffer_debug(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, const char* file, int line);
#define glNamedFramebufferTexture(framebuffer, attachment, texture, level) glatter_glNamedFramebufferTexture_debug((framebuffer), (attachment), (texture), (level), __FILE__, __LINE__)
void glatter_glNamedFramebufferTexture_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, const char* file, int line);
#define glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) glatter_glNamedFramebufferTextureLayer_debug((framebuffer), (attachment), (texture), (level), (layer), __FILE__, __LINE__)
void glatter_glNamedFramebufferTextureLayer_debug(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, const char* file, int line);
#define glNamedRenderbufferStorage(renderbuffer, internalformat, width, height) glatter_glNamedRenderbufferStorage_debug((renderbuffer), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorage_debug(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) glatter_glNamedRenderbufferStorageMultisample_debug((renderbuffer), (samples), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glNamedRenderbufferStorageMultisample_debug(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glReadnPixels(x, y, width, height, format, type, bufSize, data) glatter_glReadnPixels_debug((x), (y), (width), (height), (format), (type), (bufSize), (data), __FILE__, __LINE__)
void glatter_glReadnPixels_debug(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data, const char* file, int line);
#define glTextureBarrier() glatter_glTextureBarrier_debug(__FILE__, __LINE__)
void glatter_glTextureBarrier_debug(const char* file, int line);
#define glTextureBuffer(texture, internalformat, buffer) glatter_glTextureBuffer_debug((texture), (internalformat), (buffer), __FILE__, __LINE__)
void glatter_glTextureBuffer_debug(GLuint texture, GLenum internalformat, GLuint buffer, const char* file, int line);
#define glTextureBufferRange(texture, internalformat, buffer, offset, size) glatter_glTextureBufferRange_debug((texture), (internalformat), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTextureBufferRange_debug(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glTextureParameterIiv(texture, pname, params) glatter_glTextureParameterIiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIiv_debug(GLuint texture, GLenum pname, const GLint *params, const char* file, int line);
#define glTextureParameterIuiv(texture, pname, params) glatter_glTextureParameterIuiv_debug((texture), (pname), (params), __FILE__, __LINE__)
void glatter_glTextureParameterIuiv_debug(GLuint texture, GLenum pname, const GLuint *params, const char* file, int line);
#define glTextureParameterf(texture, pname, param) glatter_glTextureParameterf_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterf_debug(GLuint texture, GLenum pname, GLfloat param, const char* file, int line);
#define glTextureParameterfv(texture, pname, param) glatter_glTextureParameterfv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameterfv_debug(GLuint texture, GLenum pname, const GLfloat *param, const char* file, int line);
#define glTextureParameteri(texture, pname, param) glatter_glTextureParameteri_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteri_debug(GLuint texture, GLenum pname, GLint param, const char* file, int line);
#define glTextureParameteriv(texture, pname, param) glatter_glTextureParameteriv_debug((texture), (pname), (param), __FILE__, __LINE__)
void glatter_glTextureParameteriv_debug(GLuint texture, GLenum pname, const GLint *param, const char* file, int line);
#define glTextureStorage1D(texture, levels, internalformat, width) glatter_glTextureStorage1D_debug((texture), (levels), (internalformat), (width), __FILE__, __LINE__)
void glatter_glTextureStorage1D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, const char* file, int line);
#define glTextureStorage2D(texture, levels, internalformat, width, height) glatter_glTextureStorage2D_debug((texture), (levels), (internalformat), (width), (height), __FILE__, __LINE__)
void glatter_glTextureStorage2D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, const char* file, int line);
#define glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) glatter_glTextureStorage2DMultisample_debug((texture), (samples), (internalformat), (width), (height), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage2DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureStorage3D(texture, levels, internalformat, width, height, depth) glatter_glTextureStorage3D_debug((texture), (levels), (internalformat), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glTextureStorage3D_debug(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#define glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) glatter_glTextureStorage3DMultisample_debug((texture), (samples), (internalformat), (width), (height), (depth), (fixedsamplelocations), __FILE__, __LINE__)
void glatter_glTextureStorage3DMultisample_debug(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, const char* file, int line);
#define glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels) glatter_glTextureSubImage1D_debug((texture), (level), (xoffset), (width), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage1D_debug(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) glatter_glTextureSubImage2D_debug((texture), (level), (xoffset), (yoffset), (width), (height), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage2D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) glatter_glTextureSubImage3D_debug((texture), (level), (xoffset), (yoffset), (zoffset), (width), (height), (depth), (format), (type), (pixels), __FILE__, __LINE__)
void glatter_glTextureSubImage3D_debug(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels, const char* file, int line);
#define glTransformFeedbackBufferBase(xfb, index, buffer) glatter_glTransformFeedbackBufferBase_debug((xfb), (index), (buffer), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferBase_debug(GLuint xfb, GLuint index, GLuint buffer, const char* file, int line);
#define glTransformFeedbackBufferRange(xfb, index, buffer, offset, size) glatter_glTransformFeedbackBufferRange_debug((xfb), (index), (buffer), (offset), (size), __FILE__, __LINE__)
void glatter_glTransformFeedbackBufferRange_debug(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, const char* file, int line);
#define glUnmapNamedBuffer(buffer) glatter_glUnmapNamedBuffer_debug((buffer), __FILE__, __LINE__)
GLboolean glatter_glUnmapNamedBuffer_debug(GLuint buffer, const char* file, int line);
#define glVertexArrayAttribBinding(vaobj, attribindex, bindingindex) glatter_glVertexArrayAttribBinding_debug((vaobj), (attribindex), (bindingindex), __FILE__, __LINE__)
void glatter_glVertexArrayAttribBinding_debug(GLuint vaobj, GLuint attribindex, GLuint bindingindex, const char* file, int line);
#define glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) glatter_glVertexArrayAttribFormat_debug((vaobj), (attribindex), (size), (type), (normalized), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribIFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribIFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) glatter_glVertexArrayAttribLFormat_debug((vaobj), (attribindex), (size), (type), (relativeoffset), __FILE__, __LINE__)
void glatter_glVertexArrayAttribLFormat_debug(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, const char* file, int line);
#define glVertexArrayBindingDivisor(vaobj, bindingindex, divisor) glatter_glVertexArrayBindingDivisor_debug((vaobj), (bindingindex), (divisor), __FILE__, __LINE__)
void glatter_glVertexArrayBindingDivisor_debug(GLuint vaobj, GLuint bindingindex, GLuint divisor, const char* file, int line);
#define glVertexArrayElementBuffer(vaobj, buffer) glatter_glVertexArrayElementBuffer_debug((vaobj), (buffer), __FILE__, __LINE__)
void glatter_glVertexArrayElementBuffer_debug(GLuint vaobj, GLuint buffer, const char* file, int line);
#define glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) glatter_glVertexArrayVertexBuffer_debug((vaobj), (bindingindex), (buffer), (offset), (stride), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffer_debug(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, const char* file, int line);
#define glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) glatter_glVertexArrayVertexBuffers_debug((vaobj), (first), (count), (buffers), (offsets), (strides), __FILE__, __LINE__)
void glatter_glVertexArrayVertexBuffers_debug(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides, const char* file, int line);
#endif // defined(__glext_h_)
#endif // defined(GL_VERSION_4_5)
#endif // GLATTER_GL

#endif // NDEBUG


#ifdef NDEBUG

#ifdef GLATTER_GLU
#if defined(__glu_h__)
#if defined(__GLU_H__)
#define gluBeginCurve(nobj) glatter_gluBeginCurve_ptr((nobj))
GLATTER_UBLOCK(void, APIENTRY, gluBeginCurve, (GLUnurbs *nobj))
#define gluBeginPolygon(tess) glatter_gluBeginPolygon_ptr((tess))
GLATTER_UBLOCK(void, APIENTRY, gluBeginPolygon, (GLUtesselator *tess))
#define gluBeginSurface(nobj) glatter_gluBeginSurface_ptr((nobj))
GLATTER_UBLOCK(void, APIENTRY, gluBeginSurface, (GLUnurbs *nobj))
#define gluBeginTrim(nobj) glatter_gluBeginTrim_ptr((nobj))
GLATTER_UBLOCK(void, APIENTRY, gluBeginTrim, (GLUnurbs *nobj))
#define gluBuild1DMipmaps(target, components, width, format, type, data) glatter_gluBuild1DMipmaps_ptr((target), (components), (width), (format), (type), (data))
GLATTER_UBLOCK(int, APIENTRY, gluBuild1DMipmaps, (GLenum target, GLint components, GLint width, GLenum format, GLenum type, const void *data))
#define gluBuild2DMipmaps(target, components, width, height, format, type, data) glatter_gluBuild2DMipmaps_ptr((target), (components), (width), (height), (format), (type), (data))
GLATTER_UBLOCK(int, APIENTRY, gluBuild2DMipmaps, (GLenum target, GLint components, GLint width, GLint height, GLenum format, GLenum type, const void *data))
#define gluCylinder(qobj, baseRadius, topRadius, height, slices, stacks) glatter_gluCylinder_ptr((qobj), (baseRadius), (topRadius), (height), (slices), (stacks))
GLATTER_UBLOCK(void, APIENTRY, gluCylinder, (GLUquadric *qobj, GLdouble baseRadius, GLdouble topRadius, GLdouble height, GLint slices, GLint stacks))
#define gluDeleteNurbsRenderer(nobj) glatter_gluDeleteNurbsRenderer_ptr((nobj))
GLATTER_UBLOCK(void, APIENTRY, gluDeleteNurbsRenderer, (GLUnurbs *nobj))
#define gluDeleteQuadric(state) glatter_gluDeleteQuadric_ptr((state))
GLATTER_UBLOCK(void, APIENTRY, gluDeleteQuadric, (GLUquadric *state))
#define gluDeleteTess(tess) glatter_gluDeleteTess_ptr((tess))
GLATTER_UBLOCK(void, APIENTRY, gluDeleteTess, (GLUtesselator *tess))
#define gluDisk(qobj, innerRadius, outerRadius, slices, loops) glatter_gluDisk_ptr((qobj), (innerRadius), (outerRadius), (slices), (loops))
GLATTER_UBLOCK(void, APIENTRY, gluDisk, (GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops))
#define gluEndCurve(nobj) glatter_gluEndCurve_ptr((nobj))
GLATTER_UBLOCK(void, APIENTRY, gluEndCurve, (GLUnurbs *nobj))
#define gluEndPolygon(tess) glatter_gluEndPolygon_ptr((tess))
GLATTER_UBLOCK(void, APIENTRY, gluEndPolygon, (GLUtesselator *tess))
#define gluEndSurface(nobj) glatter_gluEndSurface_ptr((nobj))
GLATTER_UBLOCK(void, APIENTRY, gluEndSurface, (GLUnurbs *nobj))
#define gluEndTrim(nobj) glatter_gluEndTrim_ptr((nobj))
GLATTER_UBLOCK(void, APIENTRY, gluEndTrim, (GLUnurbs *nobj))
#define gluErrorString(errCode) glatter_gluErrorString_ptr((errCode))
GLATTER_UBLOCK(const GLubyte*, APIENTRY, gluErrorString, (GLenum errCode))
#define gluErrorUnicodeStringEXT(errCode) glatter_gluErrorUnicodeStringEXT_ptr((errCode))
GLATTER_UBLOCK(const wchar_t*, APIENTRY, gluErrorUnicodeStringEXT, (GLenum errCode))
#define gluGetString(name) glatter_gluGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte*, APIENTRY, gluGetString, (GLenum name))
#define gluGetTessProperty(tess, which, value) glatter_gluGetTessProperty_ptr((tess), (which), (value))
GLATTER_UBLOCK(void, APIENTRY, gluGetTessProperty, (GLUtesselator *tess, GLenum which, GLdouble *value))
#define gluLookAt(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz) glatter_gluLookAt_ptr((eyex), (eyey), (eyez), (centerx), (centery), (centerz), (upx), (upy), (upz))
GLATTER_UBLOCK(void, APIENTRY, gluLookAt, (GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz))
#define gluNewNurbsRenderer() glatter_gluNewNurbsRenderer_ptr()
GLATTER_UBLOCK(GLUnurbs*, APIENTRY, gluNewNurbsRenderer, (void))
#define gluNewQuadric() glatter_gluNewQuadric_ptr()
GLATTER_UBLOCK(GLUquadric*, APIENTRY, gluNewQuadric, (void))
#define gluNewTess() glatter_gluNewTess_ptr()
GLATTER_UBLOCK(GLUtesselator*, APIENTRY, gluNewTess, (void))
#define gluNextContour(tess, type) glatter_gluNextContour_ptr((tess), (type))
GLATTER_UBLOCK(void, APIENTRY, gluNextContour, (GLUtesselator *tess, GLenum type))
#define gluNurbsCurve(nobj, nknots, knot, stride, ctlarray, order, type) glatter_gluNurbsCurve_ptr((nobj), (nknots), (knot), (stride), (ctlarray), (order), (type))
GLATTER_UBLOCK(void, APIENTRY, gluNurbsCurve, (GLUnurbs *nobj, GLint nknots, GLfloat *knot, GLint stride, GLfloat *ctlarray, GLint order, GLenum type))
#define gluOrtho2D(left, right, bottom, top) glatter_gluOrtho2D_ptr((left), (right), (bottom), (top))
GLATTER_UBLOCK(void, APIENTRY, gluOrtho2D, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top))
#define gluPartialDisk(qobj, innerRadius, outerRadius, slices, loops, startAngle, sweepAngle) glatter_gluPartialDisk_ptr((qobj), (innerRadius), (outerRadius), (slices), (loops), (startAngle), (sweepAngle))
GLATTER_UBLOCK(void, APIENTRY, gluPartialDisk, (GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops, GLdouble startAngle, GLdouble sweepAngle))
#define gluPerspective(fovy, aspect, zNear, zFar) glatter_gluPerspective_ptr((fovy), (aspect), (zNear), (zFar))
GLATTER_UBLOCK(void, APIENTRY, gluPerspective, (GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar))
#define gluPickMatrix(x, y, width, height, viewport) glatter_gluPickMatrix_ptr((x), (y), (width), (height), (viewport))
GLATTER_UBLOCK(void, APIENTRY, gluPickMatrix, (GLdouble x, GLdouble y, GLdouble width, GLdouble height, GLint viewport[4]))
#define gluProject(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz) glatter_gluProject_ptr((objx), (objy), (objz), (modelMatrix), (projMatrix), (viewport), (winx), (winy), (winz))
GLATTER_UBLOCK(int, APIENTRY, gluProject, (GLdouble objx, GLdouble objy, GLdouble objz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *winx, GLdouble *winy, GLdouble *winz))
#define gluPwlCurve(nobj, count, array, stride, type) glatter_gluPwlCurve_ptr((nobj), (count), (array), (stride), (type))
GLATTER_UBLOCK(void, APIENTRY, gluPwlCurve, (GLUnurbs *nobj, GLint count, GLfloat *array, GLint stride, GLenum type))
#define gluQuadricCallback(qobj, which, fn) glatter_gluQuadricCallback_ptr((qobj), (which), (fn))
GLATTER_UBLOCK(void, APIENTRY, gluQuadricCallback, (GLUquadric *qobj, GLenum which, void (CALLBACK* fn)()))
#define gluQuadricDrawStyle(quadObject, drawStyle) glatter_gluQuadricDrawStyle_ptr((quadObject), (drawStyle))
GLATTER_UBLOCK(void, APIENTRY, gluQuadricDrawStyle, (GLUquadric *quadObject, GLenum drawStyle))
#define gluQuadricNormals(quadObject, normals) glatter_gluQuadricNormals_ptr((quadObject), (normals))
GLATTER_UBLOCK(void, APIENTRY, gluQuadricNormals, (GLUquadric *quadObject, GLenum normals))
#define gluQuadricOrientation(quadObject, orientation) glatter_gluQuadricOrientation_ptr((quadObject), (orientation))
GLATTER_UBLOCK(void, APIENTRY, gluQuadricOrientation, (GLUquadric *quadObject, GLenum orientation))
#define gluQuadricTexture(quadObject, textureCoords) glatter_gluQuadricTexture_ptr((quadObject), (textureCoords))
GLATTER_UBLOCK(void, APIENTRY, gluQuadricTexture, (GLUquadric *quadObject, GLboolean textureCoords))
#define gluScaleImage(format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout) glatter_gluScaleImage_ptr((format), (widthin), (heightin), (typein), (datain), (widthout), (heightout), (typeout), (dataout))
GLATTER_UBLOCK(int, APIENTRY, gluScaleImage, (GLenum format, GLint widthin, GLint heightin, GLenum typein, const void *datain, GLint widthout, GLint heightout, GLenum typeout, void *dataout))
#define gluSphere(qobj, radius, slices, stacks) glatter_gluSphere_ptr((qobj), (radius), (slices), (stacks))
GLATTER_UBLOCK(void, APIENTRY, gluSphere, (GLUquadric *qobj, GLdouble radius, GLint slices, GLint stacks))
#define gluTessBeginContour(tess) glatter_gluTessBeginContour_ptr((tess))
GLATTER_UBLOCK(void, APIENTRY, gluTessBeginContour, (GLUtesselator *tess))
#define gluTessBeginPolygon(tess, polygon_data) glatter_gluTessBeginPolygon_ptr((tess), (polygon_data))
GLATTER_UBLOCK(void, APIENTRY, gluTessBeginPolygon, (GLUtesselator *tess, void *polygon_data))
#define gluTessCallback(tess, which, fn) glatter_gluTessCallback_ptr((tess), (which), (fn))
GLATTER_UBLOCK(void, APIENTRY, gluTessCallback, (GLUtesselator *tess, GLenum which, void (CALLBACK *fn)()))
#define gluTessEndContour(tess) glatter_gluTessEndContour_ptr((tess))
GLATTER_UBLOCK(void, APIENTRY, gluTessEndContour, (GLUtesselator *tess))
#define gluTessEndPolygon(tess) glatter_gluTessEndPolygon_ptr((tess))
GLATTER_UBLOCK(void, APIENTRY, gluTessEndPolygon, (GLUtesselator *tess))
#define gluTessNormal(tess, x, y, z) glatter_gluTessNormal_ptr((tess), (x), (y), (z))
GLATTER_UBLOCK(void, APIENTRY, gluTessNormal, (GLUtesselator *tess, GLdouble x, GLdouble y, GLdouble z))
#define gluTessProperty(tess, which, value) glatter_gluTessProperty_ptr((tess), (which), (value))
GLATTER_UBLOCK(void, APIENTRY, gluTessProperty, (GLUtesselator *tess, GLenum which, GLdouble value))
#define gluTessVertex(tess, coords, data) glatter_gluTessVertex_ptr((tess), (coords), (data))
GLATTER_UBLOCK(void, APIENTRY, gluTessVertex, (GLUtesselator *tess, GLdouble coords[3], void *data))
#define gluUnProject(winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz) glatter_gluUnProject_ptr((winx), (winy), (winz), (modelMatrix), (projMatrix), (viewport), (objx), (objy), (objz))
GLATTER_UBLOCK(int, APIENTRY, gluUnProject, (GLdouble winx, GLdouble winy, GLdouble winz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *objx, GLdouble *objy, GLdouble *objz))
#endif // defined(__GLU_H__)
#if !defined(__GLU_H__)
#define gluBeginCurve(nurb) glatter_gluBeginCurve_ptr((nurb))
GLATTER_UBLOCK(void, GLAPIENTRY, gluBeginCurve, (GLUnurbs* nurb))
#define gluBeginPolygon(tess) glatter_gluBeginPolygon_ptr((tess))
GLATTER_UBLOCK(void, GLAPIENTRY, gluBeginPolygon, (GLUtesselator* tess))
#define gluBeginSurface(nurb) glatter_gluBeginSurface_ptr((nurb))
GLATTER_UBLOCK(void, GLAPIENTRY, gluBeginSurface, (GLUnurbs* nurb))
#define gluBeginTrim(nurb) glatter_gluBeginTrim_ptr((nurb))
GLATTER_UBLOCK(void, GLAPIENTRY, gluBeginTrim, (GLUnurbs* nurb))
#endif // !defined(__GLU_H__)
#define gluBuild1DMipmapLevels(target, internalFormat, width, format, type, level, base, max, data) glatter_gluBuild1DMipmapLevels_ptr((target), (internalFormat), (width), (format), (type), (level), (base), (max), (data))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluBuild1DMipmapLevels, (GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data))
#if !defined(__GLU_H__)
#define gluBuild1DMipmaps(target, internalFormat, width, format, type, data) glatter_gluBuild1DMipmaps_ptr((target), (internalFormat), (width), (format), (type), (data))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluBuild1DMipmaps, (GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, const void *data))
#endif // !defined(__GLU_H__)
#define gluBuild2DMipmapLevels(target, internalFormat, width, height, format, type, level, base, max, data) glatter_gluBuild2DMipmapLevels_ptr((target), (internalFormat), (width), (height), (format), (type), (level), (base), (max), (data))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluBuild2DMipmapLevels, (GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data))
#if !defined(__GLU_H__)
#define gluBuild2DMipmaps(target, internalFormat, width, height, format, type, data) glatter_gluBuild2DMipmaps_ptr((target), (internalFormat), (width), (height), (format), (type), (data))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluBuild2DMipmaps, (GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *data))
#endif // !defined(__GLU_H__)
#define gluBuild3DMipmapLevels(target, internalFormat, width, height, depth, format, type, level, base, max, data) glatter_gluBuild3DMipmapLevels_ptr((target), (internalFormat), (width), (height), (depth), (format), (type), (level), (base), (max), (data))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluBuild3DMipmapLevels, (GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data))
#define gluBuild3DMipmaps(target, internalFormat, width, height, depth, format, type, data) glatter_gluBuild3DMipmaps_ptr((target), (internalFormat), (width), (height), (depth), (format), (type), (data))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluBuild3DMipmaps, (GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data))
#define gluCheckExtension(extName, extString) glatter_gluCheckExtension_ptr((extName), (extString))
GLATTER_UBLOCK(GLboolean, GLAPIENTRY, gluCheckExtension, (const GLubyte *extName, const GLubyte *extString))
#if !defined(__GLU_H__)
#define gluCylinder(quad, base, top, height, slices, stacks) glatter_gluCylinder_ptr((quad), (base), (top), (height), (slices), (stacks))
GLATTER_UBLOCK(void, GLAPIENTRY, gluCylinder, (GLUquadric* quad, GLdouble base, GLdouble top, GLdouble height, GLint slices, GLint stacks))
#define gluDeleteNurbsRenderer(nurb) glatter_gluDeleteNurbsRenderer_ptr((nurb))
GLATTER_UBLOCK(void, GLAPIENTRY, gluDeleteNurbsRenderer, (GLUnurbs* nurb))
#define gluDeleteQuadric(quad) glatter_gluDeleteQuadric_ptr((quad))
GLATTER_UBLOCK(void, GLAPIENTRY, gluDeleteQuadric, (GLUquadric* quad))
#define gluDeleteTess(tess) glatter_gluDeleteTess_ptr((tess))
GLATTER_UBLOCK(void, GLAPIENTRY, gluDeleteTess, (GLUtesselator* tess))
#define gluDisk(quad, inner, outer, slices, loops) glatter_gluDisk_ptr((quad), (inner), (outer), (slices), (loops))
GLATTER_UBLOCK(void, GLAPIENTRY, gluDisk, (GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops))
#define gluEndCurve(nurb) glatter_gluEndCurve_ptr((nurb))
GLATTER_UBLOCK(void, GLAPIENTRY, gluEndCurve, (GLUnurbs* nurb))
#define gluEndPolygon(tess) glatter_gluEndPolygon_ptr((tess))
GLATTER_UBLOCK(void, GLAPIENTRY, gluEndPolygon, (GLUtesselator* tess))
#define gluEndSurface(nurb) glatter_gluEndSurface_ptr((nurb))
GLATTER_UBLOCK(void, GLAPIENTRY, gluEndSurface, (GLUnurbs* nurb))
#define gluEndTrim(nurb) glatter_gluEndTrim_ptr((nurb))
GLATTER_UBLOCK(void, GLAPIENTRY, gluEndTrim, (GLUnurbs* nurb))
#define gluErrorString(error) glatter_gluErrorString_ptr((error))
GLATTER_UBLOCK(const GLubyte *, GLAPIENTRY, gluErrorString, (GLenum error))
#endif // !defined(__GLU_H__)
#define gluGetNurbsProperty(nurb, property, data) glatter_gluGetNurbsProperty_ptr((nurb), (property), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, gluGetNurbsProperty, (GLUnurbs* nurb, GLenum property, GLfloat* data))
#if !defined(__GLU_H__)
#define gluGetString(name) glatter_gluGetString_ptr((name))
GLATTER_UBLOCK(const GLubyte *, GLAPIENTRY, gluGetString, (GLenum name))
#define gluGetTessProperty(tess, which, data) glatter_gluGetTessProperty_ptr((tess), (which), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, gluGetTessProperty, (GLUtesselator* tess, GLenum which, GLdouble* data))
#endif // !defined(__GLU_H__)
#define gluLoadSamplingMatrices(nurb, model, perspective, view) glatter_gluLoadSamplingMatrices_ptr((nurb), (model), (perspective), (view))
GLATTER_UBLOCK(void, GLAPIENTRY, gluLoadSamplingMatrices, (GLUnurbs* nurb, const GLfloat *model, const GLfloat *perspective, const GLint *view))
#if !defined(__GLU_H__)
#define gluLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) glatter_gluLookAt_ptr((eyeX), (eyeY), (eyeZ), (centerX), (centerY), (centerZ), (upX), (upY), (upZ))
GLATTER_UBLOCK(void, GLAPIENTRY, gluLookAt, (GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ))
#define gluNewNurbsRenderer() glatter_gluNewNurbsRenderer_ptr()
GLATTER_UBLOCK(GLUnurbs*, GLAPIENTRY, gluNewNurbsRenderer, (void))
#define gluNewQuadric() glatter_gluNewQuadric_ptr()
GLATTER_UBLOCK(GLUquadric*, GLAPIENTRY, gluNewQuadric, (void))
#define gluNewTess() glatter_gluNewTess_ptr()
GLATTER_UBLOCK(GLUtesselator*, GLAPIENTRY, gluNewTess, (void))
#define gluNextContour(tess, type) glatter_gluNextContour_ptr((tess), (type))
GLATTER_UBLOCK(void, GLAPIENTRY, gluNextContour, (GLUtesselator* tess, GLenum type))
#endif // !defined(__GLU_H__)
#define gluNurbsCallback(nurb, which, CallBackFunc) glatter_gluNurbsCallback_ptr((nurb), (which), (CallBackFunc))
GLATTER_UBLOCK(void, GLAPIENTRY, gluNurbsCallback, (GLUnurbs* nurb, GLenum which, _GLUfuncptr CallBackFunc))
#define gluNurbsCallbackData(nurb, userData) glatter_gluNurbsCallbackData_ptr((nurb), (userData))
GLATTER_UBLOCK(void, GLAPIENTRY, gluNurbsCallbackData, (GLUnurbs* nurb, GLvoid* userData))
#define gluNurbsCallbackDataEXT(nurb, userData) glatter_gluNurbsCallbackDataEXT_ptr((nurb), (userData))
GLATTER_UBLOCK(void, GLAPIENTRY, gluNurbsCallbackDataEXT, (GLUnurbs* nurb, GLvoid* userData))
#if !defined(__GLU_H__)
#define gluNurbsCurve(nurb, knotCount, knots, stride, control, order, type) glatter_gluNurbsCurve_ptr((nurb), (knotCount), (knots), (stride), (control), (order), (type))
GLATTER_UBLOCK(void, GLAPIENTRY, gluNurbsCurve, (GLUnurbs* nurb, GLint knotCount, GLfloat *knots, GLint stride, GLfloat *control, GLint order, GLenum type))
#endif // !defined(__GLU_H__)
#define gluNurbsProperty(nurb, property, value) glatter_gluNurbsProperty_ptr((nurb), (property), (value))
GLATTER_UBLOCK(void, GLAPIENTRY, gluNurbsProperty, (GLUnurbs* nurb, GLenum property, GLfloat value))
#define gluNurbsSurface(nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type) glatter_gluNurbsSurface_ptr((nurb), (sKnotCount), (sKnots), (tKnotCount), (tKnots), (sStride), (tStride), (control), (sOrder), (tOrder), (type))
GLATTER_UBLOCK(void, GLAPIENTRY, gluNurbsSurface, (GLUnurbs* nurb, GLint sKnotCount, GLfloat* sKnots, GLint tKnotCount, GLfloat* tKnots, GLint sStride, GLint tStride, GLfloat* control, GLint sOrder, GLint tOrder, GLenum type))
#if !defined(__GLU_H__)
#define gluOrtho2D(left, right, bottom, top) glatter_gluOrtho2D_ptr((left), (right), (bottom), (top))
GLATTER_UBLOCK(void, GLAPIENTRY, gluOrtho2D, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top))
#define gluPartialDisk(quad, inner, outer, slices, loops, start, sweep) glatter_gluPartialDisk_ptr((quad), (inner), (outer), (slices), (loops), (start), (sweep))
GLATTER_UBLOCK(void, GLAPIENTRY, gluPartialDisk, (GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep))
#define gluPerspective(fovy, aspect, zNear, zFar) glatter_gluPerspective_ptr((fovy), (aspect), (zNear), (zFar))
GLATTER_UBLOCK(void, GLAPIENTRY, gluPerspective, (GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar))
#define gluPickMatrix(x, y, delX, delY, viewport) glatter_gluPickMatrix_ptr((x), (y), (delX), (delY), (viewport))
GLATTER_UBLOCK(void, GLAPIENTRY, gluPickMatrix, (GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint *viewport))
#define gluProject(objX, objY, objZ, model, proj, view, winX, winY, winZ) glatter_gluProject_ptr((objX), (objY), (objZ), (model), (proj), (view), (winX), (winY), (winZ))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluProject, (GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble* winX, GLdouble* winY, GLdouble* winZ))
#define gluPwlCurve(nurb, count, data, stride, type) glatter_gluPwlCurve_ptr((nurb), (count), (data), (stride), (type))
GLATTER_UBLOCK(void, GLAPIENTRY, gluPwlCurve, (GLUnurbs* nurb, GLint count, GLfloat* data, GLint stride, GLenum type))
#define gluQuadricCallback(quad, which, CallBackFunc) glatter_gluQuadricCallback_ptr((quad), (which), (CallBackFunc))
GLATTER_UBLOCK(void, GLAPIENTRY, gluQuadricCallback, (GLUquadric* quad, GLenum which, _GLUfuncptr CallBackFunc))
#define gluQuadricDrawStyle(quad, draw) glatter_gluQuadricDrawStyle_ptr((quad), (draw))
GLATTER_UBLOCK(void, GLAPIENTRY, gluQuadricDrawStyle, (GLUquadric* quad, GLenum draw))
#define gluQuadricNormals(quad, normal) glatter_gluQuadricNormals_ptr((quad), (normal))
GLATTER_UBLOCK(void, GLAPIENTRY, gluQuadricNormals, (GLUquadric* quad, GLenum normal))
#define gluQuadricOrientation(quad, orientation) glatter_gluQuadricOrientation_ptr((quad), (orientation))
GLATTER_UBLOCK(void, GLAPIENTRY, gluQuadricOrientation, (GLUquadric* quad, GLenum orientation))
#define gluQuadricTexture(quad, texture) glatter_gluQuadricTexture_ptr((quad), (texture))
GLATTER_UBLOCK(void, GLAPIENTRY, gluQuadricTexture, (GLUquadric* quad, GLboolean texture))
#define gluScaleImage(format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut) glatter_gluScaleImage_ptr((format), (wIn), (hIn), (typeIn), (dataIn), (wOut), (hOut), (typeOut), (dataOut))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluScaleImage, (GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void *dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, GLvoid* dataOut))
#define gluSphere(quad, radius, slices, stacks) glatter_gluSphere_ptr((quad), (radius), (slices), (stacks))
GLATTER_UBLOCK(void, GLAPIENTRY, gluSphere, (GLUquadric* quad, GLdouble radius, GLint slices, GLint stacks))
#define gluTessBeginContour(tess) glatter_gluTessBeginContour_ptr((tess))
GLATTER_UBLOCK(void, GLAPIENTRY, gluTessBeginContour, (GLUtesselator* tess))
#define gluTessBeginPolygon(tess, data) glatter_gluTessBeginPolygon_ptr((tess), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, gluTessBeginPolygon, (GLUtesselator* tess, GLvoid* data))
#define gluTessCallback(tess, which, CallBackFunc) glatter_gluTessCallback_ptr((tess), (which), (CallBackFunc))
GLATTER_UBLOCK(void, GLAPIENTRY, gluTessCallback, (GLUtesselator* tess, GLenum which, _GLUfuncptr CallBackFunc))
#define gluTessEndContour(tess) glatter_gluTessEndContour_ptr((tess))
GLATTER_UBLOCK(void, GLAPIENTRY, gluTessEndContour, (GLUtesselator* tess))
#define gluTessEndPolygon(tess) glatter_gluTessEndPolygon_ptr((tess))
GLATTER_UBLOCK(void, GLAPIENTRY, gluTessEndPolygon, (GLUtesselator* tess))
#define gluTessNormal(tess, valueX, valueY, valueZ) glatter_gluTessNormal_ptr((tess), (valueX), (valueY), (valueZ))
GLATTER_UBLOCK(void, GLAPIENTRY, gluTessNormal, (GLUtesselator* tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ))
#define gluTessProperty(tess, which, data) glatter_gluTessProperty_ptr((tess), (which), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, gluTessProperty, (GLUtesselator* tess, GLenum which, GLdouble data))
#define gluTessVertex(tess, location, data) glatter_gluTessVertex_ptr((tess), (location), (data))
GLATTER_UBLOCK(void, GLAPIENTRY, gluTessVertex, (GLUtesselator* tess, GLdouble *location, GLvoid* data))
#define gluUnProject(winX, winY, winZ, model, proj, view, objX, objY, objZ) glatter_gluUnProject_ptr((winX), (winY), (winZ), (model), (proj), (view), (objX), (objY), (objZ))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluUnProject, (GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble* objX, GLdouble* objY, GLdouble* objZ))
#endif // !defined(__GLU_H__)
#define gluUnProject4(winX, winY, winZ, clipW, model, proj, view, nearVal, farVal, objX, objY, objZ, objW) glatter_gluUnProject4_ptr((winX), (winY), (winZ), (clipW), (model), (proj), (view), (nearVal), (farVal), (objX), (objY), (objZ), (objW))
GLATTER_UBLOCK(GLint, GLAPIENTRY, gluUnProject4, (GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble nearVal, GLdouble farVal, GLdouble* objX, GLdouble* objY, GLdouble* objZ, GLdouble* objW))
#endif // defined(__glu_h__)
#endif // GLATTER_GLU

#else // NDEBUG

#ifdef GLATTER_GLU
#if defined(__glu_h__)
#if defined(__GLU_H__)
#define gluBeginCurve(nobj) glatter_gluBeginCurve_debug((nobj), __FILE__, __LINE__)
void glatter_gluBeginCurve_debug(GLUnurbs *nobj, const char* file, int line);
#define gluBeginPolygon(tess) glatter_gluBeginPolygon_debug((tess), __FILE__, __LINE__)
void glatter_gluBeginPolygon_debug(GLUtesselator *tess, const char* file, int line);
#define gluBeginSurface(nobj) glatter_gluBeginSurface_debug((nobj), __FILE__, __LINE__)
void glatter_gluBeginSurface_debug(GLUnurbs *nobj, const char* file, int line);
#define gluBeginTrim(nobj) glatter_gluBeginTrim_debug((nobj), __FILE__, __LINE__)
void glatter_gluBeginTrim_debug(GLUnurbs *nobj, const char* file, int line);
#define gluBuild1DMipmaps(target, components, width, format, type, data) glatter_gluBuild1DMipmaps_debug((target), (components), (width), (format), (type), (data), __FILE__, __LINE__)
int glatter_gluBuild1DMipmaps_debug(GLenum target, GLint components, GLint width, GLenum format, GLenum type, const void *data, const char* file, int line);
#define gluBuild2DMipmaps(target, components, width, height, format, type, data) glatter_gluBuild2DMipmaps_debug((target), (components), (width), (height), (format), (type), (data), __FILE__, __LINE__)
int glatter_gluBuild2DMipmaps_debug(GLenum target, GLint components, GLint width, GLint height, GLenum format, GLenum type, const void *data, const char* file, int line);
#define gluCylinder(qobj, baseRadius, topRadius, height, slices, stacks) glatter_gluCylinder_debug((qobj), (baseRadius), (topRadius), (height), (slices), (stacks), __FILE__, __LINE__)
void glatter_gluCylinder_debug(GLUquadric *qobj, GLdouble baseRadius, GLdouble topRadius, GLdouble height, GLint slices, GLint stacks, const char* file, int line);
#define gluDeleteNurbsRenderer(nobj) glatter_gluDeleteNurbsRenderer_debug((nobj), __FILE__, __LINE__)
void glatter_gluDeleteNurbsRenderer_debug(GLUnurbs *nobj, const char* file, int line);
#define gluDeleteQuadric(state) glatter_gluDeleteQuadric_debug((state), __FILE__, __LINE__)
void glatter_gluDeleteQuadric_debug(GLUquadric *state, const char* file, int line);
#define gluDeleteTess(tess) glatter_gluDeleteTess_debug((tess), __FILE__, __LINE__)
void glatter_gluDeleteTess_debug(GLUtesselator *tess, const char* file, int line);
#define gluDisk(qobj, innerRadius, outerRadius, slices, loops) glatter_gluDisk_debug((qobj), (innerRadius), (outerRadius), (slices), (loops), __FILE__, __LINE__)
void glatter_gluDisk_debug(GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops, const char* file, int line);
#define gluEndCurve(nobj) glatter_gluEndCurve_debug((nobj), __FILE__, __LINE__)
void glatter_gluEndCurve_debug(GLUnurbs *nobj, const char* file, int line);
#define gluEndPolygon(tess) glatter_gluEndPolygon_debug((tess), __FILE__, __LINE__)
void glatter_gluEndPolygon_debug(GLUtesselator *tess, const char* file, int line);
#define gluEndSurface(nobj) glatter_gluEndSurface_debug((nobj), __FILE__, __LINE__)
void glatter_gluEndSurface_debug(GLUnurbs *nobj, const char* file, int line);
#define gluEndTrim(nobj) glatter_gluEndTrim_debug((nobj), __FILE__, __LINE__)
void glatter_gluEndTrim_debug(GLUnurbs *nobj, const char* file, int line);
#define gluErrorString(errCode) glatter_gluErrorString_debug((errCode), __FILE__, __LINE__)
const GLubyte* glatter_gluErrorString_debug(GLenum errCode, const char* file, int line);
#define gluErrorUnicodeStringEXT(errCode) glatter_gluErrorUnicodeStringEXT_debug((errCode), __FILE__, __LINE__)
const wchar_t* glatter_gluErrorUnicodeStringEXT_debug(GLenum errCode, const char* file, int line);
#define gluGetString(name) glatter_gluGetString_debug((name), __FILE__, __LINE__)
const GLubyte* glatter_gluGetString_debug(GLenum name, const char* file, int line);
#define gluGetTessProperty(tess, which, value) glatter_gluGetTessProperty_debug((tess), (which), (value), __FILE__, __LINE__)
void glatter_gluGetTessProperty_debug(GLUtesselator *tess, GLenum which, GLdouble *value, const char* file, int line);
#define gluLookAt(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz) glatter_gluLookAt_debug((eyex), (eyey), (eyez), (centerx), (centery), (centerz), (upx), (upy), (upz), __FILE__, __LINE__)
void glatter_gluLookAt_debug(GLdouble eyex, GLdouble eyey, GLdouble eyez, GLdouble centerx, GLdouble centery, GLdouble centerz, GLdouble upx, GLdouble upy, GLdouble upz, const char* file, int line);
#define gluNewNurbsRenderer() glatter_gluNewNurbsRenderer_debug(__FILE__, __LINE__)
GLUnurbs* glatter_gluNewNurbsRenderer_debug(const char* file, int line);
#define gluNewQuadric() glatter_gluNewQuadric_debug(__FILE__, __LINE__)
GLUquadric* glatter_gluNewQuadric_debug(const char* file, int line);
#define gluNewTess() glatter_gluNewTess_debug(__FILE__, __LINE__)
GLUtesselator* glatter_gluNewTess_debug(const char* file, int line);
#define gluNextContour(tess, type) glatter_gluNextContour_debug((tess), (type), __FILE__, __LINE__)
void glatter_gluNextContour_debug(GLUtesselator *tess, GLenum type, const char* file, int line);
#define gluNurbsCurve(nobj, nknots, knot, stride, ctlarray, order, type) glatter_gluNurbsCurve_debug((nobj), (nknots), (knot), (stride), (ctlarray), (order), (type), __FILE__, __LINE__)
void glatter_gluNurbsCurve_debug(GLUnurbs *nobj, GLint nknots, GLfloat *knot, GLint stride, GLfloat *ctlarray, GLint order, GLenum type, const char* file, int line);
#define gluOrtho2D(left, right, bottom, top) glatter_gluOrtho2D_debug((left), (right), (bottom), (top), __FILE__, __LINE__)
void glatter_gluOrtho2D_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, const char* file, int line);
#define gluPartialDisk(qobj, innerRadius, outerRadius, slices, loops, startAngle, sweepAngle) glatter_gluPartialDisk_debug((qobj), (innerRadius), (outerRadius), (slices), (loops), (startAngle), (sweepAngle), __FILE__, __LINE__)
void glatter_gluPartialDisk_debug(GLUquadric *qobj, GLdouble innerRadius, GLdouble outerRadius, GLint slices, GLint loops, GLdouble startAngle, GLdouble sweepAngle, const char* file, int line);
#define gluPerspective(fovy, aspect, zNear, zFar) glatter_gluPerspective_debug((fovy), (aspect), (zNear), (zFar), __FILE__, __LINE__)
void glatter_gluPerspective_debug(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define gluPickMatrix(x, y, width, height, viewport) glatter_gluPickMatrix_debug((x), (y), (width), (height), (viewport), __FILE__, __LINE__)
void glatter_gluPickMatrix_debug(GLdouble x, GLdouble y, GLdouble width, GLdouble height, GLint viewport[4], const char* file, int line);
#define gluProject(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz) glatter_gluProject_debug((objx), (objy), (objz), (modelMatrix), (projMatrix), (viewport), (winx), (winy), (winz), __FILE__, __LINE__)
int glatter_gluProject_debug(GLdouble objx, GLdouble objy, GLdouble objz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *winx, GLdouble *winy, GLdouble *winz, const char* file, int line);
#define gluPwlCurve(nobj, count, array, stride, type) glatter_gluPwlCurve_debug((nobj), (count), (array), (stride), (type), __FILE__, __LINE__)
void glatter_gluPwlCurve_debug(GLUnurbs *nobj, GLint count, GLfloat *array, GLint stride, GLenum type, const char* file, int line);
#define gluQuadricCallback(qobj, which, fn) glatter_gluQuadricCallback_debug((qobj), (which), (fn), __FILE__, __LINE__)
void glatter_gluQuadricCallback_debug(GLUquadric *qobj, GLenum which, void (CALLBACK* fn)(), const char* file, int line);
#define gluQuadricDrawStyle(quadObject, drawStyle) glatter_gluQuadricDrawStyle_debug((quadObject), (drawStyle), __FILE__, __LINE__)
void glatter_gluQuadricDrawStyle_debug(GLUquadric *quadObject, GLenum drawStyle, const char* file, int line);
#define gluQuadricNormals(quadObject, normals) glatter_gluQuadricNormals_debug((quadObject), (normals), __FILE__, __LINE__)
void glatter_gluQuadricNormals_debug(GLUquadric *quadObject, GLenum normals, const char* file, int line);
#define gluQuadricOrientation(quadObject, orientation) glatter_gluQuadricOrientation_debug((quadObject), (orientation), __FILE__, __LINE__)
void glatter_gluQuadricOrientation_debug(GLUquadric *quadObject, GLenum orientation, const char* file, int line);
#define gluQuadricTexture(quadObject, textureCoords) glatter_gluQuadricTexture_debug((quadObject), (textureCoords), __FILE__, __LINE__)
void glatter_gluQuadricTexture_debug(GLUquadric *quadObject, GLboolean textureCoords, const char* file, int line);
#define gluScaleImage(format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout) glatter_gluScaleImage_debug((format), (widthin), (heightin), (typein), (datain), (widthout), (heightout), (typeout), (dataout), __FILE__, __LINE__)
int glatter_gluScaleImage_debug(GLenum format, GLint widthin, GLint heightin, GLenum typein, const void *datain, GLint widthout, GLint heightout, GLenum typeout, void *dataout, const char* file, int line);
#define gluSphere(qobj, radius, slices, stacks) glatter_gluSphere_debug((qobj), (radius), (slices), (stacks), __FILE__, __LINE__)
void glatter_gluSphere_debug(GLUquadric *qobj, GLdouble radius, GLint slices, GLint stacks, const char* file, int line);
#define gluTessBeginContour(tess) glatter_gluTessBeginContour_debug((tess), __FILE__, __LINE__)
void glatter_gluTessBeginContour_debug(GLUtesselator *tess, const char* file, int line);
#define gluTessBeginPolygon(tess, polygon_data) glatter_gluTessBeginPolygon_debug((tess), (polygon_data), __FILE__, __LINE__)
void glatter_gluTessBeginPolygon_debug(GLUtesselator *tess, void *polygon_data, const char* file, int line);
#define gluTessCallback(tess, which, fn) glatter_gluTessCallback_debug((tess), (which), (fn), __FILE__, __LINE__)
void glatter_gluTessCallback_debug(GLUtesselator *tess, GLenum which, void (CALLBACK *fn)(), const char* file, int line);
#define gluTessEndContour(tess) glatter_gluTessEndContour_debug((tess), __FILE__, __LINE__)
void glatter_gluTessEndContour_debug(GLUtesselator *tess, const char* file, int line);
#define gluTessEndPolygon(tess) glatter_gluTessEndPolygon_debug((tess), __FILE__, __LINE__)
void glatter_gluTessEndPolygon_debug(GLUtesselator *tess, const char* file, int line);
#define gluTessNormal(tess, x, y, z) glatter_gluTessNormal_debug((tess), (x), (y), (z), __FILE__, __LINE__)
void glatter_gluTessNormal_debug(GLUtesselator *tess, GLdouble x, GLdouble y, GLdouble z, const char* file, int line);
#define gluTessProperty(tess, which, value) glatter_gluTessProperty_debug((tess), (which), (value), __FILE__, __LINE__)
void glatter_gluTessProperty_debug(GLUtesselator *tess, GLenum which, GLdouble value, const char* file, int line);
#define gluTessVertex(tess, coords, data) glatter_gluTessVertex_debug((tess), (coords), (data), __FILE__, __LINE__)
void glatter_gluTessVertex_debug(GLUtesselator *tess, GLdouble coords[3], void *data, const char* file, int line);
#define gluUnProject(winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz) glatter_gluUnProject_debug((winx), (winy), (winz), (modelMatrix), (projMatrix), (viewport), (objx), (objy), (objz), __FILE__, __LINE__)
int glatter_gluUnProject_debug(GLdouble winx, GLdouble winy, GLdouble winz, const GLdouble modelMatrix[16], const GLdouble projMatrix[16], const GLint viewport[4], GLdouble *objx, GLdouble *objy, GLdouble *objz, const char* file, int line);
#endif // defined(__GLU_H__)
#if !defined(__GLU_H__)
#define gluBeginCurve(nurb) glatter_gluBeginCurve_debug((nurb), __FILE__, __LINE__)
void glatter_gluBeginCurve_debug(GLUnurbs* nurb, const char* file, int line);
#define gluBeginPolygon(tess) glatter_gluBeginPolygon_debug((tess), __FILE__, __LINE__)
void glatter_gluBeginPolygon_debug(GLUtesselator* tess, const char* file, int line);
#define gluBeginSurface(nurb) glatter_gluBeginSurface_debug((nurb), __FILE__, __LINE__)
void glatter_gluBeginSurface_debug(GLUnurbs* nurb, const char* file, int line);
#define gluBeginTrim(nurb) glatter_gluBeginTrim_debug((nurb), __FILE__, __LINE__)
void glatter_gluBeginTrim_debug(GLUnurbs* nurb, const char* file, int line);
#endif // !defined(__GLU_H__)
#define gluBuild1DMipmapLevels(target, internalFormat, width, format, type, level, base, max, data) glatter_gluBuild1DMipmapLevels_debug((target), (internalFormat), (width), (format), (type), (level), (base), (max), (data), __FILE__, __LINE__)
GLint glatter_gluBuild1DMipmapLevels_debug(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data, const char* file, int line);
#if !defined(__GLU_H__)
#define gluBuild1DMipmaps(target, internalFormat, width, format, type, data) glatter_gluBuild1DMipmaps_debug((target), (internalFormat), (width), (format), (type), (data), __FILE__, __LINE__)
GLint glatter_gluBuild1DMipmaps_debug(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // !defined(__GLU_H__)
#define gluBuild2DMipmapLevels(target, internalFormat, width, height, format, type, level, base, max, data) glatter_gluBuild2DMipmapLevels_debug((target), (internalFormat), (width), (height), (format), (type), (level), (base), (max), (data), __FILE__, __LINE__)
GLint glatter_gluBuild2DMipmapLevels_debug(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data, const char* file, int line);
#if !defined(__GLU_H__)
#define gluBuild2DMipmaps(target, internalFormat, width, height, format, type, data) glatter_gluBuild2DMipmaps_debug((target), (internalFormat), (width), (height), (format), (type), (data), __FILE__, __LINE__)
GLint glatter_gluBuild2DMipmaps_debug(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *data, const char* file, int line);
#endif // !defined(__GLU_H__)
#define gluBuild3DMipmapLevels(target, internalFormat, width, height, depth, format, type, level, base, max, data) glatter_gluBuild3DMipmapLevels_debug((target), (internalFormat), (width), (height), (depth), (format), (type), (level), (base), (max), (data), __FILE__, __LINE__)
GLint glatter_gluBuild3DMipmapLevels_debug(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data, const char* file, int line);
#define gluBuild3DMipmaps(target, internalFormat, width, height, depth, format, type, data) glatter_gluBuild3DMipmaps_debug((target), (internalFormat), (width), (height), (depth), (format), (type), (data), __FILE__, __LINE__)
GLint glatter_gluBuild3DMipmaps_debug(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data, const char* file, int line);
#define gluCheckExtension(extName, extString) glatter_gluCheckExtension_debug((extName), (extString), __FILE__, __LINE__)
GLboolean glatter_gluCheckExtension_debug(const GLubyte *extName, const GLubyte *extString, const char* file, int line);
#if !defined(__GLU_H__)
#define gluCylinder(quad, base, top, height, slices, stacks) glatter_gluCylinder_debug((quad), (base), (top), (height), (slices), (stacks), __FILE__, __LINE__)
void glatter_gluCylinder_debug(GLUquadric* quad, GLdouble base, GLdouble top, GLdouble height, GLint slices, GLint stacks, const char* file, int line);
#define gluDeleteNurbsRenderer(nurb) glatter_gluDeleteNurbsRenderer_debug((nurb), __FILE__, __LINE__)
void glatter_gluDeleteNurbsRenderer_debug(GLUnurbs* nurb, const char* file, int line);
#define gluDeleteQuadric(quad) glatter_gluDeleteQuadric_debug((quad), __FILE__, __LINE__)
void glatter_gluDeleteQuadric_debug(GLUquadric* quad, const char* file, int line);
#define gluDeleteTess(tess) glatter_gluDeleteTess_debug((tess), __FILE__, __LINE__)
void glatter_gluDeleteTess_debug(GLUtesselator* tess, const char* file, int line);
#define gluDisk(quad, inner, outer, slices, loops) glatter_gluDisk_debug((quad), (inner), (outer), (slices), (loops), __FILE__, __LINE__)
void glatter_gluDisk_debug(GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, const char* file, int line);
#define gluEndCurve(nurb) glatter_gluEndCurve_debug((nurb), __FILE__, __LINE__)
void glatter_gluEndCurve_debug(GLUnurbs* nurb, const char* file, int line);
#define gluEndPolygon(tess) glatter_gluEndPolygon_debug((tess), __FILE__, __LINE__)
void glatter_gluEndPolygon_debug(GLUtesselator* tess, const char* file, int line);
#define gluEndSurface(nurb) glatter_gluEndSurface_debug((nurb), __FILE__, __LINE__)
void glatter_gluEndSurface_debug(GLUnurbs* nurb, const char* file, int line);
#define gluEndTrim(nurb) glatter_gluEndTrim_debug((nurb), __FILE__, __LINE__)
void glatter_gluEndTrim_debug(GLUnurbs* nurb, const char* file, int line);
#define gluErrorString(error) glatter_gluErrorString_debug((error), __FILE__, __LINE__)
const GLubyte * glatter_gluErrorString_debug(GLenum error, const char* file, int line);
#endif // !defined(__GLU_H__)
#define gluGetNurbsProperty(nurb, property, data) glatter_gluGetNurbsProperty_debug((nurb), (property), (data), __FILE__, __LINE__)
void glatter_gluGetNurbsProperty_debug(GLUnurbs* nurb, GLenum property, GLfloat* data, const char* file, int line);
#if !defined(__GLU_H__)
#define gluGetString(name) glatter_gluGetString_debug((name), __FILE__, __LINE__)
const GLubyte * glatter_gluGetString_debug(GLenum name, const char* file, int line);
#define gluGetTessProperty(tess, which, data) glatter_gluGetTessProperty_debug((tess), (which), (data), __FILE__, __LINE__)
void glatter_gluGetTessProperty_debug(GLUtesselator* tess, GLenum which, GLdouble* data, const char* file, int line);
#endif // !defined(__GLU_H__)
#define gluLoadSamplingMatrices(nurb, model, perspective, view) glatter_gluLoadSamplingMatrices_debug((nurb), (model), (perspective), (view), __FILE__, __LINE__)
void glatter_gluLoadSamplingMatrices_debug(GLUnurbs* nurb, const GLfloat *model, const GLfloat *perspective, const GLint *view, const char* file, int line);
#if !defined(__GLU_H__)
#define gluLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ) glatter_gluLookAt_debug((eyeX), (eyeY), (eyeZ), (centerX), (centerY), (centerZ), (upX), (upY), (upZ), __FILE__, __LINE__)
void glatter_gluLookAt_debug(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ, const char* file, int line);
#define gluNewNurbsRenderer() glatter_gluNewNurbsRenderer_debug(__FILE__, __LINE__)
GLUnurbs* glatter_gluNewNurbsRenderer_debug(const char* file, int line);
#define gluNewQuadric() glatter_gluNewQuadric_debug(__FILE__, __LINE__)
GLUquadric* glatter_gluNewQuadric_debug(const char* file, int line);
#define gluNewTess() glatter_gluNewTess_debug(__FILE__, __LINE__)
GLUtesselator* glatter_gluNewTess_debug(const char* file, int line);
#define gluNextContour(tess, type) glatter_gluNextContour_debug((tess), (type), __FILE__, __LINE__)
void glatter_gluNextContour_debug(GLUtesselator* tess, GLenum type, const char* file, int line);
#endif // !defined(__GLU_H__)
#define gluNurbsCallback(nurb, which, CallBackFunc) glatter_gluNurbsCallback_debug((nurb), (which), (CallBackFunc), __FILE__, __LINE__)
void glatter_gluNurbsCallback_debug(GLUnurbs* nurb, GLenum which, _GLUfuncptr CallBackFunc, const char* file, int line);
#define gluNurbsCallbackData(nurb, userData) glatter_gluNurbsCallbackData_debug((nurb), (userData), __FILE__, __LINE__)
void glatter_gluNurbsCallbackData_debug(GLUnurbs* nurb, GLvoid* userData, const char* file, int line);
#define gluNurbsCallbackDataEXT(nurb, userData) glatter_gluNurbsCallbackDataEXT_debug((nurb), (userData), __FILE__, __LINE__)
void glatter_gluNurbsCallbackDataEXT_debug(GLUnurbs* nurb, GLvoid* userData, const char* file, int line);
#if !defined(__GLU_H__)
#define gluNurbsCurve(nurb, knotCount, knots, stride, control, order, type) glatter_gluNurbsCurve_debug((nurb), (knotCount), (knots), (stride), (control), (order), (type), __FILE__, __LINE__)
void glatter_gluNurbsCurve_debug(GLUnurbs* nurb, GLint knotCount, GLfloat *knots, GLint stride, GLfloat *control, GLint order, GLenum type, const char* file, int line);
#endif // !defined(__GLU_H__)
#define gluNurbsProperty(nurb, property, value) glatter_gluNurbsProperty_debug((nurb), (property), (value), __FILE__, __LINE__)
void glatter_gluNurbsProperty_debug(GLUnurbs* nurb, GLenum property, GLfloat value, const char* file, int line);
#define gluNurbsSurface(nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type) glatter_gluNurbsSurface_debug((nurb), (sKnotCount), (sKnots), (tKnotCount), (tKnots), (sStride), (tStride), (control), (sOrder), (tOrder), (type), __FILE__, __LINE__)
void glatter_gluNurbsSurface_debug(GLUnurbs* nurb, GLint sKnotCount, GLfloat* sKnots, GLint tKnotCount, GLfloat* tKnots, GLint sStride, GLint tStride, GLfloat* control, GLint sOrder, GLint tOrder, GLenum type, const char* file, int line);
#if !defined(__GLU_H__)
#define gluOrtho2D(left, right, bottom, top) glatter_gluOrtho2D_debug((left), (right), (bottom), (top), __FILE__, __LINE__)
void glatter_gluOrtho2D_debug(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, const char* file, int line);
#define gluPartialDisk(quad, inner, outer, slices, loops, start, sweep) glatter_gluPartialDisk_debug((quad), (inner), (outer), (slices), (loops), (start), (sweep), __FILE__, __LINE__)
void glatter_gluPartialDisk_debug(GLUquadric* quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep, const char* file, int line);
#define gluPerspective(fovy, aspect, zNear, zFar) glatter_gluPerspective_debug((fovy), (aspect), (zNear), (zFar), __FILE__, __LINE__)
void glatter_gluPerspective_debug(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar, const char* file, int line);
#define gluPickMatrix(x, y, delX, delY, viewport) glatter_gluPickMatrix_debug((x), (y), (delX), (delY), (viewport), __FILE__, __LINE__)
void glatter_gluPickMatrix_debug(GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint *viewport, const char* file, int line);
#define gluProject(objX, objY, objZ, model, proj, view, winX, winY, winZ) glatter_gluProject_debug((objX), (objY), (objZ), (model), (proj), (view), (winX), (winY), (winZ), __FILE__, __LINE__)
GLint glatter_gluProject_debug(GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble* winX, GLdouble* winY, GLdouble* winZ, const char* file, int line);
#define gluPwlCurve(nurb, count, data, stride, type) glatter_gluPwlCurve_debug((nurb), (count), (data), (stride), (type), __FILE__, __LINE__)
void glatter_gluPwlCurve_debug(GLUnurbs* nurb, GLint count, GLfloat* data, GLint stride, GLenum type, const char* file, int line);
#define gluQuadricCallback(quad, which, CallBackFunc) glatter_gluQuadricCallback_debug((quad), (which), (CallBackFunc), __FILE__, __LINE__)
void glatter_gluQuadricCallback_debug(GLUquadric* quad, GLenum which, _GLUfuncptr CallBackFunc, const char* file, int line);
#define gluQuadricDrawStyle(quad, draw) glatter_gluQuadricDrawStyle_debug((quad), (draw), __FILE__, __LINE__)
void glatter_gluQuadricDrawStyle_debug(GLUquadric* quad, GLenum draw, const char* file, int line);
#define gluQuadricNormals(quad, normal) glatter_gluQuadricNormals_debug((quad), (normal), __FILE__, __LINE__)
void glatter_gluQuadricNormals_debug(GLUquadric* quad, GLenum normal, const char* file, int line);
#define gluQuadricOrientation(quad, orientation) glatter_gluQuadricOrientation_debug((quad), (orientation), __FILE__, __LINE__)
void glatter_gluQuadricOrientation_debug(GLUquadric* quad, GLenum orientation, const char* file, int line);
#define gluQuadricTexture(quad, texture) glatter_gluQuadricTexture_debug((quad), (texture), __FILE__, __LINE__)
void glatter_gluQuadricTexture_debug(GLUquadric* quad, GLboolean texture, const char* file, int line);
#define gluScaleImage(format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut) glatter_gluScaleImage_debug((format), (wIn), (hIn), (typeIn), (dataIn), (wOut), (hOut), (typeOut), (dataOut), __FILE__, __LINE__)
GLint glatter_gluScaleImage_debug(GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void *dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, GLvoid* dataOut, const char* file, int line);
#define gluSphere(quad, radius, slices, stacks) glatter_gluSphere_debug((quad), (radius), (slices), (stacks), __FILE__, __LINE__)
void glatter_gluSphere_debug(GLUquadric* quad, GLdouble radius, GLint slices, GLint stacks, const char* file, int line);
#define gluTessBeginContour(tess) glatter_gluTessBeginContour_debug((tess), __FILE__, __LINE__)
void glatter_gluTessBeginContour_debug(GLUtesselator* tess, const char* file, int line);
#define gluTessBeginPolygon(tess, data) glatter_gluTessBeginPolygon_debug((tess), (data), __FILE__, __LINE__)
void glatter_gluTessBeginPolygon_debug(GLUtesselator* tess, GLvoid* data, const char* file, int line);
#define gluTessCallback(tess, which, CallBackFunc) glatter_gluTessCallback_debug((tess), (which), (CallBackFunc), __FILE__, __LINE__)
void glatter_gluTessCallback_debug(GLUtesselator* tess, GLenum which, _GLUfuncptr CallBackFunc, const char* file, int line);
#define gluTessEndContour(tess) glatter_gluTessEndContour_debug((tess), __FILE__, __LINE__)
void glatter_gluTessEndContour_debug(GLUtesselator* tess, const char* file, int line);
#define gluTessEndPolygon(tess) glatter_gluTessEndPolygon_debug((tess), __FILE__, __LINE__)
void glatter_gluTessEndPolygon_debug(GLUtesselator* tess, const char* file, int line);
#define gluTessNormal(tess, valueX, valueY, valueZ) glatter_gluTessNormal_debug((tess), (valueX), (valueY), (valueZ), __FILE__, __LINE__)
void glatter_gluTessNormal_debug(GLUtesselator* tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ, const char* file, int line);
#define gluTessProperty(tess, which, data) glatter_gluTessProperty_debug((tess), (which), (data), __FILE__, __LINE__)
void glatter_gluTessProperty_debug(GLUtesselator* tess, GLenum which, GLdouble data, const char* file, int line);
#define gluTessVertex(tess, location, data) glatter_gluTessVertex_debug((tess), (location), (data), __FILE__, __LINE__)
void glatter_gluTessVertex_debug(GLUtesselator* tess, GLdouble *location, GLvoid* data, const char* file, int line);
#define gluUnProject(winX, winY, winZ, model, proj, view, objX, objY, objZ) glatter_gluUnProject_debug((winX), (winY), (winZ), (model), (proj), (view), (objX), (objY), (objZ), __FILE__, __LINE__)
GLint glatter_gluUnProject_debug(GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble* objX, GLdouble* objY, GLdouble* objZ, const char* file, int line);
#endif // !defined(__GLU_H__)
#define gluUnProject4(winX, winY, winZ, clipW, model, proj, view, nearVal, farVal, objX, objY, objZ, objW) glatter_gluUnProject4_debug((winX), (winY), (winZ), (clipW), (model), (proj), (view), (nearVal), (farVal), (objX), (objY), (objZ), (objW), __FILE__, __LINE__)
GLint glatter_gluUnProject4_debug(GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble nearVal, GLdouble farVal, GLdouble* objX, GLdouble* objY, GLdouble* objZ, GLdouble* objW, const char* file, int line);
#endif // defined(__glu_h__)
#endif // GLATTER_GLU

#endif // NDEBUG


#ifdef NDEBUG

#ifdef GLATTER_GLX
#if defined(GLX_H)
#if defined(GLX_ARB_get_proc_address)
#define glXGetProcAddressARB(a0) glatter_glXGetProcAddressARB_ptr((a0))
GLATTER_UBLOCK(__GLXextFuncPtr, , glXGetProcAddressARB, (const GLubyte *a0))
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_ARB_render_texture)
#define glXBindTexImageARB(dpy, pbuffer, buffer) glatter_glXBindTexImageARB_ptr((dpy), (pbuffer), (buffer))
GLATTER_UBLOCK(Bool, , glXBindTexImageARB, (Display *dpy, GLXPbuffer pbuffer, int buffer))
#define glXDrawableAttribARB(dpy, draw, attribList) glatter_glXDrawableAttribARB_ptr((dpy), (draw), (attribList))
GLATTER_UBLOCK(Bool, , glXDrawableAttribARB, (Display *dpy, GLXDrawable draw, const int *attribList))
#define glXReleaseTexImageARB(dpy, pbuffer, buffer) glatter_glXReleaseTexImageARB_ptr((dpy), (pbuffer), (buffer))
GLATTER_UBLOCK(Bool, , glXReleaseTexImageARB, (Display *dpy, GLXPbuffer pbuffer, int buffer))
#endif // defined(GLX_ARB_render_texture)
#if defined(GLX_MESA_swap_control)
#define glXGetSwapIntervalMESA() glatter_glXGetSwapIntervalMESA_ptr()
GLATTER_UBLOCK(int, , glXGetSwapIntervalMESA, (void))
#define glXSwapIntervalMESA(interval) glatter_glXSwapIntervalMESA_ptr((interval))
GLATTER_UBLOCK(int, , glXSwapIntervalMESA, (unsigned int interval))
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_MESA_swap_frame_usage)
#define glXBeginFrameTrackingMESA(dpy, drawable) glatter_glXBeginFrameTrackingMESA_ptr((dpy), (drawable))
GLATTER_UBLOCK(int, , glXBeginFrameTrackingMESA, (Display *dpy, GLXDrawable drawable))
#define glXEndFrameTrackingMESA(dpy, drawable) glatter_glXEndFrameTrackingMESA_ptr((dpy), (drawable))
GLATTER_UBLOCK(int, , glXEndFrameTrackingMESA, (Display *dpy, GLXDrawable drawable))
#define glXGetFrameUsageMESA(dpy, drawable, usage) glatter_glXGetFrameUsageMESA_ptr((dpy), (drawable), (usage))
GLATTER_UBLOCK(int, , glXGetFrameUsageMESA, (Display *dpy, GLXDrawable drawable, float *usage))
#define glXQueryFrameTrackingMESA(dpy, drawable, swapCount, missedFrames, lastMissedUsage) glatter_glXQueryFrameTrackingMESA_ptr((dpy), (drawable), (swapCount), (missedFrames), (lastMissedUsage))
GLATTER_UBLOCK(int, , glXQueryFrameTrackingMESA, (Display *dpy, GLXDrawable drawable, int64_t *swapCount, int64_t *missedFrames, float *lastMissedUsage))
#endif // defined(GLX_MESA_swap_frame_usage)
#if defined(GLX_NV_vertex_array_range)
#define glXFreeMemoryNV(pointer) glatter_glXFreeMemoryNV_ptr((pointer))
GLATTER_UBLOCK(void, , glXFreeMemoryNV, (GLvoid *pointer))
#endif // defined(GLX_NV_vertex_array_range)
#define glXChooseVisual(dpy, screen, attribList) glatter_glXChooseVisual_ptr((dpy), (screen), (attribList))
GLATTER_UBLOCK(XVisualInfo*, , glXChooseVisual, (Display *dpy, int screen, int *attribList))
#define glXCopyContext(dpy, src, dst, mask) glatter_glXCopyContext_ptr((dpy), (src), (dst), (mask))
GLATTER_UBLOCK(void, , glXCopyContext, (Display *dpy, GLXContext src, GLXContext dst, unsigned long mask))
#define glXCreateContext(dpy, vis, shareList, direct) glatter_glXCreateContext_ptr((dpy), (vis), (shareList), (direct))
GLATTER_UBLOCK(GLXContext, , glXCreateContext, (Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct))
#define glXCreateGLXPixmap(dpy, visual, pixmap) glatter_glXCreateGLXPixmap_ptr((dpy), (visual), (pixmap))
GLATTER_UBLOCK(GLXPixmap, , glXCreateGLXPixmap, (Display *dpy, XVisualInfo *visual, Pixmap pixmap))
#define glXCreateNewContext(dpy, config, renderType, shareList, direct) glatter_glXCreateNewContext_ptr((dpy), (config), (renderType), (shareList), (direct))
GLATTER_UBLOCK(GLXContext, , glXCreateNewContext, (Display *dpy, GLXFBConfig config, int renderType, GLXContext shareList, Bool direct))
#define glXCreatePbuffer(dpy, config, attribList) glatter_glXCreatePbuffer_ptr((dpy), (config), (attribList))
GLATTER_UBLOCK(GLXPbuffer, , glXCreatePbuffer, (Display *dpy, GLXFBConfig config, const int *attribList))
#define glXCreatePixmap(dpy, config, pixmap, attribList) glatter_glXCreatePixmap_ptr((dpy), (config), (pixmap), (attribList))
GLATTER_UBLOCK(GLXPixmap, , glXCreatePixmap, (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attribList))
#define glXCreateWindow(dpy, config, win, attribList) glatter_glXCreateWindow_ptr((dpy), (config), (win), (attribList))
GLATTER_UBLOCK(GLXWindow, , glXCreateWindow, (Display *dpy, GLXFBConfig config, Window win, const int *attribList))
#define glXDestroyContext(dpy, ctx) glatter_glXDestroyContext_ptr((dpy), (ctx))
GLATTER_UBLOCK(void, , glXDestroyContext, (Display *dpy, GLXContext ctx))
#define glXDestroyGLXPixmap(dpy, pixmap) glatter_glXDestroyGLXPixmap_ptr((dpy), (pixmap))
GLATTER_UBLOCK(void, , glXDestroyGLXPixmap, (Display *dpy, GLXPixmap pixmap))
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer_ptr((dpy), (pbuf))
GLATTER_UBLOCK(void, , glXDestroyPbuffer, (Display *dpy, GLXPbuffer pbuf))
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap_ptr((dpy), (pixmap))
GLATTER_UBLOCK(void, , glXDestroyPixmap, (Display *dpy, GLXPixmap pixmap))
#define glXDestroyWindow(dpy, window) glatter_glXDestroyWindow_ptr((dpy), (window))
GLATTER_UBLOCK(void, , glXDestroyWindow, (Display *dpy, GLXWindow window))
#define glXGetConfig(dpy, visual, attrib, value) glatter_glXGetConfig_ptr((dpy), (visual), (attrib), (value))
GLATTER_UBLOCK(int, , glXGetConfig, (Display *dpy, XVisualInfo *visual, int attrib, int *value))
#define glXGetCurrentContext() glatter_glXGetCurrentContext_ptr()
GLATTER_UBLOCK(GLXContext, , glXGetCurrentContext, (void))
#define glXGetCurrentDrawable() glatter_glXGetCurrentDrawable_ptr()
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentDrawable, (void))
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable_ptr()
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentReadDrawable, (void))
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib_ptr((dpy), (config), (attribute), (value))
GLATTER_UBLOCK(int, , glXGetFBConfigAttrib, (Display *dpy, GLXFBConfig config, int attribute, int *value))
#define glXGetSelectedEvent(dpy, drawable, mask) glatter_glXGetSelectedEvent_ptr((dpy), (drawable), (mask))
GLATTER_UBLOCK(void, , glXGetSelectedEvent, (Display *dpy, GLXDrawable drawable, unsigned long *mask))
#define glXIsDirect(dpy, ctx) glatter_glXIsDirect_ptr((dpy), (ctx))
GLATTER_UBLOCK(Bool, , glXIsDirect, (Display *dpy, GLXContext ctx))
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent_ptr((dpy), (draw), (read), (ctx))
GLATTER_UBLOCK(Bool, , glXMakeContextCurrent, (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#define glXMakeCurrent(dpy, drawable, ctx) glatter_glXMakeCurrent_ptr((dpy), (drawable), (ctx))
GLATTER_UBLOCK(Bool, , glXMakeCurrent, (Display *dpy, GLXDrawable drawable, GLXContext ctx))
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext_ptr((dpy), (ctx), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryContext, (Display *dpy, GLXContext ctx, int attribute, int *value))
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable_ptr((dpy), (draw), (attribute), (value))
GLATTER_UBLOCK(void, , glXQueryDrawable, (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value))
#define glXQueryExtension(dpy, errorb, event) glatter_glXQueryExtension_ptr((dpy), (errorb), (event))
GLATTER_UBLOCK(Bool, , glXQueryExtension, (Display *dpy, int *errorb, int *event))
#define glXQueryVersion(dpy, maj, min) glatter_glXQueryVersion_ptr((dpy), (maj), (min))
GLATTER_UBLOCK(Bool, , glXQueryVersion, (Display *dpy, int *maj, int *min))
#define glXSelectEvent(dpy, drawable, mask) glatter_glXSelectEvent_ptr((dpy), (drawable), (mask))
GLATTER_UBLOCK(void, , glXSelectEvent, (Display *dpy, GLXDrawable drawable, unsigned long mask))
#define glXSwapBuffers(dpy, drawable) glatter_glXSwapBuffers_ptr((dpy), (drawable))
GLATTER_UBLOCK(void, , glXSwapBuffers, (Display *dpy, GLXDrawable drawable))
#define glXUseXFont(font, first, count, list) glatter_glXUseXFont_ptr((font), (first), (count), (list))
GLATTER_UBLOCK(void, , glXUseXFont, (Font font, int first, int count, int list))
#define glXWaitGL() glatter_glXWaitGL_ptr()
GLATTER_UBLOCK(void, , glXWaitGL, (void))
#define glXWaitX() glatter_glXWaitX_ptr()
GLATTER_UBLOCK(void, , glXWaitX, (void))
#endif // defined(GLX_H)
#if defined(__glxext_h_)
#if defined(GLX_AMD_gpu_association)
#define glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glXBlitContextFramebufferAMD_ptr((dstCtx), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(void, , glXBlitContextFramebufferAMD, (GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define glXCreateAssociatedContextAMD(id, share_list) glatter_glXCreateAssociatedContextAMD_ptr((id), (share_list))
GLATTER_UBLOCK(GLXContext, , glXCreateAssociatedContextAMD, (unsigned int id, GLXContext share_list))
#define glXCreateAssociatedContextAttribsAMD(id, share_context, attribList) glatter_glXCreateAssociatedContextAttribsAMD_ptr((id), (share_context), (attribList))
GLATTER_UBLOCK(GLXContext, , glXCreateAssociatedContextAttribsAMD, (unsigned int id, GLXContext share_context, const int *attribList))
#define glXDeleteAssociatedContextAMD(ctx) glatter_glXDeleteAssociatedContextAMD_ptr((ctx))
GLATTER_UBLOCK(Bool, , glXDeleteAssociatedContextAMD, (GLXContext ctx))
#define glXGetContextGPUIDAMD(ctx) glatter_glXGetContextGPUIDAMD_ptr((ctx))
GLATTER_UBLOCK(unsigned int, , glXGetContextGPUIDAMD, (GLXContext ctx))
#define glXGetCurrentAssociatedContextAMD() glatter_glXGetCurrentAssociatedContextAMD_ptr()
GLATTER_UBLOCK(GLXContext, , glXGetCurrentAssociatedContextAMD, (void))
#define glXGetGPUIDsAMD(maxCount, ids) glatter_glXGetGPUIDsAMD_ptr((maxCount), (ids))
GLATTER_UBLOCK(unsigned int, , glXGetGPUIDsAMD, (unsigned int maxCount, unsigned int *ids))
#define glXGetGPUInfoAMD(id, property, dataType, size, data) glatter_glXGetGPUInfoAMD_ptr((id), (property), (dataType), (size), (data))
GLATTER_UBLOCK(int, , glXGetGPUInfoAMD, (unsigned int id, int property, GLenum dataType, unsigned int size, void *data))
#define glXMakeAssociatedContextCurrentAMD(ctx) glatter_glXMakeAssociatedContextCurrentAMD_ptr((ctx))
GLATTER_UBLOCK(Bool, , glXMakeAssociatedContextCurrentAMD, (GLXContext ctx))
#endif // defined(GLX_AMD_gpu_association)
#if defined(GLX_ARB_create_context)
#define glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list) glatter_glXCreateContextAttribsARB_ptr((dpy), (config), (share_context), (direct), (attrib_list))
GLATTER_UBLOCK(GLXContext, , glXCreateContextAttribsARB, (Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list))
#endif // defined(GLX_ARB_create_context)
#if defined(GLX_ARB_get_proc_address)
#define glXGetProcAddressARB(procName) glatter_glXGetProcAddressARB_ptr((procName))
GLATTER_UBLOCK(__GLXextFuncPtr, , glXGetProcAddressARB, (const GLubyte *procName))
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_EXT_import_context)
#define glXFreeContextEXT(dpy, context) glatter_glXFreeContextEXT_ptr((dpy), (context))
GLATTER_UBLOCK(void, , glXFreeContextEXT, (Display *dpy, GLXContext context))
#define glXGetContextIDEXT(context) glatter_glXGetContextIDEXT_ptr((context))
GLATTER_UBLOCK(GLXContextID, , glXGetContextIDEXT, (const GLXContext context))
#define glXImportContextEXT(dpy, contextID) glatter_glXImportContextEXT_ptr((dpy), (contextID))
GLATTER_UBLOCK(GLXContext, , glXImportContextEXT, (Display *dpy, GLXContextID contextID))
#define glXQueryContextInfoEXT(dpy, context, attribute, value) glatter_glXQueryContextInfoEXT_ptr((dpy), (context), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryContextInfoEXT, (Display *dpy, GLXContext context, int attribute, int *value))
#endif // defined(GLX_EXT_import_context)
#if defined(GLX_EXT_swap_control)
#define glXSwapIntervalEXT(dpy, drawable, interval) glatter_glXSwapIntervalEXT_ptr((dpy), (drawable), (interval))
GLATTER_UBLOCK(void, , glXSwapIntervalEXT, (Display *dpy, GLXDrawable drawable, int interval))
#endif // defined(GLX_EXT_swap_control)
#if defined(GLX_EXT_texture_from_pixmap)
#define glXBindTexImageEXT(dpy, drawable, buffer, attrib_list) glatter_glXBindTexImageEXT_ptr((dpy), (drawable), (buffer), (attrib_list))
GLATTER_UBLOCK(void, , glXBindTexImageEXT, (Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list))
#define glXReleaseTexImageEXT(dpy, drawable, buffer) glatter_glXReleaseTexImageEXT_ptr((dpy), (drawable), (buffer))
GLATTER_UBLOCK(void, , glXReleaseTexImageEXT, (Display *dpy, GLXDrawable drawable, int buffer))
#endif // defined(GLX_EXT_texture_from_pixmap)
#if defined(GLX_MESA_agp_offset)
#define glXGetAGPOffsetMESA(pointer) glatter_glXGetAGPOffsetMESA_ptr((pointer))
GLATTER_UBLOCK(unsigned int, , glXGetAGPOffsetMESA, (const void *pointer))
#endif // defined(GLX_MESA_agp_offset)
#if defined(GLX_MESA_copy_sub_buffer)
#define glXCopySubBufferMESA(dpy, drawable, x, y, width, height) glatter_glXCopySubBufferMESA_ptr((dpy), (drawable), (x), (y), (width), (height))
GLATTER_UBLOCK(void, , glXCopySubBufferMESA, (Display *dpy, GLXDrawable drawable, int x, int y, int width, int height))
#endif // defined(GLX_MESA_copy_sub_buffer)
#if defined(GLX_MESA_pixmap_colormap)
#define glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap) glatter_glXCreateGLXPixmapMESA_ptr((dpy), (visual), (pixmap), (cmap))
GLATTER_UBLOCK(GLXPixmap, , glXCreateGLXPixmapMESA, (Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap))
#endif // defined(GLX_MESA_pixmap_colormap)
#if defined(GLX_MESA_query_renderer)
#define glXQueryCurrentRendererIntegerMESA(attribute, value) glatter_glXQueryCurrentRendererIntegerMESA_ptr((attribute), (value))
GLATTER_UBLOCK(Bool, , glXQueryCurrentRendererIntegerMESA, (int attribute, unsigned int *value))
#define glXQueryRendererIntegerMESA(dpy, screen, renderer, attribute, value) glatter_glXQueryRendererIntegerMESA_ptr((dpy), (screen), (renderer), (attribute), (value))
GLATTER_UBLOCK(Bool, , glXQueryRendererIntegerMESA, (Display *dpy, int screen, int renderer, int attribute, unsigned int *value))
#endif // defined(GLX_MESA_query_renderer)
#if defined(GLX_MESA_release_buffers)
#define glXReleaseBuffersMESA(dpy, drawable) glatter_glXReleaseBuffersMESA_ptr((dpy), (drawable))
GLATTER_UBLOCK(Bool, , glXReleaseBuffersMESA, (Display *dpy, GLXDrawable drawable))
#endif // defined(GLX_MESA_release_buffers)
#if defined(GLX_MESA_set_3dfx_mode)
#define glXSet3DfxModeMESA(mode) glatter_glXSet3DfxModeMESA_ptr((mode))
GLATTER_UBLOCK(Bool, , glXSet3DfxModeMESA, (int mode))
#endif // defined(GLX_MESA_set_3dfx_mode)
#if defined(GLX_NV_copy_buffer)
#define glXCopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size) glatter_glXCopyBufferSubDataNV_ptr((dpy), (readCtx), (writeCtx), (readTarget), (writeTarget), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, , glXCopyBufferSubDataNV, (Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#define glXNamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glXNamedCopyBufferSubDataNV_ptr((dpy), (readCtx), (writeCtx), (readBuffer), (writeBuffer), (readOffset), (writeOffset), (size))
GLATTER_UBLOCK(void, , glXNamedCopyBufferSubDataNV, (Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size))
#endif // defined(GLX_NV_copy_buffer)
#if defined(GLX_NV_copy_image)
#define glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glXCopyImageSubDataNV_ptr((dpy), (srcCtx), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstCtx), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
GLATTER_UBLOCK(void, , glXCopyImageSubDataNV, (Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(GLX_NV_copy_image)
#if defined(GLX_NV_delay_before_swap)
#define glXDelayBeforeSwapNV(dpy, drawable, seconds) glatter_glXDelayBeforeSwapNV_ptr((dpy), (drawable), (seconds))
GLATTER_UBLOCK(Bool, , glXDelayBeforeSwapNV, (Display *dpy, GLXDrawable drawable, GLfloat seconds))
#endif // defined(GLX_NV_delay_before_swap)
#if defined(GLX_NV_present_video)
#define glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list) glatter_glXBindVideoDeviceNV_ptr((dpy), (video_slot), (video_device), (attrib_list))
GLATTER_UBLOCK(int, , glXBindVideoDeviceNV, (Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list))
#endif // defined(GLX_NV_present_video)
#if defined(GLX_NV_swap_group)
#define glXBindSwapBarrierNV(dpy, group, barrier) glatter_glXBindSwapBarrierNV_ptr((dpy), (group), (barrier))
GLATTER_UBLOCK(Bool, , glXBindSwapBarrierNV, (Display *dpy, GLuint group, GLuint barrier))
#define glXJoinSwapGroupNV(dpy, drawable, group) glatter_glXJoinSwapGroupNV_ptr((dpy), (drawable), (group))
GLATTER_UBLOCK(Bool, , glXJoinSwapGroupNV, (Display *dpy, GLXDrawable drawable, GLuint group))
#define glXQueryFrameCountNV(dpy, screen, count) glatter_glXQueryFrameCountNV_ptr((dpy), (screen), (count))
GLATTER_UBLOCK(Bool, , glXQueryFrameCountNV, (Display *dpy, int screen, GLuint *count))
#define glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers) glatter_glXQueryMaxSwapGroupsNV_ptr((dpy), (screen), (maxGroups), (maxBarriers))
GLATTER_UBLOCK(Bool, , glXQueryMaxSwapGroupsNV, (Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers))
#define glXQuerySwapGroupNV(dpy, drawable, group, barrier) glatter_glXQuerySwapGroupNV_ptr((dpy), (drawable), (group), (barrier))
GLATTER_UBLOCK(Bool, , glXQuerySwapGroupNV, (Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier))
#define glXResetFrameCountNV(dpy, screen) glatter_glXResetFrameCountNV_ptr((dpy), (screen))
GLATTER_UBLOCK(Bool, , glXResetFrameCountNV, (Display *dpy, int screen))
#endif // defined(GLX_NV_swap_group)
#if defined(GLX_NV_video_capture)
#define glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device) glatter_glXBindVideoCaptureDeviceNV_ptr((dpy), (video_capture_slot), (device))
GLATTER_UBLOCK(int, , glXBindVideoCaptureDeviceNV, (Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device))
#define glXLockVideoCaptureDeviceNV(dpy, device) glatter_glXLockVideoCaptureDeviceNV_ptr((dpy), (device))
GLATTER_UBLOCK(void, , glXLockVideoCaptureDeviceNV, (Display *dpy, GLXVideoCaptureDeviceNV device))
#define glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value) glatter_glXQueryVideoCaptureDeviceNV_ptr((dpy), (device), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryVideoCaptureDeviceNV, (Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value))
#define glXReleaseVideoCaptureDeviceNV(dpy, device) glatter_glXReleaseVideoCaptureDeviceNV_ptr((dpy), (device))
GLATTER_UBLOCK(void, , glXReleaseVideoCaptureDeviceNV, (Display *dpy, GLXVideoCaptureDeviceNV device))
#endif // defined(GLX_NV_video_capture)
#if defined(GLX_NV_video_out)
#define glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer) glatter_glXBindVideoImageNV_ptr((dpy), (VideoDevice), (pbuf), (iVideoBuffer))
GLATTER_UBLOCK(int, , glXBindVideoImageNV, (Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer))
#define glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice) glatter_glXGetVideoDeviceNV_ptr((dpy), (screen), (numVideoDevices), (pVideoDevice))
GLATTER_UBLOCK(int, , glXGetVideoDeviceNV, (Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice))
#define glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) glatter_glXGetVideoInfoNV_ptr((dpy), (screen), (VideoDevice), (pulCounterOutputPbuffer), (pulCounterOutputVideo))
GLATTER_UBLOCK(int, , glXGetVideoInfoNV, (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo))
#define glXReleaseVideoDeviceNV(dpy, screen, VideoDevice) glatter_glXReleaseVideoDeviceNV_ptr((dpy), (screen), (VideoDevice))
GLATTER_UBLOCK(int, , glXReleaseVideoDeviceNV, (Display *dpy, int screen, GLXVideoDeviceNV VideoDevice))
#define glXReleaseVideoImageNV(dpy, pbuf) glatter_glXReleaseVideoImageNV_ptr((dpy), (pbuf))
GLATTER_UBLOCK(int, , glXReleaseVideoImageNV, (Display *dpy, GLXPbuffer pbuf))
#define glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock) glatter_glXSendPbufferToVideoNV_ptr((dpy), (pbuf), (iBufferType), (pulCounterPbuffer), (bBlock))
GLATTER_UBLOCK(int, , glXSendPbufferToVideoNV, (Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock))
#endif // defined(GLX_NV_video_out)
#if defined(GLX_OML_sync_control)
#define glXGetMscRateOML(dpy, drawable, numerator, denominator) glatter_glXGetMscRateOML_ptr((dpy), (drawable), (numerator), (denominator))
GLATTER_UBLOCK(Bool, , glXGetMscRateOML, (Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator))
#define glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc) glatter_glXGetSyncValuesOML_ptr((dpy), (drawable), (ust), (msc), (sbc))
GLATTER_UBLOCK(Bool, , glXGetSyncValuesOML, (Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc))
#define glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder) glatter_glXSwapBuffersMscOML_ptr((dpy), (drawable), (target_msc), (divisor), (remainder))
GLATTER_UBLOCK(int64_t, , glXSwapBuffersMscOML, (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder))
#define glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc) glatter_glXWaitForMscOML_ptr((dpy), (drawable), (target_msc), (divisor), (remainder), (ust), (msc), (sbc))
GLATTER_UBLOCK(Bool, , glXWaitForMscOML, (Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc))
#define glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc) glatter_glXWaitForSbcOML_ptr((dpy), (drawable), (target_sbc), (ust), (msc), (sbc))
GLATTER_UBLOCK(Bool, , glXWaitForSbcOML, (Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc))
#endif // defined(GLX_OML_sync_control)
#if defined(GLX_SGIX_dmbuffer)
#if defined(_DM_BUFFER_H_)
#define glXAssociateDMPbufferSGIX(dpy, pbuffer, params, dmbuffer) glatter_glXAssociateDMPbufferSGIX_ptr((dpy), (pbuffer), (params), (dmbuffer))
GLATTER_UBLOCK(Bool, , glXAssociateDMPbufferSGIX, (Display *dpy, GLXPbufferSGIX pbuffer, DMparams *params, DMbuffer dmbuffer))
#endif // defined(_DM_BUFFER_H_)
#endif // defined(GLX_SGIX_dmbuffer)
#if defined(GLX_SGIX_fbconfig)
#define glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct) glatter_glXCreateContextWithConfigSGIX_ptr((dpy), (config), (render_type), (share_list), (direct))
GLATTER_UBLOCK(GLXContext, , glXCreateContextWithConfigSGIX, (Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct))
#define glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap) glatter_glXCreateGLXPixmapWithConfigSGIX_ptr((dpy), (config), (pixmap))
GLATTER_UBLOCK(GLXPixmap, , glXCreateGLXPixmapWithConfigSGIX, (Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap))
#define glXGetFBConfigAttribSGIX(dpy, config, attribute, value) glatter_glXGetFBConfigAttribSGIX_ptr((dpy), (config), (attribute), (value))
GLATTER_UBLOCK(int, , glXGetFBConfigAttribSGIX, (Display *dpy, GLXFBConfigSGIX config, int attribute, int *value))
#define glXGetFBConfigFromVisualSGIX(dpy, vis) glatter_glXGetFBConfigFromVisualSGIX_ptr((dpy), (vis))
GLATTER_UBLOCK(GLXFBConfigSGIX, , glXGetFBConfigFromVisualSGIX, (Display *dpy, XVisualInfo *vis))
#endif // defined(GLX_SGIX_fbconfig)
#if defined(GLX_SGIX_hyperpipe)
#define glXBindHyperpipeSGIX(dpy, hpId) glatter_glXBindHyperpipeSGIX_ptr((dpy), (hpId))
GLATTER_UBLOCK(int, , glXBindHyperpipeSGIX, (Display *dpy, int hpId))
#define glXDestroyHyperpipeConfigSGIX(dpy, hpId) glatter_glXDestroyHyperpipeConfigSGIX_ptr((dpy), (hpId))
GLATTER_UBLOCK(int, , glXDestroyHyperpipeConfigSGIX, (Display *dpy, int hpId))
#define glXHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList) glatter_glXHyperpipeAttribSGIX_ptr((dpy), (timeSlice), (attrib), (size), (attribList))
GLATTER_UBLOCK(int, , glXHyperpipeAttribSGIX, (Display *dpy, int timeSlice, int attrib, int size, void *attribList))
#define glXHyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId) glatter_glXHyperpipeConfigSGIX_ptr((dpy), (networkId), (npipes), (cfg), (hpId))
GLATTER_UBLOCK(int, , glXHyperpipeConfigSGIX, (Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId))
#define glXQueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList) glatter_glXQueryHyperpipeAttribSGIX_ptr((dpy), (timeSlice), (attrib), (size), (returnAttribList))
GLATTER_UBLOCK(int, , glXQueryHyperpipeAttribSGIX, (Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList))
#define glXQueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList) glatter_glXQueryHyperpipeBestAttribSGIX_ptr((dpy), (timeSlice), (attrib), (size), (attribList), (returnAttribList))
GLATTER_UBLOCK(int, , glXQueryHyperpipeBestAttribSGIX, (Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList))
#endif // defined(GLX_SGIX_hyperpipe)
#if defined(GLX_SGIX_pbuffer)
#define glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list) glatter_glXCreateGLXPbufferSGIX_ptr((dpy), (config), (width), (height), (attrib_list))
GLATTER_UBLOCK(GLXPbufferSGIX, , glXCreateGLXPbufferSGIX, (Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list))
#define glXDestroyGLXPbufferSGIX(dpy, pbuf) glatter_glXDestroyGLXPbufferSGIX_ptr((dpy), (pbuf))
GLATTER_UBLOCK(void, , glXDestroyGLXPbufferSGIX, (Display *dpy, GLXPbufferSGIX pbuf))
#define glXGetSelectedEventSGIX(dpy, drawable, mask) glatter_glXGetSelectedEventSGIX_ptr((dpy), (drawable), (mask))
GLATTER_UBLOCK(void, , glXGetSelectedEventSGIX, (Display *dpy, GLXDrawable drawable, unsigned long *mask))
#define glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value) glatter_glXQueryGLXPbufferSGIX_ptr((dpy), (pbuf), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryGLXPbufferSGIX, (Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value))
#define glXSelectEventSGIX(dpy, drawable, mask) glatter_glXSelectEventSGIX_ptr((dpy), (drawable), (mask))
GLATTER_UBLOCK(void, , glXSelectEventSGIX, (Display *dpy, GLXDrawable drawable, unsigned long mask))
#endif // defined(GLX_SGIX_pbuffer)
#if defined(GLX_SGIX_swap_barrier)
#define glXBindSwapBarrierSGIX(dpy, drawable, barrier) glatter_glXBindSwapBarrierSGIX_ptr((dpy), (drawable), (barrier))
GLATTER_UBLOCK(void, , glXBindSwapBarrierSGIX, (Display *dpy, GLXDrawable drawable, int barrier))
#define glXQueryMaxSwapBarriersSGIX(dpy, screen, max) glatter_glXQueryMaxSwapBarriersSGIX_ptr((dpy), (screen), (max))
GLATTER_UBLOCK(Bool, , glXQueryMaxSwapBarriersSGIX, (Display *dpy, int screen, int *max))
#endif // defined(GLX_SGIX_swap_barrier)
#if defined(GLX_SGIX_swap_group)
#define glXJoinSwapGroupSGIX(dpy, drawable, member) glatter_glXJoinSwapGroupSGIX_ptr((dpy), (drawable), (member))
GLATTER_UBLOCK(void, , glXJoinSwapGroupSGIX, (Display *dpy, GLXDrawable drawable, GLXDrawable member))
#endif // defined(GLX_SGIX_swap_group)
#if defined(GLX_SGIX_video_resize)
#define glXBindChannelToWindowSGIX(display, screen, channel, window) glatter_glXBindChannelToWindowSGIX_ptr((display), (screen), (channel), (window))
GLATTER_UBLOCK(int, , glXBindChannelToWindowSGIX, (Display *display, int screen, int channel, Window window))
#define glXChannelRectSGIX(display, screen, channel, x, y, w, h) glatter_glXChannelRectSGIX_ptr((display), (screen), (channel), (x), (y), (w), (h))
GLATTER_UBLOCK(int, , glXChannelRectSGIX, (Display *display, int screen, int channel, int x, int y, int w, int h))
#define glXChannelRectSyncSGIX(display, screen, channel, synctype) glatter_glXChannelRectSyncSGIX_ptr((display), (screen), (channel), (synctype))
GLATTER_UBLOCK(int, , glXChannelRectSyncSGIX, (Display *display, int screen, int channel, GLenum synctype))
#define glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h) glatter_glXQueryChannelDeltasSGIX_ptr((display), (screen), (channel), (x), (y), (w), (h))
GLATTER_UBLOCK(int, , glXQueryChannelDeltasSGIX, (Display *display, int screen, int channel, int *x, int *y, int *w, int *h))
#define glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh) glatter_glXQueryChannelRectSGIX_ptr((display), (screen), (channel), (dx), (dy), (dw), (dh))
GLATTER_UBLOCK(int, , glXQueryChannelRectSGIX, (Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh))
#endif // defined(GLX_SGIX_video_resize)
#if defined(GLX_SGIX_video_source)
#if defined(_VL_H)
#define glXCreateGLXVideoSourceSGIX(display, screen, server, path, nodeClass, drainNode) glatter_glXCreateGLXVideoSourceSGIX_ptr((display), (screen), (server), (path), (nodeClass), (drainNode))
GLATTER_UBLOCK(GLXVideoSourceSGIX, , glXCreateGLXVideoSourceSGIX, (Display *display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode))
#define glXDestroyGLXVideoSourceSGIX(dpy, glxvideosource) glatter_glXDestroyGLXVideoSourceSGIX_ptr((dpy), (glxvideosource))
GLATTER_UBLOCK(void, , glXDestroyGLXVideoSourceSGIX, (Display *dpy, GLXVideoSourceSGIX glxvideosource))
#endif // defined(_VL_H)
#endif // defined(GLX_SGIX_video_source)
#if defined(GLX_SGI_cushion)
#define glXCushionSGI(dpy, window, cushion) glatter_glXCushionSGI_ptr((dpy), (window), (cushion))
GLATTER_UBLOCK(void, , glXCushionSGI, (Display *dpy, Window window, float cushion))
#endif // defined(GLX_SGI_cushion)
#if defined(GLX_SGI_make_current_read)
#define glXGetCurrentReadDrawableSGI() glatter_glXGetCurrentReadDrawableSGI_ptr()
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentReadDrawableSGI, (void))
#define glXMakeCurrentReadSGI(dpy, draw, read, ctx) glatter_glXMakeCurrentReadSGI_ptr((dpy), (draw), (read), (ctx))
GLATTER_UBLOCK(Bool, , glXMakeCurrentReadSGI, (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#endif // defined(GLX_SGI_make_current_read)
#if defined(GLX_SGI_swap_control)
#define glXSwapIntervalSGI(interval) glatter_glXSwapIntervalSGI_ptr((interval))
GLATTER_UBLOCK(int, , glXSwapIntervalSGI, (int interval))
#endif // defined(GLX_SGI_swap_control)
#if defined(GLX_SGI_video_sync)
#define glXGetVideoSyncSGI(count) glatter_glXGetVideoSyncSGI_ptr((count))
GLATTER_UBLOCK(int, , glXGetVideoSyncSGI, (unsigned int *count))
#define glXWaitVideoSyncSGI(divisor, remainder, count) glatter_glXWaitVideoSyncSGI_ptr((divisor), (remainder), (count))
GLATTER_UBLOCK(int, , glXWaitVideoSyncSGI, (int divisor, int remainder, unsigned int *count))
#endif // defined(GLX_SGI_video_sync)
#if defined(GLX_SUN_get_transparent_index)
#define glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex) glatter_glXGetTransparentIndexSUN_ptr((dpy), (overlay), (underlay), (pTransparentIndex))
GLATTER_UBLOCK(Status, , glXGetTransparentIndexSUN, (Display *dpy, Window overlay, Window underlay, long *pTransparentIndex))
#endif // defined(GLX_SUN_get_transparent_index)
#if defined(GLX_VERSION_1_3)
#define glXCreateNewContext(dpy, config, render_type, share_list, direct) glatter_glXCreateNewContext_ptr((dpy), (config), (render_type), (share_list), (direct))
GLATTER_UBLOCK(GLXContext, , glXCreateNewContext, (Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct))
#define glXCreatePbuffer(dpy, config, attrib_list) glatter_glXCreatePbuffer_ptr((dpy), (config), (attrib_list))
GLATTER_UBLOCK(GLXPbuffer, , glXCreatePbuffer, (Display *dpy, GLXFBConfig config, const int *attrib_list))
#define glXCreatePixmap(dpy, config, pixmap, attrib_list) glatter_glXCreatePixmap_ptr((dpy), (config), (pixmap), (attrib_list))
GLATTER_UBLOCK(GLXPixmap, , glXCreatePixmap, (Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list))
#define glXCreateWindow(dpy, config, win, attrib_list) glatter_glXCreateWindow_ptr((dpy), (config), (win), (attrib_list))
GLATTER_UBLOCK(GLXWindow, , glXCreateWindow, (Display *dpy, GLXFBConfig config, Window win, const int *attrib_list))
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer_ptr((dpy), (pbuf))
GLATTER_UBLOCK(void, , glXDestroyPbuffer, (Display *dpy, GLXPbuffer pbuf))
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap_ptr((dpy), (pixmap))
GLATTER_UBLOCK(void, , glXDestroyPixmap, (Display *dpy, GLXPixmap pixmap))
#define glXDestroyWindow(dpy, win) glatter_glXDestroyWindow_ptr((dpy), (win))
GLATTER_UBLOCK(void, , glXDestroyWindow, (Display *dpy, GLXWindow win))
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable_ptr()
GLATTER_UBLOCK(GLXDrawable, , glXGetCurrentReadDrawable, (void))
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib_ptr((dpy), (config), (attribute), (value))
GLATTER_UBLOCK(int, , glXGetFBConfigAttrib, (Display *dpy, GLXFBConfig config, int attribute, int *value))
#define glXGetSelectedEvent(dpy, draw, event_mask) glatter_glXGetSelectedEvent_ptr((dpy), (draw), (event_mask))
GLATTER_UBLOCK(void, , glXGetSelectedEvent, (Display *dpy, GLXDrawable draw, unsigned long *event_mask))
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent_ptr((dpy), (draw), (read), (ctx))
GLATTER_UBLOCK(Bool, , glXMakeContextCurrent, (Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx))
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext_ptr((dpy), (ctx), (attribute), (value))
GLATTER_UBLOCK(int, , glXQueryContext, (Display *dpy, GLXContext ctx, int attribute, int *value))
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable_ptr((dpy), (draw), (attribute), (value))
GLATTER_UBLOCK(void, , glXQueryDrawable, (Display *dpy, GLXDrawable draw, int attribute, unsigned int *value))
#define glXSelectEvent(dpy, draw, event_mask) glatter_glXSelectEvent_ptr((dpy), (draw), (event_mask))
GLATTER_UBLOCK(void, , glXSelectEvent, (Display *dpy, GLXDrawable draw, unsigned long event_mask))
#endif // defined(GLX_VERSION_1_3)
#if defined(GLX_VERSION_1_4)
#define glXGetProcAddress(procName) glatter_glXGetProcAddress_ptr((procName))
GLATTER_UBLOCK(__GLXextFuncPtr, , glXGetProcAddress, (const GLubyte *procName))
#endif // defined(__glxext_h_)
#endif // defined(GLX_VERSION_1_4)
#endif // GLATTER_GLX

#else // NDEBUG

#ifdef GLATTER_GLX
#if defined(GLX_H)
#if defined(GLX_ARB_get_proc_address)
#define glXGetProcAddressARB(a0) glatter_glXGetProcAddressARB_debug((a0), __FILE__, __LINE__)
__GLXextFuncPtr glatter_glXGetProcAddressARB_debug(const GLubyte *a0, const char* file, int line);
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_ARB_render_texture)
#define glXBindTexImageARB(dpy, pbuffer, buffer) glatter_glXBindTexImageARB_debug((dpy), (pbuffer), (buffer), __FILE__, __LINE__)
Bool glatter_glXBindTexImageARB_debug(Display *dpy, GLXPbuffer pbuffer, int buffer, const char* file, int line);
#define glXDrawableAttribARB(dpy, draw, attribList) glatter_glXDrawableAttribARB_debug((dpy), (draw), (attribList), __FILE__, __LINE__)
Bool glatter_glXDrawableAttribARB_debug(Display *dpy, GLXDrawable draw, const int *attribList, const char* file, int line);
#define glXReleaseTexImageARB(dpy, pbuffer, buffer) glatter_glXReleaseTexImageARB_debug((dpy), (pbuffer), (buffer), __FILE__, __LINE__)
Bool glatter_glXReleaseTexImageARB_debug(Display *dpy, GLXPbuffer pbuffer, int buffer, const char* file, int line);
#endif // defined(GLX_ARB_render_texture)
#if defined(GLX_MESA_swap_control)
#define glXGetSwapIntervalMESA() glatter_glXGetSwapIntervalMESA_debug(__FILE__, __LINE__)
int glatter_glXGetSwapIntervalMESA_debug(const char* file, int line);
#define glXSwapIntervalMESA(interval) glatter_glXSwapIntervalMESA_debug((interval), __FILE__, __LINE__)
int glatter_glXSwapIntervalMESA_debug(unsigned int interval, const char* file, int line);
#endif // defined(GLX_MESA_swap_control)
#if defined(GLX_MESA_swap_frame_usage)
#define glXBeginFrameTrackingMESA(dpy, drawable) glatter_glXBeginFrameTrackingMESA_debug((dpy), (drawable), __FILE__, __LINE__)
int glatter_glXBeginFrameTrackingMESA_debug(Display *dpy, GLXDrawable drawable, const char* file, int line);
#define glXEndFrameTrackingMESA(dpy, drawable) glatter_glXEndFrameTrackingMESA_debug((dpy), (drawable), __FILE__, __LINE__)
int glatter_glXEndFrameTrackingMESA_debug(Display *dpy, GLXDrawable drawable, const char* file, int line);
#define glXGetFrameUsageMESA(dpy, drawable, usage) glatter_glXGetFrameUsageMESA_debug((dpy), (drawable), (usage), __FILE__, __LINE__)
int glatter_glXGetFrameUsageMESA_debug(Display *dpy, GLXDrawable drawable, float *usage, const char* file, int line);
#define glXQueryFrameTrackingMESA(dpy, drawable, swapCount, missedFrames, lastMissedUsage) glatter_glXQueryFrameTrackingMESA_debug((dpy), (drawable), (swapCount), (missedFrames), (lastMissedUsage), __FILE__, __LINE__)
int glatter_glXQueryFrameTrackingMESA_debug(Display *dpy, GLXDrawable drawable, int64_t *swapCount, int64_t *missedFrames, float *lastMissedUsage, const char* file, int line);
#endif // defined(GLX_MESA_swap_frame_usage)
#if defined(GLX_NV_vertex_array_range)
#define glXFreeMemoryNV(pointer) glatter_glXFreeMemoryNV_debug((pointer), __FILE__, __LINE__)
void glatter_glXFreeMemoryNV_debug(GLvoid *pointer, const char* file, int line);
#endif // defined(GLX_NV_vertex_array_range)
#define glXChooseVisual(dpy, screen, attribList) glatter_glXChooseVisual_debug((dpy), (screen), (attribList), __FILE__, __LINE__)
XVisualInfo* glatter_glXChooseVisual_debug(Display *dpy, int screen, int *attribList, const char* file, int line);
#define glXCopyContext(dpy, src, dst, mask) glatter_glXCopyContext_debug((dpy), (src), (dst), (mask), __FILE__, __LINE__)
void glatter_glXCopyContext_debug(Display *dpy, GLXContext src, GLXContext dst, unsigned long mask, const char* file, int line);
#define glXCreateContext(dpy, vis, shareList, direct) glatter_glXCreateContext_debug((dpy), (vis), (shareList), (direct), __FILE__, __LINE__)
GLXContext glatter_glXCreateContext_debug(Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct, const char* file, int line);
#define glXCreateGLXPixmap(dpy, visual, pixmap) glatter_glXCreateGLXPixmap_debug((dpy), (visual), (pixmap), __FILE__, __LINE__)
GLXPixmap glatter_glXCreateGLXPixmap_debug(Display *dpy, XVisualInfo *visual, Pixmap pixmap, const char* file, int line);
#define glXCreateNewContext(dpy, config, renderType, shareList, direct) glatter_glXCreateNewContext_debug((dpy), (config), (renderType), (shareList), (direct), __FILE__, __LINE__)
GLXContext glatter_glXCreateNewContext_debug(Display *dpy, GLXFBConfig config, int renderType, GLXContext shareList, Bool direct, const char* file, int line);
#define glXCreatePbuffer(dpy, config, attribList) glatter_glXCreatePbuffer_debug((dpy), (config), (attribList), __FILE__, __LINE__)
GLXPbuffer glatter_glXCreatePbuffer_debug(Display *dpy, GLXFBConfig config, const int *attribList, const char* file, int line);
#define glXCreatePixmap(dpy, config, pixmap, attribList) glatter_glXCreatePixmap_debug((dpy), (config), (pixmap), (attribList), __FILE__, __LINE__)
GLXPixmap glatter_glXCreatePixmap_debug(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attribList, const char* file, int line);
#define glXCreateWindow(dpy, config, win, attribList) glatter_glXCreateWindow_debug((dpy), (config), (win), (attribList), __FILE__, __LINE__)
GLXWindow glatter_glXCreateWindow_debug(Display *dpy, GLXFBConfig config, Window win, const int *attribList, const char* file, int line);
#define glXDestroyContext(dpy, ctx) glatter_glXDestroyContext_debug((dpy), (ctx), __FILE__, __LINE__)
void glatter_glXDestroyContext_debug(Display *dpy, GLXContext ctx, const char* file, int line);
#define glXDestroyGLXPixmap(dpy, pixmap) glatter_glXDestroyGLXPixmap_debug((dpy), (pixmap), __FILE__, __LINE__)
void glatter_glXDestroyGLXPixmap_debug(Display *dpy, GLXPixmap pixmap, const char* file, int line);
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer_debug((dpy), (pbuf), __FILE__, __LINE__)
void glatter_glXDestroyPbuffer_debug(Display *dpy, GLXPbuffer pbuf, const char* file, int line);
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap_debug((dpy), (pixmap), __FILE__, __LINE__)
void glatter_glXDestroyPixmap_debug(Display *dpy, GLXPixmap pixmap, const char* file, int line);
#define glXDestroyWindow(dpy, window) glatter_glXDestroyWindow_debug((dpy), (window), __FILE__, __LINE__)
void glatter_glXDestroyWindow_debug(Display *dpy, GLXWindow window, const char* file, int line);
#define glXGetConfig(dpy, visual, attrib, value) glatter_glXGetConfig_debug((dpy), (visual), (attrib), (value), __FILE__, __LINE__)
int glatter_glXGetConfig_debug(Display *dpy, XVisualInfo *visual, int attrib, int *value, const char* file, int line);
#define glXGetCurrentContext() glatter_glXGetCurrentContext_debug(__FILE__, __LINE__)
GLXContext glatter_glXGetCurrentContext_debug(const char* file, int line);
#define glXGetCurrentDrawable() glatter_glXGetCurrentDrawable_debug(__FILE__, __LINE__)
GLXDrawable glatter_glXGetCurrentDrawable_debug(const char* file, int line);
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable_debug(__FILE__, __LINE__)
GLXDrawable glatter_glXGetCurrentReadDrawable_debug(const char* file, int line);
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib_debug((dpy), (config), (attribute), (value), __FILE__, __LINE__)
int glatter_glXGetFBConfigAttrib_debug(Display *dpy, GLXFBConfig config, int attribute, int *value, const char* file, int line);
#define glXGetSelectedEvent(dpy, drawable, mask) glatter_glXGetSelectedEvent_debug((dpy), (drawable), (mask), __FILE__, __LINE__)
void glatter_glXGetSelectedEvent_debug(Display *dpy, GLXDrawable drawable, unsigned long *mask, const char* file, int line);
#define glXIsDirect(dpy, ctx) glatter_glXIsDirect_debug((dpy), (ctx), __FILE__, __LINE__)
Bool glatter_glXIsDirect_debug(Display *dpy, GLXContext ctx, const char* file, int line);
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent_debug((dpy), (draw), (read), (ctx), __FILE__, __LINE__)
Bool glatter_glXMakeContextCurrent_debug(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx, const char* file, int line);
#define glXMakeCurrent(dpy, drawable, ctx) glatter_glXMakeCurrent_debug((dpy), (drawable), (ctx), __FILE__, __LINE__)
Bool glatter_glXMakeCurrent_debug(Display *dpy, GLXDrawable drawable, GLXContext ctx, const char* file, int line);
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext_debug((dpy), (ctx), (attribute), (value), __FILE__, __LINE__)
int glatter_glXQueryContext_debug(Display *dpy, GLXContext ctx, int attribute, int *value, const char* file, int line);
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable_debug((dpy), (draw), (attribute), (value), __FILE__, __LINE__)
void glatter_glXQueryDrawable_debug(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value, const char* file, int line);
#define glXQueryExtension(dpy, errorb, event) glatter_glXQueryExtension_debug((dpy), (errorb), (event), __FILE__, __LINE__)
Bool glatter_glXQueryExtension_debug(Display *dpy, int *errorb, int *event, const char* file, int line);
#define glXQueryVersion(dpy, maj, min) glatter_glXQueryVersion_debug((dpy), (maj), (min), __FILE__, __LINE__)
Bool glatter_glXQueryVersion_debug(Display *dpy, int *maj, int *min, const char* file, int line);
#define glXSelectEvent(dpy, drawable, mask) glatter_glXSelectEvent_debug((dpy), (drawable), (mask), __FILE__, __LINE__)
void glatter_glXSelectEvent_debug(Display *dpy, GLXDrawable drawable, unsigned long mask, const char* file, int line);
#define glXSwapBuffers(dpy, drawable) glatter_glXSwapBuffers_debug((dpy), (drawable), __FILE__, __LINE__)
void glatter_glXSwapBuffers_debug(Display *dpy, GLXDrawable drawable, const char* file, int line);
#define glXUseXFont(font, first, count, list) glatter_glXUseXFont_debug((font), (first), (count), (list), __FILE__, __LINE__)
void glatter_glXUseXFont_debug(Font font, int first, int count, int list, const char* file, int line);
#define glXWaitGL() glatter_glXWaitGL_debug(__FILE__, __LINE__)
void glatter_glXWaitGL_debug(const char* file, int line);
#define glXWaitX() glatter_glXWaitX_debug(__FILE__, __LINE__)
void glatter_glXWaitX_debug(const char* file, int line);
#endif // defined(GLX_H)
#if defined(__glxext_h_)
#if defined(GLX_AMD_gpu_association)
#define glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_glXBlitContextFramebufferAMD_debug((dstCtx), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
void glatter_glXBlitContextFramebufferAMD_debug(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define glXCreateAssociatedContextAMD(id, share_list) glatter_glXCreateAssociatedContextAMD_debug((id), (share_list), __FILE__, __LINE__)
GLXContext glatter_glXCreateAssociatedContextAMD_debug(unsigned int id, GLXContext share_list, const char* file, int line);
#define glXCreateAssociatedContextAttribsAMD(id, share_context, attribList) glatter_glXCreateAssociatedContextAttribsAMD_debug((id), (share_context), (attribList), __FILE__, __LINE__)
GLXContext glatter_glXCreateAssociatedContextAttribsAMD_debug(unsigned int id, GLXContext share_context, const int *attribList, const char* file, int line);
#define glXDeleteAssociatedContextAMD(ctx) glatter_glXDeleteAssociatedContextAMD_debug((ctx), __FILE__, __LINE__)
Bool glatter_glXDeleteAssociatedContextAMD_debug(GLXContext ctx, const char* file, int line);
#define glXGetContextGPUIDAMD(ctx) glatter_glXGetContextGPUIDAMD_debug((ctx), __FILE__, __LINE__)
unsigned int glatter_glXGetContextGPUIDAMD_debug(GLXContext ctx, const char* file, int line);
#define glXGetCurrentAssociatedContextAMD() glatter_glXGetCurrentAssociatedContextAMD_debug(__FILE__, __LINE__)
GLXContext glatter_glXGetCurrentAssociatedContextAMD_debug(const char* file, int line);
#define glXGetGPUIDsAMD(maxCount, ids) glatter_glXGetGPUIDsAMD_debug((maxCount), (ids), __FILE__, __LINE__)
unsigned int glatter_glXGetGPUIDsAMD_debug(unsigned int maxCount, unsigned int *ids, const char* file, int line);
#define glXGetGPUInfoAMD(id, property, dataType, size, data) glatter_glXGetGPUInfoAMD_debug((id), (property), (dataType), (size), (data), __FILE__, __LINE__)
int glatter_glXGetGPUInfoAMD_debug(unsigned int id, int property, GLenum dataType, unsigned int size, void *data, const char* file, int line);
#define glXMakeAssociatedContextCurrentAMD(ctx) glatter_glXMakeAssociatedContextCurrentAMD_debug((ctx), __FILE__, __LINE__)
Bool glatter_glXMakeAssociatedContextCurrentAMD_debug(GLXContext ctx, const char* file, int line);
#endif // defined(GLX_AMD_gpu_association)
#if defined(GLX_ARB_create_context)
#define glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list) glatter_glXCreateContextAttribsARB_debug((dpy), (config), (share_context), (direct), (attrib_list), __FILE__, __LINE__)
GLXContext glatter_glXCreateContextAttribsARB_debug(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list, const char* file, int line);
#endif // defined(GLX_ARB_create_context)
#if defined(GLX_ARB_get_proc_address)
#define glXGetProcAddressARB(procName) glatter_glXGetProcAddressARB_debug((procName), __FILE__, __LINE__)
__GLXextFuncPtr glatter_glXGetProcAddressARB_debug(const GLubyte *procName, const char* file, int line);
#endif // defined(GLX_ARB_get_proc_address)
#if defined(GLX_EXT_import_context)
#define glXFreeContextEXT(dpy, context) glatter_glXFreeContextEXT_debug((dpy), (context), __FILE__, __LINE__)
void glatter_glXFreeContextEXT_debug(Display *dpy, GLXContext context, const char* file, int line);
#define glXGetContextIDEXT(context) glatter_glXGetContextIDEXT_debug((context), __FILE__, __LINE__)
GLXContextID glatter_glXGetContextIDEXT_debug(const GLXContext context, const char* file, int line);
#define glXImportContextEXT(dpy, contextID) glatter_glXImportContextEXT_debug((dpy), (contextID), __FILE__, __LINE__)
GLXContext glatter_glXImportContextEXT_debug(Display *dpy, GLXContextID contextID, const char* file, int line);
#define glXQueryContextInfoEXT(dpy, context, attribute, value) glatter_glXQueryContextInfoEXT_debug((dpy), (context), (attribute), (value), __FILE__, __LINE__)
int glatter_glXQueryContextInfoEXT_debug(Display *dpy, GLXContext context, int attribute, int *value, const char* file, int line);
#endif // defined(GLX_EXT_import_context)
#if defined(GLX_EXT_swap_control)
#define glXSwapIntervalEXT(dpy, drawable, interval) glatter_glXSwapIntervalEXT_debug((dpy), (drawable), (interval), __FILE__, __LINE__)
void glatter_glXSwapIntervalEXT_debug(Display *dpy, GLXDrawable drawable, int interval, const char* file, int line);
#endif // defined(GLX_EXT_swap_control)
#if defined(GLX_EXT_texture_from_pixmap)
#define glXBindTexImageEXT(dpy, drawable, buffer, attrib_list) glatter_glXBindTexImageEXT_debug((dpy), (drawable), (buffer), (attrib_list), __FILE__, __LINE__)
void glatter_glXBindTexImageEXT_debug(Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list, const char* file, int line);
#define glXReleaseTexImageEXT(dpy, drawable, buffer) glatter_glXReleaseTexImageEXT_debug((dpy), (drawable), (buffer), __FILE__, __LINE__)
void glatter_glXReleaseTexImageEXT_debug(Display *dpy, GLXDrawable drawable, int buffer, const char* file, int line);
#endif // defined(GLX_EXT_texture_from_pixmap)
#if defined(GLX_MESA_agp_offset)
#define glXGetAGPOffsetMESA(pointer) glatter_glXGetAGPOffsetMESA_debug((pointer), __FILE__, __LINE__)
unsigned int glatter_glXGetAGPOffsetMESA_debug(const void *pointer, const char* file, int line);
#endif // defined(GLX_MESA_agp_offset)
#if defined(GLX_MESA_copy_sub_buffer)
#define glXCopySubBufferMESA(dpy, drawable, x, y, width, height) glatter_glXCopySubBufferMESA_debug((dpy), (drawable), (x), (y), (width), (height), __FILE__, __LINE__)
void glatter_glXCopySubBufferMESA_debug(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height, const char* file, int line);
#endif // defined(GLX_MESA_copy_sub_buffer)
#if defined(GLX_MESA_pixmap_colormap)
#define glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap) glatter_glXCreateGLXPixmapMESA_debug((dpy), (visual), (pixmap), (cmap), __FILE__, __LINE__)
GLXPixmap glatter_glXCreateGLXPixmapMESA_debug(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap, const char* file, int line);
#endif // defined(GLX_MESA_pixmap_colormap)
#if defined(GLX_MESA_query_renderer)
#define glXQueryCurrentRendererIntegerMESA(attribute, value) glatter_glXQueryCurrentRendererIntegerMESA_debug((attribute), (value), __FILE__, __LINE__)
Bool glatter_glXQueryCurrentRendererIntegerMESA_debug(int attribute, unsigned int *value, const char* file, int line);
#define glXQueryRendererIntegerMESA(dpy, screen, renderer, attribute, value) glatter_glXQueryRendererIntegerMESA_debug((dpy), (screen), (renderer), (attribute), (value), __FILE__, __LINE__)
Bool glatter_glXQueryRendererIntegerMESA_debug(Display *dpy, int screen, int renderer, int attribute, unsigned int *value, const char* file, int line);
#endif // defined(GLX_MESA_query_renderer)
#if defined(GLX_MESA_release_buffers)
#define glXReleaseBuffersMESA(dpy, drawable) glatter_glXReleaseBuffersMESA_debug((dpy), (drawable), __FILE__, __LINE__)
Bool glatter_glXReleaseBuffersMESA_debug(Display *dpy, GLXDrawable drawable, const char* file, int line);
#endif // defined(GLX_MESA_release_buffers)
#if defined(GLX_MESA_set_3dfx_mode)
#define glXSet3DfxModeMESA(mode) glatter_glXSet3DfxModeMESA_debug((mode), __FILE__, __LINE__)
Bool glatter_glXSet3DfxModeMESA_debug(int mode, const char* file, int line);
#endif // defined(GLX_MESA_set_3dfx_mode)
#if defined(GLX_NV_copy_buffer)
#define glXCopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size) glatter_glXCopyBufferSubDataNV_debug((dpy), (readCtx), (writeCtx), (readTarget), (writeTarget), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glXCopyBufferSubDataNV_debug(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#define glXNamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size) glatter_glXNamedCopyBufferSubDataNV_debug((dpy), (readCtx), (writeCtx), (readBuffer), (writeBuffer), (readOffset), (writeOffset), (size), __FILE__, __LINE__)
void glatter_glXNamedCopyBufferSubDataNV_debug(Display *dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, const char* file, int line);
#endif // defined(GLX_NV_copy_buffer)
#if defined(GLX_NV_copy_image)
#define glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_glXCopyImageSubDataNV_debug((dpy), (srcCtx), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (dstCtx), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth), __FILE__, __LINE__)
void glatter_glXCopyImageSubDataNV_debug(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(GLX_NV_copy_image)
#if defined(GLX_NV_delay_before_swap)
#define glXDelayBeforeSwapNV(dpy, drawable, seconds) glatter_glXDelayBeforeSwapNV_debug((dpy), (drawable), (seconds), __FILE__, __LINE__)
Bool glatter_glXDelayBeforeSwapNV_debug(Display *dpy, GLXDrawable drawable, GLfloat seconds, const char* file, int line);
#endif // defined(GLX_NV_delay_before_swap)
#if defined(GLX_NV_present_video)
#define glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list) glatter_glXBindVideoDeviceNV_debug((dpy), (video_slot), (video_device), (attrib_list), __FILE__, __LINE__)
int glatter_glXBindVideoDeviceNV_debug(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list, const char* file, int line);
#endif // defined(GLX_NV_present_video)
#if defined(GLX_NV_swap_group)
#define glXBindSwapBarrierNV(dpy, group, barrier) glatter_glXBindSwapBarrierNV_debug((dpy), (group), (barrier), __FILE__, __LINE__)
Bool glatter_glXBindSwapBarrierNV_debug(Display *dpy, GLuint group, GLuint barrier, const char* file, int line);
#define glXJoinSwapGroupNV(dpy, drawable, group) glatter_glXJoinSwapGroupNV_debug((dpy), (drawable), (group), __FILE__, __LINE__)
Bool glatter_glXJoinSwapGroupNV_debug(Display *dpy, GLXDrawable drawable, GLuint group, const char* file, int line);
#define glXQueryFrameCountNV(dpy, screen, count) glatter_glXQueryFrameCountNV_debug((dpy), (screen), (count), __FILE__, __LINE__)
Bool glatter_glXQueryFrameCountNV_debug(Display *dpy, int screen, GLuint *count, const char* file, int line);
#define glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers) glatter_glXQueryMaxSwapGroupsNV_debug((dpy), (screen), (maxGroups), (maxBarriers), __FILE__, __LINE__)
Bool glatter_glXQueryMaxSwapGroupsNV_debug(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers, const char* file, int line);
#define glXQuerySwapGroupNV(dpy, drawable, group, barrier) glatter_glXQuerySwapGroupNV_debug((dpy), (drawable), (group), (barrier), __FILE__, __LINE__)
Bool glatter_glXQuerySwapGroupNV_debug(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier, const char* file, int line);
#define glXResetFrameCountNV(dpy, screen) glatter_glXResetFrameCountNV_debug((dpy), (screen), __FILE__, __LINE__)
Bool glatter_glXResetFrameCountNV_debug(Display *dpy, int screen, const char* file, int line);
#endif // defined(GLX_NV_swap_group)
#if defined(GLX_NV_video_capture)
#define glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device) glatter_glXBindVideoCaptureDeviceNV_debug((dpy), (video_capture_slot), (device), __FILE__, __LINE__)
int glatter_glXBindVideoCaptureDeviceNV_debug(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device, const char* file, int line);
#define glXLockVideoCaptureDeviceNV(dpy, device) glatter_glXLockVideoCaptureDeviceNV_debug((dpy), (device), __FILE__, __LINE__)
void glatter_glXLockVideoCaptureDeviceNV_debug(Display *dpy, GLXVideoCaptureDeviceNV device, const char* file, int line);
#define glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value) glatter_glXQueryVideoCaptureDeviceNV_debug((dpy), (device), (attribute), (value), __FILE__, __LINE__)
int glatter_glXQueryVideoCaptureDeviceNV_debug(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value, const char* file, int line);
#define glXReleaseVideoCaptureDeviceNV(dpy, device) glatter_glXReleaseVideoCaptureDeviceNV_debug((dpy), (device), __FILE__, __LINE__)
void glatter_glXReleaseVideoCaptureDeviceNV_debug(Display *dpy, GLXVideoCaptureDeviceNV device, const char* file, int line);
#endif // defined(GLX_NV_video_capture)
#if defined(GLX_NV_video_out)
#define glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer) glatter_glXBindVideoImageNV_debug((dpy), (VideoDevice), (pbuf), (iVideoBuffer), __FILE__, __LINE__)
int glatter_glXBindVideoImageNV_debug(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer, const char* file, int line);
#define glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice) glatter_glXGetVideoDeviceNV_debug((dpy), (screen), (numVideoDevices), (pVideoDevice), __FILE__, __LINE__)
int glatter_glXGetVideoDeviceNV_debug(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice, const char* file, int line);
#define glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) glatter_glXGetVideoInfoNV_debug((dpy), (screen), (VideoDevice), (pulCounterOutputPbuffer), (pulCounterOutputVideo), __FILE__, __LINE__)
int glatter_glXGetVideoInfoNV_debug(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo, const char* file, int line);
#define glXReleaseVideoDeviceNV(dpy, screen, VideoDevice) glatter_glXReleaseVideoDeviceNV_debug((dpy), (screen), (VideoDevice), __FILE__, __LINE__)
int glatter_glXReleaseVideoDeviceNV_debug(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, const char* file, int line);
#define glXReleaseVideoImageNV(dpy, pbuf) glatter_glXReleaseVideoImageNV_debug((dpy), (pbuf), __FILE__, __LINE__)
int glatter_glXReleaseVideoImageNV_debug(Display *dpy, GLXPbuffer pbuf, const char* file, int line);
#define glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock) glatter_glXSendPbufferToVideoNV_debug((dpy), (pbuf), (iBufferType), (pulCounterPbuffer), (bBlock), __FILE__, __LINE__)
int glatter_glXSendPbufferToVideoNV_debug(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock, const char* file, int line);
#endif // defined(GLX_NV_video_out)
#if defined(GLX_OML_sync_control)
#define glXGetMscRateOML(dpy, drawable, numerator, denominator) glatter_glXGetMscRateOML_debug((dpy), (drawable), (numerator), (denominator), __FILE__, __LINE__)
Bool glatter_glXGetMscRateOML_debug(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator, const char* file, int line);
#define glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc) glatter_glXGetSyncValuesOML_debug((dpy), (drawable), (ust), (msc), (sbc), __FILE__, __LINE__)
Bool glatter_glXGetSyncValuesOML_debug(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc, const char* file, int line);
#define glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder) glatter_glXSwapBuffersMscOML_debug((dpy), (drawable), (target_msc), (divisor), (remainder), __FILE__, __LINE__)
int64_t glatter_glXSwapBuffersMscOML_debug(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, const char* file, int line);
#define glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc) glatter_glXWaitForMscOML_debug((dpy), (drawable), (target_msc), (divisor), (remainder), (ust), (msc), (sbc), __FILE__, __LINE__)
Bool glatter_glXWaitForMscOML_debug(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc, const char* file, int line);
#define glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc) glatter_glXWaitForSbcOML_debug((dpy), (drawable), (target_sbc), (ust), (msc), (sbc), __FILE__, __LINE__)
Bool glatter_glXWaitForSbcOML_debug(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc, const char* file, int line);
#endif // defined(GLX_OML_sync_control)
#if defined(GLX_SGIX_dmbuffer)
#if defined(_DM_BUFFER_H_)
#define glXAssociateDMPbufferSGIX(dpy, pbuffer, params, dmbuffer) glatter_glXAssociateDMPbufferSGIX_debug((dpy), (pbuffer), (params), (dmbuffer), __FILE__, __LINE__)
Bool glatter_glXAssociateDMPbufferSGIX_debug(Display *dpy, GLXPbufferSGIX pbuffer, DMparams *params, DMbuffer dmbuffer, const char* file, int line);
#endif // defined(_DM_BUFFER_H_)
#endif // defined(GLX_SGIX_dmbuffer)
#if defined(GLX_SGIX_fbconfig)
#define glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct) glatter_glXCreateContextWithConfigSGIX_debug((dpy), (config), (render_type), (share_list), (direct), __FILE__, __LINE__)
GLXContext glatter_glXCreateContextWithConfigSGIX_debug(Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct, const char* file, int line);
#define glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap) glatter_glXCreateGLXPixmapWithConfigSGIX_debug((dpy), (config), (pixmap), __FILE__, __LINE__)
GLXPixmap glatter_glXCreateGLXPixmapWithConfigSGIX_debug(Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap, const char* file, int line);
#define glXGetFBConfigAttribSGIX(dpy, config, attribute, value) glatter_glXGetFBConfigAttribSGIX_debug((dpy), (config), (attribute), (value), __FILE__, __LINE__)
int glatter_glXGetFBConfigAttribSGIX_debug(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value, const char* file, int line);
#define glXGetFBConfigFromVisualSGIX(dpy, vis) glatter_glXGetFBConfigFromVisualSGIX_debug((dpy), (vis), __FILE__, __LINE__)
GLXFBConfigSGIX glatter_glXGetFBConfigFromVisualSGIX_debug(Display *dpy, XVisualInfo *vis, const char* file, int line);
#endif // defined(GLX_SGIX_fbconfig)
#if defined(GLX_SGIX_hyperpipe)
#define glXBindHyperpipeSGIX(dpy, hpId) glatter_glXBindHyperpipeSGIX_debug((dpy), (hpId), __FILE__, __LINE__)
int glatter_glXBindHyperpipeSGIX_debug(Display *dpy, int hpId, const char* file, int line);
#define glXDestroyHyperpipeConfigSGIX(dpy, hpId) glatter_glXDestroyHyperpipeConfigSGIX_debug((dpy), (hpId), __FILE__, __LINE__)
int glatter_glXDestroyHyperpipeConfigSGIX_debug(Display *dpy, int hpId, const char* file, int line);
#define glXHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList) glatter_glXHyperpipeAttribSGIX_debug((dpy), (timeSlice), (attrib), (size), (attribList), __FILE__, __LINE__)
int glatter_glXHyperpipeAttribSGIX_debug(Display *dpy, int timeSlice, int attrib, int size, void *attribList, const char* file, int line);
#define glXHyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId) glatter_glXHyperpipeConfigSGIX_debug((dpy), (networkId), (npipes), (cfg), (hpId), __FILE__, __LINE__)
int glatter_glXHyperpipeConfigSGIX_debug(Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId, const char* file, int line);
#define glXQueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList) glatter_glXQueryHyperpipeAttribSGIX_debug((dpy), (timeSlice), (attrib), (size), (returnAttribList), __FILE__, __LINE__)
int glatter_glXQueryHyperpipeAttribSGIX_debug(Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList, const char* file, int line);
#define glXQueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList) glatter_glXQueryHyperpipeBestAttribSGIX_debug((dpy), (timeSlice), (attrib), (size), (attribList), (returnAttribList), __FILE__, __LINE__)
int glatter_glXQueryHyperpipeBestAttribSGIX_debug(Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList, const char* file, int line);
#endif // defined(GLX_SGIX_hyperpipe)
#if defined(GLX_SGIX_pbuffer)
#define glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list) glatter_glXCreateGLXPbufferSGIX_debug((dpy), (config), (width), (height), (attrib_list), __FILE__, __LINE__)
GLXPbufferSGIX glatter_glXCreateGLXPbufferSGIX_debug(Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list, const char* file, int line);
#define glXDestroyGLXPbufferSGIX(dpy, pbuf) glatter_glXDestroyGLXPbufferSGIX_debug((dpy), (pbuf), __FILE__, __LINE__)
void glatter_glXDestroyGLXPbufferSGIX_debug(Display *dpy, GLXPbufferSGIX pbuf, const char* file, int line);
#define glXGetSelectedEventSGIX(dpy, drawable, mask) glatter_glXGetSelectedEventSGIX_debug((dpy), (drawable), (mask), __FILE__, __LINE__)
void glatter_glXGetSelectedEventSGIX_debug(Display *dpy, GLXDrawable drawable, unsigned long *mask, const char* file, int line);
#define glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value) glatter_glXQueryGLXPbufferSGIX_debug((dpy), (pbuf), (attribute), (value), __FILE__, __LINE__)
int glatter_glXQueryGLXPbufferSGIX_debug(Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value, const char* file, int line);
#define glXSelectEventSGIX(dpy, drawable, mask) glatter_glXSelectEventSGIX_debug((dpy), (drawable), (mask), __FILE__, __LINE__)
void glatter_glXSelectEventSGIX_debug(Display *dpy, GLXDrawable drawable, unsigned long mask, const char* file, int line);
#endif // defined(GLX_SGIX_pbuffer)
#if defined(GLX_SGIX_swap_barrier)
#define glXBindSwapBarrierSGIX(dpy, drawable, barrier) glatter_glXBindSwapBarrierSGIX_debug((dpy), (drawable), (barrier), __FILE__, __LINE__)
void glatter_glXBindSwapBarrierSGIX_debug(Display *dpy, GLXDrawable drawable, int barrier, const char* file, int line);
#define glXQueryMaxSwapBarriersSGIX(dpy, screen, max) glatter_glXQueryMaxSwapBarriersSGIX_debug((dpy), (screen), (max), __FILE__, __LINE__)
Bool glatter_glXQueryMaxSwapBarriersSGIX_debug(Display *dpy, int screen, int *max, const char* file, int line);
#endif // defined(GLX_SGIX_swap_barrier)
#if defined(GLX_SGIX_swap_group)
#define glXJoinSwapGroupSGIX(dpy, drawable, member) glatter_glXJoinSwapGroupSGIX_debug((dpy), (drawable), (member), __FILE__, __LINE__)
void glatter_glXJoinSwapGroupSGIX_debug(Display *dpy, GLXDrawable drawable, GLXDrawable member, const char* file, int line);
#endif // defined(GLX_SGIX_swap_group)
#if defined(GLX_SGIX_video_resize)
#define glXBindChannelToWindowSGIX(display, screen, channel, window) glatter_glXBindChannelToWindowSGIX_debug((display), (screen), (channel), (window), __FILE__, __LINE__)
int glatter_glXBindChannelToWindowSGIX_debug(Display *display, int screen, int channel, Window window, const char* file, int line);
#define glXChannelRectSGIX(display, screen, channel, x, y, w, h) glatter_glXChannelRectSGIX_debug((display), (screen), (channel), (x), (y), (w), (h), __FILE__, __LINE__)
int glatter_glXChannelRectSGIX_debug(Display *display, int screen, int channel, int x, int y, int w, int h, const char* file, int line);
#define glXChannelRectSyncSGIX(display, screen, channel, synctype) glatter_glXChannelRectSyncSGIX_debug((display), (screen), (channel), (synctype), __FILE__, __LINE__)
int glatter_glXChannelRectSyncSGIX_debug(Display *display, int screen, int channel, GLenum synctype, const char* file, int line);
#define glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h) glatter_glXQueryChannelDeltasSGIX_debug((display), (screen), (channel), (x), (y), (w), (h), __FILE__, __LINE__)
int glatter_glXQueryChannelDeltasSGIX_debug(Display *display, int screen, int channel, int *x, int *y, int *w, int *h, const char* file, int line);
#define glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh) glatter_glXQueryChannelRectSGIX_debug((display), (screen), (channel), (dx), (dy), (dw), (dh), __FILE__, __LINE__)
int glatter_glXQueryChannelRectSGIX_debug(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh, const char* file, int line);
#endif // defined(GLX_SGIX_video_resize)
#if defined(GLX_SGIX_video_source)
#if defined(_VL_H)
#define glXCreateGLXVideoSourceSGIX(display, screen, server, path, nodeClass, drainNode) glatter_glXCreateGLXVideoSourceSGIX_debug((display), (screen), (server), (path), (nodeClass), (drainNode), __FILE__, __LINE__)
GLXVideoSourceSGIX glatter_glXCreateGLXVideoSourceSGIX_debug(Display *display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode, const char* file, int line);
#define glXDestroyGLXVideoSourceSGIX(dpy, glxvideosource) glatter_glXDestroyGLXVideoSourceSGIX_debug((dpy), (glxvideosource), __FILE__, __LINE__)
void glatter_glXDestroyGLXVideoSourceSGIX_debug(Display *dpy, GLXVideoSourceSGIX glxvideosource, const char* file, int line);
#endif // defined(_VL_H)
#endif // defined(GLX_SGIX_video_source)
#if defined(GLX_SGI_cushion)
#define glXCushionSGI(dpy, window, cushion) glatter_glXCushionSGI_debug((dpy), (window), (cushion), __FILE__, __LINE__)
void glatter_glXCushionSGI_debug(Display *dpy, Window window, float cushion, const char* file, int line);
#endif // defined(GLX_SGI_cushion)
#if defined(GLX_SGI_make_current_read)
#define glXGetCurrentReadDrawableSGI() glatter_glXGetCurrentReadDrawableSGI_debug(__FILE__, __LINE__)
GLXDrawable glatter_glXGetCurrentReadDrawableSGI_debug(const char* file, int line);
#define glXMakeCurrentReadSGI(dpy, draw, read, ctx) glatter_glXMakeCurrentReadSGI_debug((dpy), (draw), (read), (ctx), __FILE__, __LINE__)
Bool glatter_glXMakeCurrentReadSGI_debug(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx, const char* file, int line);
#endif // defined(GLX_SGI_make_current_read)
#if defined(GLX_SGI_swap_control)
#define glXSwapIntervalSGI(interval) glatter_glXSwapIntervalSGI_debug((interval), __FILE__, __LINE__)
int glatter_glXSwapIntervalSGI_debug(int interval, const char* file, int line);
#endif // defined(GLX_SGI_swap_control)
#if defined(GLX_SGI_video_sync)
#define glXGetVideoSyncSGI(count) glatter_glXGetVideoSyncSGI_debug((count), __FILE__, __LINE__)
int glatter_glXGetVideoSyncSGI_debug(unsigned int *count, const char* file, int line);
#define glXWaitVideoSyncSGI(divisor, remainder, count) glatter_glXWaitVideoSyncSGI_debug((divisor), (remainder), (count), __FILE__, __LINE__)
int glatter_glXWaitVideoSyncSGI_debug(int divisor, int remainder, unsigned int *count, const char* file, int line);
#endif // defined(GLX_SGI_video_sync)
#if defined(GLX_SUN_get_transparent_index)
#define glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex) glatter_glXGetTransparentIndexSUN_debug((dpy), (overlay), (underlay), (pTransparentIndex), __FILE__, __LINE__)
Status glatter_glXGetTransparentIndexSUN_debug(Display *dpy, Window overlay, Window underlay, long *pTransparentIndex, const char* file, int line);
#endif // defined(GLX_SUN_get_transparent_index)
#if defined(GLX_VERSION_1_3)
#define glXCreateNewContext(dpy, config, render_type, share_list, direct) glatter_glXCreateNewContext_debug((dpy), (config), (render_type), (share_list), (direct), __FILE__, __LINE__)
GLXContext glatter_glXCreateNewContext_debug(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct, const char* file, int line);
#define glXCreatePbuffer(dpy, config, attrib_list) glatter_glXCreatePbuffer_debug((dpy), (config), (attrib_list), __FILE__, __LINE__)
GLXPbuffer glatter_glXCreatePbuffer_debug(Display *dpy, GLXFBConfig config, const int *attrib_list, const char* file, int line);
#define glXCreatePixmap(dpy, config, pixmap, attrib_list) glatter_glXCreatePixmap_debug((dpy), (config), (pixmap), (attrib_list), __FILE__, __LINE__)
GLXPixmap glatter_glXCreatePixmap_debug(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list, const char* file, int line);
#define glXCreateWindow(dpy, config, win, attrib_list) glatter_glXCreateWindow_debug((dpy), (config), (win), (attrib_list), __FILE__, __LINE__)
GLXWindow glatter_glXCreateWindow_debug(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list, const char* file, int line);
#define glXDestroyPbuffer(dpy, pbuf) glatter_glXDestroyPbuffer_debug((dpy), (pbuf), __FILE__, __LINE__)
void glatter_glXDestroyPbuffer_debug(Display *dpy, GLXPbuffer pbuf, const char* file, int line);
#define glXDestroyPixmap(dpy, pixmap) glatter_glXDestroyPixmap_debug((dpy), (pixmap), __FILE__, __LINE__)
void glatter_glXDestroyPixmap_debug(Display *dpy, GLXPixmap pixmap, const char* file, int line);
#define glXDestroyWindow(dpy, win) glatter_glXDestroyWindow_debug((dpy), (win), __FILE__, __LINE__)
void glatter_glXDestroyWindow_debug(Display *dpy, GLXWindow win, const char* file, int line);
#define glXGetCurrentReadDrawable() glatter_glXGetCurrentReadDrawable_debug(__FILE__, __LINE__)
GLXDrawable glatter_glXGetCurrentReadDrawable_debug(const char* file, int line);
#define glXGetFBConfigAttrib(dpy, config, attribute, value) glatter_glXGetFBConfigAttrib_debug((dpy), (config), (attribute), (value), __FILE__, __LINE__)
int glatter_glXGetFBConfigAttrib_debug(Display *dpy, GLXFBConfig config, int attribute, int *value, const char* file, int line);
#define glXGetSelectedEvent(dpy, draw, event_mask) glatter_glXGetSelectedEvent_debug((dpy), (draw), (event_mask), __FILE__, __LINE__)
void glatter_glXGetSelectedEvent_debug(Display *dpy, GLXDrawable draw, unsigned long *event_mask, const char* file, int line);
#define glXMakeContextCurrent(dpy, draw, read, ctx) glatter_glXMakeContextCurrent_debug((dpy), (draw), (read), (ctx), __FILE__, __LINE__)
Bool glatter_glXMakeContextCurrent_debug(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx, const char* file, int line);
#define glXQueryContext(dpy, ctx, attribute, value) glatter_glXQueryContext_debug((dpy), (ctx), (attribute), (value), __FILE__, __LINE__)
int glatter_glXQueryContext_debug(Display *dpy, GLXContext ctx, int attribute, int *value, const char* file, int line);
#define glXQueryDrawable(dpy, draw, attribute, value) glatter_glXQueryDrawable_debug((dpy), (draw), (attribute), (value), __FILE__, __LINE__)
void glatter_glXQueryDrawable_debug(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value, const char* file, int line);
#define glXSelectEvent(dpy, draw, event_mask) glatter_glXSelectEvent_debug((dpy), (draw), (event_mask), __FILE__, __LINE__)
void glatter_glXSelectEvent_debug(Display *dpy, GLXDrawable draw, unsigned long event_mask, const char* file, int line);
#endif // defined(GLX_VERSION_1_3)
#if defined(GLX_VERSION_1_4)
#define glXGetProcAddress(procName) glatter_glXGetProcAddress_debug((procName), __FILE__, __LINE__)
__GLXextFuncPtr glatter_glXGetProcAddress_debug(const GLubyte *procName, const char* file, int line);
#endif // defined(__glxext_h_)
#endif // defined(GLX_VERSION_1_4)
#endif // GLATTER_GLX

#endif // NDEBUG


#ifdef NDEBUG

#ifdef GLATTER_WGL
#if defined(__wglext_h_)
#if defined(WGL_3DL_stereo_control)
#define wglSetStereoEmitterState3DL(hDC, uState) glatter_wglSetStereoEmitterState3DL_ptr((hDC), (uState))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetStereoEmitterState3DL, (HDC hDC, UINT uState))
#endif // defined(WGL_3DL_stereo_control)
#if defined(WGL_AMD_gpu_association)
#define wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_wglBlitContextFramebufferAMD_ptr((dstCtx), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter))
GLATTER_UBLOCK(VOID, WINAPI, wglBlitContextFramebufferAMD, (HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter))
#define wglCreateAssociatedContextAMD(id) glatter_wglCreateAssociatedContextAMD_ptr((id))
GLATTER_UBLOCK(HGLRC, WINAPI, wglCreateAssociatedContextAMD, (UINT id))
#define wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList) glatter_wglCreateAssociatedContextAttribsAMD_ptr((id), (hShareContext), (attribList))
GLATTER_UBLOCK(HGLRC, WINAPI, wglCreateAssociatedContextAttribsAMD, (UINT id, HGLRC hShareContext, const int *attribList))
#define wglDeleteAssociatedContextAMD(hglrc) glatter_wglDeleteAssociatedContextAMD_ptr((hglrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglDeleteAssociatedContextAMD, (HGLRC hglrc))
#define wglGetContextGPUIDAMD(hglrc) glatter_wglGetContextGPUIDAMD_ptr((hglrc))
GLATTER_UBLOCK(UINT, WINAPI, wglGetContextGPUIDAMD, (HGLRC hglrc))
#define wglGetCurrentAssociatedContextAMD() glatter_wglGetCurrentAssociatedContextAMD_ptr()
GLATTER_UBLOCK(HGLRC, WINAPI, wglGetCurrentAssociatedContextAMD, (void))
#define wglGetGPUIDsAMD(maxCount, ids) glatter_wglGetGPUIDsAMD_ptr((maxCount), (ids))
GLATTER_UBLOCK(UINT, WINAPI, wglGetGPUIDsAMD, (UINT maxCount, UINT *ids))
#define wglGetGPUInfoAMD(id, property, dataType, size, data) glatter_wglGetGPUInfoAMD_ptr((id), (property), (dataType), (size), (data))
GLATTER_UBLOCK(INT, WINAPI, wglGetGPUInfoAMD, (UINT id, int property, GLenum dataType, UINT size, void *data))
#define wglMakeAssociatedContextCurrentAMD(hglrc) glatter_wglMakeAssociatedContextCurrentAMD_ptr((hglrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglMakeAssociatedContextCurrentAMD, (HGLRC hglrc))
#endif // defined(WGL_AMD_gpu_association)
#if defined(WGL_ARB_buffer_region)
#define wglCreateBufferRegionARB(hDC, iLayerPlane, uType) glatter_wglCreateBufferRegionARB_ptr((hDC), (iLayerPlane), (uType))
GLATTER_UBLOCK(HANDLE, WINAPI, wglCreateBufferRegionARB, (HDC hDC, int iLayerPlane, UINT uType))
#define wglDeleteBufferRegionARB(hRegion) glatter_wglDeleteBufferRegionARB_ptr((hRegion))
GLATTER_UBLOCK(VOID, WINAPI, wglDeleteBufferRegionARB, (HANDLE hRegion))
#define wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc) glatter_wglRestoreBufferRegionARB_ptr((hRegion), (x), (y), (width), (height), (xSrc), (ySrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglRestoreBufferRegionARB, (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc))
#define wglSaveBufferRegionARB(hRegion, x, y, width, height) glatter_wglSaveBufferRegionARB_ptr((hRegion), (x), (y), (width), (height))
GLATTER_UBLOCK(BOOL, WINAPI, wglSaveBufferRegionARB, (HANDLE hRegion, int x, int y, int width, int height))
#endif // defined(WGL_ARB_buffer_region)
#if defined(WGL_ARB_create_context)
#define wglCreateContextAttribsARB(hDC, hShareContext, attribList) glatter_wglCreateContextAttribsARB_ptr((hDC), (hShareContext), (attribList))
GLATTER_UBLOCK(HGLRC, WINAPI, wglCreateContextAttribsARB, (HDC hDC, HGLRC hShareContext, const int *attribList))
#endif // defined(WGL_ARB_create_context)
#if defined(WGL_ARB_extensions_string)
#define wglGetExtensionsStringARB(hdc) glatter_wglGetExtensionsStringARB_ptr((hdc))
GLATTER_UBLOCK(const char *, WINAPI, wglGetExtensionsStringARB, (HDC hdc))
#endif // defined(WGL_ARB_extensions_string)
#if defined(WGL_ARB_make_current_read)
#define wglGetCurrentReadDCARB() glatter_wglGetCurrentReadDCARB_ptr()
GLATTER_UBLOCK(HDC, WINAPI, wglGetCurrentReadDCARB, (void))
#define wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc) glatter_wglMakeContextCurrentARB_ptr((hDrawDC), (hReadDC), (hglrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglMakeContextCurrentARB, (HDC hDrawDC, HDC hReadDC, HGLRC hglrc))
#endif // defined(WGL_ARB_make_current_read)
#if defined(WGL_ARB_pbuffer)
#define wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList) glatter_wglCreatePbufferARB_ptr((hDC), (iPixelFormat), (iWidth), (iHeight), (piAttribList))
GLATTER_UBLOCK(HPBUFFERARB, WINAPI, wglCreatePbufferARB, (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList))
#define wglDestroyPbufferARB(hPbuffer) glatter_wglDestroyPbufferARB_ptr((hPbuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglDestroyPbufferARB, (HPBUFFERARB hPbuffer))
#define wglGetPbufferDCARB(hPbuffer) glatter_wglGetPbufferDCARB_ptr((hPbuffer))
GLATTER_UBLOCK(HDC, WINAPI, wglGetPbufferDCARB, (HPBUFFERARB hPbuffer))
#define wglQueryPbufferARB(hPbuffer, iAttribute, piValue) glatter_wglQueryPbufferARB_ptr((hPbuffer), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryPbufferARB, (HPBUFFERARB hPbuffer, int iAttribute, int *piValue))
#define wglReleasePbufferDCARB(hPbuffer, hDC) glatter_wglReleasePbufferDCARB_ptr((hPbuffer), (hDC))
GLATTER_UBLOCK(int, WINAPI, wglReleasePbufferDCARB, (HPBUFFERARB hPbuffer, HDC hDC))
#endif // defined(WGL_ARB_pbuffer)
#if defined(WGL_ARB_pixel_format)
#define wglChoosePixelFormatARB(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats) glatter_wglChoosePixelFormatARB_ptr((hdc), (piAttribIList), (pfAttribFList), (nMaxFormats), (piFormats), (nNumFormats))
GLATTER_UBLOCK(BOOL, WINAPI, wglChoosePixelFormatARB, (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats))
#define wglGetPixelFormatAttribfvARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues) glatter_wglGetPixelFormatAttribfvARB_ptr((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (pfValues))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetPixelFormatAttribfvARB, (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues))
#define wglGetPixelFormatAttribivARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues) glatter_wglGetPixelFormatAttribivARB_ptr((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (piValues))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetPixelFormatAttribivARB, (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues))
#endif // defined(WGL_ARB_pixel_format)
#if defined(WGL_ARB_render_texture)
#define wglBindTexImageARB(hPbuffer, iBuffer) glatter_wglBindTexImageARB_ptr((hPbuffer), (iBuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindTexImageARB, (HPBUFFERARB hPbuffer, int iBuffer))
#define wglReleaseTexImageARB(hPbuffer, iBuffer) glatter_wglReleaseTexImageARB_ptr((hPbuffer), (iBuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseTexImageARB, (HPBUFFERARB hPbuffer, int iBuffer))
#define wglSetPbufferAttribARB(hPbuffer, piAttribList) glatter_wglSetPbufferAttribARB_ptr((hPbuffer), (piAttribList))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetPbufferAttribARB, (HPBUFFERARB hPbuffer, const int *piAttribList))
#endif // defined(WGL_ARB_render_texture)
#if defined(WGL_EXT_display_color_table)
#define wglBindDisplayColorTableEXT(id) glatter_wglBindDisplayColorTableEXT_ptr((id))
GLATTER_UBLOCK(GLboolean, WINAPI, wglBindDisplayColorTableEXT, (GLushort id))
#define wglCreateDisplayColorTableEXT(id) glatter_wglCreateDisplayColorTableEXT_ptr((id))
GLATTER_UBLOCK(GLboolean, WINAPI, wglCreateDisplayColorTableEXT, (GLushort id))
#define wglDestroyDisplayColorTableEXT(id) glatter_wglDestroyDisplayColorTableEXT_ptr((id))
GLATTER_UBLOCK(VOID, WINAPI, wglDestroyDisplayColorTableEXT, (GLushort id))
#define wglLoadDisplayColorTableEXT(table, length) glatter_wglLoadDisplayColorTableEXT_ptr((table), (length))
GLATTER_UBLOCK(GLboolean, WINAPI, wglLoadDisplayColorTableEXT, (const GLushort *table, GLuint length))
#endif // defined(WGL_EXT_display_color_table)
#if defined(WGL_EXT_extensions_string)
#define wglGetExtensionsStringEXT() glatter_wglGetExtensionsStringEXT_ptr()
GLATTER_UBLOCK(const char *, WINAPI, wglGetExtensionsStringEXT, (void))
#endif // defined(WGL_EXT_extensions_string)
#if defined(WGL_EXT_make_current_read)
#define wglGetCurrentReadDCEXT() glatter_wglGetCurrentReadDCEXT_ptr()
GLATTER_UBLOCK(HDC, WINAPI, wglGetCurrentReadDCEXT, (void))
#define wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc) glatter_wglMakeContextCurrentEXT_ptr((hDrawDC), (hReadDC), (hglrc))
GLATTER_UBLOCK(BOOL, WINAPI, wglMakeContextCurrentEXT, (HDC hDrawDC, HDC hReadDC, HGLRC hglrc))
#endif // defined(WGL_EXT_make_current_read)
#if defined(WGL_EXT_pbuffer)
#define wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList) glatter_wglCreatePbufferEXT_ptr((hDC), (iPixelFormat), (iWidth), (iHeight), (piAttribList))
GLATTER_UBLOCK(HPBUFFEREXT, WINAPI, wglCreatePbufferEXT, (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList))
#define wglDestroyPbufferEXT(hPbuffer) glatter_wglDestroyPbufferEXT_ptr((hPbuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglDestroyPbufferEXT, (HPBUFFEREXT hPbuffer))
#define wglGetPbufferDCEXT(hPbuffer) glatter_wglGetPbufferDCEXT_ptr((hPbuffer))
GLATTER_UBLOCK(HDC, WINAPI, wglGetPbufferDCEXT, (HPBUFFEREXT hPbuffer))
#define wglQueryPbufferEXT(hPbuffer, iAttribute, piValue) glatter_wglQueryPbufferEXT_ptr((hPbuffer), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryPbufferEXT, (HPBUFFEREXT hPbuffer, int iAttribute, int *piValue))
#define wglReleasePbufferDCEXT(hPbuffer, hDC) glatter_wglReleasePbufferDCEXT_ptr((hPbuffer), (hDC))
GLATTER_UBLOCK(int, WINAPI, wglReleasePbufferDCEXT, (HPBUFFEREXT hPbuffer, HDC hDC))
#endif // defined(WGL_EXT_pbuffer)
#if defined(WGL_EXT_pixel_format)
#define wglChoosePixelFormatEXT(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats) glatter_wglChoosePixelFormatEXT_ptr((hdc), (piAttribIList), (pfAttribFList), (nMaxFormats), (piFormats), (nNumFormats))
GLATTER_UBLOCK(BOOL, WINAPI, wglChoosePixelFormatEXT, (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats))
#define wglGetPixelFormatAttribfvEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues) glatter_wglGetPixelFormatAttribfvEXT_ptr((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (pfValues))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetPixelFormatAttribfvEXT, (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues))
#define wglGetPixelFormatAttribivEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues) glatter_wglGetPixelFormatAttribivEXT_ptr((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (piValues))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetPixelFormatAttribivEXT, (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues))
#endif // defined(WGL_EXT_pixel_format)
#if defined(WGL_EXT_swap_control)
#define wglGetSwapIntervalEXT() glatter_wglGetSwapIntervalEXT_ptr()
GLATTER_UBLOCK(int, WINAPI, wglGetSwapIntervalEXT, (void))
#define wglSwapIntervalEXT(interval) glatter_wglSwapIntervalEXT_ptr((interval))
GLATTER_UBLOCK(BOOL, WINAPI, wglSwapIntervalEXT, (int interval))
#endif // defined(WGL_EXT_swap_control)
#if defined(WGL_I3D_digital_video_control)
#define wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue) glatter_wglGetDigitalVideoParametersI3D_ptr((hDC), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetDigitalVideoParametersI3D, (HDC hDC, int iAttribute, int *piValue))
#define wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue) glatter_wglSetDigitalVideoParametersI3D_ptr((hDC), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetDigitalVideoParametersI3D, (HDC hDC, int iAttribute, const int *piValue))
#endif // defined(WGL_I3D_digital_video_control)
#if defined(WGL_I3D_gamma)
#define wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue) glatter_wglGetGammaTableI3D_ptr((hDC), (iEntries), (puRed), (puGreen), (puBlue))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGammaTableI3D, (HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue))
#define wglGetGammaTableParametersI3D(hDC, iAttribute, piValue) glatter_wglGetGammaTableParametersI3D_ptr((hDC), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGammaTableParametersI3D, (HDC hDC, int iAttribute, int *piValue))
#define wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue) glatter_wglSetGammaTableI3D_ptr((hDC), (iEntries), (puRed), (puGreen), (puBlue))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetGammaTableI3D, (HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue))
#define wglSetGammaTableParametersI3D(hDC, iAttribute, piValue) glatter_wglSetGammaTableParametersI3D_ptr((hDC), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglSetGammaTableParametersI3D, (HDC hDC, int iAttribute, const int *piValue))
#endif // defined(WGL_I3D_gamma)
#if defined(WGL_I3D_genlock)
#define wglDisableGenlockI3D(hDC) glatter_wglDisableGenlockI3D_ptr((hDC))
GLATTER_UBLOCK(BOOL, WINAPI, wglDisableGenlockI3D, (HDC hDC))
#define wglEnableGenlockI3D(hDC) glatter_wglEnableGenlockI3D_ptr((hDC))
GLATTER_UBLOCK(BOOL, WINAPI, wglEnableGenlockI3D, (HDC hDC))
#define wglGenlockSampleRateI3D(hDC, uRate) glatter_wglGenlockSampleRateI3D_ptr((hDC), (uRate))
GLATTER_UBLOCK(BOOL, WINAPI, wglGenlockSampleRateI3D, (HDC hDC, UINT uRate))
#define wglGenlockSourceDelayI3D(hDC, uDelay) glatter_wglGenlockSourceDelayI3D_ptr((hDC), (uDelay))
GLATTER_UBLOCK(BOOL, WINAPI, wglGenlockSourceDelayI3D, (HDC hDC, UINT uDelay))
#define wglGenlockSourceEdgeI3D(hDC, uEdge) glatter_wglGenlockSourceEdgeI3D_ptr((hDC), (uEdge))
GLATTER_UBLOCK(BOOL, WINAPI, wglGenlockSourceEdgeI3D, (HDC hDC, UINT uEdge))
#define wglGenlockSourceI3D(hDC, uSource) glatter_wglGenlockSourceI3D_ptr((hDC), (uSource))
GLATTER_UBLOCK(BOOL, WINAPI, wglGenlockSourceI3D, (HDC hDC, UINT uSource))
#define wglGetGenlockSampleRateI3D(hDC, uRate) glatter_wglGetGenlockSampleRateI3D_ptr((hDC), (uRate))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGenlockSampleRateI3D, (HDC hDC, UINT *uRate))
#define wglGetGenlockSourceDelayI3D(hDC, uDelay) glatter_wglGetGenlockSourceDelayI3D_ptr((hDC), (uDelay))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGenlockSourceDelayI3D, (HDC hDC, UINT *uDelay))
#define wglGetGenlockSourceEdgeI3D(hDC, uEdge) glatter_wglGetGenlockSourceEdgeI3D_ptr((hDC), (uEdge))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGenlockSourceEdgeI3D, (HDC hDC, UINT *uEdge))
#define wglGetGenlockSourceI3D(hDC, uSource) glatter_wglGetGenlockSourceI3D_ptr((hDC), (uSource))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetGenlockSourceI3D, (HDC hDC, UINT *uSource))
#define wglIsEnabledGenlockI3D(hDC, pFlag) glatter_wglIsEnabledGenlockI3D_ptr((hDC), (pFlag))
GLATTER_UBLOCK(BOOL, WINAPI, wglIsEnabledGenlockI3D, (HDC hDC, BOOL *pFlag))
#define wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay) glatter_wglQueryGenlockMaxSourceDelayI3D_ptr((hDC), (uMaxLineDelay), (uMaxPixelDelay))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryGenlockMaxSourceDelayI3D, (HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay))
#endif // defined(WGL_I3D_genlock)
#if defined(WGL_I3D_image_buffer)
#define wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count) glatter_wglAssociateImageBufferEventsI3D_ptr((hDC), (pEvent), (pAddress), (pSize), (count))
GLATTER_UBLOCK(BOOL, WINAPI, wglAssociateImageBufferEventsI3D, (HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count))
#define wglCreateImageBufferI3D(hDC, dwSize, uFlags) glatter_wglCreateImageBufferI3D_ptr((hDC), (dwSize), (uFlags))
GLATTER_UBLOCK(LPVOID, WINAPI, wglCreateImageBufferI3D, (HDC hDC, DWORD dwSize, UINT uFlags))
#define wglDestroyImageBufferI3D(hDC, pAddress) glatter_wglDestroyImageBufferI3D_ptr((hDC), (pAddress))
GLATTER_UBLOCK(BOOL, WINAPI, wglDestroyImageBufferI3D, (HDC hDC, LPVOID pAddress))
#define wglReleaseImageBufferEventsI3D(hDC, pAddress, count) glatter_wglReleaseImageBufferEventsI3D_ptr((hDC), (pAddress), (count))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseImageBufferEventsI3D, (HDC hDC, const LPVOID *pAddress, UINT count))
#endif // defined(WGL_I3D_image_buffer)
#if defined(WGL_I3D_swap_frame_lock)
#define wglDisableFrameLockI3D() glatter_wglDisableFrameLockI3D_ptr()
GLATTER_UBLOCK(BOOL, WINAPI, wglDisableFrameLockI3D, (void))
#define wglEnableFrameLockI3D() glatter_wglEnableFrameLockI3D_ptr()
GLATTER_UBLOCK(BOOL, WINAPI, wglEnableFrameLockI3D, (void))
#define wglIsEnabledFrameLockI3D(pFlag) glatter_wglIsEnabledFrameLockI3D_ptr((pFlag))
GLATTER_UBLOCK(BOOL, WINAPI, wglIsEnabledFrameLockI3D, (BOOL *pFlag))
#define wglQueryFrameLockMasterI3D(pFlag) glatter_wglQueryFrameLockMasterI3D_ptr((pFlag))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryFrameLockMasterI3D, (BOOL *pFlag))
#endif // defined(WGL_I3D_swap_frame_lock)
#if defined(WGL_I3D_swap_frame_usage)
#define wglBeginFrameTrackingI3D() glatter_wglBeginFrameTrackingI3D_ptr()
GLATTER_UBLOCK(BOOL, WINAPI, wglBeginFrameTrackingI3D, (void))
#define wglEndFrameTrackingI3D() glatter_wglEndFrameTrackingI3D_ptr()
GLATTER_UBLOCK(BOOL, WINAPI, wglEndFrameTrackingI3D, (void))
#define wglGetFrameUsageI3D(pUsage) glatter_wglGetFrameUsageI3D_ptr((pUsage))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetFrameUsageI3D, (float *pUsage))
#define wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage) glatter_wglQueryFrameTrackingI3D_ptr((pFrameCount), (pMissedFrames), (pLastMissedUsage))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryFrameTrackingI3D, (DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage))
#endif // defined(WGL_I3D_swap_frame_usage)
#if defined(WGL_NV_DX_interop)
#define wglDXCloseDeviceNV(hDevice) glatter_wglDXCloseDeviceNV_ptr((hDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXCloseDeviceNV, (HANDLE hDevice))
#define wglDXLockObjectsNV(hDevice, count, hObjects) glatter_wglDXLockObjectsNV_ptr((hDevice), (count), (hObjects))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXLockObjectsNV, (HANDLE hDevice, GLint count, HANDLE *hObjects))
#define wglDXObjectAccessNV(hObject, access) glatter_wglDXObjectAccessNV_ptr((hObject), (access))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXObjectAccessNV, (HANDLE hObject, GLenum access))
#define wglDXOpenDeviceNV(dxDevice) glatter_wglDXOpenDeviceNV_ptr((dxDevice))
GLATTER_UBLOCK(HANDLE, WINAPI, wglDXOpenDeviceNV, (void *dxDevice))
#define wglDXRegisterObjectNV(hDevice, dxObject, name, type, access) glatter_wglDXRegisterObjectNV_ptr((hDevice), (dxObject), (name), (type), (access))
GLATTER_UBLOCK(HANDLE, WINAPI, wglDXRegisterObjectNV, (HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access))
#define wglDXSetResourceShareHandleNV(dxObject, shareHandle) glatter_wglDXSetResourceShareHandleNV_ptr((dxObject), (shareHandle))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXSetResourceShareHandleNV, (void *dxObject, HANDLE shareHandle))
#define wglDXUnlockObjectsNV(hDevice, count, hObjects) glatter_wglDXUnlockObjectsNV_ptr((hDevice), (count), (hObjects))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXUnlockObjectsNV, (HANDLE hDevice, GLint count, HANDLE *hObjects))
#define wglDXUnregisterObjectNV(hDevice, hObject) glatter_wglDXUnregisterObjectNV_ptr((hDevice), (hObject))
GLATTER_UBLOCK(BOOL, WINAPI, wglDXUnregisterObjectNV, (HANDLE hDevice, HANDLE hObject))
#endif // defined(WGL_NV_DX_interop)
#if defined(WGL_NV_copy_image)
#define wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_wglCopyImageSubDataNV_ptr((hSrcRC), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (hDstRC), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth))
GLATTER_UBLOCK(BOOL, WINAPI, wglCopyImageSubDataNV, (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth))
#endif // defined(WGL_NV_copy_image)
#if defined(WGL_NV_delay_before_swap)
#define wglDelayBeforeSwapNV(hDC, seconds) glatter_wglDelayBeforeSwapNV_ptr((hDC), (seconds))
GLATTER_UBLOCK(BOOL, WINAPI, wglDelayBeforeSwapNV, (HDC hDC, GLfloat seconds))
#endif // defined(WGL_NV_delay_before_swap)
#if defined(WGL_NV_gpu_affinity)
#define wglCreateAffinityDCNV(phGpuList) glatter_wglCreateAffinityDCNV_ptr((phGpuList))
GLATTER_UBLOCK(HDC, WINAPI, wglCreateAffinityDCNV, (const HGPUNV *phGpuList))
#define wglDeleteDCNV(hdc) glatter_wglDeleteDCNV_ptr((hdc))
GLATTER_UBLOCK(BOOL, WINAPI, wglDeleteDCNV, (HDC hdc))
#define wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice) glatter_wglEnumGpuDevicesNV_ptr((hGpu), (iDeviceIndex), (lpGpuDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglEnumGpuDevicesNV, (HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice))
#define wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu) glatter_wglEnumGpusFromAffinityDCNV_ptr((hAffinityDC), (iGpuIndex), (hGpu))
GLATTER_UBLOCK(BOOL, WINAPI, wglEnumGpusFromAffinityDCNV, (HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu))
#define wglEnumGpusNV(iGpuIndex, phGpu) glatter_wglEnumGpusNV_ptr((iGpuIndex), (phGpu))
GLATTER_UBLOCK(BOOL, WINAPI, wglEnumGpusNV, (UINT iGpuIndex, HGPUNV *phGpu))
#endif // defined(WGL_NV_gpu_affinity)
#if defined(WGL_NV_present_video)
#define wglBindVideoDeviceNV(hDC, uVideoSlot, hVideoDevice, piAttribList) glatter_wglBindVideoDeviceNV_ptr((hDC), (uVideoSlot), (hVideoDevice), (piAttribList))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindVideoDeviceNV, (HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList))
#define wglEnumerateVideoDevicesNV(hDC, phDeviceList) glatter_wglEnumerateVideoDevicesNV_ptr((hDC), (phDeviceList))
GLATTER_UBLOCK(int, WINAPI, wglEnumerateVideoDevicesNV, (HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList))
#define wglQueryCurrentContextNV(iAttribute, piValue) glatter_wglQueryCurrentContextNV_ptr((iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryCurrentContextNV, (int iAttribute, int *piValue))
#endif // defined(WGL_NV_present_video)
#if defined(WGL_NV_swap_group)
#define wglBindSwapBarrierNV(group, barrier) glatter_wglBindSwapBarrierNV_ptr((group), (barrier))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindSwapBarrierNV, (GLuint group, GLuint barrier))
#define wglJoinSwapGroupNV(hDC, group) glatter_wglJoinSwapGroupNV_ptr((hDC), (group))
GLATTER_UBLOCK(BOOL, WINAPI, wglJoinSwapGroupNV, (HDC hDC, GLuint group))
#define wglQueryFrameCountNV(hDC, count) glatter_wglQueryFrameCountNV_ptr((hDC), (count))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryFrameCountNV, (HDC hDC, GLuint *count))
#define wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers) glatter_wglQueryMaxSwapGroupsNV_ptr((hDC), (maxGroups), (maxBarriers))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryMaxSwapGroupsNV, (HDC hDC, GLuint *maxGroups, GLuint *maxBarriers))
#define wglQuerySwapGroupNV(hDC, group, barrier) glatter_wglQuerySwapGroupNV_ptr((hDC), (group), (barrier))
GLATTER_UBLOCK(BOOL, WINAPI, wglQuerySwapGroupNV, (HDC hDC, GLuint *group, GLuint *barrier))
#define wglResetFrameCountNV(hDC) glatter_wglResetFrameCountNV_ptr((hDC))
GLATTER_UBLOCK(BOOL, WINAPI, wglResetFrameCountNV, (HDC hDC))
#endif // defined(WGL_NV_swap_group)
#if defined(WGL_NV_vertex_array_range)
#define wglAllocateMemoryNV(size, readfreq, writefreq, priority) glatter_wglAllocateMemoryNV_ptr((size), (readfreq), (writefreq), (priority))
GLATTER_UBLOCK(void *, WINAPI, wglAllocateMemoryNV, (GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority))
#define wglFreeMemoryNV(pointer) glatter_wglFreeMemoryNV_ptr((pointer))
GLATTER_UBLOCK(void, WINAPI, wglFreeMemoryNV, (void *pointer))
#endif // defined(WGL_NV_vertex_array_range)
#if defined(WGL_NV_video_capture)
#define wglBindVideoCaptureDeviceNV(uVideoSlot, hDevice) glatter_wglBindVideoCaptureDeviceNV_ptr((uVideoSlot), (hDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindVideoCaptureDeviceNV, (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice))
#define wglEnumerateVideoCaptureDevicesNV(hDc, phDeviceList) glatter_wglEnumerateVideoCaptureDevicesNV_ptr((hDc), (phDeviceList))
GLATTER_UBLOCK(UINT, WINAPI, wglEnumerateVideoCaptureDevicesNV, (HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList))
#define wglLockVideoCaptureDeviceNV(hDc, hDevice) glatter_wglLockVideoCaptureDeviceNV_ptr((hDc), (hDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglLockVideoCaptureDeviceNV, (HDC hDc, HVIDEOINPUTDEVICENV hDevice))
#define wglQueryVideoCaptureDeviceNV(hDc, hDevice, iAttribute, piValue) glatter_wglQueryVideoCaptureDeviceNV_ptr((hDc), (hDevice), (iAttribute), (piValue))
GLATTER_UBLOCK(BOOL, WINAPI, wglQueryVideoCaptureDeviceNV, (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue))
#define wglReleaseVideoCaptureDeviceNV(hDc, hDevice) glatter_wglReleaseVideoCaptureDeviceNV_ptr((hDc), (hDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseVideoCaptureDeviceNV, (HDC hDc, HVIDEOINPUTDEVICENV hDevice))
#endif // defined(WGL_NV_video_capture)
#if defined(WGL_NV_video_output)
#define wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer) glatter_wglBindVideoImageNV_ptr((hVideoDevice), (hPbuffer), (iVideoBuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglBindVideoImageNV, (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer))
#define wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice) glatter_wglGetVideoDeviceNV_ptr((hDC), (numDevices), (hVideoDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetVideoDeviceNV, (HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice))
#define wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) glatter_wglGetVideoInfoNV_ptr((hpVideoDevice), (pulCounterOutputPbuffer), (pulCounterOutputVideo))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetVideoInfoNV, (HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo))
#define wglReleaseVideoDeviceNV(hVideoDevice) glatter_wglReleaseVideoDeviceNV_ptr((hVideoDevice))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseVideoDeviceNV, (HPVIDEODEV hVideoDevice))
#define wglReleaseVideoImageNV(hPbuffer, iVideoBuffer) glatter_wglReleaseVideoImageNV_ptr((hPbuffer), (iVideoBuffer))
GLATTER_UBLOCK(BOOL, WINAPI, wglReleaseVideoImageNV, (HPBUFFERARB hPbuffer, int iVideoBuffer))
#define wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock) glatter_wglSendPbufferToVideoNV_ptr((hPbuffer), (iBufferType), (pulCounterPbuffer), (bBlock))
GLATTER_UBLOCK(BOOL, WINAPI, wglSendPbufferToVideoNV, (HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock))
#endif // defined(WGL_NV_video_output)
#if defined(WGL_OML_sync_control)
#define wglGetMscRateOML(hdc, numerator, denominator) glatter_wglGetMscRateOML_ptr((hdc), (numerator), (denominator))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetMscRateOML, (HDC hdc, INT32 *numerator, INT32 *denominator))
#define wglGetSyncValuesOML(hdc, ust, msc, sbc) glatter_wglGetSyncValuesOML_ptr((hdc), (ust), (msc), (sbc))
GLATTER_UBLOCK(BOOL, WINAPI, wglGetSyncValuesOML, (HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc))
#define wglSwapBuffersMscOML(hdc, target_msc, divisor, remainder) glatter_wglSwapBuffersMscOML_ptr((hdc), (target_msc), (divisor), (remainder))
GLATTER_UBLOCK(INT64, WINAPI, wglSwapBuffersMscOML, (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder))
#define wglSwapLayerBuffersMscOML(hdc, fuPlanes, target_msc, divisor, remainder) glatter_wglSwapLayerBuffersMscOML_ptr((hdc), (fuPlanes), (target_msc), (divisor), (remainder))
GLATTER_UBLOCK(INT64, WINAPI, wglSwapLayerBuffersMscOML, (HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder))
#define wglWaitForMscOML(hdc, target_msc, divisor, remainder, ust, msc, sbc) glatter_wglWaitForMscOML_ptr((hdc), (target_msc), (divisor), (remainder), (ust), (msc), (sbc))
GLATTER_UBLOCK(BOOL, WINAPI, wglWaitForMscOML, (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc))
#define wglWaitForSbcOML(hdc, target_sbc, ust, msc, sbc) glatter_wglWaitForSbcOML_ptr((hdc), (target_sbc), (ust), (msc), (sbc))
GLATTER_UBLOCK(BOOL, WINAPI, wglWaitForSbcOML, (HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc))
#endif // defined(__wglext_h_)
#endif // defined(WGL_OML_sync_control)
#endif // GLATTER_WGL

#else // NDEBUG

#ifdef GLATTER_WGL
#if defined(__wglext_h_)
#if defined(WGL_3DL_stereo_control)
#define wglSetStereoEmitterState3DL(hDC, uState) glatter_wglSetStereoEmitterState3DL_debug((hDC), (uState), __FILE__, __LINE__)
BOOL glatter_wglSetStereoEmitterState3DL_debug(HDC hDC, UINT uState, const char* file, int line);
#endif // defined(WGL_3DL_stereo_control)
#if defined(WGL_AMD_gpu_association)
#define wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) glatter_wglBlitContextFramebufferAMD_debug((dstCtx), (srcX0), (srcY0), (srcX1), (srcY1), (dstX0), (dstY0), (dstX1), (dstY1), (mask), (filter), __FILE__, __LINE__)
VOID glatter_wglBlitContextFramebufferAMD_debug(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, const char* file, int line);
#define wglCreateAssociatedContextAMD(id) glatter_wglCreateAssociatedContextAMD_debug((id), __FILE__, __LINE__)
HGLRC glatter_wglCreateAssociatedContextAMD_debug(UINT id, const char* file, int line);
#define wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList) glatter_wglCreateAssociatedContextAttribsAMD_debug((id), (hShareContext), (attribList), __FILE__, __LINE__)
HGLRC glatter_wglCreateAssociatedContextAttribsAMD_debug(UINT id, HGLRC hShareContext, const int *attribList, const char* file, int line);
#define wglDeleteAssociatedContextAMD(hglrc) glatter_wglDeleteAssociatedContextAMD_debug((hglrc), __FILE__, __LINE__)
BOOL glatter_wglDeleteAssociatedContextAMD_debug(HGLRC hglrc, const char* file, int line);
#define wglGetContextGPUIDAMD(hglrc) glatter_wglGetContextGPUIDAMD_debug((hglrc), __FILE__, __LINE__)
UINT glatter_wglGetContextGPUIDAMD_debug(HGLRC hglrc, const char* file, int line);
#define wglGetCurrentAssociatedContextAMD() glatter_wglGetCurrentAssociatedContextAMD_debug(__FILE__, __LINE__)
HGLRC glatter_wglGetCurrentAssociatedContextAMD_debug(const char* file, int line);
#define wglGetGPUIDsAMD(maxCount, ids) glatter_wglGetGPUIDsAMD_debug((maxCount), (ids), __FILE__, __LINE__)
UINT glatter_wglGetGPUIDsAMD_debug(UINT maxCount, UINT *ids, const char* file, int line);
#define wglGetGPUInfoAMD(id, property, dataType, size, data) glatter_wglGetGPUInfoAMD_debug((id), (property), (dataType), (size), (data), __FILE__, __LINE__)
INT glatter_wglGetGPUInfoAMD_debug(UINT id, int property, GLenum dataType, UINT size, void *data, const char* file, int line);
#define wglMakeAssociatedContextCurrentAMD(hglrc) glatter_wglMakeAssociatedContextCurrentAMD_debug((hglrc), __FILE__, __LINE__)
BOOL glatter_wglMakeAssociatedContextCurrentAMD_debug(HGLRC hglrc, const char* file, int line);
#endif // defined(WGL_AMD_gpu_association)
#if defined(WGL_ARB_buffer_region)
#define wglCreateBufferRegionARB(hDC, iLayerPlane, uType) glatter_wglCreateBufferRegionARB_debug((hDC), (iLayerPlane), (uType), __FILE__, __LINE__)
HANDLE glatter_wglCreateBufferRegionARB_debug(HDC hDC, int iLayerPlane, UINT uType, const char* file, int line);
#define wglDeleteBufferRegionARB(hRegion) glatter_wglDeleteBufferRegionARB_debug((hRegion), __FILE__, __LINE__)
VOID glatter_wglDeleteBufferRegionARB_debug(HANDLE hRegion, const char* file, int line);
#define wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc) glatter_wglRestoreBufferRegionARB_debug((hRegion), (x), (y), (width), (height), (xSrc), (ySrc), __FILE__, __LINE__)
BOOL glatter_wglRestoreBufferRegionARB_debug(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc, const char* file, int line);
#define wglSaveBufferRegionARB(hRegion, x, y, width, height) glatter_wglSaveBufferRegionARB_debug((hRegion), (x), (y), (width), (height), __FILE__, __LINE__)
BOOL glatter_wglSaveBufferRegionARB_debug(HANDLE hRegion, int x, int y, int width, int height, const char* file, int line);
#endif // defined(WGL_ARB_buffer_region)
#if defined(WGL_ARB_create_context)
#define wglCreateContextAttribsARB(hDC, hShareContext, attribList) glatter_wglCreateContextAttribsARB_debug((hDC), (hShareContext), (attribList), __FILE__, __LINE__)
HGLRC glatter_wglCreateContextAttribsARB_debug(HDC hDC, HGLRC hShareContext, const int *attribList, const char* file, int line);
#endif // defined(WGL_ARB_create_context)
#if defined(WGL_ARB_extensions_string)
#define wglGetExtensionsStringARB(hdc) glatter_wglGetExtensionsStringARB_debug((hdc), __FILE__, __LINE__)
const char * glatter_wglGetExtensionsStringARB_debug(HDC hdc, const char* file, int line);
#endif // defined(WGL_ARB_extensions_string)
#if defined(WGL_ARB_make_current_read)
#define wglGetCurrentReadDCARB() glatter_wglGetCurrentReadDCARB_debug(__FILE__, __LINE__)
HDC glatter_wglGetCurrentReadDCARB_debug(const char* file, int line);
#define wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc) glatter_wglMakeContextCurrentARB_debug((hDrawDC), (hReadDC), (hglrc), __FILE__, __LINE__)
BOOL glatter_wglMakeContextCurrentARB_debug(HDC hDrawDC, HDC hReadDC, HGLRC hglrc, const char* file, int line);
#endif // defined(WGL_ARB_make_current_read)
#if defined(WGL_ARB_pbuffer)
#define wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList) glatter_wglCreatePbufferARB_debug((hDC), (iPixelFormat), (iWidth), (iHeight), (piAttribList), __FILE__, __LINE__)
HPBUFFERARB glatter_wglCreatePbufferARB_debug(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList, const char* file, int line);
#define wglDestroyPbufferARB(hPbuffer) glatter_wglDestroyPbufferARB_debug((hPbuffer), __FILE__, __LINE__)
BOOL glatter_wglDestroyPbufferARB_debug(HPBUFFERARB hPbuffer, const char* file, int line);
#define wglGetPbufferDCARB(hPbuffer) glatter_wglGetPbufferDCARB_debug((hPbuffer), __FILE__, __LINE__)
HDC glatter_wglGetPbufferDCARB_debug(HPBUFFERARB hPbuffer, const char* file, int line);
#define wglQueryPbufferARB(hPbuffer, iAttribute, piValue) glatter_wglQueryPbufferARB_debug((hPbuffer), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglQueryPbufferARB_debug(HPBUFFERARB hPbuffer, int iAttribute, int *piValue, const char* file, int line);
#define wglReleasePbufferDCARB(hPbuffer, hDC) glatter_wglReleasePbufferDCARB_debug((hPbuffer), (hDC), __FILE__, __LINE__)
int glatter_wglReleasePbufferDCARB_debug(HPBUFFERARB hPbuffer, HDC hDC, const char* file, int line);
#endif // defined(WGL_ARB_pbuffer)
#if defined(WGL_ARB_pixel_format)
#define wglChoosePixelFormatARB(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats) glatter_wglChoosePixelFormatARB_debug((hdc), (piAttribIList), (pfAttribFList), (nMaxFormats), (piFormats), (nNumFormats), __FILE__, __LINE__)
BOOL glatter_wglChoosePixelFormatARB_debug(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats, const char* file, int line);
#define wglGetPixelFormatAttribfvARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues) glatter_wglGetPixelFormatAttribfvARB_debug((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (pfValues), __FILE__, __LINE__)
BOOL glatter_wglGetPixelFormatAttribfvARB_debug(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues, const char* file, int line);
#define wglGetPixelFormatAttribivARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues) glatter_wglGetPixelFormatAttribivARB_debug((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (piValues), __FILE__, __LINE__)
BOOL glatter_wglGetPixelFormatAttribivARB_debug(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues, const char* file, int line);
#endif // defined(WGL_ARB_pixel_format)
#if defined(WGL_ARB_render_texture)
#define wglBindTexImageARB(hPbuffer, iBuffer) glatter_wglBindTexImageARB_debug((hPbuffer), (iBuffer), __FILE__, __LINE__)
BOOL glatter_wglBindTexImageARB_debug(HPBUFFERARB hPbuffer, int iBuffer, const char* file, int line);
#define wglReleaseTexImageARB(hPbuffer, iBuffer) glatter_wglReleaseTexImageARB_debug((hPbuffer), (iBuffer), __FILE__, __LINE__)
BOOL glatter_wglReleaseTexImageARB_debug(HPBUFFERARB hPbuffer, int iBuffer, const char* file, int line);
#define wglSetPbufferAttribARB(hPbuffer, piAttribList) glatter_wglSetPbufferAttribARB_debug((hPbuffer), (piAttribList), __FILE__, __LINE__)
BOOL glatter_wglSetPbufferAttribARB_debug(HPBUFFERARB hPbuffer, const int *piAttribList, const char* file, int line);
#endif // defined(WGL_ARB_render_texture)
#if defined(WGL_EXT_display_color_table)
#define wglBindDisplayColorTableEXT(id) glatter_wglBindDisplayColorTableEXT_debug((id), __FILE__, __LINE__)
GLboolean glatter_wglBindDisplayColorTableEXT_debug(GLushort id, const char* file, int line);
#define wglCreateDisplayColorTableEXT(id) glatter_wglCreateDisplayColorTableEXT_debug((id), __FILE__, __LINE__)
GLboolean glatter_wglCreateDisplayColorTableEXT_debug(GLushort id, const char* file, int line);
#define wglDestroyDisplayColorTableEXT(id) glatter_wglDestroyDisplayColorTableEXT_debug((id), __FILE__, __LINE__)
VOID glatter_wglDestroyDisplayColorTableEXT_debug(GLushort id, const char* file, int line);
#define wglLoadDisplayColorTableEXT(table, length) glatter_wglLoadDisplayColorTableEXT_debug((table), (length), __FILE__, __LINE__)
GLboolean glatter_wglLoadDisplayColorTableEXT_debug(const GLushort *table, GLuint length, const char* file, int line);
#endif // defined(WGL_EXT_display_color_table)
#if defined(WGL_EXT_extensions_string)
#define wglGetExtensionsStringEXT() glatter_wglGetExtensionsStringEXT_debug(__FILE__, __LINE__)
const char * glatter_wglGetExtensionsStringEXT_debug(const char* file, int line);
#endif // defined(WGL_EXT_extensions_string)
#if defined(WGL_EXT_make_current_read)
#define wglGetCurrentReadDCEXT() glatter_wglGetCurrentReadDCEXT_debug(__FILE__, __LINE__)
HDC glatter_wglGetCurrentReadDCEXT_debug(const char* file, int line);
#define wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc) glatter_wglMakeContextCurrentEXT_debug((hDrawDC), (hReadDC), (hglrc), __FILE__, __LINE__)
BOOL glatter_wglMakeContextCurrentEXT_debug(HDC hDrawDC, HDC hReadDC, HGLRC hglrc, const char* file, int line);
#endif // defined(WGL_EXT_make_current_read)
#if defined(WGL_EXT_pbuffer)
#define wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList) glatter_wglCreatePbufferEXT_debug((hDC), (iPixelFormat), (iWidth), (iHeight), (piAttribList), __FILE__, __LINE__)
HPBUFFEREXT glatter_wglCreatePbufferEXT_debug(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList, const char* file, int line);
#define wglDestroyPbufferEXT(hPbuffer) glatter_wglDestroyPbufferEXT_debug((hPbuffer), __FILE__, __LINE__)
BOOL glatter_wglDestroyPbufferEXT_debug(HPBUFFEREXT hPbuffer, const char* file, int line);
#define wglGetPbufferDCEXT(hPbuffer) glatter_wglGetPbufferDCEXT_debug((hPbuffer), __FILE__, __LINE__)
HDC glatter_wglGetPbufferDCEXT_debug(HPBUFFEREXT hPbuffer, const char* file, int line);
#define wglQueryPbufferEXT(hPbuffer, iAttribute, piValue) glatter_wglQueryPbufferEXT_debug((hPbuffer), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglQueryPbufferEXT_debug(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue, const char* file, int line);
#define wglReleasePbufferDCEXT(hPbuffer, hDC) glatter_wglReleasePbufferDCEXT_debug((hPbuffer), (hDC), __FILE__, __LINE__)
int glatter_wglReleasePbufferDCEXT_debug(HPBUFFEREXT hPbuffer, HDC hDC, const char* file, int line);
#endif // defined(WGL_EXT_pbuffer)
#if defined(WGL_EXT_pixel_format)
#define wglChoosePixelFormatEXT(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats) glatter_wglChoosePixelFormatEXT_debug((hdc), (piAttribIList), (pfAttribFList), (nMaxFormats), (piFormats), (nNumFormats), __FILE__, __LINE__)
BOOL glatter_wglChoosePixelFormatEXT_debug(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats, const char* file, int line);
#define wglGetPixelFormatAttribfvEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues) glatter_wglGetPixelFormatAttribfvEXT_debug((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (pfValues), __FILE__, __LINE__)
BOOL glatter_wglGetPixelFormatAttribfvEXT_debug(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues, const char* file, int line);
#define wglGetPixelFormatAttribivEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues) glatter_wglGetPixelFormatAttribivEXT_debug((hdc), (iPixelFormat), (iLayerPlane), (nAttributes), (piAttributes), (piValues), __FILE__, __LINE__)
BOOL glatter_wglGetPixelFormatAttribivEXT_debug(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues, const char* file, int line);
#endif // defined(WGL_EXT_pixel_format)
#if defined(WGL_EXT_swap_control)
#define wglGetSwapIntervalEXT() glatter_wglGetSwapIntervalEXT_debug(__FILE__, __LINE__)
int glatter_wglGetSwapIntervalEXT_debug(const char* file, int line);
#define wglSwapIntervalEXT(interval) glatter_wglSwapIntervalEXT_debug((interval), __FILE__, __LINE__)
BOOL glatter_wglSwapIntervalEXT_debug(int interval, const char* file, int line);
#endif // defined(WGL_EXT_swap_control)
#if defined(WGL_I3D_digital_video_control)
#define wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue) glatter_wglGetDigitalVideoParametersI3D_debug((hDC), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglGetDigitalVideoParametersI3D_debug(HDC hDC, int iAttribute, int *piValue, const char* file, int line);
#define wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue) glatter_wglSetDigitalVideoParametersI3D_debug((hDC), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglSetDigitalVideoParametersI3D_debug(HDC hDC, int iAttribute, const int *piValue, const char* file, int line);
#endif // defined(WGL_I3D_digital_video_control)
#if defined(WGL_I3D_gamma)
#define wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue) glatter_wglGetGammaTableI3D_debug((hDC), (iEntries), (puRed), (puGreen), (puBlue), __FILE__, __LINE__)
BOOL glatter_wglGetGammaTableI3D_debug(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue, const char* file, int line);
#define wglGetGammaTableParametersI3D(hDC, iAttribute, piValue) glatter_wglGetGammaTableParametersI3D_debug((hDC), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglGetGammaTableParametersI3D_debug(HDC hDC, int iAttribute, int *piValue, const char* file, int line);
#define wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue) glatter_wglSetGammaTableI3D_debug((hDC), (iEntries), (puRed), (puGreen), (puBlue), __FILE__, __LINE__)
BOOL glatter_wglSetGammaTableI3D_debug(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue, const char* file, int line);
#define wglSetGammaTableParametersI3D(hDC, iAttribute, piValue) glatter_wglSetGammaTableParametersI3D_debug((hDC), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglSetGammaTableParametersI3D_debug(HDC hDC, int iAttribute, const int *piValue, const char* file, int line);
#endif // defined(WGL_I3D_gamma)
#if defined(WGL_I3D_genlock)
#define wglDisableGenlockI3D(hDC) glatter_wglDisableGenlockI3D_debug((hDC), __FILE__, __LINE__)
BOOL glatter_wglDisableGenlockI3D_debug(HDC hDC, const char* file, int line);
#define wglEnableGenlockI3D(hDC) glatter_wglEnableGenlockI3D_debug((hDC), __FILE__, __LINE__)
BOOL glatter_wglEnableGenlockI3D_debug(HDC hDC, const char* file, int line);
#define wglGenlockSampleRateI3D(hDC, uRate) glatter_wglGenlockSampleRateI3D_debug((hDC), (uRate), __FILE__, __LINE__)
BOOL glatter_wglGenlockSampleRateI3D_debug(HDC hDC, UINT uRate, const char* file, int line);
#define wglGenlockSourceDelayI3D(hDC, uDelay) glatter_wglGenlockSourceDelayI3D_debug((hDC), (uDelay), __FILE__, __LINE__)
BOOL glatter_wglGenlockSourceDelayI3D_debug(HDC hDC, UINT uDelay, const char* file, int line);
#define wglGenlockSourceEdgeI3D(hDC, uEdge) glatter_wglGenlockSourceEdgeI3D_debug((hDC), (uEdge), __FILE__, __LINE__)
BOOL glatter_wglGenlockSourceEdgeI3D_debug(HDC hDC, UINT uEdge, const char* file, int line);
#define wglGenlockSourceI3D(hDC, uSource) glatter_wglGenlockSourceI3D_debug((hDC), (uSource), __FILE__, __LINE__)
BOOL glatter_wglGenlockSourceI3D_debug(HDC hDC, UINT uSource, const char* file, int line);
#define wglGetGenlockSampleRateI3D(hDC, uRate) glatter_wglGetGenlockSampleRateI3D_debug((hDC), (uRate), __FILE__, __LINE__)
BOOL glatter_wglGetGenlockSampleRateI3D_debug(HDC hDC, UINT *uRate, const char* file, int line);
#define wglGetGenlockSourceDelayI3D(hDC, uDelay) glatter_wglGetGenlockSourceDelayI3D_debug((hDC), (uDelay), __FILE__, __LINE__)
BOOL glatter_wglGetGenlockSourceDelayI3D_debug(HDC hDC, UINT *uDelay, const char* file, int line);
#define wglGetGenlockSourceEdgeI3D(hDC, uEdge) glatter_wglGetGenlockSourceEdgeI3D_debug((hDC), (uEdge), __FILE__, __LINE__)
BOOL glatter_wglGetGenlockSourceEdgeI3D_debug(HDC hDC, UINT *uEdge, const char* file, int line);
#define wglGetGenlockSourceI3D(hDC, uSource) glatter_wglGetGenlockSourceI3D_debug((hDC), (uSource), __FILE__, __LINE__)
BOOL glatter_wglGetGenlockSourceI3D_debug(HDC hDC, UINT *uSource, const char* file, int line);
#define wglIsEnabledGenlockI3D(hDC, pFlag) glatter_wglIsEnabledGenlockI3D_debug((hDC), (pFlag), __FILE__, __LINE__)
BOOL glatter_wglIsEnabledGenlockI3D_debug(HDC hDC, BOOL *pFlag, const char* file, int line);
#define wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay) glatter_wglQueryGenlockMaxSourceDelayI3D_debug((hDC), (uMaxLineDelay), (uMaxPixelDelay), __FILE__, __LINE__)
BOOL glatter_wglQueryGenlockMaxSourceDelayI3D_debug(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay, const char* file, int line);
#endif // defined(WGL_I3D_genlock)
#if defined(WGL_I3D_image_buffer)
#define wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count) glatter_wglAssociateImageBufferEventsI3D_debug((hDC), (pEvent), (pAddress), (pSize), (count), __FILE__, __LINE__)
BOOL glatter_wglAssociateImageBufferEventsI3D_debug(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count, const char* file, int line);
#define wglCreateImageBufferI3D(hDC, dwSize, uFlags) glatter_wglCreateImageBufferI3D_debug((hDC), (dwSize), (uFlags), __FILE__, __LINE__)
LPVOID glatter_wglCreateImageBufferI3D_debug(HDC hDC, DWORD dwSize, UINT uFlags, const char* file, int line);
#define wglDestroyImageBufferI3D(hDC, pAddress) glatter_wglDestroyImageBufferI3D_debug((hDC), (pAddress), __FILE__, __LINE__)
BOOL glatter_wglDestroyImageBufferI3D_debug(HDC hDC, LPVOID pAddress, const char* file, int line);
#define wglReleaseImageBufferEventsI3D(hDC, pAddress, count) glatter_wglReleaseImageBufferEventsI3D_debug((hDC), (pAddress), (count), __FILE__, __LINE__)
BOOL glatter_wglReleaseImageBufferEventsI3D_debug(HDC hDC, const LPVOID *pAddress, UINT count, const char* file, int line);
#endif // defined(WGL_I3D_image_buffer)
#if defined(WGL_I3D_swap_frame_lock)
#define wglDisableFrameLockI3D() glatter_wglDisableFrameLockI3D_debug(__FILE__, __LINE__)
BOOL glatter_wglDisableFrameLockI3D_debug(const char* file, int line);
#define wglEnableFrameLockI3D() glatter_wglEnableFrameLockI3D_debug(__FILE__, __LINE__)
BOOL glatter_wglEnableFrameLockI3D_debug(const char* file, int line);
#define wglIsEnabledFrameLockI3D(pFlag) glatter_wglIsEnabledFrameLockI3D_debug((pFlag), __FILE__, __LINE__)
BOOL glatter_wglIsEnabledFrameLockI3D_debug(BOOL *pFlag, const char* file, int line);
#define wglQueryFrameLockMasterI3D(pFlag) glatter_wglQueryFrameLockMasterI3D_debug((pFlag), __FILE__, __LINE__)
BOOL glatter_wglQueryFrameLockMasterI3D_debug(BOOL *pFlag, const char* file, int line);
#endif // defined(WGL_I3D_swap_frame_lock)
#if defined(WGL_I3D_swap_frame_usage)
#define wglBeginFrameTrackingI3D() glatter_wglBeginFrameTrackingI3D_debug(__FILE__, __LINE__)
BOOL glatter_wglBeginFrameTrackingI3D_debug(const char* file, int line);
#define wglEndFrameTrackingI3D() glatter_wglEndFrameTrackingI3D_debug(__FILE__, __LINE__)
BOOL glatter_wglEndFrameTrackingI3D_debug(const char* file, int line);
#define wglGetFrameUsageI3D(pUsage) glatter_wglGetFrameUsageI3D_debug((pUsage), __FILE__, __LINE__)
BOOL glatter_wglGetFrameUsageI3D_debug(float *pUsage, const char* file, int line);
#define wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage) glatter_wglQueryFrameTrackingI3D_debug((pFrameCount), (pMissedFrames), (pLastMissedUsage), __FILE__, __LINE__)
BOOL glatter_wglQueryFrameTrackingI3D_debug(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage, const char* file, int line);
#endif // defined(WGL_I3D_swap_frame_usage)
#if defined(WGL_NV_DX_interop)
#define wglDXCloseDeviceNV(hDevice) glatter_wglDXCloseDeviceNV_debug((hDevice), __FILE__, __LINE__)
BOOL glatter_wglDXCloseDeviceNV_debug(HANDLE hDevice, const char* file, int line);
#define wglDXLockObjectsNV(hDevice, count, hObjects) glatter_wglDXLockObjectsNV_debug((hDevice), (count), (hObjects), __FILE__, __LINE__)
BOOL glatter_wglDXLockObjectsNV_debug(HANDLE hDevice, GLint count, HANDLE *hObjects, const char* file, int line);
#define wglDXObjectAccessNV(hObject, access) glatter_wglDXObjectAccessNV_debug((hObject), (access), __FILE__, __LINE__)
BOOL glatter_wglDXObjectAccessNV_debug(HANDLE hObject, GLenum access, const char* file, int line);
#define wglDXOpenDeviceNV(dxDevice) glatter_wglDXOpenDeviceNV_debug((dxDevice), __FILE__, __LINE__)
HANDLE glatter_wglDXOpenDeviceNV_debug(void *dxDevice, const char* file, int line);
#define wglDXRegisterObjectNV(hDevice, dxObject, name, type, access) glatter_wglDXRegisterObjectNV_debug((hDevice), (dxObject), (name), (type), (access), __FILE__, __LINE__)
HANDLE glatter_wglDXRegisterObjectNV_debug(HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access, const char* file, int line);
#define wglDXSetResourceShareHandleNV(dxObject, shareHandle) glatter_wglDXSetResourceShareHandleNV_debug((dxObject), (shareHandle), __FILE__, __LINE__)
BOOL glatter_wglDXSetResourceShareHandleNV_debug(void *dxObject, HANDLE shareHandle, const char* file, int line);
#define wglDXUnlockObjectsNV(hDevice, count, hObjects) glatter_wglDXUnlockObjectsNV_debug((hDevice), (count), (hObjects), __FILE__, __LINE__)
BOOL glatter_wglDXUnlockObjectsNV_debug(HANDLE hDevice, GLint count, HANDLE *hObjects, const char* file, int line);
#define wglDXUnregisterObjectNV(hDevice, hObject) glatter_wglDXUnregisterObjectNV_debug((hDevice), (hObject), __FILE__, __LINE__)
BOOL glatter_wglDXUnregisterObjectNV_debug(HANDLE hDevice, HANDLE hObject, const char* file, int line);
#endif // defined(WGL_NV_DX_interop)
#if defined(WGL_NV_copy_image)
#define wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) glatter_wglCopyImageSubDataNV_debug((hSrcRC), (srcName), (srcTarget), (srcLevel), (srcX), (srcY), (srcZ), (hDstRC), (dstName), (dstTarget), (dstLevel), (dstX), (dstY), (dstZ), (width), (height), (depth), __FILE__, __LINE__)
BOOL glatter_wglCopyImageSubDataNV_debug(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth, const char* file, int line);
#endif // defined(WGL_NV_copy_image)
#if defined(WGL_NV_delay_before_swap)
#define wglDelayBeforeSwapNV(hDC, seconds) glatter_wglDelayBeforeSwapNV_debug((hDC), (seconds), __FILE__, __LINE__)
BOOL glatter_wglDelayBeforeSwapNV_debug(HDC hDC, GLfloat seconds, const char* file, int line);
#endif // defined(WGL_NV_delay_before_swap)
#if defined(WGL_NV_gpu_affinity)
#define wglCreateAffinityDCNV(phGpuList) glatter_wglCreateAffinityDCNV_debug((phGpuList), __FILE__, __LINE__)
HDC glatter_wglCreateAffinityDCNV_debug(const HGPUNV *phGpuList, const char* file, int line);
#define wglDeleteDCNV(hdc) glatter_wglDeleteDCNV_debug((hdc), __FILE__, __LINE__)
BOOL glatter_wglDeleteDCNV_debug(HDC hdc, const char* file, int line);
#define wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice) glatter_wglEnumGpuDevicesNV_debug((hGpu), (iDeviceIndex), (lpGpuDevice), __FILE__, __LINE__)
BOOL glatter_wglEnumGpuDevicesNV_debug(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice, const char* file, int line);
#define wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu) glatter_wglEnumGpusFromAffinityDCNV_debug((hAffinityDC), (iGpuIndex), (hGpu), __FILE__, __LINE__)
BOOL glatter_wglEnumGpusFromAffinityDCNV_debug(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu, const char* file, int line);
#define wglEnumGpusNV(iGpuIndex, phGpu) glatter_wglEnumGpusNV_debug((iGpuIndex), (phGpu), __FILE__, __LINE__)
BOOL glatter_wglEnumGpusNV_debug(UINT iGpuIndex, HGPUNV *phGpu, const char* file, int line);
#endif // defined(WGL_NV_gpu_affinity)
#if defined(WGL_NV_present_video)
#define wglBindVideoDeviceNV(hDC, uVideoSlot, hVideoDevice, piAttribList) glatter_wglBindVideoDeviceNV_debug((hDC), (uVideoSlot), (hVideoDevice), (piAttribList), __FILE__, __LINE__)
BOOL glatter_wglBindVideoDeviceNV_debug(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList, const char* file, int line);
#define wglEnumerateVideoDevicesNV(hDC, phDeviceList) glatter_wglEnumerateVideoDevicesNV_debug((hDC), (phDeviceList), __FILE__, __LINE__)
int glatter_wglEnumerateVideoDevicesNV_debug(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList, const char* file, int line);
#define wglQueryCurrentContextNV(iAttribute, piValue) glatter_wglQueryCurrentContextNV_debug((iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglQueryCurrentContextNV_debug(int iAttribute, int *piValue, const char* file, int line);
#endif // defined(WGL_NV_present_video)
#if defined(WGL_NV_swap_group)
#define wglBindSwapBarrierNV(group, barrier) glatter_wglBindSwapBarrierNV_debug((group), (barrier), __FILE__, __LINE__)
BOOL glatter_wglBindSwapBarrierNV_debug(GLuint group, GLuint barrier, const char* file, int line);
#define wglJoinSwapGroupNV(hDC, group) glatter_wglJoinSwapGroupNV_debug((hDC), (group), __FILE__, __LINE__)
BOOL glatter_wglJoinSwapGroupNV_debug(HDC hDC, GLuint group, const char* file, int line);
#define wglQueryFrameCountNV(hDC, count) glatter_wglQueryFrameCountNV_debug((hDC), (count), __FILE__, __LINE__)
BOOL glatter_wglQueryFrameCountNV_debug(HDC hDC, GLuint *count, const char* file, int line);
#define wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers) glatter_wglQueryMaxSwapGroupsNV_debug((hDC), (maxGroups), (maxBarriers), __FILE__, __LINE__)
BOOL glatter_wglQueryMaxSwapGroupsNV_debug(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers, const char* file, int line);
#define wglQuerySwapGroupNV(hDC, group, barrier) glatter_wglQuerySwapGroupNV_debug((hDC), (group), (barrier), __FILE__, __LINE__)
BOOL glatter_wglQuerySwapGroupNV_debug(HDC hDC, GLuint *group, GLuint *barrier, const char* file, int line);
#define wglResetFrameCountNV(hDC) glatter_wglResetFrameCountNV_debug((hDC), __FILE__, __LINE__)
BOOL glatter_wglResetFrameCountNV_debug(HDC hDC, const char* file, int line);
#endif // defined(WGL_NV_swap_group)
#if defined(WGL_NV_vertex_array_range)
#define wglAllocateMemoryNV(size, readfreq, writefreq, priority) glatter_wglAllocateMemoryNV_debug((size), (readfreq), (writefreq), (priority), __FILE__, __LINE__)
void * glatter_wglAllocateMemoryNV_debug(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority, const char* file, int line);
#define wglFreeMemoryNV(pointer) glatter_wglFreeMemoryNV_debug((pointer), __FILE__, __LINE__)
void glatter_wglFreeMemoryNV_debug(void *pointer, const char* file, int line);
#endif // defined(WGL_NV_vertex_array_range)
#if defined(WGL_NV_video_capture)
#define wglBindVideoCaptureDeviceNV(uVideoSlot, hDevice) glatter_wglBindVideoCaptureDeviceNV_debug((uVideoSlot), (hDevice), __FILE__, __LINE__)
BOOL glatter_wglBindVideoCaptureDeviceNV_debug(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice, const char* file, int line);
#define wglEnumerateVideoCaptureDevicesNV(hDc, phDeviceList) glatter_wglEnumerateVideoCaptureDevicesNV_debug((hDc), (phDeviceList), __FILE__, __LINE__)
UINT glatter_wglEnumerateVideoCaptureDevicesNV_debug(HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList, const char* file, int line);
#define wglLockVideoCaptureDeviceNV(hDc, hDevice) glatter_wglLockVideoCaptureDeviceNV_debug((hDc), (hDevice), __FILE__, __LINE__)
BOOL glatter_wglLockVideoCaptureDeviceNV_debug(HDC hDc, HVIDEOINPUTDEVICENV hDevice, const char* file, int line);
#define wglQueryVideoCaptureDeviceNV(hDc, hDevice, iAttribute, piValue) glatter_wglQueryVideoCaptureDeviceNV_debug((hDc), (hDevice), (iAttribute), (piValue), __FILE__, __LINE__)
BOOL glatter_wglQueryVideoCaptureDeviceNV_debug(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue, const char* file, int line);
#define wglReleaseVideoCaptureDeviceNV(hDc, hDevice) glatter_wglReleaseVideoCaptureDeviceNV_debug((hDc), (hDevice), __FILE__, __LINE__)
BOOL glatter_wglReleaseVideoCaptureDeviceNV_debug(HDC hDc, HVIDEOINPUTDEVICENV hDevice, const char* file, int line);
#endif // defined(WGL_NV_video_capture)
#if defined(WGL_NV_video_output)
#define wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer) glatter_wglBindVideoImageNV_debug((hVideoDevice), (hPbuffer), (iVideoBuffer), __FILE__, __LINE__)
BOOL glatter_wglBindVideoImageNV_debug(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer, const char* file, int line);
#define wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice) glatter_wglGetVideoDeviceNV_debug((hDC), (numDevices), (hVideoDevice), __FILE__, __LINE__)
BOOL glatter_wglGetVideoDeviceNV_debug(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice, const char* file, int line);
#define wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) glatter_wglGetVideoInfoNV_debug((hpVideoDevice), (pulCounterOutputPbuffer), (pulCounterOutputVideo), __FILE__, __LINE__)
BOOL glatter_wglGetVideoInfoNV_debug(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo, const char* file, int line);
#define wglReleaseVideoDeviceNV(hVideoDevice) glatter_wglReleaseVideoDeviceNV_debug((hVideoDevice), __FILE__, __LINE__)
BOOL glatter_wglReleaseVideoDeviceNV_debug(HPVIDEODEV hVideoDevice, const char* file, int line);
#define wglReleaseVideoImageNV(hPbuffer, iVideoBuffer) glatter_wglReleaseVideoImageNV_debug((hPbuffer), (iVideoBuffer), __FILE__, __LINE__)
BOOL glatter_wglReleaseVideoImageNV_debug(HPBUFFERARB hPbuffer, int iVideoBuffer, const char* file, int line);
#define wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock) glatter_wglSendPbufferToVideoNV_debug((hPbuffer), (iBufferType), (pulCounterPbuffer), (bBlock), __FILE__, __LINE__)
BOOL glatter_wglSendPbufferToVideoNV_debug(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock, const char* file, int line);
#endif // defined(WGL_NV_video_output)
#if defined(WGL_OML_sync_control)
#define wglGetMscRateOML(hdc, numerator, denominator) glatter_wglGetMscRateOML_debug((hdc), (numerator), (denominator), __FILE__, __LINE__)
BOOL glatter_wglGetMscRateOML_debug(HDC hdc, INT32 *numerator, INT32 *denominator, const char* file, int line);
#define wglGetSyncValuesOML(hdc, ust, msc, sbc) glatter_wglGetSyncValuesOML_debug((hdc), (ust), (msc), (sbc), __FILE__, __LINE__)
BOOL glatter_wglGetSyncValuesOML_debug(HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc, const char* file, int line);
#define wglSwapBuffersMscOML(hdc, target_msc, divisor, remainder) glatter_wglSwapBuffersMscOML_debug((hdc), (target_msc), (divisor), (remainder), __FILE__, __LINE__)
INT64 glatter_wglSwapBuffersMscOML_debug(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, const char* file, int line);
#define wglSwapLayerBuffersMscOML(hdc, fuPlanes, target_msc, divisor, remainder) glatter_wglSwapLayerBuffersMscOML_debug((hdc), (fuPlanes), (target_msc), (divisor), (remainder), __FILE__, __LINE__)
INT64 glatter_wglSwapLayerBuffersMscOML_debug(HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder, const char* file, int line);
#define wglWaitForMscOML(hdc, target_msc, divisor, remainder, ust, msc, sbc) glatter_wglWaitForMscOML_debug((hdc), (target_msc), (divisor), (remainder), (ust), (msc), (sbc), __FILE__, __LINE__)
BOOL glatter_wglWaitForMscOML_debug(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc, const char* file, int line);
#define wglWaitForSbcOML(hdc, target_sbc, ust, msc, sbc) glatter_wglWaitForSbcOML_debug((hdc), (target_sbc), (ust), (msc), (sbc), __FILE__, __LINE__)
BOOL glatter_wglWaitForSbcOML_debug(HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc, const char* file, int line);
#endif // defined(__wglext_h_)
#endif // defined(WGL_OML_sync_control)
#endif // GLATTER_WGL

#endif // NDEBUG


#ifdef NDEBUG

#ifdef GLATTER_EGL
#if defined(__egl_h_)
#if defined(EGL_VERSION_1_0)
#define eglChooseConfig(dpy, attrib_list, configs, config_size, num_config) glatter_eglChooseConfig_ptr((dpy), (attrib_list), (configs), (config_size), (num_config))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglChooseConfig, (EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config))
#define eglCopyBuffers(dpy, surface, target) glatter_eglCopyBuffers_ptr((dpy), (surface), (target))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglCopyBuffers, (EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target))
#define eglCreateContext(dpy, config, share_context, attrib_list) glatter_eglCreateContext_ptr((dpy), (config), (share_context), (attrib_list))
GLATTER_UBLOCK(EGLContext, EGLAPIENTRY, eglCreateContext, (EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list))
#define eglCreatePbufferSurface(dpy, config, attrib_list) glatter_eglCreatePbufferSurface_ptr((dpy), (config), (attrib_list))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreatePbufferSurface, (EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list))
#define eglCreatePixmapSurface(dpy, config, pixmap, attrib_list) glatter_eglCreatePixmapSurface_ptr((dpy), (config), (pixmap), (attrib_list))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreatePixmapSurface, (EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list))
#define eglCreateWindowSurface(dpy, config, win, attrib_list) glatter_eglCreateWindowSurface_ptr((dpy), (config), (win), (attrib_list))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreateWindowSurface, (EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list))
#define eglDestroyContext(dpy, ctx) glatter_eglDestroyContext_ptr((dpy), (ctx))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglDestroyContext, (EGLDisplay dpy, EGLContext ctx))
#define eglDestroySurface(dpy, surface) glatter_eglDestroySurface_ptr((dpy), (surface))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglDestroySurface, (EGLDisplay dpy, EGLSurface surface))
#define eglGetConfigAttrib(dpy, config, attribute, value) glatter_eglGetConfigAttrib_ptr((dpy), (config), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglGetConfigAttrib, (EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value))
#define eglGetConfigs(dpy, configs, config_size, num_config) glatter_eglGetConfigs_ptr((dpy), (configs), (config_size), (num_config))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglGetConfigs, (EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config))
#define eglGetCurrentDisplay() glatter_eglGetCurrentDisplay_ptr()
GLATTER_UBLOCK(EGLDisplay, EGLAPIENTRY, eglGetCurrentDisplay, (void))
#define eglGetCurrentSurface(readdraw) glatter_eglGetCurrentSurface_ptr((readdraw))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglGetCurrentSurface, (EGLint readdraw))
#define eglGetDisplay(display_id) glatter_eglGetDisplay_ptr((display_id))
GLATTER_UBLOCK(EGLDisplay, EGLAPIENTRY, eglGetDisplay, (EGLNativeDisplayType display_id))
#define eglGetError() glatter_eglGetError_ptr()
GLATTER_UBLOCK(EGLint, EGLAPIENTRY, eglGetError, (void))
#define eglGetProcAddress(procname) glatter_eglGetProcAddress_ptr((procname))
GLATTER_UBLOCK(__eglMustCastToProperFunctionPointerType, EGLAPIENTRY, eglGetProcAddress, (const char *procname))
#define eglInitialize(dpy, major, minor) glatter_eglInitialize_ptr((dpy), (major), (minor))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglInitialize, (EGLDisplay dpy, EGLint *major, EGLint *minor))
#define eglMakeCurrent(dpy, draw, read, ctx) glatter_eglMakeCurrent_ptr((dpy), (draw), (read), (ctx))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglMakeCurrent, (EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx))
#define eglQueryContext(dpy, ctx, attribute, value) glatter_eglQueryContext_ptr((dpy), (ctx), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryContext, (EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value))
#define eglQueryString(dpy, name) glatter_eglQueryString_ptr((dpy), (name))
GLATTER_UBLOCK(const char *, EGLAPIENTRY, eglQueryString, (EGLDisplay dpy, EGLint name))
#define eglQuerySurface(dpy, surface, attribute, value) glatter_eglQuerySurface_ptr((dpy), (surface), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQuerySurface, (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value))
#define eglSwapBuffers(dpy, surface) glatter_eglSwapBuffers_ptr((dpy), (surface))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSwapBuffers, (EGLDisplay dpy, EGLSurface surface))
#define eglTerminate(dpy) glatter_eglTerminate_ptr((dpy))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglTerminate, (EGLDisplay dpy))
#define eglWaitGL() glatter_eglWaitGL_ptr()
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglWaitGL, (void))
#define eglWaitNative(engine) glatter_eglWaitNative_ptr((engine))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglWaitNative, (EGLint engine))
#endif // defined(EGL_VERSION_1_0)
#if defined(EGL_VERSION_1_1)
#define eglBindTexImage(dpy, surface, buffer) glatter_eglBindTexImage_ptr((dpy), (surface), (buffer))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglBindTexImage, (EGLDisplay dpy, EGLSurface surface, EGLint buffer))
#define eglReleaseTexImage(dpy, surface, buffer) glatter_eglReleaseTexImage_ptr((dpy), (surface), (buffer))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglReleaseTexImage, (EGLDisplay dpy, EGLSurface surface, EGLint buffer))
#define eglSurfaceAttrib(dpy, surface, attribute, value) glatter_eglSurfaceAttrib_ptr((dpy), (surface), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSurfaceAttrib, (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value))
#define eglSwapInterval(dpy, interval) glatter_eglSwapInterval_ptr((dpy), (interval))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSwapInterval, (EGLDisplay dpy, EGLint interval))
#endif // defined(EGL_VERSION_1_1)
#if defined(EGL_VERSION_1_2)
#define eglBindAPI(api) glatter_eglBindAPI_ptr((api))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglBindAPI, (EGLenum api))
#define eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list) glatter_eglCreatePbufferFromClientBuffer_ptr((dpy), (buftype), (buffer), (config), (attrib_list))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreatePbufferFromClientBuffer, (EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list))
#define eglQueryAPI() glatter_eglQueryAPI_ptr()
GLATTER_UBLOCK(EGLenum, EGLAPIENTRY, eglQueryAPI, (void))
#define eglReleaseThread() glatter_eglReleaseThread_ptr()
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglReleaseThread, (void))
#define eglWaitClient() glatter_eglWaitClient_ptr()
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglWaitClient, (void))
#endif // defined(EGL_VERSION_1_2)
#if defined(EGL_VERSION_1_4)
#define eglGetCurrentContext() glatter_eglGetCurrentContext_ptr()
GLATTER_UBLOCK(EGLContext, EGLAPIENTRY, eglGetCurrentContext, (void))
#endif // defined(EGL_VERSION_1_4)
#if defined(EGL_VERSION_1_5)
#define eglClientWaitSync(dpy, sync, flags, timeout) glatter_eglClientWaitSync_ptr((dpy), (sync), (flags), (timeout))
GLATTER_UBLOCK(EGLint, EGLAPIENTRY, eglClientWaitSync, (EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout))
#define eglCreateImage(dpy, ctx, target, buffer, attrib_list) glatter_eglCreateImage_ptr((dpy), (ctx), (target), (buffer), (attrib_list))
GLATTER_UBLOCK(EGLImage, EGLAPIENTRY, eglCreateImage, (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list))
#define eglCreatePlatformPixmapSurface(dpy, config, native_pixmap, attrib_list) glatter_eglCreatePlatformPixmapSurface_ptr((dpy), (config), (native_pixmap), (attrib_list))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreatePlatformPixmapSurface, (EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list))
#define eglCreatePlatformWindowSurface(dpy, config, native_window, attrib_list) glatter_eglCreatePlatformWindowSurface_ptr((dpy), (config), (native_window), (attrib_list))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreatePlatformWindowSurface, (EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list))
#define eglCreateSync(dpy, type, attrib_list) glatter_eglCreateSync_ptr((dpy), (type), (attrib_list))
GLATTER_UBLOCK(EGLSync, EGLAPIENTRY, eglCreateSync, (EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list))
#define eglDestroyImage(dpy, image) glatter_eglDestroyImage_ptr((dpy), (image))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglDestroyImage, (EGLDisplay dpy, EGLImage image))
#define eglDestroySync(dpy, sync) glatter_eglDestroySync_ptr((dpy), (sync))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglDestroySync, (EGLDisplay dpy, EGLSync sync))
#define eglGetPlatformDisplay(platform, native_display, attrib_list) glatter_eglGetPlatformDisplay_ptr((platform), (native_display), (attrib_list))
GLATTER_UBLOCK(EGLDisplay, EGLAPIENTRY, eglGetPlatformDisplay, (EGLenum platform, void *native_display, const EGLAttrib *attrib_list))
#define eglGetSyncAttrib(dpy, sync, attribute, value) glatter_eglGetSyncAttrib_ptr((dpy), (sync), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglGetSyncAttrib, (EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value))
#define eglWaitSync(dpy, sync, flags) glatter_eglWaitSync_ptr((dpy), (sync), (flags))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglWaitSync, (EGLDisplay dpy, EGLSync sync, EGLint flags))
#endif // defined(EGL_VERSION_1_5)
#endif // defined(__egl_h_)
#if defined(__eglext_h_)
#if defined(EGL_ANDROID_blob_cache)
#define eglSetBlobCacheFuncsANDROID(dpy, set, get) glatter_eglSetBlobCacheFuncsANDROID_ptr((dpy), (set), (get))
GLATTER_UBLOCK(void, EGLAPIENTRY, eglSetBlobCacheFuncsANDROID, (EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get))
#endif // defined(EGL_ANDROID_blob_cache)
#if defined(EGL_ANDROID_create_native_client_buffer)
#define eglCreateNativeClientBufferANDROID(attrib_list) glatter_eglCreateNativeClientBufferANDROID_ptr((attrib_list))
GLATTER_UBLOCK(EGLClientBuffer, EGLAPIENTRY, eglCreateNativeClientBufferANDROID, (const EGLint *attrib_list))
#endif // defined(EGL_ANDROID_create_native_client_buffer)
#if defined(EGL_ANDROID_native_fence_sync)
#define eglDupNativeFenceFDANDROID(dpy, sync) glatter_eglDupNativeFenceFDANDROID_ptr((dpy), (sync))
GLATTER_UBLOCK(EGLint, EGLAPIENTRY, eglDupNativeFenceFDANDROID, (EGLDisplay dpy, EGLSyncKHR sync))
#endif // defined(EGL_ANDROID_native_fence_sync)
#if defined(EGL_ANDROID_presentation_time)
#define eglPresentationTimeANDROID(dpy, surface, time) glatter_eglPresentationTimeANDROID_ptr((dpy), (surface), (time))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglPresentationTimeANDROID, (EGLDisplay dpy, EGLSurface surface, EGLnsecsANDROID time))
#endif // defined(EGL_ANDROID_presentation_time)
#if defined(EGL_ANGLE_query_surface_pointer)
#define eglQuerySurfacePointerANGLE(dpy, surface, attribute, value) glatter_eglQuerySurfacePointerANGLE_ptr((dpy), (surface), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQuerySurfacePointerANGLE, (EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value))
#endif // defined(EGL_ANGLE_query_surface_pointer)
#if defined(EGL_EXT_compositor)
#define eglCompositorBindTexWindowEXT(external_win_id) glatter_eglCompositorBindTexWindowEXT_ptr((external_win_id))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglCompositorBindTexWindowEXT, (EGLint external_win_id))
#define eglCompositorSetContextAttributesEXT(external_ref_id, context_attributes, num_entries) glatter_eglCompositorSetContextAttributesEXT_ptr((external_ref_id), (context_attributes), (num_entries))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglCompositorSetContextAttributesEXT, (EGLint external_ref_id, const EGLint *context_attributes, EGLint num_entries))
#define eglCompositorSetContextListEXT(external_ref_ids, num_entries) glatter_eglCompositorSetContextListEXT_ptr((external_ref_ids), (num_entries))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglCompositorSetContextListEXT, (const EGLint *external_ref_ids, EGLint num_entries))
#define eglCompositorSetSizeEXT(external_win_id, width, height) glatter_eglCompositorSetSizeEXT_ptr((external_win_id), (width), (height))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglCompositorSetSizeEXT, (EGLint external_win_id, EGLint width, EGLint height))
#define eglCompositorSetWindowAttributesEXT(external_win_id, window_attributes, num_entries) glatter_eglCompositorSetWindowAttributesEXT_ptr((external_win_id), (window_attributes), (num_entries))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglCompositorSetWindowAttributesEXT, (EGLint external_win_id, const EGLint *window_attributes, EGLint num_entries))
#define eglCompositorSetWindowListEXT(external_ref_id, external_win_ids, num_entries) glatter_eglCompositorSetWindowListEXT_ptr((external_ref_id), (external_win_ids), (num_entries))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglCompositorSetWindowListEXT, (EGLint external_ref_id, const EGLint *external_win_ids, EGLint num_entries))
#define eglCompositorSwapPolicyEXT(external_win_id, policy) glatter_eglCompositorSwapPolicyEXT_ptr((external_win_id), (policy))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglCompositorSwapPolicyEXT, (EGLint external_win_id, EGLint policy))
#endif // defined(EGL_EXT_compositor)
#if defined(EGL_EXT_device_base)
#define eglQueryDeviceAttribEXT(device, attribute, value) glatter_eglQueryDeviceAttribEXT_ptr((device), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryDeviceAttribEXT, (EGLDeviceEXT device, EGLint attribute, EGLAttrib *value))
#define eglQueryDeviceStringEXT(device, name) glatter_eglQueryDeviceStringEXT_ptr((device), (name))
GLATTER_UBLOCK(const char *, EGLAPIENTRY, eglQueryDeviceStringEXT, (EGLDeviceEXT device, EGLint name))
#define eglQueryDevicesEXT(max_devices, devices, num_devices) glatter_eglQueryDevicesEXT_ptr((max_devices), (devices), (num_devices))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryDevicesEXT, (EGLint max_devices, EGLDeviceEXT *devices, EGLint *num_devices))
#define eglQueryDisplayAttribEXT(dpy, attribute, value) glatter_eglQueryDisplayAttribEXT_ptr((dpy), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryDisplayAttribEXT, (EGLDisplay dpy, EGLint attribute, EGLAttrib *value))
#endif // defined(EGL_EXT_device_base)
#if defined(EGL_EXT_image_dma_buf_import_modifiers)
#define eglQueryDmaBufFormatsEXT(dpy, max_formats, formats, num_formats) glatter_eglQueryDmaBufFormatsEXT_ptr((dpy), (max_formats), (formats), (num_formats))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryDmaBufFormatsEXT, (EGLDisplay dpy, EGLint max_formats, EGLint *formats, EGLint *num_formats))
#define eglQueryDmaBufModifiersEXT(dpy, format, max_modifiers, modifiers, external_only, num_modifiers) glatter_eglQueryDmaBufModifiersEXT_ptr((dpy), (format), (max_modifiers), (modifiers), (external_only), (num_modifiers))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryDmaBufModifiersEXT, (EGLDisplay dpy, EGLint format, EGLint max_modifiers, EGLuint64KHR *modifiers, EGLBoolean *external_only, EGLint *num_modifiers))
#endif // defined(EGL_EXT_image_dma_buf_import_modifiers)
#if defined(EGL_EXT_output_base)
#define eglGetOutputLayersEXT(dpy, attrib_list, layers, max_layers, num_layers) glatter_eglGetOutputLayersEXT_ptr((dpy), (attrib_list), (layers), (max_layers), (num_layers))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglGetOutputLayersEXT, (EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputLayerEXT *layers, EGLint max_layers, EGLint *num_layers))
#define eglGetOutputPortsEXT(dpy, attrib_list, ports, max_ports, num_ports) glatter_eglGetOutputPortsEXT_ptr((dpy), (attrib_list), (ports), (max_ports), (num_ports))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglGetOutputPortsEXT, (EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputPortEXT *ports, EGLint max_ports, EGLint *num_ports))
#define eglOutputLayerAttribEXT(dpy, layer, attribute, value) glatter_eglOutputLayerAttribEXT_ptr((dpy), (layer), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglOutputLayerAttribEXT, (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value))
#define eglOutputPortAttribEXT(dpy, port, attribute, value) glatter_eglOutputPortAttribEXT_ptr((dpy), (port), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglOutputPortAttribEXT, (EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value))
#define eglQueryOutputLayerAttribEXT(dpy, layer, attribute, value) glatter_eglQueryOutputLayerAttribEXT_ptr((dpy), (layer), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryOutputLayerAttribEXT, (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib *value))
#define eglQueryOutputLayerStringEXT(dpy, layer, name) glatter_eglQueryOutputLayerStringEXT_ptr((dpy), (layer), (name))
GLATTER_UBLOCK(const char *, EGLAPIENTRY, eglQueryOutputLayerStringEXT, (EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name))
#define eglQueryOutputPortAttribEXT(dpy, port, attribute, value) glatter_eglQueryOutputPortAttribEXT_ptr((dpy), (port), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryOutputPortAttribEXT, (EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib *value))
#define eglQueryOutputPortStringEXT(dpy, port, name) glatter_eglQueryOutputPortStringEXT_ptr((dpy), (port), (name))
GLATTER_UBLOCK(const char *, EGLAPIENTRY, eglQueryOutputPortStringEXT, (EGLDisplay dpy, EGLOutputPortEXT port, EGLint name))
#endif // defined(EGL_EXT_output_base)
#if defined(EGL_EXT_platform_base)
#define eglCreatePlatformPixmapSurfaceEXT(dpy, config, native_pixmap, attrib_list) glatter_eglCreatePlatformPixmapSurfaceEXT_ptr((dpy), (config), (native_pixmap), (attrib_list))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreatePlatformPixmapSurfaceEXT, (EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list))
#define eglCreatePlatformWindowSurfaceEXT(dpy, config, native_window, attrib_list) glatter_eglCreatePlatformWindowSurfaceEXT_ptr((dpy), (config), (native_window), (attrib_list))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreatePlatformWindowSurfaceEXT, (EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list))
#define eglGetPlatformDisplayEXT(platform, native_display, attrib_list) glatter_eglGetPlatformDisplayEXT_ptr((platform), (native_display), (attrib_list))
GLATTER_UBLOCK(EGLDisplay, EGLAPIENTRY, eglGetPlatformDisplayEXT, (EGLenum platform, void *native_display, const EGLint *attrib_list))
#endif // defined(EGL_EXT_platform_base)
#if defined(EGL_EXT_stream_consumer_egloutput)
#define eglStreamConsumerOutputEXT(dpy, stream, layer) glatter_eglStreamConsumerOutputEXT_ptr((dpy), (stream), (layer))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglStreamConsumerOutputEXT, (EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer))
#endif // defined(EGL_EXT_stream_consumer_egloutput)
#if defined(EGL_EXT_swap_buffers_with_damage)
#define eglSwapBuffersWithDamageEXT(dpy, surface, rects, n_rects) glatter_eglSwapBuffersWithDamageEXT_ptr((dpy), (surface), (rects), (n_rects))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSwapBuffersWithDamageEXT, (EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects))
#endif // defined(EGL_EXT_swap_buffers_with_damage)
#if defined(EGL_HI_clientpixmap)
#define eglCreatePixmapSurfaceHI(dpy, config, pixmap) glatter_eglCreatePixmapSurfaceHI_ptr((dpy), (config), (pixmap))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreatePixmapSurfaceHI, (EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI *pixmap))
#endif // defined(EGL_HI_clientpixmap)
#if defined(EGL_KHR_cl_event2)
#define eglCreateSync64KHR(dpy, type, attrib_list) glatter_eglCreateSync64KHR_ptr((dpy), (type), (attrib_list))
GLATTER_UBLOCK(EGLSyncKHR, EGLAPIENTRY, eglCreateSync64KHR, (EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list))
#endif // defined(EGL_KHR_cl_event2)
#if defined(EGL_KHR_debug)
#define eglDebugMessageControlKHR(callback, attrib_list) glatter_eglDebugMessageControlKHR_ptr((callback), (attrib_list))
GLATTER_UBLOCK(EGLint, EGLAPIENTRY, eglDebugMessageControlKHR, (EGLDEBUGPROCKHR callback, const EGLAttrib *attrib_list))
#define eglLabelObjectKHR(display, objectType, object, label) glatter_eglLabelObjectKHR_ptr((display), (objectType), (object), (label))
GLATTER_UBLOCK(EGLint, EGLAPIENTRY, eglLabelObjectKHR, (EGLDisplay display, EGLenum objectType, EGLObjectKHR object, EGLLabelKHR label))
#define eglQueryDebugKHR(attribute, value) glatter_eglQueryDebugKHR_ptr((attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryDebugKHR, (EGLint attribute, EGLAttrib *value))
#endif // defined(EGL_KHR_debug)
#if defined(EGL_KHR_fence_sync)
#if defined(KHRONOS_SUPPORT_INT64)
#define eglClientWaitSyncKHR(dpy, sync, flags, timeout) glatter_eglClientWaitSyncKHR_ptr((dpy), (sync), (flags), (timeout))
GLATTER_UBLOCK(EGLint, EGLAPIENTRY, eglClientWaitSyncKHR, (EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout))
#define eglCreateSyncKHR(dpy, type, attrib_list) glatter_eglCreateSyncKHR_ptr((dpy), (type), (attrib_list))
GLATTER_UBLOCK(EGLSyncKHR, EGLAPIENTRY, eglCreateSyncKHR, (EGLDisplay dpy, EGLenum type, const EGLint *attrib_list))
#define eglDestroySyncKHR(dpy, sync) glatter_eglDestroySyncKHR_ptr((dpy), (sync))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglDestroySyncKHR, (EGLDisplay dpy, EGLSyncKHR sync))
#define eglGetSyncAttribKHR(dpy, sync, attribute, value) glatter_eglGetSyncAttribKHR_ptr((dpy), (sync), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglGetSyncAttribKHR, (EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value))
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // defined(EGL_KHR_fence_sync)
#if defined(EGL_KHR_image)
#define eglCreateImageKHR(dpy, ctx, target, buffer, attrib_list) glatter_eglCreateImageKHR_ptr((dpy), (ctx), (target), (buffer), (attrib_list))
GLATTER_UBLOCK(EGLImageKHR, EGLAPIENTRY, eglCreateImageKHR, (EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list))
#define eglDestroyImageKHR(dpy, image) glatter_eglDestroyImageKHR_ptr((dpy), (image))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglDestroyImageKHR, (EGLDisplay dpy, EGLImageKHR image))
#endif // defined(EGL_KHR_image)
#if defined(EGL_KHR_lock_surface)
#define eglLockSurfaceKHR(dpy, surface, attrib_list) glatter_eglLockSurfaceKHR_ptr((dpy), (surface), (attrib_list))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglLockSurfaceKHR, (EGLDisplay dpy, EGLSurface surface, const EGLint *attrib_list))
#define eglUnlockSurfaceKHR(dpy, surface) glatter_eglUnlockSurfaceKHR_ptr((dpy), (surface))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglUnlockSurfaceKHR, (EGLDisplay dpy, EGLSurface surface))
#endif // defined(EGL_KHR_lock_surface)
#if defined(EGL_KHR_lock_surface3)
#define eglQuerySurface64KHR(dpy, surface, attribute, value) glatter_eglQuerySurface64KHR_ptr((dpy), (surface), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQuerySurface64KHR, (EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR *value))
#endif // defined(EGL_KHR_lock_surface3)
#if defined(EGL_KHR_partial_update)
#define eglSetDamageRegionKHR(dpy, surface, rects, n_rects) glatter_eglSetDamageRegionKHR_ptr((dpy), (surface), (rects), (n_rects))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSetDamageRegionKHR, (EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects))
#endif // defined(EGL_KHR_partial_update)
#if defined(EGL_KHR_reusable_sync)
#if defined(KHRONOS_SUPPORT_INT64)
#define eglSignalSyncKHR(dpy, sync, mode) glatter_eglSignalSyncKHR_ptr((dpy), (sync), (mode))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSignalSyncKHR, (EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode))
#endif // defined(EGL_KHR_reusable_sync)
#if defined(EGL_KHR_stream)
#define eglCreateStreamKHR(dpy, attrib_list) glatter_eglCreateStreamKHR_ptr((dpy), (attrib_list))
GLATTER_UBLOCK(EGLStreamKHR, EGLAPIENTRY, eglCreateStreamKHR, (EGLDisplay dpy, const EGLint *attrib_list))
#define eglDestroyStreamKHR(dpy, stream) glatter_eglDestroyStreamKHR_ptr((dpy), (stream))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglDestroyStreamKHR, (EGLDisplay dpy, EGLStreamKHR stream))
#define eglQueryStreamKHR(dpy, stream, attribute, value) glatter_eglQueryStreamKHR_ptr((dpy), (stream), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryStreamKHR, (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *value))
#define eglQueryStreamu64KHR(dpy, stream, attribute, value) glatter_eglQueryStreamu64KHR_ptr((dpy), (stream), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryStreamu64KHR, (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *value))
#define eglStreamAttribKHR(dpy, stream, attribute, value) glatter_eglStreamAttribKHR_ptr((dpy), (stream), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglStreamAttribKHR, (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value))
#endif // defined(EGL_KHR_stream)
#if defined(EGL_KHR_stream_attrib)
#define eglCreateStreamAttribKHR(dpy, attrib_list) glatter_eglCreateStreamAttribKHR_ptr((dpy), (attrib_list))
GLATTER_UBLOCK(EGLStreamKHR, EGLAPIENTRY, eglCreateStreamAttribKHR, (EGLDisplay dpy, const EGLAttrib *attrib_list))
#define eglQueryStreamAttribKHR(dpy, stream, attribute, value) glatter_eglQueryStreamAttribKHR_ptr((dpy), (stream), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryStreamAttribKHR, (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib *value))
#define eglSetStreamAttribKHR(dpy, stream, attribute, value) glatter_eglSetStreamAttribKHR_ptr((dpy), (stream), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSetStreamAttribKHR, (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib value))
#define eglStreamConsumerAcquireAttribKHR(dpy, stream, attrib_list) glatter_eglStreamConsumerAcquireAttribKHR_ptr((dpy), (stream), (attrib_list))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglStreamConsumerAcquireAttribKHR, (EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list))
#define eglStreamConsumerReleaseAttribKHR(dpy, stream, attrib_list) glatter_eglStreamConsumerReleaseAttribKHR_ptr((dpy), (stream), (attrib_list))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglStreamConsumerReleaseAttribKHR, (EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list))
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // defined(EGL_KHR_stream_attrib)
#if defined(EGL_KHR_stream_consumer_gltexture)
#if defined(EGL_KHR_stream)
#define eglStreamConsumerAcquireKHR(dpy, stream) glatter_eglStreamConsumerAcquireKHR_ptr((dpy), (stream))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglStreamConsumerAcquireKHR, (EGLDisplay dpy, EGLStreamKHR stream))
#define eglStreamConsumerGLTextureExternalKHR(dpy, stream) glatter_eglStreamConsumerGLTextureExternalKHR_ptr((dpy), (stream))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglStreamConsumerGLTextureExternalKHR, (EGLDisplay dpy, EGLStreamKHR stream))
#define eglStreamConsumerReleaseKHR(dpy, stream) glatter_eglStreamConsumerReleaseKHR_ptr((dpy), (stream))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglStreamConsumerReleaseKHR, (EGLDisplay dpy, EGLStreamKHR stream))
#endif // defined(EGL_KHR_stream_consumer_gltexture)
#if defined(EGL_KHR_stream_cross_process_fd)
#define eglCreateStreamFromFileDescriptorKHR(dpy, file_descriptor) glatter_eglCreateStreamFromFileDescriptorKHR_ptr((dpy), (file_descriptor))
GLATTER_UBLOCK(EGLStreamKHR, EGLAPIENTRY, eglCreateStreamFromFileDescriptorKHR, (EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor))
#define eglGetStreamFileDescriptorKHR(dpy, stream) glatter_eglGetStreamFileDescriptorKHR_ptr((dpy), (stream))
GLATTER_UBLOCK(EGLNativeFileDescriptorKHR, EGLAPIENTRY, eglGetStreamFileDescriptorKHR, (EGLDisplay dpy, EGLStreamKHR stream))
#endif // defined(EGL_KHR_stream_cross_process_fd)
#if defined(EGL_KHR_stream_fifo)
#define eglQueryStreamTimeKHR(dpy, stream, attribute, value) glatter_eglQueryStreamTimeKHR_ptr((dpy), (stream), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryStreamTimeKHR, (EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *value))
#endif // defined(EGL_KHR_stream_fifo)
#if defined(EGL_KHR_stream_producer_eglsurface)
#define eglCreateStreamProducerSurfaceKHR(dpy, config, stream, attrib_list) glatter_eglCreateStreamProducerSurfaceKHR_ptr((dpy), (config), (stream), (attrib_list))
GLATTER_UBLOCK(EGLSurface, EGLAPIENTRY, eglCreateStreamProducerSurfaceKHR, (EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list))
#endif // defined(EGL_KHR_stream)
#endif // defined(EGL_KHR_stream_producer_eglsurface)
#if defined(EGL_KHR_swap_buffers_with_damage)
#define eglSwapBuffersWithDamageKHR(dpy, surface, rects, n_rects) glatter_eglSwapBuffersWithDamageKHR_ptr((dpy), (surface), (rects), (n_rects))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSwapBuffersWithDamageKHR, (EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects))
#endif // defined(EGL_KHR_swap_buffers_with_damage)
#if defined(EGL_KHR_wait_sync)
#define eglWaitSyncKHR(dpy, sync, flags) glatter_eglWaitSyncKHR_ptr((dpy), (sync), (flags))
GLATTER_UBLOCK(EGLint, EGLAPIENTRY, eglWaitSyncKHR, (EGLDisplay dpy, EGLSyncKHR sync, EGLint flags))
#endif // defined(EGL_KHR_wait_sync)
#if defined(EGL_MESA_drm_image)
#define eglCreateDRMImageMESA(dpy, attrib_list) glatter_eglCreateDRMImageMESA_ptr((dpy), (attrib_list))
GLATTER_UBLOCK(EGLImageKHR, EGLAPIENTRY, eglCreateDRMImageMESA, (EGLDisplay dpy, const EGLint *attrib_list))
#define eglExportDRMImageMESA(dpy, image, name, handle, stride) glatter_eglExportDRMImageMESA_ptr((dpy), (image), (name), (handle), (stride))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglExportDRMImageMESA, (EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride))
#endif // defined(EGL_MESA_drm_image)
#if defined(EGL_MESA_image_dma_buf_export)
#define eglExportDMABUFImageMESA(dpy, image, fds, strides, offsets) glatter_eglExportDMABUFImageMESA_ptr((dpy), (image), (fds), (strides), (offsets))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglExportDMABUFImageMESA, (EGLDisplay dpy, EGLImageKHR image, int *fds, EGLint *strides, EGLint *offsets))
#define eglExportDMABUFImageQueryMESA(dpy, image, fourcc, num_planes, modifiers) glatter_eglExportDMABUFImageQueryMESA_ptr((dpy), (image), (fourcc), (num_planes), (modifiers))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglExportDMABUFImageQueryMESA, (EGLDisplay dpy, EGLImageKHR image, int *fourcc, int *num_planes, EGLuint64KHR *modifiers))
#endif // defined(EGL_MESA_image_dma_buf_export)
#if defined(EGL_NOK_swap_region)
#define eglSwapBuffersRegionNOK(dpy, surface, numRects, rects) glatter_eglSwapBuffersRegionNOK_ptr((dpy), (surface), (numRects), (rects))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSwapBuffersRegionNOK, (EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects))
#endif // defined(EGL_NOK_swap_region)
#if defined(EGL_NOK_swap_region2)
#define eglSwapBuffersRegion2NOK(dpy, surface, numRects, rects) glatter_eglSwapBuffersRegion2NOK_ptr((dpy), (surface), (numRects), (rects))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSwapBuffersRegion2NOK, (EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects))
#endif // defined(EGL_NOK_swap_region2)
#if defined(EGL_NV_native_query)
#define eglQueryNativeDisplayNV(dpy, display_id) glatter_eglQueryNativeDisplayNV_ptr((dpy), (display_id))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryNativeDisplayNV, (EGLDisplay dpy, EGLNativeDisplayType *display_id))
#define eglQueryNativePixmapNV(dpy, surf, pixmap) glatter_eglQueryNativePixmapNV_ptr((dpy), (surf), (pixmap))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryNativePixmapNV, (EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType *pixmap))
#define eglQueryNativeWindowNV(dpy, surf, window) glatter_eglQueryNativeWindowNV_ptr((dpy), (surf), (window))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryNativeWindowNV, (EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType *window))
#endif // defined(EGL_NV_native_query)
#if defined(EGL_NV_post_sub_buffer)
#define eglPostSubBufferNV(dpy, surface, x, y, width, height) glatter_eglPostSubBufferNV_ptr((dpy), (surface), (x), (y), (width), (height))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglPostSubBufferNV, (EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height))
#endif // defined(EGL_NV_post_sub_buffer)
#if defined(EGL_NV_stream_consumer_gltexture_yuv)
#define eglStreamConsumerGLTextureExternalAttribsNV(dpy, stream, attrib_list) glatter_eglStreamConsumerGLTextureExternalAttribsNV_ptr((dpy), (stream), (attrib_list))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglStreamConsumerGLTextureExternalAttribsNV, (EGLDisplay dpy, EGLStreamKHR stream, EGLAttrib *attrib_list))
#endif // defined(EGL_NV_stream_consumer_gltexture_yuv)
#if defined(EGL_NV_stream_metadata)
#define eglQueryDisplayAttribNV(dpy, attribute, value) glatter_eglQueryDisplayAttribNV_ptr((dpy), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryDisplayAttribNV, (EGLDisplay dpy, EGLint attribute, EGLAttrib *value))
#define eglQueryStreamMetadataNV(dpy, stream, name, n, offset, size, data) glatter_eglQueryStreamMetadataNV_ptr((dpy), (stream), (name), (n), (offset), (size), (data))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglQueryStreamMetadataNV, (EGLDisplay dpy, EGLStreamKHR stream, EGLenum name, EGLint n, EGLint offset, EGLint size, void *data))
#define eglSetStreamMetadataNV(dpy, stream, n, offset, size, data) glatter_eglSetStreamMetadataNV_ptr((dpy), (stream), (n), (offset), (size), (data))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSetStreamMetadataNV, (EGLDisplay dpy, EGLStreamKHR stream, EGLint n, EGLint offset, EGLint size, const void *data))
#endif // defined(EGL_NV_stream_metadata)
#if defined(EGL_NV_stream_reset)
#define eglResetStreamNV(dpy, stream) glatter_eglResetStreamNV_ptr((dpy), (stream))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglResetStreamNV, (EGLDisplay dpy, EGLStreamKHR stream))
#endif // defined(EGL_NV_stream_reset)
#if defined(EGL_NV_stream_sync)
#define eglCreateStreamSyncNV(dpy, stream, type, attrib_list) glatter_eglCreateStreamSyncNV_ptr((dpy), (stream), (type), (attrib_list))
GLATTER_UBLOCK(EGLSyncKHR, EGLAPIENTRY, eglCreateStreamSyncNV, (EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint *attrib_list))
#endif // defined(EGL_NV_stream_sync)
#if defined(EGL_NV_sync)
#if defined(KHRONOS_SUPPORT_INT64)
#define eglClientWaitSyncNV(sync, flags, timeout) glatter_eglClientWaitSyncNV_ptr((sync), (flags), (timeout))
GLATTER_UBLOCK(EGLint, EGLAPIENTRY, eglClientWaitSyncNV, (EGLSyncNV sync, EGLint flags, EGLTimeNV timeout))
#define eglCreateFenceSyncNV(dpy, condition, attrib_list) glatter_eglCreateFenceSyncNV_ptr((dpy), (condition), (attrib_list))
GLATTER_UBLOCK(EGLSyncNV, EGLAPIENTRY, eglCreateFenceSyncNV, (EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list))
#define eglDestroySyncNV(sync) glatter_eglDestroySyncNV_ptr((sync))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglDestroySyncNV, (EGLSyncNV sync))
#define eglFenceNV(sync) glatter_eglFenceNV_ptr((sync))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglFenceNV, (EGLSyncNV sync))
#define eglGetSyncAttribNV(sync, attribute, value) glatter_eglGetSyncAttribNV_ptr((sync), (attribute), (value))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglGetSyncAttribNV, (EGLSyncNV sync, EGLint attribute, EGLint *value))
#define eglSignalSyncNV(sync, mode) glatter_eglSignalSyncNV_ptr((sync), (mode))
GLATTER_UBLOCK(EGLBoolean, EGLAPIENTRY, eglSignalSyncNV, (EGLSyncNV sync, EGLenum mode))
#endif // defined(EGL_NV_sync)
#if defined(EGL_NV_system_time)
#define eglGetSystemTimeFrequencyNV() glatter_eglGetSystemTimeFrequencyNV_ptr()
GLATTER_UBLOCK(EGLuint64NV, EGLAPIENTRY, eglGetSystemTimeFrequencyNV, (void))
#define eglGetSystemTimeNV() glatter_eglGetSystemTimeNV_ptr()
GLATTER_UBLOCK(EGLuint64NV, EGLAPIENTRY, eglGetSystemTimeNV, (void))
#endif // defined(__eglext_h_)
#endif // defined(EGL_NV_system_time)
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // GLATTER_EGL

#else // NDEBUG

#ifdef GLATTER_EGL
#if defined(__egl_h_)
#if defined(EGL_VERSION_1_0)
#define eglChooseConfig(dpy, attrib_list, configs, config_size, num_config) glatter_eglChooseConfig_debug((dpy), (attrib_list), (configs), (config_size), (num_config), __FILE__, __LINE__)
EGLBoolean glatter_eglChooseConfig_debug(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config, const char* file, int line);
#define eglCopyBuffers(dpy, surface, target) glatter_eglCopyBuffers_debug((dpy), (surface), (target), __FILE__, __LINE__)
EGLBoolean glatter_eglCopyBuffers_debug(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target, const char* file, int line);
#define eglCreateContext(dpy, config, share_context, attrib_list) glatter_eglCreateContext_debug((dpy), (config), (share_context), (attrib_list), __FILE__, __LINE__)
EGLContext glatter_eglCreateContext_debug(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list, const char* file, int line);
#define eglCreatePbufferSurface(dpy, config, attrib_list) glatter_eglCreatePbufferSurface_debug((dpy), (config), (attrib_list), __FILE__, __LINE__)
EGLSurface glatter_eglCreatePbufferSurface_debug(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list, const char* file, int line);
#define eglCreatePixmapSurface(dpy, config, pixmap, attrib_list) glatter_eglCreatePixmapSurface_debug((dpy), (config), (pixmap), (attrib_list), __FILE__, __LINE__)
EGLSurface glatter_eglCreatePixmapSurface_debug(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list, const char* file, int line);
#define eglCreateWindowSurface(dpy, config, win, attrib_list) glatter_eglCreateWindowSurface_debug((dpy), (config), (win), (attrib_list), __FILE__, __LINE__)
EGLSurface glatter_eglCreateWindowSurface_debug(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list, const char* file, int line);
#define eglDestroyContext(dpy, ctx) glatter_eglDestroyContext_debug((dpy), (ctx), __FILE__, __LINE__)
EGLBoolean glatter_eglDestroyContext_debug(EGLDisplay dpy, EGLContext ctx, const char* file, int line);
#define eglDestroySurface(dpy, surface) glatter_eglDestroySurface_debug((dpy), (surface), __FILE__, __LINE__)
EGLBoolean glatter_eglDestroySurface_debug(EGLDisplay dpy, EGLSurface surface, const char* file, int line);
#define eglGetConfigAttrib(dpy, config, attribute, value) glatter_eglGetConfigAttrib_debug((dpy), (config), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglGetConfigAttrib_debug(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value, const char* file, int line);
#define eglGetConfigs(dpy, configs, config_size, num_config) glatter_eglGetConfigs_debug((dpy), (configs), (config_size), (num_config), __FILE__, __LINE__)
EGLBoolean glatter_eglGetConfigs_debug(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config, const char* file, int line);
#define eglGetCurrentDisplay() glatter_eglGetCurrentDisplay_debug(__FILE__, __LINE__)
EGLDisplay glatter_eglGetCurrentDisplay_debug(const char* file, int line);
#define eglGetCurrentSurface(readdraw) glatter_eglGetCurrentSurface_debug((readdraw), __FILE__, __LINE__)
EGLSurface glatter_eglGetCurrentSurface_debug(EGLint readdraw, const char* file, int line);
#define eglGetDisplay(display_id) glatter_eglGetDisplay_debug((display_id), __FILE__, __LINE__)
EGLDisplay glatter_eglGetDisplay_debug(EGLNativeDisplayType display_id, const char* file, int line);
#define eglGetError() glatter_eglGetError_debug(__FILE__, __LINE__)
EGLint glatter_eglGetError_debug(const char* file, int line);
#define eglGetProcAddress(procname) glatter_eglGetProcAddress_debug((procname), __FILE__, __LINE__)
__eglMustCastToProperFunctionPointerType glatter_eglGetProcAddress_debug(const char *procname, const char* file, int line);
#define eglInitialize(dpy, major, minor) glatter_eglInitialize_debug((dpy), (major), (minor), __FILE__, __LINE__)
EGLBoolean glatter_eglInitialize_debug(EGLDisplay dpy, EGLint *major, EGLint *minor, const char* file, int line);
#define eglMakeCurrent(dpy, draw, read, ctx) glatter_eglMakeCurrent_debug((dpy), (draw), (read), (ctx), __FILE__, __LINE__)
EGLBoolean glatter_eglMakeCurrent_debug(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx, const char* file, int line);
#define eglQueryContext(dpy, ctx, attribute, value) glatter_eglQueryContext_debug((dpy), (ctx), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryContext_debug(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value, const char* file, int line);
#define eglQueryString(dpy, name) glatter_eglQueryString_debug((dpy), (name), __FILE__, __LINE__)
const char * glatter_eglQueryString_debug(EGLDisplay dpy, EGLint name, const char* file, int line);
#define eglQuerySurface(dpy, surface, attribute, value) glatter_eglQuerySurface_debug((dpy), (surface), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQuerySurface_debug(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value, const char* file, int line);
#define eglSwapBuffers(dpy, surface) glatter_eglSwapBuffers_debug((dpy), (surface), __FILE__, __LINE__)
EGLBoolean glatter_eglSwapBuffers_debug(EGLDisplay dpy, EGLSurface surface, const char* file, int line);
#define eglTerminate(dpy) glatter_eglTerminate_debug((dpy), __FILE__, __LINE__)
EGLBoolean glatter_eglTerminate_debug(EGLDisplay dpy, const char* file, int line);
#define eglWaitGL() glatter_eglWaitGL_debug(__FILE__, __LINE__)
EGLBoolean glatter_eglWaitGL_debug(const char* file, int line);
#define eglWaitNative(engine) glatter_eglWaitNative_debug((engine), __FILE__, __LINE__)
EGLBoolean glatter_eglWaitNative_debug(EGLint engine, const char* file, int line);
#endif // defined(EGL_VERSION_1_0)
#if defined(EGL_VERSION_1_1)
#define eglBindTexImage(dpy, surface, buffer) glatter_eglBindTexImage_debug((dpy), (surface), (buffer), __FILE__, __LINE__)
EGLBoolean glatter_eglBindTexImage_debug(EGLDisplay dpy, EGLSurface surface, EGLint buffer, const char* file, int line);
#define eglReleaseTexImage(dpy, surface, buffer) glatter_eglReleaseTexImage_debug((dpy), (surface), (buffer), __FILE__, __LINE__)
EGLBoolean glatter_eglReleaseTexImage_debug(EGLDisplay dpy, EGLSurface surface, EGLint buffer, const char* file, int line);
#define eglSurfaceAttrib(dpy, surface, attribute, value) glatter_eglSurfaceAttrib_debug((dpy), (surface), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglSurfaceAttrib_debug(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value, const char* file, int line);
#define eglSwapInterval(dpy, interval) glatter_eglSwapInterval_debug((dpy), (interval), __FILE__, __LINE__)
EGLBoolean glatter_eglSwapInterval_debug(EGLDisplay dpy, EGLint interval, const char* file, int line);
#endif // defined(EGL_VERSION_1_1)
#if defined(EGL_VERSION_1_2)
#define eglBindAPI(api) glatter_eglBindAPI_debug((api), __FILE__, __LINE__)
EGLBoolean glatter_eglBindAPI_debug(EGLenum api, const char* file, int line);
#define eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list) glatter_eglCreatePbufferFromClientBuffer_debug((dpy), (buftype), (buffer), (config), (attrib_list), __FILE__, __LINE__)
EGLSurface glatter_eglCreatePbufferFromClientBuffer_debug(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list, const char* file, int line);
#define eglQueryAPI() glatter_eglQueryAPI_debug(__FILE__, __LINE__)
EGLenum glatter_eglQueryAPI_debug(const char* file, int line);
#define eglReleaseThread() glatter_eglReleaseThread_debug(__FILE__, __LINE__)
EGLBoolean glatter_eglReleaseThread_debug(const char* file, int line);
#define eglWaitClient() glatter_eglWaitClient_debug(__FILE__, __LINE__)
EGLBoolean glatter_eglWaitClient_debug(const char* file, int line);
#endif // defined(EGL_VERSION_1_2)
#if defined(EGL_VERSION_1_4)
#define eglGetCurrentContext() glatter_eglGetCurrentContext_debug(__FILE__, __LINE__)
EGLContext glatter_eglGetCurrentContext_debug(const char* file, int line);
#endif // defined(EGL_VERSION_1_4)
#if defined(EGL_VERSION_1_5)
#define eglClientWaitSync(dpy, sync, flags, timeout) glatter_eglClientWaitSync_debug((dpy), (sync), (flags), (timeout), __FILE__, __LINE__)
EGLint glatter_eglClientWaitSync_debug(EGLDisplay dpy, EGLSync sync, EGLint flags, EGLTime timeout, const char* file, int line);
#define eglCreateImage(dpy, ctx, target, buffer, attrib_list) glatter_eglCreateImage_debug((dpy), (ctx), (target), (buffer), (attrib_list), __FILE__, __LINE__)
EGLImage glatter_eglCreateImage_debug(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLAttrib *attrib_list, const char* file, int line);
#define eglCreatePlatformPixmapSurface(dpy, config, native_pixmap, attrib_list) glatter_eglCreatePlatformPixmapSurface_debug((dpy), (config), (native_pixmap), (attrib_list), __FILE__, __LINE__)
EGLSurface glatter_eglCreatePlatformPixmapSurface_debug(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLAttrib *attrib_list, const char* file, int line);
#define eglCreatePlatformWindowSurface(dpy, config, native_window, attrib_list) glatter_eglCreatePlatformWindowSurface_debug((dpy), (config), (native_window), (attrib_list), __FILE__, __LINE__)
EGLSurface glatter_eglCreatePlatformWindowSurface_debug(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLAttrib *attrib_list, const char* file, int line);
#define eglCreateSync(dpy, type, attrib_list) glatter_eglCreateSync_debug((dpy), (type), (attrib_list), __FILE__, __LINE__)
EGLSync glatter_eglCreateSync_debug(EGLDisplay dpy, EGLenum type, const EGLAttrib *attrib_list, const char* file, int line);
#define eglDestroyImage(dpy, image) glatter_eglDestroyImage_debug((dpy), (image), __FILE__, __LINE__)
EGLBoolean glatter_eglDestroyImage_debug(EGLDisplay dpy, EGLImage image, const char* file, int line);
#define eglDestroySync(dpy, sync) glatter_eglDestroySync_debug((dpy), (sync), __FILE__, __LINE__)
EGLBoolean glatter_eglDestroySync_debug(EGLDisplay dpy, EGLSync sync, const char* file, int line);
#define eglGetPlatformDisplay(platform, native_display, attrib_list) glatter_eglGetPlatformDisplay_debug((platform), (native_display), (attrib_list), __FILE__, __LINE__)
EGLDisplay glatter_eglGetPlatformDisplay_debug(EGLenum platform, void *native_display, const EGLAttrib *attrib_list, const char* file, int line);
#define eglGetSyncAttrib(dpy, sync, attribute, value) glatter_eglGetSyncAttrib_debug((dpy), (sync), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglGetSyncAttrib_debug(EGLDisplay dpy, EGLSync sync, EGLint attribute, EGLAttrib *value, const char* file, int line);
#define eglWaitSync(dpy, sync, flags) glatter_eglWaitSync_debug((dpy), (sync), (flags), __FILE__, __LINE__)
EGLBoolean glatter_eglWaitSync_debug(EGLDisplay dpy, EGLSync sync, EGLint flags, const char* file, int line);
#endif // defined(EGL_VERSION_1_5)
#endif // defined(__egl_h_)
#if defined(__eglext_h_)
#if defined(EGL_ANDROID_blob_cache)
#define eglSetBlobCacheFuncsANDROID(dpy, set, get) glatter_eglSetBlobCacheFuncsANDROID_debug((dpy), (set), (get), __FILE__, __LINE__)
void glatter_eglSetBlobCacheFuncsANDROID_debug(EGLDisplay dpy, EGLSetBlobFuncANDROID set, EGLGetBlobFuncANDROID get, const char* file, int line);
#endif // defined(EGL_ANDROID_blob_cache)
#if defined(EGL_ANDROID_create_native_client_buffer)
#define eglCreateNativeClientBufferANDROID(attrib_list) glatter_eglCreateNativeClientBufferANDROID_debug((attrib_list), __FILE__, __LINE__)
EGLClientBuffer glatter_eglCreateNativeClientBufferANDROID_debug(const EGLint *attrib_list, const char* file, int line);
#endif // defined(EGL_ANDROID_create_native_client_buffer)
#if defined(EGL_ANDROID_native_fence_sync)
#define eglDupNativeFenceFDANDROID(dpy, sync) glatter_eglDupNativeFenceFDANDROID_debug((dpy), (sync), __FILE__, __LINE__)
EGLint glatter_eglDupNativeFenceFDANDROID_debug(EGLDisplay dpy, EGLSyncKHR sync, const char* file, int line);
#endif // defined(EGL_ANDROID_native_fence_sync)
#if defined(EGL_ANDROID_presentation_time)
#define eglPresentationTimeANDROID(dpy, surface, time) glatter_eglPresentationTimeANDROID_debug((dpy), (surface), (time), __FILE__, __LINE__)
EGLBoolean glatter_eglPresentationTimeANDROID_debug(EGLDisplay dpy, EGLSurface surface, EGLnsecsANDROID time, const char* file, int line);
#endif // defined(EGL_ANDROID_presentation_time)
#if defined(EGL_ANGLE_query_surface_pointer)
#define eglQuerySurfacePointerANGLE(dpy, surface, attribute, value) glatter_eglQuerySurfacePointerANGLE_debug((dpy), (surface), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQuerySurfacePointerANGLE_debug(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void **value, const char* file, int line);
#endif // defined(EGL_ANGLE_query_surface_pointer)
#if defined(EGL_EXT_compositor)
#define eglCompositorBindTexWindowEXT(external_win_id) glatter_eglCompositorBindTexWindowEXT_debug((external_win_id), __FILE__, __LINE__)
EGLBoolean glatter_eglCompositorBindTexWindowEXT_debug(EGLint external_win_id, const char* file, int line);
#define eglCompositorSetContextAttributesEXT(external_ref_id, context_attributes, num_entries) glatter_eglCompositorSetContextAttributesEXT_debug((external_ref_id), (context_attributes), (num_entries), __FILE__, __LINE__)
EGLBoolean glatter_eglCompositorSetContextAttributesEXT_debug(EGLint external_ref_id, const EGLint *context_attributes, EGLint num_entries, const char* file, int line);
#define eglCompositorSetContextListEXT(external_ref_ids, num_entries) glatter_eglCompositorSetContextListEXT_debug((external_ref_ids), (num_entries), __FILE__, __LINE__)
EGLBoolean glatter_eglCompositorSetContextListEXT_debug(const EGLint *external_ref_ids, EGLint num_entries, const char* file, int line);
#define eglCompositorSetSizeEXT(external_win_id, width, height) glatter_eglCompositorSetSizeEXT_debug((external_win_id), (width), (height), __FILE__, __LINE__)
EGLBoolean glatter_eglCompositorSetSizeEXT_debug(EGLint external_win_id, EGLint width, EGLint height, const char* file, int line);
#define eglCompositorSetWindowAttributesEXT(external_win_id, window_attributes, num_entries) glatter_eglCompositorSetWindowAttributesEXT_debug((external_win_id), (window_attributes), (num_entries), __FILE__, __LINE__)
EGLBoolean glatter_eglCompositorSetWindowAttributesEXT_debug(EGLint external_win_id, const EGLint *window_attributes, EGLint num_entries, const char* file, int line);
#define eglCompositorSetWindowListEXT(external_ref_id, external_win_ids, num_entries) glatter_eglCompositorSetWindowListEXT_debug((external_ref_id), (external_win_ids), (num_entries), __FILE__, __LINE__)
EGLBoolean glatter_eglCompositorSetWindowListEXT_debug(EGLint external_ref_id, const EGLint *external_win_ids, EGLint num_entries, const char* file, int line);
#define eglCompositorSwapPolicyEXT(external_win_id, policy) glatter_eglCompositorSwapPolicyEXT_debug((external_win_id), (policy), __FILE__, __LINE__)
EGLBoolean glatter_eglCompositorSwapPolicyEXT_debug(EGLint external_win_id, EGLint policy, const char* file, int line);
#endif // defined(EGL_EXT_compositor)
#if defined(EGL_EXT_device_base)
#define eglQueryDeviceAttribEXT(device, attribute, value) glatter_eglQueryDeviceAttribEXT_debug((device), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryDeviceAttribEXT_debug(EGLDeviceEXT device, EGLint attribute, EGLAttrib *value, const char* file, int line);
#define eglQueryDeviceStringEXT(device, name) glatter_eglQueryDeviceStringEXT_debug((device), (name), __FILE__, __LINE__)
const char * glatter_eglQueryDeviceStringEXT_debug(EGLDeviceEXT device, EGLint name, const char* file, int line);
#define eglQueryDevicesEXT(max_devices, devices, num_devices) glatter_eglQueryDevicesEXT_debug((max_devices), (devices), (num_devices), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryDevicesEXT_debug(EGLint max_devices, EGLDeviceEXT *devices, EGLint *num_devices, const char* file, int line);
#define eglQueryDisplayAttribEXT(dpy, attribute, value) glatter_eglQueryDisplayAttribEXT_debug((dpy), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryDisplayAttribEXT_debug(EGLDisplay dpy, EGLint attribute, EGLAttrib *value, const char* file, int line);
#endif // defined(EGL_EXT_device_base)
#if defined(EGL_EXT_image_dma_buf_import_modifiers)
#define eglQueryDmaBufFormatsEXT(dpy, max_formats, formats, num_formats) glatter_eglQueryDmaBufFormatsEXT_debug((dpy), (max_formats), (formats), (num_formats), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryDmaBufFormatsEXT_debug(EGLDisplay dpy, EGLint max_formats, EGLint *formats, EGLint *num_formats, const char* file, int line);
#define eglQueryDmaBufModifiersEXT(dpy, format, max_modifiers, modifiers, external_only, num_modifiers) glatter_eglQueryDmaBufModifiersEXT_debug((dpy), (format), (max_modifiers), (modifiers), (external_only), (num_modifiers), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryDmaBufModifiersEXT_debug(EGLDisplay dpy, EGLint format, EGLint max_modifiers, EGLuint64KHR *modifiers, EGLBoolean *external_only, EGLint *num_modifiers, const char* file, int line);
#endif // defined(EGL_EXT_image_dma_buf_import_modifiers)
#if defined(EGL_EXT_output_base)
#define eglGetOutputLayersEXT(dpy, attrib_list, layers, max_layers, num_layers) glatter_eglGetOutputLayersEXT_debug((dpy), (attrib_list), (layers), (max_layers), (num_layers), __FILE__, __LINE__)
EGLBoolean glatter_eglGetOutputLayersEXT_debug(EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputLayerEXT *layers, EGLint max_layers, EGLint *num_layers, const char* file, int line);
#define eglGetOutputPortsEXT(dpy, attrib_list, ports, max_ports, num_ports) glatter_eglGetOutputPortsEXT_debug((dpy), (attrib_list), (ports), (max_ports), (num_ports), __FILE__, __LINE__)
EGLBoolean glatter_eglGetOutputPortsEXT_debug(EGLDisplay dpy, const EGLAttrib *attrib_list, EGLOutputPortEXT *ports, EGLint max_ports, EGLint *num_ports, const char* file, int line);
#define eglOutputLayerAttribEXT(dpy, layer, attribute, value) glatter_eglOutputLayerAttribEXT_debug((dpy), (layer), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglOutputLayerAttribEXT_debug(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib value, const char* file, int line);
#define eglOutputPortAttribEXT(dpy, port, attribute, value) glatter_eglOutputPortAttribEXT_debug((dpy), (port), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglOutputPortAttribEXT_debug(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib value, const char* file, int line);
#define eglQueryOutputLayerAttribEXT(dpy, layer, attribute, value) glatter_eglQueryOutputLayerAttribEXT_debug((dpy), (layer), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryOutputLayerAttribEXT_debug(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint attribute, EGLAttrib *value, const char* file, int line);
#define eglQueryOutputLayerStringEXT(dpy, layer, name) glatter_eglQueryOutputLayerStringEXT_debug((dpy), (layer), (name), __FILE__, __LINE__)
const char * glatter_eglQueryOutputLayerStringEXT_debug(EGLDisplay dpy, EGLOutputLayerEXT layer, EGLint name, const char* file, int line);
#define eglQueryOutputPortAttribEXT(dpy, port, attribute, value) glatter_eglQueryOutputPortAttribEXT_debug((dpy), (port), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryOutputPortAttribEXT_debug(EGLDisplay dpy, EGLOutputPortEXT port, EGLint attribute, EGLAttrib *value, const char* file, int line);
#define eglQueryOutputPortStringEXT(dpy, port, name) glatter_eglQueryOutputPortStringEXT_debug((dpy), (port), (name), __FILE__, __LINE__)
const char * glatter_eglQueryOutputPortStringEXT_debug(EGLDisplay dpy, EGLOutputPortEXT port, EGLint name, const char* file, int line);
#endif // defined(EGL_EXT_output_base)
#if defined(EGL_EXT_platform_base)
#define eglCreatePlatformPixmapSurfaceEXT(dpy, config, native_pixmap, attrib_list) glatter_eglCreatePlatformPixmapSurfaceEXT_debug((dpy), (config), (native_pixmap), (attrib_list), __FILE__, __LINE__)
EGLSurface glatter_eglCreatePlatformPixmapSurfaceEXT_debug(EGLDisplay dpy, EGLConfig config, void *native_pixmap, const EGLint *attrib_list, const char* file, int line);
#define eglCreatePlatformWindowSurfaceEXT(dpy, config, native_window, attrib_list) glatter_eglCreatePlatformWindowSurfaceEXT_debug((dpy), (config), (native_window), (attrib_list), __FILE__, __LINE__)
EGLSurface glatter_eglCreatePlatformWindowSurfaceEXT_debug(EGLDisplay dpy, EGLConfig config, void *native_window, const EGLint *attrib_list, const char* file, int line);
#define eglGetPlatformDisplayEXT(platform, native_display, attrib_list) glatter_eglGetPlatformDisplayEXT_debug((platform), (native_display), (attrib_list), __FILE__, __LINE__)
EGLDisplay glatter_eglGetPlatformDisplayEXT_debug(EGLenum platform, void *native_display, const EGLint *attrib_list, const char* file, int line);
#endif // defined(EGL_EXT_platform_base)
#if defined(EGL_EXT_stream_consumer_egloutput)
#define eglStreamConsumerOutputEXT(dpy, stream, layer) glatter_eglStreamConsumerOutputEXT_debug((dpy), (stream), (layer), __FILE__, __LINE__)
EGLBoolean glatter_eglStreamConsumerOutputEXT_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLOutputLayerEXT layer, const char* file, int line);
#endif // defined(EGL_EXT_stream_consumer_egloutput)
#if defined(EGL_EXT_swap_buffers_with_damage)
#define eglSwapBuffersWithDamageEXT(dpy, surface, rects, n_rects) glatter_eglSwapBuffersWithDamageEXT_debug((dpy), (surface), (rects), (n_rects), __FILE__, __LINE__)
EGLBoolean glatter_eglSwapBuffersWithDamageEXT_debug(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects, const char* file, int line);
#endif // defined(EGL_EXT_swap_buffers_with_damage)
#if defined(EGL_HI_clientpixmap)
#define eglCreatePixmapSurfaceHI(dpy, config, pixmap) glatter_eglCreatePixmapSurfaceHI_debug((dpy), (config), (pixmap), __FILE__, __LINE__)
EGLSurface glatter_eglCreatePixmapSurfaceHI_debug(EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI *pixmap, const char* file, int line);
#endif // defined(EGL_HI_clientpixmap)
#if defined(EGL_KHR_cl_event2)
#define eglCreateSync64KHR(dpy, type, attrib_list) glatter_eglCreateSync64KHR_debug((dpy), (type), (attrib_list), __FILE__, __LINE__)
EGLSyncKHR glatter_eglCreateSync64KHR_debug(EGLDisplay dpy, EGLenum type, const EGLAttribKHR *attrib_list, const char* file, int line);
#endif // defined(EGL_KHR_cl_event2)
#if defined(EGL_KHR_debug)
#define eglDebugMessageControlKHR(callback, attrib_list) glatter_eglDebugMessageControlKHR_debug((callback), (attrib_list), __FILE__, __LINE__)
EGLint glatter_eglDebugMessageControlKHR_debug(EGLDEBUGPROCKHR callback, const EGLAttrib *attrib_list, const char* file, int line);
#define eglLabelObjectKHR(display, objectType, object, label) glatter_eglLabelObjectKHR_debug((display), (objectType), (object), (label), __FILE__, __LINE__)
EGLint glatter_eglLabelObjectKHR_debug(EGLDisplay display, EGLenum objectType, EGLObjectKHR object, EGLLabelKHR label, const char* file, int line);
#define eglQueryDebugKHR(attribute, value) glatter_eglQueryDebugKHR_debug((attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryDebugKHR_debug(EGLint attribute, EGLAttrib *value, const char* file, int line);
#endif // defined(EGL_KHR_debug)
#if defined(EGL_KHR_fence_sync)
#if defined(KHRONOS_SUPPORT_INT64)
#define eglClientWaitSyncKHR(dpy, sync, flags, timeout) glatter_eglClientWaitSyncKHR_debug((dpy), (sync), (flags), (timeout), __FILE__, __LINE__)
EGLint glatter_eglClientWaitSyncKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout, const char* file, int line);
#define eglCreateSyncKHR(dpy, type, attrib_list) glatter_eglCreateSyncKHR_debug((dpy), (type), (attrib_list), __FILE__, __LINE__)
EGLSyncKHR glatter_eglCreateSyncKHR_debug(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list, const char* file, int line);
#define eglDestroySyncKHR(dpy, sync) glatter_eglDestroySyncKHR_debug((dpy), (sync), __FILE__, __LINE__)
EGLBoolean glatter_eglDestroySyncKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, const char* file, int line);
#define eglGetSyncAttribKHR(dpy, sync, attribute, value) glatter_eglGetSyncAttribKHR_debug((dpy), (sync), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglGetSyncAttribKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *value, const char* file, int line);
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // defined(EGL_KHR_fence_sync)
#if defined(EGL_KHR_image)
#define eglCreateImageKHR(dpy, ctx, target, buffer, attrib_list) glatter_eglCreateImageKHR_debug((dpy), (ctx), (target), (buffer), (attrib_list), __FILE__, __LINE__)
EGLImageKHR glatter_eglCreateImageKHR_debug(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list, const char* file, int line);
#define eglDestroyImageKHR(dpy, image) glatter_eglDestroyImageKHR_debug((dpy), (image), __FILE__, __LINE__)
EGLBoolean glatter_eglDestroyImageKHR_debug(EGLDisplay dpy, EGLImageKHR image, const char* file, int line);
#endif // defined(EGL_KHR_image)
#if defined(EGL_KHR_lock_surface)
#define eglLockSurfaceKHR(dpy, surface, attrib_list) glatter_eglLockSurfaceKHR_debug((dpy), (surface), (attrib_list), __FILE__, __LINE__)
EGLBoolean glatter_eglLockSurfaceKHR_debug(EGLDisplay dpy, EGLSurface surface, const EGLint *attrib_list, const char* file, int line);
#define eglUnlockSurfaceKHR(dpy, surface) glatter_eglUnlockSurfaceKHR_debug((dpy), (surface), __FILE__, __LINE__)
EGLBoolean glatter_eglUnlockSurfaceKHR_debug(EGLDisplay dpy, EGLSurface surface, const char* file, int line);
#endif // defined(EGL_KHR_lock_surface)
#if defined(EGL_KHR_lock_surface3)
#define eglQuerySurface64KHR(dpy, surface, attribute, value) glatter_eglQuerySurface64KHR_debug((dpy), (surface), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQuerySurface64KHR_debug(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLAttribKHR *value, const char* file, int line);
#endif // defined(EGL_KHR_lock_surface3)
#if defined(EGL_KHR_partial_update)
#define eglSetDamageRegionKHR(dpy, surface, rects, n_rects) glatter_eglSetDamageRegionKHR_debug((dpy), (surface), (rects), (n_rects), __FILE__, __LINE__)
EGLBoolean glatter_eglSetDamageRegionKHR_debug(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects, const char* file, int line);
#endif // defined(EGL_KHR_partial_update)
#if defined(EGL_KHR_reusable_sync)
#if defined(KHRONOS_SUPPORT_INT64)
#define eglSignalSyncKHR(dpy, sync, mode) glatter_eglSignalSyncKHR_debug((dpy), (sync), (mode), __FILE__, __LINE__)
EGLBoolean glatter_eglSignalSyncKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode, const char* file, int line);
#endif // defined(EGL_KHR_reusable_sync)
#if defined(EGL_KHR_stream)
#define eglCreateStreamKHR(dpy, attrib_list) glatter_eglCreateStreamKHR_debug((dpy), (attrib_list), __FILE__, __LINE__)
EGLStreamKHR glatter_eglCreateStreamKHR_debug(EGLDisplay dpy, const EGLint *attrib_list, const char* file, int line);
#define eglDestroyStreamKHR(dpy, stream) glatter_eglDestroyStreamKHR_debug((dpy), (stream), __FILE__, __LINE__)
EGLBoolean glatter_eglDestroyStreamKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#define eglQueryStreamKHR(dpy, stream, attribute, value) glatter_eglQueryStreamKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryStreamKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint *value, const char* file, int line);
#define eglQueryStreamu64KHR(dpy, stream, attribute, value) glatter_eglQueryStreamu64KHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryStreamu64KHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR *value, const char* file, int line);
#define eglStreamAttribKHR(dpy, stream, attribute, value) glatter_eglStreamAttribKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglStreamAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value, const char* file, int line);
#endif // defined(EGL_KHR_stream)
#if defined(EGL_KHR_stream_attrib)
#define eglCreateStreamAttribKHR(dpy, attrib_list) glatter_eglCreateStreamAttribKHR_debug((dpy), (attrib_list), __FILE__, __LINE__)
EGLStreamKHR glatter_eglCreateStreamAttribKHR_debug(EGLDisplay dpy, const EGLAttrib *attrib_list, const char* file, int line);
#define eglQueryStreamAttribKHR(dpy, stream, attribute, value) glatter_eglQueryStreamAttribKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryStreamAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib *value, const char* file, int line);
#define eglSetStreamAttribKHR(dpy, stream, attribute, value) glatter_eglSetStreamAttribKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglSetStreamAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLAttrib value, const char* file, int line);
#define eglStreamConsumerAcquireAttribKHR(dpy, stream, attrib_list) glatter_eglStreamConsumerAcquireAttribKHR_debug((dpy), (stream), (attrib_list), __FILE__, __LINE__)
EGLBoolean glatter_eglStreamConsumerAcquireAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list, const char* file, int line);
#define eglStreamConsumerReleaseAttribKHR(dpy, stream, attrib_list) glatter_eglStreamConsumerReleaseAttribKHR_debug((dpy), (stream), (attrib_list), __FILE__, __LINE__)
EGLBoolean glatter_eglStreamConsumerReleaseAttribKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const EGLAttrib *attrib_list, const char* file, int line);
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // defined(EGL_KHR_stream_attrib)
#if defined(EGL_KHR_stream_consumer_gltexture)
#if defined(EGL_KHR_stream)
#define eglStreamConsumerAcquireKHR(dpy, stream) glatter_eglStreamConsumerAcquireKHR_debug((dpy), (stream), __FILE__, __LINE__)
EGLBoolean glatter_eglStreamConsumerAcquireKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#define eglStreamConsumerGLTextureExternalKHR(dpy, stream) glatter_eglStreamConsumerGLTextureExternalKHR_debug((dpy), (stream), __FILE__, __LINE__)
EGLBoolean glatter_eglStreamConsumerGLTextureExternalKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#define eglStreamConsumerReleaseKHR(dpy, stream) glatter_eglStreamConsumerReleaseKHR_debug((dpy), (stream), __FILE__, __LINE__)
EGLBoolean glatter_eglStreamConsumerReleaseKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#endif // defined(EGL_KHR_stream_consumer_gltexture)
#if defined(EGL_KHR_stream_cross_process_fd)
#define eglCreateStreamFromFileDescriptorKHR(dpy, file_descriptor) glatter_eglCreateStreamFromFileDescriptorKHR_debug((dpy), (file_descriptor), __FILE__, __LINE__)
EGLStreamKHR glatter_eglCreateStreamFromFileDescriptorKHR_debug(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor, const char* file, int line);
#define eglGetStreamFileDescriptorKHR(dpy, stream) glatter_eglGetStreamFileDescriptorKHR_debug((dpy), (stream), __FILE__, __LINE__)
EGLNativeFileDescriptorKHR glatter_eglGetStreamFileDescriptorKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#endif // defined(EGL_KHR_stream_cross_process_fd)
#if defined(EGL_KHR_stream_fifo)
#define eglQueryStreamTimeKHR(dpy, stream, attribute, value) glatter_eglQueryStreamTimeKHR_debug((dpy), (stream), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryStreamTimeKHR_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR *value, const char* file, int line);
#endif // defined(EGL_KHR_stream_fifo)
#if defined(EGL_KHR_stream_producer_eglsurface)
#define eglCreateStreamProducerSurfaceKHR(dpy, config, stream, attrib_list) glatter_eglCreateStreamProducerSurfaceKHR_debug((dpy), (config), (stream), (attrib_list), __FILE__, __LINE__)
EGLSurface glatter_eglCreateStreamProducerSurfaceKHR_debug(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list, const char* file, int line);
#endif // defined(EGL_KHR_stream)
#endif // defined(EGL_KHR_stream_producer_eglsurface)
#if defined(EGL_KHR_swap_buffers_with_damage)
#define eglSwapBuffersWithDamageKHR(dpy, surface, rects, n_rects) glatter_eglSwapBuffersWithDamageKHR_debug((dpy), (surface), (rects), (n_rects), __FILE__, __LINE__)
EGLBoolean glatter_eglSwapBuffersWithDamageKHR_debug(EGLDisplay dpy, EGLSurface surface, EGLint *rects, EGLint n_rects, const char* file, int line);
#endif // defined(EGL_KHR_swap_buffers_with_damage)
#if defined(EGL_KHR_wait_sync)
#define eglWaitSyncKHR(dpy, sync, flags) glatter_eglWaitSyncKHR_debug((dpy), (sync), (flags), __FILE__, __LINE__)
EGLint glatter_eglWaitSyncKHR_debug(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, const char* file, int line);
#endif // defined(EGL_KHR_wait_sync)
#if defined(EGL_MESA_drm_image)
#define eglCreateDRMImageMESA(dpy, attrib_list) glatter_eglCreateDRMImageMESA_debug((dpy), (attrib_list), __FILE__, __LINE__)
EGLImageKHR glatter_eglCreateDRMImageMESA_debug(EGLDisplay dpy, const EGLint *attrib_list, const char* file, int line);
#define eglExportDRMImageMESA(dpy, image, name, handle, stride) glatter_eglExportDRMImageMESA_debug((dpy), (image), (name), (handle), (stride), __FILE__, __LINE__)
EGLBoolean glatter_eglExportDRMImageMESA_debug(EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride, const char* file, int line);
#endif // defined(EGL_MESA_drm_image)
#if defined(EGL_MESA_image_dma_buf_export)
#define eglExportDMABUFImageMESA(dpy, image, fds, strides, offsets) glatter_eglExportDMABUFImageMESA_debug((dpy), (image), (fds), (strides), (offsets), __FILE__, __LINE__)
EGLBoolean glatter_eglExportDMABUFImageMESA_debug(EGLDisplay dpy, EGLImageKHR image, int *fds, EGLint *strides, EGLint *offsets, const char* file, int line);
#define eglExportDMABUFImageQueryMESA(dpy, image, fourcc, num_planes, modifiers) glatter_eglExportDMABUFImageQueryMESA_debug((dpy), (image), (fourcc), (num_planes), (modifiers), __FILE__, __LINE__)
EGLBoolean glatter_eglExportDMABUFImageQueryMESA_debug(EGLDisplay dpy, EGLImageKHR image, int *fourcc, int *num_planes, EGLuint64KHR *modifiers, const char* file, int line);
#endif // defined(EGL_MESA_image_dma_buf_export)
#if defined(EGL_NOK_swap_region)
#define eglSwapBuffersRegionNOK(dpy, surface, numRects, rects) glatter_eglSwapBuffersRegionNOK_debug((dpy), (surface), (numRects), (rects), __FILE__, __LINE__)
EGLBoolean glatter_eglSwapBuffersRegionNOK_debug(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects, const char* file, int line);
#endif // defined(EGL_NOK_swap_region)
#if defined(EGL_NOK_swap_region2)
#define eglSwapBuffersRegion2NOK(dpy, surface, numRects, rects) glatter_eglSwapBuffersRegion2NOK_debug((dpy), (surface), (numRects), (rects), __FILE__, __LINE__)
EGLBoolean glatter_eglSwapBuffersRegion2NOK_debug(EGLDisplay dpy, EGLSurface surface, EGLint numRects, const EGLint *rects, const char* file, int line);
#endif // defined(EGL_NOK_swap_region2)
#if defined(EGL_NV_native_query)
#define eglQueryNativeDisplayNV(dpy, display_id) glatter_eglQueryNativeDisplayNV_debug((dpy), (display_id), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryNativeDisplayNV_debug(EGLDisplay dpy, EGLNativeDisplayType *display_id, const char* file, int line);
#define eglQueryNativePixmapNV(dpy, surf, pixmap) glatter_eglQueryNativePixmapNV_debug((dpy), (surf), (pixmap), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryNativePixmapNV_debug(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType *pixmap, const char* file, int line);
#define eglQueryNativeWindowNV(dpy, surf, window) glatter_eglQueryNativeWindowNV_debug((dpy), (surf), (window), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryNativeWindowNV_debug(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType *window, const char* file, int line);
#endif // defined(EGL_NV_native_query)
#if defined(EGL_NV_post_sub_buffer)
#define eglPostSubBufferNV(dpy, surface, x, y, width, height) glatter_eglPostSubBufferNV_debug((dpy), (surface), (x), (y), (width), (height), __FILE__, __LINE__)
EGLBoolean glatter_eglPostSubBufferNV_debug(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height, const char* file, int line);
#endif // defined(EGL_NV_post_sub_buffer)
#if defined(EGL_NV_stream_consumer_gltexture_yuv)
#define eglStreamConsumerGLTextureExternalAttribsNV(dpy, stream, attrib_list) glatter_eglStreamConsumerGLTextureExternalAttribsNV_debug((dpy), (stream), (attrib_list), __FILE__, __LINE__)
EGLBoolean glatter_eglStreamConsumerGLTextureExternalAttribsNV_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLAttrib *attrib_list, const char* file, int line);
#endif // defined(EGL_NV_stream_consumer_gltexture_yuv)
#if defined(EGL_NV_stream_metadata)
#define eglQueryDisplayAttribNV(dpy, attribute, value) glatter_eglQueryDisplayAttribNV_debug((dpy), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryDisplayAttribNV_debug(EGLDisplay dpy, EGLint attribute, EGLAttrib *value, const char* file, int line);
#define eglQueryStreamMetadataNV(dpy, stream, name, n, offset, size, data) glatter_eglQueryStreamMetadataNV_debug((dpy), (stream), (name), (n), (offset), (size), (data), __FILE__, __LINE__)
EGLBoolean glatter_eglQueryStreamMetadataNV_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum name, EGLint n, EGLint offset, EGLint size, void *data, const char* file, int line);
#define eglSetStreamMetadataNV(dpy, stream, n, offset, size, data) glatter_eglSetStreamMetadataNV_debug((dpy), (stream), (n), (offset), (size), (data), __FILE__, __LINE__)
EGLBoolean glatter_eglSetStreamMetadataNV_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLint n, EGLint offset, EGLint size, const void *data, const char* file, int line);
#endif // defined(EGL_NV_stream_metadata)
#if defined(EGL_NV_stream_reset)
#define eglResetStreamNV(dpy, stream) glatter_eglResetStreamNV_debug((dpy), (stream), __FILE__, __LINE__)
EGLBoolean glatter_eglResetStreamNV_debug(EGLDisplay dpy, EGLStreamKHR stream, const char* file, int line);
#endif // defined(EGL_NV_stream_reset)
#if defined(EGL_NV_stream_sync)
#define eglCreateStreamSyncNV(dpy, stream, type, attrib_list) glatter_eglCreateStreamSyncNV_debug((dpy), (stream), (type), (attrib_list), __FILE__, __LINE__)
EGLSyncKHR glatter_eglCreateStreamSyncNV_debug(EGLDisplay dpy, EGLStreamKHR stream, EGLenum type, const EGLint *attrib_list, const char* file, int line);
#endif // defined(EGL_NV_stream_sync)
#if defined(EGL_NV_sync)
#if defined(KHRONOS_SUPPORT_INT64)
#define eglClientWaitSyncNV(sync, flags, timeout) glatter_eglClientWaitSyncNV_debug((sync), (flags), (timeout), __FILE__, __LINE__)
EGLint glatter_eglClientWaitSyncNV_debug(EGLSyncNV sync, EGLint flags, EGLTimeNV timeout, const char* file, int line);
#define eglCreateFenceSyncNV(dpy, condition, attrib_list) glatter_eglCreateFenceSyncNV_debug((dpy), (condition), (attrib_list), __FILE__, __LINE__)
EGLSyncNV glatter_eglCreateFenceSyncNV_debug(EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list, const char* file, int line);
#define eglDestroySyncNV(sync) glatter_eglDestroySyncNV_debug((sync), __FILE__, __LINE__)
EGLBoolean glatter_eglDestroySyncNV_debug(EGLSyncNV sync, const char* file, int line);
#define eglFenceNV(sync) glatter_eglFenceNV_debug((sync), __FILE__, __LINE__)
EGLBoolean glatter_eglFenceNV_debug(EGLSyncNV sync, const char* file, int line);
#define eglGetSyncAttribNV(sync, attribute, value) glatter_eglGetSyncAttribNV_debug((sync), (attribute), (value), __FILE__, __LINE__)
EGLBoolean glatter_eglGetSyncAttribNV_debug(EGLSyncNV sync, EGLint attribute, EGLint *value, const char* file, int line);
#define eglSignalSyncNV(sync, mode) glatter_eglSignalSyncNV_debug((sync), (mode), __FILE__, __LINE__)
EGLBoolean glatter_eglSignalSyncNV_debug(EGLSyncNV sync, EGLenum mode, const char* file, int line);
#endif // defined(EGL_NV_sync)
#if defined(EGL_NV_system_time)
#define eglGetSystemTimeFrequencyNV() glatter_eglGetSystemTimeFrequencyNV_debug(__FILE__, __LINE__)
EGLuint64NV glatter_eglGetSystemTimeFrequencyNV_debug(const char* file, int line);
#define eglGetSystemTimeNV() glatter_eglGetSystemTimeNV_debug(__FILE__, __LINE__)
EGLuint64NV glatter_eglGetSystemTimeNV_debug(const char* file, int line);
#endif // defined(__eglext_h_)
#endif // defined(EGL_NV_system_time)
#endif // defined(KHRONOS_SUPPORT_INT64)
#endif // GLATTER_EGL

#endif // NDEBUG

